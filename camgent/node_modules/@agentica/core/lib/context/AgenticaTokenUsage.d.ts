import type { CompletionUsage } from "openai/resources";
import type { IAgenticaTokenUsageJson } from "../json/IAgenticaTokenUsageJson";
export declare class AgenticaTokenUsage implements IAgenticaTokenUsageJson {
    /**
     * Aggregated token usage.
     */
    readonly aggregate: AgenticaTokenUsage.IComponent;
    /**
     * Token uasge of initializer agent.
     */
    readonly initialize: AgenticaTokenUsage.IComponent;
    /**
     * Token usage of function selector agent.
     */
    readonly select: AgenticaTokenUsage.IComponent;
    /**
     * Token usage of function canceler agent.
     */
    readonly cancel: AgenticaTokenUsage.IComponent;
    /**
     * Token usage of function caller agent.
     */
    readonly call: AgenticaTokenUsage.IComponent;
    /**
     * Token usage of function calling describer agent.
     */
    readonly describe: AgenticaTokenUsage.IComponent;
    constructor(props?: IAgenticaTokenUsageJson);
    increment(y: IAgenticaTokenUsageJson): void;
    use(kind: Exclude<keyof IAgenticaTokenUsageJson, "aggregate">, completionUsage: CompletionUsage): void;
    toJSON(): IAgenticaTokenUsageJson;
    static zero(): AgenticaTokenUsage;
    static plus(x: AgenticaTokenUsage, y: AgenticaTokenUsage): AgenticaTokenUsage;
}
export declare namespace AgenticaTokenUsage {
    interface IComponent {
        /**
         * Total token usage.
         */
        total: number;
        /**
         * Input token usage of detailed.
         */
        input: IInput;
        /**
         * Output token usage of detailed.
         */
        output: IOutput;
    }
    /**
     * Input token usage of detailed.
     */
    interface IInput {
        /**
         * Total amount of input token uasge.
         */
        total: number;
        /**
         * Cached token usage.
         */
        cached: number;
    }
    /**
     * Output token usage of detailed.
     */
    interface IOutput {
        /**
         * Total amount of output token usage.
         */
        total: number;
        /**
         * Reasoning token usage.
         */
        reasoning: number;
        /**
         * Prediction token usage.
         */
        accepted_prediction: number;
        /**
         * Rejected prediction token usage.
         */
        rejected_prediction: number;
    }
}
