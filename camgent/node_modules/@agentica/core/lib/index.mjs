import { is_node, Semaphore } from "tstl";

import { v4 } from "uuid";

import "typia";

import { ChatGptTypeChecker, LlmTypeCheckerV3_1, HttpLlm, OpenApi, McpLlm } from "@samchon/openapi";

import * as __typia_transform__validateReport from "typia/lib/internal/_validateReport.js";

import * as __typia_transform__assertGuard from "typia/lib/internal/_assertGuard.js";

import * as __typia_transform__accessExpressionAsString from "typia/lib/internal/_accessExpressionAsString.js";

function aggregate(props) {
    const component = props.usage[props.kind];
    component.total += props.completionUsage.total_tokens;
    component.input.total += props.completionUsage.prompt_tokens;
    component.input.total += props.completionUsage.prompt_tokens_details?.audio_tokens ?? 0;
    component.input.cached += props.completionUsage.prompt_tokens_details?.cached_tokens ?? 0;
    component.output.total += props.completionUsage.completion_tokens;
    component.output.accepted_prediction += props.completionUsage.completion_tokens_details?.accepted_prediction_tokens ?? 0;
    component.output.reasoning += props.completionUsage.completion_tokens_details?.reasoning_tokens ?? 0;
    component.output.rejected_prediction += props.completionUsage.completion_tokens_details?.rejected_prediction_tokens ?? 0;
    const sum = getter => Object.entries(props.usage).filter((([key]) => key !== "aggregate")).map((([, comp]) => getter(comp))).reduce(((a, b) => a + b), 0);
    const aggregate = props.usage.aggregate;
    aggregate.total = sum((comp => comp.total));
    aggregate.input.total = sum((comp => comp.input.total));
    aggregate.input.cached = sum((comp => comp.input.cached));
    aggregate.output.total = sum((comp => comp.output.total));
    aggregate.output.reasoning = sum((comp => comp.output.reasoning));
    aggregate.output.accepted_prediction = sum((comp => comp.output.accepted_prediction));
    aggregate.output.rejected_prediction = sum((comp => comp.output.rejected_prediction));
}

const AgenticaTokenUsageAggregator = {
    aggregate
};

class AgenticaTokenUsage {
    constructor(props) {
        if (props === undefined) {
            const zero = AgenticaTokenUsage.zero();
            this.aggregate = zero.aggregate;
            this.initialize = zero.initialize;
            this.select = zero.select;
            this.cancel = zero.cancel;
            this.call = zero.call;
            this.describe = zero.describe;
        } else {
            this.aggregate = props.aggregate;
            this.initialize = props.initialize;
            this.select = props.select;
            this.cancel = props.cancel;
            this.call = props.call;
            this.describe = props.describe;
        }
    }
    increment(y) {
        const increment = (x, y) => {
            x.total += y.total;
            x.input.total += y.input.total;
            x.input.cached += y.input.cached;
            x.output.total += y.output.total;
            x.output.reasoning += y.output.reasoning;
            x.output.accepted_prediction += y.output.accepted_prediction;
            x.output.rejected_prediction += y.output.rejected_prediction;
        };
        increment(this.aggregate, y.aggregate);
        increment(this.initialize, y.initialize);
        increment(this.select, y.select);
        increment(this.cancel, y.cancel);
        increment(this.call, y.call);
        increment(this.describe, y.describe);
    }
    use(kind, completionUsage) {
        AgenticaTokenUsageAggregator.aggregate({
            kind,
            completionUsage,
            usage: this
        });
    }
    toJSON() {
        return (() => {
            const _co0 = input => ({
                aggregate: _co1(input.aggregate),
                initialize: _co1(input.initialize),
                select: _co1(input.select),
                cancel: _co1(input.cancel),
                call: _co1(input.call),
                describe: _co1(input.describe)
            });
            const _co1 = input => ({
                total: input.total,
                input: _co2(input.input),
                output: _co3(input.output)
            });
            const _co2 = input => ({
                total: input.total,
                cached: input.cached
            });
            const _co3 = input => ({
                total: input.total,
                reasoning: input.reasoning,
                accepted_prediction: input.accepted_prediction,
                rejected_prediction: input.rejected_prediction
            });
            return input => _co0(input);
        })()(this);
    }
    static zero() {
        const component = () => ({
            total: 0,
            input: {
                total: 0,
                cached: 0
            },
            output: {
                total: 0,
                reasoning: 0,
                accepted_prediction: 0,
                rejected_prediction: 0
            }
        });
        return new AgenticaTokenUsage({
            aggregate: component(),
            initialize: component(),
            select: component(),
            cancel: component(),
            call: component(),
            describe: component()
        });
    }
    static plus(x, y) {
        const z = new AgenticaTokenUsage(x);
        z.increment(y.toJSON());
        return z;
    }
}

function __map_take(dict, key, generator) {
    const oldbie = dict.get(key);
    if (oldbie !== undefined) {
        return oldbie;
    }
    const value = generator();
    dict.set(key, value);
    return value;
}

function compose(props) {
    const unique = props.controllers.length === 1 || (() => {
        const names = props.controllers.map((controllers => controllers.application.functions.map((func => func.name)))).flat();
        return new Set(names).size === names.length;
    })();
    const array = getOperations({
        controllers: props.controllers,
        naming: (func, controllerIndex) => unique ? func : `_${controllerIndex}_${func}`
    });
    const capacity = props.config?.capacity;
    const divided = capacity !== undefined && array.length > capacity ? divide({
        array,
        capacity
    }) : undefined;
    const flat = new Map;
    const group = new Map;
    for (const item of array) {
        flat.set(item.name, item);
        __map_take(group, item.controller.name, (() => new Map)).set(item.name, item);
    }
    return {
        array,
        divided,
        flat,
        group
    };
}

function getOperations(props) {
    return props.controllers.flatMap(((controller, idx) => {
        switch (controller.protocol) {
          case "http":
            {
                return toHttpOperations({
                    controller,
                    index: idx,
                    naming: props.naming
                });
            }

          case "class":
            {
                return toClassOperations({
                    controller,
                    index: idx,
                    naming: props.naming
                });
            }

          case "mcp":
            {
                return toMcpOperations({
                    controller,
                    index: idx,
                    naming: props.naming
                });
            }

          default:
            throw new Error(`Unsupported protocol: ${controller.protocol}`);
        }
    }));
}

function toHttpOperations(props) {
    return props.controller.application.functions.map((func => ({
        protocol: "http",
        controller: props.controller,
        function: func,
        name: props.naming(func.name, props.index),
        toJSON: () => ({
            protocol: "http",
            controller: props.controller.name,
            function: func.name,
            name: props.naming(func.name, props.index)
        })
    })));
}

function toClassOperations(props) {
    return props.controller.application.functions.map((func => ({
        protocol: "class",
        controller: props.controller,
        function: func,
        name: props.naming(func.name, props.index),
        toJSON: () => ({
            protocol: "class",
            controller: props.controller.name,
            function: func.name,
            name: props.naming(func.name, props.index)
        })
    })));
}

function toMcpOperations(props) {
    return props.controller.application.functions.map((func => ({
        protocol: "mcp",
        controller: props.controller,
        function: func,
        name: props.naming(func.name, props.index),
        toJSON: () => ({
            protocol: "mcp",
            controller: props.controller.name,
            function: func.name,
            name: props.naming(func.name, props.index)
        })
    })));
}

function divide(props) {
    if (props.capacity <= 0) {
        throw new Error("Capacity must be a positive integer");
    }
    if (Number.isNaN(props.capacity)) {
        throw new TypeError("Capacity must be a positive integer");
    }
    if (props.capacity === Infinity) {
        throw new Error("Capacity must be a positive integer");
    }
    const size = Math.ceil(props.array.length / props.capacity);
    const capacity = Math.ceil(props.array.length / size);
    const replica = props.array.slice();
    return Array.from({
        length: size
    }, (() => replica.splice(0, capacity)));
}

const AgenticaOperationComposer = {
    compose
};

function decodeHistory(history) {
    if (history.type === "describe") {
        return [];
    } else if (history.type === "select" || history.type === "cancel") {
        return [ {
            role: "assistant",
            tool_calls: [ {
                type: "function",
                id: history.id,
                function: {
                    name: `${history.type}Functions`,
                    arguments: JSON.stringify({
                        function: {
                            name: history.selection.operation.name,
                            reason: history.selection.reason
                        }
                    })
                }
            } ]
        }, {
            role: "tool",
            tool_call_id: history.id,
            content: ""
        } ];
    } else if (history.type === "execute") {
        return [ {
            role: "assistant",
            tool_calls: [ {
                type: "function",
                id: history.id,
                function: {
                    name: history.operation.name,
                    arguments: JSON.stringify(history.arguments)
                }
            } ]
        }, {
            role: "tool",
            tool_call_id: history.id,
            content: JSON.stringify({
                function: {
                    protocol: history.operation.protocol,
                    description: history.operation.function.description,
                    parameters: history.operation.function.parameters,
                    output: history.operation.function.output,
                    ...history.operation.protocol === "http" ? {
                        method: history.operation.function.method,
                        path: history.operation.function.path
                    } : {}
                },
                ...history.operation.protocol === "http" ? {
                    status: history.value.status,
                    data: history.value.body
                } : {
                    value: history.value
                }
            })
        } ];
    }
    if (history.type === "assistantMessage") {
        return [ {
            role: "assistant",
            content: history.text
        } ];
    }
    if (history.type === "systemMessage") {
        return [ {
            role: "system",
            content: history.text
        } ];
    }
    if (history.type === "userMessage") {
        const contents = history.contents;
        return [ {
            role: "user",
            content: contents.map(decodeUserMessageContent)
        } ];
    }
    throw new Error(`Unsupported history type, value: ${JSON.stringify(history)}`);
}

function decodeUserMessageContent(content) {
    if (content.type === "text") {
        return content;
    }
    if (content.type === "audio") {
        return {
            type: "input_audio",
            input_audio: {
                data: content.data,
                format: content.format
            }
        };
    }
    if (content.type === "file") {
        return {
            type: "file",
            file: content.file.type === "data" ? {
                file_data: content.file.data,
                filename: content.file.name
            } : {
                file_id: content.file.id
            }
        };
    }
    if (content.type === "image") {
        return {
            type: "image_url",
            image_url: {
                url: content.url,
                detail: content.detail
            }
        };
    }
    throw new Error(`Unsupported user message content type, value: ${JSON.stringify(content)}`);
}

function createUserMessageHistory(props) {
    return {
        type: "userMessage",
        id: props.id,
        created_at: props.created_at,
        contents: props.contents,
        toJSON: () => ({
            type: "userMessage",
            id: props.id,
            created_at: props.created_at,
            contents: props.contents
        })
    };
}

function createAssistantMessageHistory(props) {
    const prompt = {
        type: "assistantMessage",
        id: props.id,
        created_at: props.created_at,
        text: props.text
    };
    return {
        ...prompt,
        toJSON: () => prompt
    };
}

function createSystemMessageHistory(props) {
    const prompt = {
        type: "systemMessage",
        id: props.id,
        created_at: props.created_at,
        text: props.text
    };
    return {
        ...prompt,
        toJSON: () => prompt
    };
}

function createDescribeHistory(props) {
    return {
        type: "describe",
        id: props.id,
        created_at: props.created_at,
        text: props.text,
        executes: props.executes,
        toJSON: () => ({
            type: "describe",
            id: props.id,
            created_at: props.created_at,
            text: props.text,
            executes: props.executes.map((execute => execute.toJSON()))
        })
    };
}

function createSelectHistory(props) {
    return {
        type: "select",
        id: props.id,
        selection: props.selection,
        created_at: props.created_at,
        toJSON: () => ({
            type: "select",
            id: props.id,
            created_at: props.created_at,
            selection: props.selection.toJSON()
        })
    };
}

function createCancelHistory(props) {
    return {
        type: "cancel",
        id: props.id,
        created_at: props.created_at,
        selection: props.selection,
        toJSON: () => ({
            type: "cancel",
            id: props.id,
            created_at: props.created_at,
            selection: props.selection.toJSON()
        })
    };
}

function createExecuteHistory(props) {
    return {
        type: "execute",
        protocol: props.operation.protocol,
        id: props.id,
        created_at: props.created_at,
        operation: props.operation,
        arguments: props.arguments,
        value: props.value,
        toJSON: () => ({
            type: "execute",
            id: props.id,
            created_at: props.created_at,
            protocol: props.operation.protocol,
            operation: props.operation.toJSON(),
            arguments: props.arguments,
            value: props.value
        })
    };
}

function createInitializeEvent() {
    const event = {
        id: v4(),
        type: "initialize",
        created_at: (new Date).toISOString()
    };
    return {
        id: event.id,
        type: event.type,
        created_at: event.created_at,
        toJSON: () => event
    };
}

function createSelectEvent(props) {
    const id = v4();
    const created_at = (new Date).toISOString();
    return {
        type: "select",
        id,
        created_at,
        selection: props.selection,
        toJSON: () => ({
            type: "select",
            id,
            created_at,
            selection: props.selection.toJSON()
        }),
        toHistory: () => createSelectHistory({
            id,
            created_at,
            selection: props.selection
        })
    };
}

function createCancelEvent(props) {
    const id = v4();
    const created_at = (new Date).toISOString();
    return {
        type: "cancel",
        id,
        created_at,
        selection: props.selection,
        toJSON: () => ({
            type: "cancel",
            id,
            created_at,
            selection: props.selection.toJSON()
        })
    };
}

function createCallEvent(props) {
    const created_at = (new Date).toISOString();
    return {
        type: "call",
        id: props.id,
        created_at,
        operation: props.operation,
        arguments: props.arguments,
        toJSON: () => ({
            type: "call",
            id: props.id,
            created_at,
            operation: props.operation.toJSON(),
            arguments: props.arguments
        })
    };
}

function createValidateEvent(props) {
    const created_at = (new Date).toISOString();
    return {
        type: "validate",
        id: props.id,
        created_at,
        operation: props.operation,
        result: props.result,
        toJSON: () => ({
            type: "validate",
            id: props.id,
            created_at,
            operation: props.operation.toJSON(),
            result: props.result
        })
    };
}

function createExecuteEvent(props) {
    const id = v4();
    const created_at = (new Date).toISOString();
    return {
        type: "execute",
        id,
        created_at,
        protocol: props.operation.protocol,
        operation: props.operation,
        arguments: props.arguments,
        value: props.value,
        toJSON: () => ({
            type: "execute",
            id,
            created_at,
            protocol: props.operation.protocol,
            operation: props.operation.toJSON(),
            arguments: props.arguments,
            value: props.value
        }),
        toHistory: () => createExecuteHistory({
            id,
            created_at,
            ...props
        })
    };
}

function createUserMessageEvent(props) {
    const id = v4();
    const created_at = (new Date).toISOString();
    return {
        type: "userMessage",
        id,
        created_at,
        contents: props.contents,
        toJSON: () => ({
            type: "userMessage",
            id,
            created_at,
            contents: props.contents
        }),
        toHistory: () => createUserMessageHistory({
            id,
            created_at,
            contents: props.contents
        })
    };
}

function creatAssistantMessageEvent(props) {
    const id = v4();
    const created_at = (new Date).toISOString();
    return {
        type: "assistantMessage",
        id,
        created_at,
        stream: props.stream,
        join: props.join,
        toJSON: () => ({
            type: "assistantMessage",
            id,
            created_at,
            done: props.done(),
            text: props.get()
        }),
        toHistory: () => ({
            type: "assistantMessage",
            id,
            created_at,
            text: props.get(),
            toJSON: () => ({
                type: "assistantMessage",
                id,
                created_at,
                text: props.get()
            })
        })
    };
}

function createDescribeEvent(props) {
    const id = v4();
    const created_at = (new Date).toISOString();
    return {
        type: "describe",
        id,
        created_at,
        executes: props.executes,
        stream: props.stream,
        join: props.join,
        toJSON: () => ({
            type: "describe",
            id,
            created_at,
            executes: props.executes.map((execute => execute.toJSON())),
            done: props.done(),
            text: props.get()
        }),
        toHistory: () => ({
            type: "describe",
            id,
            created_at,
            executes: props.executes,
            text: props.get(),
            toJSON: () => ({
                type: "describe",
                id,
                created_at,
                executes: props.executes.map((execute => execute.toJSON())),
                text: props.get()
            })
        })
    };
}

function createRequestEvent(props) {
    const id = v4();
    const created_at = (new Date).toISOString();
    return {
        type: "request",
        id,
        created_at,
        source: props.source,
        body: props.body,
        options: props.options
    };
}

function createResponseEvent(props) {
    const id = v4();
    const created_at = (new Date).toISOString();
    return {
        type: "response",
        id,
        created_at,
        source: props.source,
        body: props.body,
        options: props.options,
        stream: props.stream,
        join: props.join
    };
}

var AgenticaConstant;

(function(AgenticaConstant) {
    AgenticaConstant.RETRY = 3;
    AgenticaConstant.ELITICISM = true;
})(AgenticaConstant || (AgenticaConstant = {}));

const NOT_MOUNTED_YET = {};

class Singleton {
    constructor(closure) {
        this.closure_ = closure;
        this.value_ = NOT_MOUNTED_YET;
    }
    get(...args) {
        if (this.value_ === NOT_MOUNTED_YET) {
            this.value_ = this.closure_(...args);
        }
        return this.value_;
    }
}

const AgenticaSystemPrompt = {
    CANCEL: "You are a helpful assistant for cancelling functions which are prepared to call.\n\nUse the supplied tools to select some functions to cancel of `getApiFunctions()` returned.\n\nIf you can't find any proper function to select, don't talk, don't do anything.",
    COMMON: 'At first, the user\'s language locale code is "${locale}". When you are conversating with the user or describing the function calling result, consider it and always translate to the target locale language. Never conversate with different locale language text with the user.\n\nAt second, the user\'s timezone is "${timezone}", and ISO datetime is ${datetime}. When you are conversating with the user, consider current time and user belonged timezone.',
    DESCRIBE: "You are a helpful assistant describing return values of function calls.\n\nAbove messages are the list of function call histories. When describing the return values, please do not too much shortly summarize them. Instead, provide detailed descriptions as much as.\n\nAlso, its content format must be markdown. If required, utilize the mermaid syntax for drawing some diagrams. When image contents are, just put them through the markdown image syntax.\n\nAt last, if user's language locale code is different with your description, please translate it to the user's language.",
    EXECUTE: '# AI Function Calling System Prompt\n\nYou are a helpful assistant for tool calling, specialized in precise function argument construction and JSON schema compliance.\n\n## Core Responsibilities\n\nUse the supplied tools to assist the user with meticulous attention to function schemas and parameter requirements. Your primary goal is to construct accurate function calls that strictly adhere to the provided JSON schemas.\n\n## Critical Schema Compliance Rules\n\n### 1. **Mandatory JSON Schema Adherence**\n\n- **ALWAYS** follow the provided JSON schema types exactly\n- **NEVER** deviate from the specified data types, formats, or constraints\n- Each property must match its schema definition precisely\n- Required properties must always be included\n- Optional properties should be included when beneficial or when sufficient information is available\n\n### 2. **Required Property Enforcement**\n\n- **🚨 NEVER OMIT REQUIRED PROPERTIES**: Every property marked as required in the schema MUST be included in your function arguments\n- **NO ARBITRARY OMISSIONS**: Required properties cannot be skipped under any circumstances, even if you think they might have default values\n- **COMPLETE COVERAGE**: Ensure 100% of required properties are present before making any function call\n- **VALIDATION CHECK**: Always verify that every required property from the schema is included in your arguments\n\n### 3. **Null vs Undefined Handling**\n\n- **🚨 CRITICAL: Use explicit null values, not property omission**\n- **WRONG APPROACH**: Omitting properties that accept null (using undefined behavior)\n- **CORRECT APPROACH**: Include the property with explicit `null` value when that\'s the intended value\n- **RULE**: If a property schema allows `null` and you want to pass null, write `"propertyName": null`, not omit the property entirely\n\n**Examples:**\n\n```json\n// Schema: { "optionalField": { "type": ["string", "null"] } }\n// ❌ WRONG: { } (property omitted)\n// ✅ CORRECT: { "optionalField": null } (explicit null)\n// ✅ CORRECT: { "optionalField": "some value" } (actual value)\n```\n\n### 4. **🚨 CRITICAL: Const/Enum Value Enforcement**\n\n- **ABSOLUTE COMPLIANCE**: When a schema property has `const` or `enum` values, you MUST use ONLY those exact values\n- **NO EXCEPTIONS**: Never ignore const/enum constraints or substitute with similar values\n- **NO CREATIVE INTERPRETATION**: Do not try to use synonyms, variations, or "close enough" values\n- **EXACT MATCH REQUIRED**: The value must be character-for-character identical to one of the predefined options\n\n**Examples of WRONG behavior:**\n\n```json\n// Schema: { "status": { "enum": ["pending", "approved", "rejected"] } }\n// ❌ WRONG: "waiting" (not in enum)\n// ❌ WRONG: "PENDING" (case mismatch)\n// ❌ WRONG: "approve" (not exact match)\n// ✅ CORRECT: "pending" (exact enum value)\n```\n\n### 5. **Property Definition and Description Analysis**\n\n- **🚨 CRITICAL: Each property\'s definition and description are your blueprint for value construction**\n- **READ EVERY WORD**: Do not skim through property descriptions - analyze them thoroughly for all details\n- **EXTRACT ALL GUIDANCE**: Property descriptions contain multiple layers of information:\n  - **Purpose and Intent**: What this property represents in the business context\n  - **Format Requirements**: Expected patterns, structures, or formats (e.g., "ISO 8601 date format", "email address")\n  - **Value Examples**: Sample values that demonstrate correct usage\n  - **Business Rules**: Domain-specific constraints and logic\n  - **Validation Constraints**: Rules that may not be in the schema but mentioned in text (e.g., "@format uuid", "must be positive")\n  - **Relationship Context**: How this property relates to other properties\n\n**Value Construction Process:**\n\n1. **Definition Analysis**: Understand what the property fundamentally represents\n2. **Description Mining**: Extract all requirements, constraints, examples, and rules from the description text\n3. **Context Application**: Apply the business context to choose appropriate, realistic values\n4. **Constraint Integration**: Ensure your value satisfies both schema constraints and description requirements\n5. **Realism Check**: Verify the value makes sense in the real-world business scenario described\n\n**Examples of Description-Driven Value Construction:**\n\n```json\n// Property: { "type": "string", "description": "User\'s email address for notifications. Must be a valid business email, not personal domains like gmail." }\n// ✅ CORRECT: "john.smith@company.com"\n// ❌ WRONG: "user@gmail.com" (ignores business requirement)\n\n// Property: { "type": "string", "description": "Transaction ID in format TXN-YYYYMMDD-NNNN where NNNN is sequence number" }\n// ✅ CORRECT: "TXN-20241201-0001"\n// ❌ WRONG: "12345" (ignores format specification)\n\n// Property: { "type": "number", "description": "Product price in USD. Should reflect current market rates, typically between $10-$1000 for this category." }\n// ✅ CORRECT: 299.99\n// ❌ WRONG: 5000000 (ignores realistic range guidance)\n```\n\n### 6. **🚨 CRITICAL: Discriminator Handling for Union Types**\n\n- **MANDATORY DISCRIMINATOR PROPERTY**: When `oneOf`/`anyOf` schemas have a discriminator defined, the discriminator property MUST always be included in your arguments\n- **EXACT VALUE COMPLIANCE**: Use only the exact discriminator values defined in the schema\n  - **With Mapping**: Use exact key values from the `mapping` object (e.g., if mapping has `"user": "#/$defs/UserSchema"`, use `"user"` as the discriminator value)\n  - **Without Mapping**: Use values that clearly identify which union member schema you\'re following\n- **TYPE CONSISTENCY**: Ensure the discriminator value matches the actual schema structure you\'re using in other properties\n- **REFERENCE ALIGNMENT**: When discriminator mapping points to `$ref` schemas, follow the referenced schema exactly\n\n**Discriminator Examples:**\n\n```json\n// Schema with discriminator:\n{\n  "oneOf": [\n    { "$ref": "#/$defs/UserAccount" },\n    { "$ref": "#/$defs/AdminAccount" }\n  ],\n  "discriminator": {\n    "propertyName": "accountType",\n    "mapping": {\n      "user": "#/$defs/UserAccount",\n      "admin": "#/$defs/AdminAccount"\n    }\n  }\n}\n\n// ✅ CORRECT usage:\n{\n  "accountType": "user",        // Exact discriminator value from mapping\n  "username": "john_doe",       // Properties from UserAccount schema\n  "email": "john@example.com"\n}\n\n// ❌ WRONG: Missing discriminator property\n{ "username": "john_doe", "email": "john@example.com" }\n\n// ❌ WRONG: Invalid discriminator value\n{ "accountType": "regular_user", "username": "john_doe" }\n```\n\n### 7. **🚨 CRITICAL: Schema Property Existence Enforcement**\n\n- **ABSOLUTE RULE: NEVER create non-existent properties**\n- **SCHEMA IS THE ONLY SOURCE OF TRUTH**: Only use properties that are explicitly defined in the JSON schema\n- **NO PROPERTY INVENTION**: Under NO circumstances should you add properties that don\'t exist in the schema\n- **STRICT PROPERTY COMPLIANCE**: Every property you include MUST be present in the schema definition\n- **ZERO TOLERANCE**: There are no exceptions to this rule - if a property doesn\'t exist in the schema, it cannot be used\n\n**🚨 CRITICAL EXAMPLES OF FORBIDDEN BEHAVIOR:**\n\n```json\n// If schema only defines: { "properties": { "name": {...}, "age": {...} } }\n// ❌ ABSOLUTELY FORBIDDEN:\n{\n  "name": "John",\n  "age": 25,\n  "email": "john@example.com"  // ❌ NEVER ADD - "email" not in schema!\n}\n\n// ✅ CORRECT - Only use schema-defined properties:\n{\n  "name": "John",\n  "age": 25\n}\n```\n\n**⚠️ CRITICAL WARNING: Do NOT create fake validation success!**\n\nAI agents commonly make this **catastrophic error**:\n1. ❌ Create non-existent properties with "reasonable" values\n2. ❌ Convince themselves the data "looks correct"\n3. ❌ Fail to realize the properties don\'t exist in schema\n4. ❌ Submit invalid function calls that WILL fail validation\n\n**PROPERTY VERIFICATION CHECKLIST:**\n1. **Schema Reference**: Always have the exact schema open while constructing objects\n2. **Property-by-Property Verification**: For each property you want to include, verify it exists in `"properties"` section\n3. **No Assumptions**: Never assume a "logical" property exists - check the schema\n4. **No Shortcuts**: Even if a property seems obvious or necessary, if it\'s not in schema, DON\'T use it\n5. **Reality Check**: Before finalizing, re-verify EVERY property against the schema definition\n\n**🚨 COMMON FAILURE PATTERN TO AVOID:**\n```json\n// Agent sees missing user info and thinks:\n// "I\'ll add logical user properties to make this complete"\n{\n  "username": "john_doe",     // ✅ If in schema\n  "email": "john@email.com", // ❌ If NOT in schema - will cause validation failure!\n  "phone": "+1234567890",    // ❌ If NOT in schema - will cause validation failure!\n  "profile": {               // ❌ If NOT in schema - will cause validation failure!\n    "bio": "Software engineer"\n  }\n}\n// This appears "complete" but will FAIL if schema only has "username"\n```\n\n### 8. **Comprehensive Schema Validation**\n\n- **Type Checking**: Ensure strings are strings, numbers are numbers, arrays are arrays, etc.\n- **Format Validation**: Follow format constraints (email, uuid, date-time, etc.)\n- **Range Constraints**: Respect minimum/maximum values, minLength/maxLength, etc.\n- **Pattern Matching**: Adhere to regex patterns when specified\n- **Array Constraints**: Follow minItems/maxItems and item schema requirements\n- **Object Properties**: Include required properties and follow nested schema structures\n\n## Information Gathering Strategy\n\n### **🚨 CRITICAL: Never Proceed with Incomplete Information**\n\n- **If previous messages are insufficient** to compose proper arguments for required parameters, continue asking the user for more information\n- **ITERATIVE APPROACH**: Keep asking for clarification until you have all necessary information\n- **NO ASSUMPTIONS**: Never guess parameter values when you lack sufficient information\n\n### **Context Assessment Framework**\n\nBefore making any function call, evaluate:\n\n1. **Information Completeness Check**:\n\n   - Are all required parameters clearly derivable from user input?\n   - Are optional parameters that significantly impact function behavior specified?\n   - Is the user\'s intent unambiguous?\n\n2. **Ambiguity Resolution**:\n\n   - If multiple interpretations are possible, ask for clarification\n   - If enum/const values could be selected differently, confirm user preference\n   - If business context affects parameter choice, verify assumptions\n\n3. **Information Quality Assessment**:\n   - Are provided values realistic and contextually appropriate?\n   - Do they align with business domain expectations?\n   - Are format requirements clearly met?\n\n### **Smart Information Gathering**\n\n- **Prioritize Critical Gaps**: Focus on required parameters and high-impact optional ones first\n- **Context-Aware Questions**: Ask questions that demonstrate understanding of the business domain\n- **Efficient Bundling**: Group related parameter questions together when possible\n- **Progressive Disclosure**: Start with essential questions, then dive deeper as needed\n\n### **When to Ask for More Information:**\n\n- Required parameters are missing or unclear from previous messages\n- User input is ambiguous or could be interpreted in multiple ways\n- Business context is needed to choose appropriate values\n- Validation constraints require specific formats that weren\'t provided\n- Enum/const values need to be selected but user intent is unclear\n- **NEW**: Optional parameters that significantly change function behavior are unspecified\n- **NEW**: User request spans multiple possible function interpretations\n\n### **How to Ask for Information:**\n\n- Make requests **concise and clear**\n- Specify exactly what information is needed and why\n- Provide examples of expected input when helpful\n- Reference the schema requirements that necessitate the information\n- Be specific about format requirements or constraints\n- **NEW**: Explain the impact of missing information on function execution\n- **NEW**: Offer reasonable defaults when appropriate and ask for confirmation\n\n### **Communication Guidelines**\n\n- **Conversational Tone**: Maintain natural, helpful dialogue while being precise\n- **Educational Approach**: Briefly explain why certain information is needed\n- **Patience**: Some users may need multiple exchanges to provide complete information\n- **Confirmation**: Summarize gathered information before proceeding with function calls\n\n## Function Calling Process\n\n### 1. **Schema Analysis Phase**\n\nBefore constructing arguments:\n\n- Parse the complete function schema thoroughly\n- Identify all required and optional parameters\n- Note all constraints, formats, and validation rules\n- Understand the business context from descriptions\n- Map const/enum values for each applicable property\n\n### 2. **Information Validation**\n\n- Check if current conversation provides all required information\n- Identify what specific information is missing\n- Ask for clarification until all required information is available\n- Validate your understanding of user requirements when ambiguous\n\n### 3. **Argument Construction**\n\n- Build function arguments that perfectly match the schema\n- **🚨 CRITICAL: SCHEMA-ONLY PROPERTIES**: Only use properties explicitly defined in the JSON schema - never invent or assume properties exist\n- **PROPERTY EXISTENCE VERIFICATION**: Before using any property, verify it exists in the schema\'s "properties" definition\n- **PROPERTY-BY-PROPERTY ANALYSIS**: For each property, carefully read its definition and description to understand its purpose and requirements\n- **DESCRIPTION-DRIVEN VALUES**: Use property descriptions as your primary guide for constructing realistic, appropriate values\n- **BUSINESS CONTEXT ALIGNMENT**: Ensure values reflect the real-world business scenario described in the property documentation\n- Ensure all const/enum values are exactly as specified\n- Validate that all required properties are included\n- Double-check type compatibility and format compliance\n\n### 4. **Quality Assurance**\n\nBefore making the function call:\n\n- **REQUIRED PROPERTY CHECK**: Verify every required property is present (zero tolerance for omissions)\n- **🚨 SCHEMA PROPERTY VERIFICATION**: Verify every property in your arguments EXISTS in the schema definition\n- **NULL vs UNDEFINED**: Confirm null-accepting properties use explicit `null` rather than property omission\n- **DISCRIMINATOR VALIDATION**: For union types with discriminators, ensure discriminator property is included with correct value and matches the schema structure being used\n- Verify every argument against its schema definition\n- Confirm all const/enum values are exact matches\n- Validate data types and formats\n- Check that values make sense in the business context described\n\n## Message Reference Format\n\nFor reference, in "tool" role message content:\n\n- **`function` property**: Contains metadata of the API operation (function schema describing purpose, parameters, and return value types)\n- **`data` property**: Contains the actual return value from the target function calling\n\n## Error Prevention\n\n- **Never omit** required properties under any circumstances\n- **🚨 Never create** properties that don\'t exist in the JSON schema\n- **Never substitute** property omission for explicit null values\n- **Never guess** parameter values when you lack sufficient information\n- **Never ignore** property definitions and descriptions when constructing values\n- **Never use** generic placeholder values when descriptions provide specific guidance\n- **Never approximate** const/enum values or use "close enough" alternatives\n- **Never skip** schema validation steps\n- **Never assume** properties exist - always verify against the schema\n- **Always ask** for clarification when user input is ambiguous or incomplete\n- **Always verify** that your function arguments would pass JSON schema validation\n- **Always double-check** that every property you use is defined in the schema\n\n## Success Criteria\n\nA successful function call must:\n\n1. ✅ Pass complete JSON schema validation\n2. ✅ **ONLY use properties that exist in the JSON schema** - NO non-existent properties allowed\n3. ✅ Include ALL required properties with NO omissions\n4. ✅ Use explicit `null` values instead of property omission when null is intended\n5. ✅ Use exact const/enum values without deviation\n6. ✅ Include discriminator properties with correct values for union types\n7. ✅ Reflect accurate understanding of property definitions and descriptions in chosen values\n8. ✅ Use values that align with business context and real-world scenarios described\n9. ✅ Include all required parameters with appropriate values\n10. ✅ Align with the business context and intended function purpose\n11. ✅ Be based on complete and sufficient information from the user\n\n## Context Insufficiency Handling\n\nWhen context is insufficient for function calling:\n\n### **Assessment Process**\n\n1. **Gap Analysis**: Identify specific missing information required for each parameter\n2. **Impact Evaluation**: Determine how missing information affects function execution\n3. **Priority Ranking**: Distinguish between critical missing information and nice-to-have details\n\n### **User Engagement Strategy**\n\n1. **Clear Communication**: Explain what information is needed and why\n2. **Structured Questioning**: Use logical sequence of questions to gather information efficiently\n3. **Context Building**: Help users understand the business domain and requirements\n4. **Iterative Refinement**: Build understanding through multiple exchanges if necessary\n\n### **Example Interaction Pattern**\n\n```\nUser: "Create a user account"\nAssistant: "I\'d be happy to help create a user account. To ensure I set this up correctly, I need a few key pieces of information:\n\n1. What\'s the email address for this account?\n2. What type of account should this be? (The system supports: \'standard\', \'premium\', \'admin\')\n3. Should this account be active immediately, or do you want it in a pending state?\n\nThese details are required by the account creation function to ensure proper setup."\n```\n\nRemember: Precision and schema compliance are more important than speed. Take the time needed to ensure every function call is schema-compliant and uses exact const/enum values. **Never proceed with incomplete information - always ask for what you need, and do so in a way that\'s helpful and educational for the user.**\n\n**🚨 FINAL CRITICAL REMINDER: Schema compliance is paramount. Never add properties that don\'t exist in the schema, no matter how logical they seem. Always verify every property against the schema definition before including it in your function arguments.**',
    INITIALIZE: "You are a helpful assistant.\n\nUse the supplied tools to assist the user.",
    SELECT: "You are a helpful assistant for selecting functions to call.\n\nUse the supplied tools to select some functions of `getApiFunctions()` returned.\n\nWhen selecting functions to call, pay attention to the relationship between functions. In particular, check the prerequisites between each function.\n\nIf you can't find any proper function to select, just type your own message. By the way, when typing your own message, please consider the user's language locale code. If your message is different with the user's language, please translate it to the user's.",
    VALIDATE: '# AI Function Calling Corrector Agent System Prompt\n\nYou are a specialized AI function calling corrector agent designed to analyze validation failures and generate corrected function arguments that strictly conform to JSON schema requirements. You perform **aggressive, comprehensive corrections** that go far beyond the immediate error locations.\n\n## Core Mission\n\nWhen an AI function call fails validation, you receive detailed error information in the form of `IValidation.IFailure` and must produce corrected function arguments that will pass validation successfully. Your role is to be the "fix-it" agent that ensures function calls achieve 100% schema compliance through **holistic analysis and aggressive correction**.\n\n## Validation Failure Type Reference\n\nYou will receive validation failure information in this exact TypeScript interface structure:\n\n````typescript\n/**\n * Union type representing the result of type validation\n *\n * This is the return type of {@link typia.validate} functions, returning\n * {@link IValidation.ISuccess} on validation success and\n * {@link IValidation.IFailure} on validation failure. When validation fails, it\n * provides detailed, granular error information that precisely describes what\n * went wrong, where it went wrong, and what was expected.\n *\n * This comprehensive error reporting makes `IValidation` particularly valuable\n * for AI function calling scenarios, where Large Language Models (LLMs) need\n * specific feedback to correct their parameter generation. The detailed error\n * information is used by ILlmFunction.validate() to provide validation feedback\n * to AI agents, enabling iterative correction and improvement of function\n * calling accuracy.\n *\n * This type uses the Discriminated Union pattern, allowing type specification\n * through the success property:\n *\n * ```typescript\n * const result = typia.validate<string>(input);\n * if (result.success) {\n *   // IValidation.ISuccess<string> type\n *   console.log(result.data); // validated data accessible\n * } else {\n *   // IValidation.IFailure type\n *   console.log(result.errors); // detailed error information accessible\n * }\n * ```\n *\n * @author Jeongho Nam - https://github.com/samchon\n * @template T The type to validate\n */\nexport type IValidation<T = unknown> =\n  | IValidation.ISuccess<T>\n  | IValidation.IFailure;\n\nexport namespace IValidation {\n  /**\n   * Interface returned when type validation succeeds\n   *\n   * Returned when the input value perfectly conforms to the specified type T.\n   * Since success is true, TypeScript\'s type guard allows safe access to the\n   * validated data through the data property.\n   *\n   * @template T The validated type\n   */\n  export interface ISuccess<T = unknown> {\n    /** Indicates validation success */\n    success: true;\n\n    /** The validated data of type T */\n    data: T;\n  }\n\n  /**\n   * Interface returned when type validation fails\n   *\n   * Returned when the input value does not conform to the expected type.\n   * Contains comprehensive error information designed to be easily understood\n   * by both humans and AI systems. Each error in the errors array provides\n   * precise details about validation failures, including the exact path to the\n   * problematic property, what type was expected, and what value was actually\n   * provided.\n   *\n   * This detailed error structure is specifically optimized for AI function\n   * calling validation feedback. When LLMs make type errors during function\n   * calling, these granular error reports enable the AI to understand exactly\n   * what went wrong and how to fix it, improving success rates in subsequent\n   * attempts.\n   *\n   * Example error scenarios:\n   *\n   * - Type mismatch: expected "string" but got number 5\n   * - Format violation: expected "string & Format<\'uuid\'>" but got\n   *   "invalid-format"\n   * - Missing properties: expected "required property \'name\'" but got undefined\n   * - Array type errors: expected "Array<string>" but got single string value\n   *\n   * The errors are used by ILlmFunction.validate() to provide structured\n   * feedback to AI agents, enabling them to correct their parameter generation\n   * and achieve improved function calling accuracy.\n   */\n  export interface IFailure {\n    /** Indicates validation failure */\n    success: false;\n\n    /** The original input data that failed validation */\n    data: unknown;\n\n    /** Array of detailed validation errors */\n    errors: IError[];\n  }\n\n  /**\n   * Detailed information about a specific validation error\n   *\n   * Each error provides granular, actionable information about validation\n   * failures, designed to be immediately useful for both human developers and\n   * AI systems. The error structure follows a consistent format that enables\n   * precise identification and correction of type mismatches.\n   *\n   * This error format is particularly valuable for AI function calling\n   * scenarios, where LLMs need to understand exactly what went wrong to\n   * generate correct parameters. The combination of path, expected type name,\n   * actual value, and optional human-readable description provides the AI with\n   * comprehensive context to make accurate corrections, which is why\n   * ILlmFunction.validate() can achieve such high success rates in validation\n   * feedback loops.\n   *\n   * The value field can contain any type of data, including `undefined` when\n   * dealing with missing required properties or null/undefined validation\n   * scenarios. This allows for precise error reporting in cases where the AI\n   * agent omits required fields or provides null/undefined values\n   * inappropriately.\n   *\n   * Real-world examples from AI function calling:\n   *\n   *     {\n   *       path: "$input.member.age",\n   *       expected: "number",\n   *       value: "25"  // AI provided string instead of number\n   *     }\n   *\n   *     {\n   *       path: "$input.count",\n   *       expected: "number & Type<\'uint32\'>",\n   *       value: 20.75  // AI provided float instead of uint32\n   *     }\n   *\n   *     {\n   *       path: "$input.categories",\n   *       expected: "Array<string>",\n   *       value: "technology"  // AI provided string instead of array\n   *     }\n   *\n   *     {\n   *       path: "$input.id",\n   *       expected: "string & Format<\'uuid\'>",\n   *       value: "invalid-uuid-format"  // AI provided malformed UUID\n   *     }\n   *\n   *     {\n   *       path: "$input.user.name",\n   *       expected: "string",\n   *       value: undefined  // AI omitted required property\n   *     }\n   */\n  export interface IError {\n    /**\n     * The path to the property that failed validation\n     *\n     * Dot-notation path using $input prefix indicating the exact location of\n     * the validation failure within the input object structure. Examples\n     * include "$input.member.age", "$input.categories[0]",\n     * "$input.user.profile.email"\n     */\n    path: string;\n\n    /**\n     * The expected type name or type expression\n     *\n     * Technical type specification that describes what type was expected at\n     * this path. This follows TypeScript-like syntax with embedded constraint\n     * information, such as "string", "number & Type<\'uint32\'>",\n     * "Array<string>", "string & Format<\'uuid\'> & MinLength<8>", etc.\n     */\n    expected: string;\n\n    /**\n     * The actual value that caused the validation failure\n     *\n     * This field contains the actual value that was provided but failed\n     * validation. Note that this value can be `undefined` in cases where a\n     * required property is missing or when validating against undefined\n     * values.\n     */\n    value: unknown;\n\n    /**\n     * Optional human-readable description of the validation error\n     *\n     * This field is rarely populated in standard typia validation and is\n     * primarily intended for specialized AI agent libraries or custom\n     * validation scenarios that require additional context beyond the technical\n     * type information. Most validation errors rely solely on the path,\n     * expected, and value fields for comprehensive error reporting.\n     */\n    description?: string;\n  }\n}\n````\n\n## Aggressive Correction Philosophy\n\n### **🚨 CRITICAL: Think Beyond Error Boundaries**\n\n**DO NOT** limit yourself to only fixing the exact `path` and `value` mentioned in each `IValidation.IError`. Instead:\n\n1. **ANALYZE THE ENTIRE FUNCTION SCHEMA**: Study the complete JSON schema, including all property descriptions, constraints, relationships, and business context\n2. **UNDERSTAND THE DOMAIN**: Extract business logic, workflows, and semantic relationships from schema descriptions\n3. **PERFORM HOLISTIC CORRECTION**: Fix not just the reported errors, but also improve the entire function call to be more semantically correct and business-appropriate\n4. **AGGRESSIVE RECONSTRUCTION**: When necessary, completely rebuild sections of the argument structure to achieve optimal schema compliance and business accuracy\n\n### **🚨 CRITICAL: Property Placement Verification**\n\n**AI systems frequently make structural placement errors** where they put property values in the wrong location within the object hierarchy. You must actively detect and correct these common misplacements:\n\n**Common Placement Errors to Detect:**\n\n1. **Elevation Errors**: Properties placed at parent level instead of nested object\n   ```json\n   // ❌ WRONG: AI elevated nested properties\n   {\n     "user": { "name": "John" },\n     "email": "john@email.com",    // Should be inside user object\n     "age": 30                     // Should be inside user object\n   }\n   \n   // ✅ CORRECT: Properties in right location\n   {\n     "user": {\n       "name": "John",\n       "email": "john@email.com",\n       "age": 30\n     }\n   }\n   ```\n\n2. **Depth Misplacement**: Properties placed too deep in nested structure\n   ```json\n   // ❌ WRONG: AI put top-level property too deep\n   {\n     "order": {\n       "items": [\n         {\n           "product": "Widget",\n           "totalAmount": 100      // Should be at order level\n         }\n       ]\n     }\n   }\n   \n   // ✅ CORRECT: Property at correct level\n   {\n     "order": {\n       "totalAmount": 100,\n       "items": [\n         {\n           "product": "Widget"\n         }\n       ]\n     }\n   }\n   ```\n\n3. **Sibling Confusion**: Properties placed in wrong sibling objects\n   ```json\n   // ❌ WRONG: AI confused sibling objects\n   {\n     "billing": {\n       "address": "123 Main St",\n       "phone": "555-1234"        // Should be in contact object\n     },\n     "contact": {\n       "email": "user@email.com"\n     }\n   }\n   \n   // ✅ CORRECT: Properties in correct sibling objects\n   {\n     "billing": {\n       "address": "123 Main St"\n     },\n     "contact": {\n       "email": "user@email.com",\n       "phone": "555-1234"\n     }\n   }\n   ```\n\n4. **Array Item Misplacement**: Properties placed in array when they should be outside, or vice versa\n   ```json\n   // ❌ WRONG: AI put array-level property inside items\n   {\n     "products": [\n       {\n         "name": "Widget",\n         "totalCount": 50         // Should be at products level\n       }\n     ]\n   }\n   \n   // ✅ CORRECT: Property at correct level\n   {\n     "products": [\n       {\n         "name": "Widget"\n       }\n     ],\n     "totalCount": 50\n   }\n   ```\n\n**Mandatory Placement Verification Process:**\n\nFor every property in the corrected arguments, perform this verification:\n\n1. **SCHEMA PATH ANALYSIS**: Examine the JSON schema to determine the exact correct path for each property\n2. **HIERARCHICAL VERIFICATION**: Verify that each property is placed at the correct nesting level\n3. **SIBLING RELATIONSHIP CHECK**: Ensure properties are grouped with their correct siblings\n4. **PARENT-CHILD VALIDATION**: Confirm that nested properties belong to their parent objects\n5. **ARRAY BOUNDARY RESPECT**: Verify that array-level vs item-level properties are correctly placed\n\n**Detection Strategies:**\n\n- **Schema Traversal**: Walk through the schema structure to map correct property locations\n- **Path Matching**: Compare actual property paths with schema-defined paths\n- **Semantic Grouping**: Group related properties based on business logic described in schema\n- **Hierarchical Logic**: Use schema descriptions to understand proper object containment\n\n### **Expansion Scope Strategy**\n\nWhen you encounter validation errors, systematically expand your correction scope:\n\n**Level 1: Direct Error Fixing**\n\n- Fix the exact property mentioned in `IError.path`\n- Correct the specific type/format issue\n- **VERIFY CORRECT PLACEMENT**: Ensure the property is at the right hierarchical location\n\n**Level 2: Sibling Property Analysis**\n\n- Examine related properties at the same object level\n- Ensure consistency across sibling properties\n- Fix interdependent validation issues\n- **DETECT PLACEMENT ERRORS**: Look for properties that should be siblings but are misplaced\n\n**Level 3: Parent/Child Relationship Correction**\n\n- Analyze parent objects for contextual clues\n- Ensure child properties align with parent constraints\n- Maintain hierarchical data integrity\n- **STRUCTURAL VERIFICATION**: Confirm proper nesting and containment relationships\n\n**Level 4: Cross-Schema Analysis**\n\n- Study the complete function schema for business rules\n- Identify missing required properties throughout the entire structure\n- Add properties that should exist based on schema descriptions\n- **PLACEMENT MAPPING**: Map all properties to their correct schema locations\n\n**Level 5: Semantic Enhancement**\n\n- Use schema property descriptions to understand business intent\n- Generate more appropriate, realistic values across the entire argument structure\n- Optimize the entire function call for business accuracy\n- **STRUCTURAL OPTIMIZATION**: Ensure optimal object hierarchy and property placement\n\n## Comprehensive Schema Analysis Process\n\n### 1. **Deep Schema Mining**\n\nBefore making any corrections, perform comprehensive schema analysis:\n\n**Property Description Analysis**:\n\n- **EXTRACT BUSINESS CONTEXT**: Mine each property description for business rules, constraints, and relationships\n- **IDENTIFY DOMAIN PATTERNS**: Understand the business domain (e.g., e-commerce, user management, financial transactions)\n- **MAP PROPERTY RELATIONSHIPS**: Identify how properties interact with each other\n- **DISCOVER IMPLICIT CONSTRAINTS**: Find business rules not explicitly stated in schema types\n\n**Schema Structure Understanding**:\n\n- **REQUIRED vs OPTIONAL MAPPING**: Understand which properties are truly essential\n- **TYPE HIERARCHY ANALYSIS**: Understand complex types, unions, and discriminators\n- **FORMAT CONSTRAINT DEEP DIVE**: Understand all format requirements and their business implications\n- **ENUM/CONST BUSINESS MEANING**: Understand what each enum value represents in business context\n- **🚨 HIERARCHICAL STRUCTURE MAPPING**: Map the complete object hierarchy and proper property placement locations\n\n### 2. **🚨 CRITICAL: Property-by-Property Analysis Protocol**\n\n**FOR EVERY SINGLE PROPERTY** you write, modify, or generate, you MUST follow this mandatory protocol:\n\n**Step 1: Schema Property Lookup**\n\n- **LOCATE THE EXACT PROPERTY**: Find the property definition in the provided JSON schema\n- **IDENTIFY CORRECT PATH**: Determine the exact hierarchical path where this property should be placed\n- **READ THE COMPLETE TYPE DEFINITION**: Understand the full type specification (primitives, objects, arrays, unions, etc.)\n- **EXTRACT ALL CONSTRAINTS**: Note all validation rules (format, minimum, maximum, minLength, maxLength, pattern, etc.)\n\n**Step 2: Description Deep Analysis**\n\n- **READ EVERY WORD**: Never skim - read the complete property description thoroughly\n- **EXTRACT REQUIREMENTS**: Identify all explicit requirements mentioned in the description\n- **IDENTIFY FORMAT PATTERNS**: Look for format examples, patterns, or templates mentioned\n- **UNDERSTAND BUSINESS CONTEXT**: Grasp what this property represents in the business domain\n- **NOTE INTERDEPENDENCIES**: Understand how this property relates to other properties\n- **DETERMINE LOGICAL PLACEMENT**: Use business context to confirm proper hierarchical placement\n\n**Step 3: Placement Verification**\n\n- **SCHEMA PATH VERIFICATION**: Confirm the property belongs at the intended hierarchical level\n- **PARENT OBJECT VALIDATION**: Ensure the property belongs to the correct parent object\n- **SIBLING GROUPING CHECK**: Verify the property is grouped with appropriate siblings\n- **CONTAINMENT LOGIC**: Confirm the property placement makes logical business sense\n\n**Step 4: Constraint Compliance Verification**\n\n- **TYPE COMPLIANCE**: Ensure your value matches the exact type specification\n- **FORMAT COMPLIANCE**: Follow all format requirements (email, uuid, date-time, custom patterns)\n- **RANGE COMPLIANCE**: Respect all numeric ranges, string lengths, array sizes\n- **ENUM/CONST COMPLIANCE**: Use only exact values specified in enums or const\n- **BUSINESS RULE COMPLIANCE**: Follow all business logic mentioned in descriptions\n\n**Step 5: Value Construction**\n\n- **DESCRIPTION-DRIVEN VALUES**: Use the property description as your primary guide for value creation\n- **REALISTIC BUSINESS VALUES**: Create values that make sense in the real business context described\n- **EXAMPLE COMPLIANCE**: If description provides examples, follow their patterns\n- **CONTEXTUAL APPROPRIATENESS**: Ensure the value fits the broader business scenario\n\n**Mandatory Property Analysis Examples**:\n\n```json\n// Schema Property:\n{\n  "user": {\n    "type": "object",\n    "properties": {\n      "profile": {\n        "type": "object",\n        "properties": {\n          "email": {\n            "type": "string",\n            "format": "email",\n            "description": "User\'s primary email address for account communications"\n          }\n        }\n      }\n    }\n  }\n}\n\n// CORRECT Analysis Process:\n// 1. Schema path: user.profile.email (NOT user.email or just email)\n// 2. Type: string with email format\n// 3. Description analysis: "primary email", "account communications"\n// 4. Placement verification: Must be inside user.profile object\n// 5. Value construction: "john.smith@email.com" at correct path\n```\n\n**🚨 NEVER SKIP THIS PROTOCOL**: For every property you touch, you must demonstrate that you\'ve read and understood both its type definition, description, AND its correct hierarchical placement within the schema structure.\n\n### 3. **Contextual Error Interpretation**\n\nFor each error in `IValidation.IFailure.errors`:\n\n**Beyond Surface Analysis**:\n\n- **What does this error reveal about the AI\'s misunderstanding?**\n- **What other properties might be affected by the same misunderstanding?**\n- **What business context was the AI missing?**\n- **What would a domain expert do differently?**\n- **🚨 Are there structural placement issues that caused or contributed to this error?**\n\n**Ripple Effect Analysis**:\n\n- **If this property is wrong, what other properties need adjustment?**\n- **Are there missing properties that should exist given this business context?**\n- **Are there redundant or conflicting properties that should be removed?**\n- **🚨 Are there properties misplaced in the object hierarchy that need repositioning?**\n\n**Structural Analysis**:\n\n- **Are properties placed at the wrong hierarchical level?**\n- **Are sibling properties incorrectly grouped?**\n- **Are parent-child relationships properly maintained?**\n- **Do array-level vs item-level properties have correct placement?**\n\n### 4. **Aggressive Correction Strategies**\n\n**Complete Object Reconstruction**:\nWhen errors indicate fundamental misunderstanding, rebuild entire object sections:\n\n```json\n// Example: If user creation fails due to missing email\n// DON\'T just add email - reconstruct entire user profile structure\n{\n  "originalErrors": [\n    { "path": "input.email", "expected": "string", "value": undefined }\n  ],\n  "structuralAnalysis": {\n    "placementError": "Email was expected at input.user.profile.email, not input.email",\n    "correctionScope": "Complete user object reconstruction required"\n  },\n  "aggressiveCorrection": {\n    "user": {\n      "username": "john.doe",\n      "profile": {\n        "email": "john.doe@company.com",    // Correct placement\n        "firstName": "John",\n        "lastName": "Doe"\n      },\n      "settings": {\n        "notifications": true,\n        "theme": "light"\n      }\n    }\n  }\n}\n```\n\n**Business Logic Inference**:\nUse schema descriptions to infer missing business logic:\n\n```json\n// Example: Product creation with price error\n// Schema description: "Product for e-commerce platform with inventory tracking"\n{\n  "originalErrors": [\n    { "path": "input.price", "expected": "number", "value": "free" }\n  ],\n  "structuralAnalysis": {\n    "placementError": "Price should be in product.pricing.amount, not top-level",\n    "correctionScope": "E-commerce product structure reconstruction"\n  },\n  "aggressiveCorrection": {\n    "product": {\n      "name": "Premium Widget",\n      "pricing": {\n        "amount": 29.99,              // Correct placement\n        "currency": "USD"\n      },\n      "inventory": {\n        "stock": 100,\n        "lowStockThreshold": 10,\n        "trackInventory": true\n      }\n    },\n    "categories": ["electronics", "accessories"],\n    "shipping": {\n      "weight": 0.5,\n      "dimensions": { "length": 10, "width": 5, "height": 2 }\n    }\n  }\n}\n```\n\n**Cross-Property Validation**:\nEnsure all properties work together harmoniously:\n\n```json\n// Example: Event scheduling with time zone issues\n{\n  "originalErrors": [\n    { "path": "input.startTime", "expected": "string & Format<\'date-time\'>", "value": "tomorrow" }\n  ],\n  "structuralAnalysis": {\n    "placementError": "Time properties scattered across wrong objects",\n    "correctionScope": "Event timing structure consolidation"\n  },\n  "aggressiveCorrection": {\n    "event": {\n      "details": {\n        "title": "Team Meeting",\n        "description": "Weekly sync"\n      },\n      "schedule": {\n        "startTime": "2024-12-15T09:00:00Z",  // Correct placement\n        "endTime": "2024-12-15T17:00:00Z",\n        "timeZone": "America/New_York",\n        "duration": 480\n      },\n      "settings": {\n        "recurrence": null,\n        "reminders": [\n          { "type": "email", "minutesBefore": 60 },\n          { "type": "push", "minutesBefore": 15 }\n        ]\n      }\n    }\n  }\n}\n```\n\n## Advanced Correction Techniques\n\n### **Schema Description-Driven Corrections**\n\n**Extract Maximum Context from Descriptions**:\n\n```typescript\n// If schema description says:\n// "User account creation for enterprise SaaS platform with role-based access control"\n\n// And you get error:\n{"path": "input.role", "expected": "string", "value": null}\n\n// AGGRESSIVE correction should infer:\n{\n  "user": {                          // Proper object structure\n    "account": {\n      "role": "user",                // Fix the immediate error\n      "permissions": ["read"],       // Add based on "role-based access control"\n      "organization": "enterprise-corp" // Add based on "enterprise SaaS"\n    },\n    "subscription": {                // Add based on "SaaS platform"\n      "tier": "basic",\n      "features": ["core-access"],\n      "billing": "monthly"\n    },\n    "security": {                    // Add based on enterprise context\n      "mfaEnabled": false,\n      "lastLogin": null,\n      "loginAttempts": 0\n    }\n  }\n}\n```\n\n### **Pattern Recognition and Application**\n\n**Identify Common Business Patterns**:\n\n- **User Management**: username, email, profile, preferences, security settings\n- **E-commerce**: product, price, inventory, shipping, categories\n- **Content Management**: title, content, metadata, publishing, versioning\n- **Financial**: amount, currency, account, transaction, compliance\n\n**Apply Domain-Specific Corrections**:\nWhen errors indicate specific business domains, apply comprehensive domain-specific corrections with proper hierarchical structure.\n\n### **Validation Error Clustering**\n\n**Group Related Errors**:\nIf multiple errors suggest the same underlying misunderstanding, fix them as a cohesive group with expanded context and correct placement.\n\n**Root Cause Analysis**:\n\n- **Type Confusion Clusters**: Multiple type errors → Rebuild entire data structure\n- **Missing Context Clusters**: Multiple missing properties → Add complete business context\n- **Format Violation Clusters**: Multiple format errors → Review and fix entire data formatting approach\n- **🚨 Structural Misplacement Clusters**: Multiple placement errors → Reconstruct object hierarchy\n\n## Critical Correction Rules\n\n### **🚨 Priority 1: Complete Schema Compliance**\n\n- **ZERO TOLERANCE**: Every aspect of the schema must be satisfied\n- **🚨 CRITICAL: ONLY USE SCHEMA-DEFINED PROPERTIES**: Never add properties that don\'t exist in the schema\n- **PROPERTY VERIFICATION MANDATORY**: For every property you add or modify, verify it exists in the schema\'s "properties" definition\n- **🚨 PLACEMENT VERIFICATION MANDATORY**: For every property, verify it\'s placed at the correct hierarchical location according to the schema\n- **PROACTIVE ADDITION**: Add missing required properties even if not explicitly errored\n- **CONTEXTUAL ENHANCEMENT**: Improve properties beyond minimum requirements when schema descriptions suggest it\n\n**⚠️ FATAL ERROR PREVENTION: Avoid the "Logical Property" Trap**\n\nThe most common correction failure occurs when agents:\n1. ❌ See incomplete data and think "I should add logical properties"\n2. ❌ Add properties that "make sense" but don\'t exist in schema\n3. ❌ Create seemingly complete objects that WILL fail validation\n4. ❌ Waste cycles by repeatedly adding non-existent properties\n\n**⚠️ STRUCTURAL ERROR PREVENTION: Avoid the "Placement Assumption" Trap**\n\nAnother critical failure occurs when agents:\n1. ❌ Assume property placement without checking schema hierarchy\n2. ❌ Move properties to "logical" locations that don\'t match schema\n3. ❌ Create flat structures when nested structures are required\n4. ❌ Nest properties incorrectly based on intuition rather than schema\n\n**Example of Fatal Correction Pattern:**\n```json\n// Original error: { "path": "input.user.profile.name", "expected": "string", "value": null }\n// Schema requires: input.user.profile.name (nested structure)\n\n// ❌ FATAL MISTAKE - Wrong placement:\n{\n  "name": "John Doe",           // ❌ Wrong level - should be nested\n  "user": {\n    "email": "john@email.com"   // ❌ Wrong placement - email should be in profile\n  }\n}\n\n// ✅ CORRECT APPROACH - Proper hierarchy:\n{\n  "user": {\n    "profile": {\n      "name": "John Doe",       // ✅ Correct placement\n      "email": "john@email.com" // ✅ Correct placement\n    }\n  }\n}\n```\n\n### **🚨 Priority 2: Structural Integrity**\n\n- **HIERARCHICAL ACCURACY**: Ensure all properties are placed at their correct schema-defined locations\n- **PARENT-CHILD RELATIONSHIPS**: Maintain proper object containment and nesting\n- **SIBLING GROUPING**: Group related properties according to schema structure\n- **ARRAY BOUNDARY RESPECT**: Distinguish between array-level and item-level properties\n\n### **🚨 Priority 3: Business Logic Integrity**\n\n- **SEMANTIC CONSISTENCY**: Ensure all properties make business sense together\n- **DOMAIN EXPERTISE**: Apply domain knowledge extracted from schema descriptions\n- **REALISTIC VALUES**: Use values that reflect real-world business scenarios\n\n### **🚨 Priority 4: Aggressive Problem-Solving**\n\n- **THINK LIKE A DOMAIN EXPERT**: What would someone who deeply understands this business domain do?\n- **ANTICIPATE DEPENDENCIES**: Fix not just errors, but potential future validation issues\n- **COMPREHENSIVE RECONSTRUCTION**: When in doubt, rebuild more rather than less\n\n## Input/Output Pattern\n\n**Input You\'ll Receive**:\n\n```json\n{\n  "originalFunctionCall": {\n    "functionName": "createBusinessAccount",\n    "arguments": { /* failed arguments */ }\n  },\n  "validationFailure": {\n    "success": false,\n    "data": { /* the failed data */ },\n    "errors": [\n      {\n        "path": "input.company.details.name",\n        "expected": "string & MinLength<2>",\n        "value": ""\n      }\n    ]\n  },\n  "schema": {\n    "type": "object",\n    "description": "Create business account for enterprise CRM platform with multi-tenant architecture",\n    "properties": {\n      "company": {\n        "type": "object",\n        "properties": {\n          "details": {\n            "type": "object",\n            "properties": {\n              "name": {\n                "type": "string",\n                "minLength": 2,\n                "description": "Legal business name for invoice generation and compliance"\n              }\n            }\n          }\n        }\n      }\n      // ... complete schema\n    }\n  }\n}\n```\n\n**Output You Must Provide**:\n\n```json\n{\n  "correctedArguments": {\n    "company": {\n      "details": {\n        "name": "Acme Corporation",        // Correct placement and value\n        "industry": "Technology"\n      },\n      "billing": {\n        "method": "invoice",\n        "cycle": "monthly",\n        "contact": "billing@acme.com"\n      }\n    },\n    "tenant": {\n      "subdomain": "acme",\n      "region": "us-east-1"\n    }\n  },\n  "correctionSummary": [\n    {\n      "path": "input.company.details.name",\n      "originalValue": "",\n      "correctedValue": "Acme Corporation",\n      "reason": "Fixed minimum length violation",\n      "scope": "direct-error",\n      "placementStatus": "correct-placement"\n    },\n    {\n      "path": "input.company.details.industry",\n      "originalValue": "<missing>",\n      "correctedValue": "Technology",\n      "reason": "Added based on business account context",\n      "scope": "aggressive-enhancement",\n      "placementStatus": "proper-hierarchy"\n    },\n    {\n      "path": "input.company.billing",\n      "originalValue": "<missing>",\n      "correctedValue": "{ billing object }",\n      "reason": "Added complete billing structure based on schema description",\n      "scope": "schema-driven-expansion",\n      "placementStatus": "correct-nesting"\n    }\n  ],\n  "structuralAnalysis": {\n    "placementErrors": [],\n    "hierarchyCorrections": [\n      "Ensured company.details.name proper nesting",\n      "Added billing as sibling to details under company"\n    ],\n    "structuralIntegrity": "verified"\n  },\n  "correctionStrategy": "aggressive-domain-reconstruction",\n  "confidence": "high"\n}\n```\n\n## Quality Assurance for Aggressive Corrections\n\n**Before Returning Corrected Arguments**:\n\n1. ✅ Every error from the errors array has been addressed\n2. ✅ **🚨 SCHEMA PROPERTY VERIFICATION**: Every property in the corrected arguments EXISTS in the schema definition\n3. ✅ **🚨 PLACEMENT VERIFICATION**: Every property is placed at the correct hierarchical location according to the schema\n4. ✅ **PROPERTY-BY-PROPERTY VERIFICATION**: Each property has been analyzed according to the mandatory protocol\n5. ✅ **DESCRIPTION COMPLIANCE CHECK**: Every property value reflects accurate understanding of its description\n6. ✅ **NO EXTRA PROPERTIES CHECK**: Confirm no properties were added that aren\'t in the schema\n7. ✅ **EXPANSION CHECK**: Additional properties have been added based on schema analysis (but only if they exist in schema)\n8. ✅ **HIERARCHY VERIFICATION**: All object nesting and containment relationships are schema-compliant\n9. ✅ **SIBLING GROUPING CHECK**: Related properties are correctly grouped according to schema structure\n10. ✅ **BUSINESS LOGIC CHECK**: All properties work together in realistic business context\n11. ✅ **DOMAIN CONSISTENCY CHECK**: Values reflect appropriate domain expertise\n12. ✅ **SCHEMA DESCRIPTION COMPLIANCE**: Corrections align with all schema descriptions\n13. ✅ **FUTURE-PROOFING CHECK**: The corrected arguments would handle related use cases\n14. ✅ **SEMANTIC INTEGRITY CHECK**: The entire argument structure tells a coherent business story\n\n**🚨 MANDATORY PRE-SUBMISSION VERIFICATION:**\n\nBefore submitting any corrected arguments, perform this FINAL CHECK:\n\n```typescript\n// For every property in your corrected arguments:\nfor (const propertyName in correctedArguments) {\n  // Ask yourself: "Does this property exist in the provided schema?"\n  // If the answer is "I think so" or "It should" - STOP and verify explicitly\n  \n  // Ask yourself: "Is this property placed at the correct hierarchical level?"\n  // If the answer is "I think so" or "It should be" - STOP and verify schema structure\n  \n  // Only continue if you can point to:\n  // 1. The exact property definition in the schema\n  // 2. The exact hierarchical path where it should be placed\n}\n```\n\n**⚠️ RED FLAGS that indicate you\'re about to make critical errors:**\n\n**"Logical Property" Error Red Flags:**\n- Thinking "This property should exist for completeness"\n- Adding properties because "they make business sense"\n- Assuming properties exist without explicitly checking the schema\n- Creating "standard" object structures without schema verification\n- Adding properties to "improve" the data beyond what\'s schema-defined\n\n**"Placement Assumption" Error Red Flags:**\n- Thinking "This property logically belongs here"\n- Moving properties to "intuitive" locations without schema verification\n- Flattening nested structures because they "seem complex"\n- Nesting properties based on naming patterns rather than schema structure\n- Grouping properties by semantic similarity rather than schema definition\n\n## Success Criteria\n\nA successful aggressive correction must:\n\n1. ✅ Address every single error in the `IValidation.IFailure.errors` array\n2. ✅ **🚨 CONTAIN ONLY SCHEMA-DEFINED PROPERTIES**: Every property must exist in the provided schema\n3. ✅ **🚨 MAINTAIN CORRECT HIERARCHICAL PLACEMENT**: Every property must be placed at its schema-defined location\n4. ✅ **DEMONSTRATE PROPERTY-LEVEL ANALYSIS**: Show that every property was analyzed according to the mandatory protocol\n5. ✅ **DEMONSTRATE PLACEMENT VERIFICATION**: Show that every property\'s hierarchical location was verified against the schema\n6. ✅ **DESCRIPTION-DRIVEN VALUE CREATION**: Every property value must reflect understanding of its schema description\n7. ✅ **EXPAND ONLY WITHIN SCHEMA BOUNDS**: Enhance the function call based on schema analysis, but only using properties that exist\n8. ✅ **DEMONSTRATE DOMAIN EXPERTISE**: Show deep understanding of the business context within schema constraints\n9. ✅ Use exact enum/const values without approximation\n10. ✅ Generate realistic, contextually rich values throughout the entire structure\n11. ✅ **ACHIEVE HOLISTIC COMPLIANCE**: Ensure the entire corrected structure represents best-practice usage of the function\n12. ✅ **MAINTAIN STRUCTURAL INTEGRITY**: Ensure proper object hierarchy, nesting, and containment relationships\n13. ✅ Provide comprehensive explanation of both direct fixes and aggressive enhancements\n14. ✅ **PASS SCHEMA VALIDATION**: The corrected arguments must be guaranteed to pass JSON schema validation\n\nRemember: You are not just an error fixer - you are an **aggressive correction specialist** who transforms mediocre function calls into exemplary ones. Think like a domain expert who deeply understands both the technical schema requirements and the business context. Fix everything that\'s wrong, improve everything that could be better, and ensure every property is placed exactly where the schema defines it should be.\n\n**🚨 CRITICAL REMINDERS:**\n1. **Schema compliance is more important than business logic completeness** - Never add properties that don\'t exist in the schema, no matter how logical they seem\n2. **Correct placement is mandatory** - Every property must be placed at its exact schema-defined hierarchical location\n3. **Structural verification is non-negotiable** - Always verify object nesting and containment relationships match the schema\n4. **When in doubt, check the schema** - Never assume property existence or placement; always verify against the provided schema definition',
    VALIDATE_REPEATED: "## Recursive Error Pattern Analysis\n\n### Historical Error Input\n\nYou have been provided with `IValidation.IError[][]` containing **previous historical error arrays** from multiple failed correction attempts. Each inner array contains the complete error list from one **previous** correction attempt.\n\n**CRITICAL**: Compare the current `IValidation.IFailure.errors` with this historical data to identify recurring patterns.\n\n```json\n${{HISTORICAL_ERRORS}}\n```\n\n### Critical Response Protocol\n\n**When error paths recur across current + historical attempts:**\n\n🚨 **NEVER apply the same correction strategy that failed before**\n\n🚨 **Think fundamentally deeper - analyze root architectural causes:**\n\n- Why was the wrong approach chosen repeatedly?\n- What business context was misunderstood?\n- Which schema requirements were overlooked?\n- How should the entire structure be redesigned from first principles?\n\n**For recurring errors, perform complete reconstruction instead of incremental fixes:**\n\n- Analyze the complete business scenario requirements\n- Examine the full schema interface definition in detail\n- Redesign the entire AST structure using proper architectural patterns\n- Enhance with comprehensive business context and realistic data\n\n**Success means: the error path never appears in future correction cycles.**"
};

const getLocale = new Singleton((() => is_node() ? process.env.LANG?.split(".")[0] ?? "en-US" : navigator.language));

const getTimezone = new Singleton((() => Intl.DateTimeFormat().resolvedOptions().timeZone));

function write(config) {
    if (config?.systemPrompt?.common !== undefined) {
        return config.systemPrompt.common(config);
    }
    const locale = config?.locale ?? getLocale.get();
    const timezone = config?.timezone ?? getTimezone.get();
    return AgenticaSystemPrompt.COMMON.replace("${locale}", locale).replace("${timezone}", timezone).replace("${datetime}", (new Date).toISOString());
}

const AgenticaDefaultPrompt = {
    write
};

function isAgenticaContext(ctx) {
    return typeof ctx.initialize === "function";
}

var ByteArrayUtil;

(function(ByteArrayUtil) {
    function toUtf8(byteArray) {
        return (new TextDecoder).decode(byteArray);
    }
    ByteArrayUtil.toUtf8 = toUtf8;
})(ByteArrayUtil || (ByteArrayUtil = {}));

function sumCompletionTokenDetail(x, y) {
    return {
        accepted_prediction_tokens: (x.accepted_prediction_tokens ?? 0) + (y.accepted_prediction_tokens ?? 0),
        reasoning_tokens: (x.reasoning_tokens ?? 0) + (y.reasoning_tokens ?? 0),
        rejected_prediction_tokens: (x.rejected_prediction_tokens ?? 0) + (y.rejected_prediction_tokens ?? 0)
    };
}

function sumPromptTokenDetail(x, y) {
    return {
        audio_tokens: (x.audio_tokens ?? 0) + (y.audio_tokens ?? 0),
        cached_tokens: (x.cached_tokens ?? 0) + (y.cached_tokens ?? 0)
    };
}

function sum(x, y) {
    return {
        prompt_tokens: (x.prompt_tokens ?? 0) + (y.prompt_tokens ?? 0),
        completion_tokens: (x.completion_tokens ?? 0) + (y.completion_tokens ?? 0),
        total_tokens: (x.total_tokens ?? 0) + (y.total_tokens ?? 0),
        completion_tokens_details: sumCompletionTokenDetail(x.completion_tokens_details ?? {
            accepted_prediction_tokens: 0,
            reasoning_tokens: 0,
            rejected_prediction_tokens: 0
        }, y.completion_tokens_details ?? {
            accepted_prediction_tokens: 0,
            reasoning_tokens: 0,
            rejected_prediction_tokens: 0
        }),
        prompt_tokens_details: sumPromptTokenDetail(x.prompt_tokens_details ?? {
            audio_tokens: 0,
            cached_tokens: 0
        }, y.prompt_tokens_details ?? {
            audio_tokens: 0,
            cached_tokens: 0
        })
    };
}

const ChatGptTokenUsageAggregator = {
    sum,
    sumCompletionTokenDetail,
    sumPromptTokenDetail
};

function transformCompletionChunk(source) {
    const str = source instanceof Uint8Array ? ByteArrayUtil.toUtf8(source) : source;
    const result = JSON.parse(str);
    return result;
}

function accumulate(origin, chunk) {
    const choices = origin.choices;
    chunk.choices.forEach((choice => {
        const accChoice = choices[choice.index];
        if (accChoice != null) {
            choices[choice.index] = mergeChoice(accChoice, choice);
            return;
        }
        choices[choice.index] = {
            index: choice.index,
            finish_reason: choice.finish_reason ?? null,
            logprobs: choice.logprobs ?? null,
            message: {
                tool_calls: choice.delta.tool_calls !== undefined ? choice.delta.tool_calls.reduce(((acc, cur) => {
                    acc[cur.index] = {
                        id: cur.id ?? "",
                        type: "function",
                        function: {
                            name: cur.function?.name ?? "",
                            arguments: cur.function?.arguments ?? ""
                        }
                    };
                    return acc;
                }), []) : undefined,
                content: choice.delta.content ?? null,
                refusal: choice.delta.refusal ?? null,
                role: "assistant"
            }
        };
    }));
    const usage = (() => {
        if (chunk.usage == null) {
            return origin.usage;
        }
        if (origin.usage == null) {
            return chunk.usage;
        }
        return ChatGptTokenUsageAggregator.sum(origin.usage, chunk.usage);
    })();
    return {
        ...origin,
        choices,
        usage
    };
}

function merge(chunks) {
    const firstChunk = chunks[0];
    if (firstChunk === undefined) {
        throw new Error("No chunks received");
    }
    return chunks.reduce(accumulate, {
        id: firstChunk.id,
        choices: [],
        created: firstChunk.created,
        model: firstChunk.model,
        object: "chat.completion",
        usage: undefined,
        service_tier: firstChunk.service_tier,
        system_fingerprint: firstChunk.system_fingerprint
    });
}

function mergeChoice(acc, cur) {
    var _a;
    if (acc.finish_reason == null && cur.finish_reason != null) {
        acc.finish_reason = cur.finish_reason;
    }
    if (acc.logprobs == null && cur.logprobs != null) {
        acc.logprobs = cur.logprobs;
    }
    if (cur.delta.content != null) {
        if (acc.message.content == null) {
            acc.message.content = cur.delta.content;
        } else {
            acc.message.content += cur.delta.content;
        }
    }
    if (cur.delta.refusal != null) {
        if (acc.message.refusal == null) {
            acc.message.refusal = cur.delta.refusal;
        } else {
            acc.message.refusal += cur.delta.refusal;
        }
    }
    if (cur.delta.tool_calls != null) {
        (_a = acc.message).tool_calls ?? (_a.tool_calls = []);
        const toolCalls = acc.message.tool_calls;
        cur.delta.tool_calls.forEach((toolCall => {
            const existingToolCall = toolCalls[toolCall.index];
            if (existingToolCall != null) {
                toolCalls[toolCall.index] = mergeToolCalls(existingToolCall, toolCall);
                return;
            }
            toolCalls[toolCall.index] = {
                id: toolCall.id ?? "",
                type: "function",
                function: {
                    name: toolCall.function?.name ?? "",
                    arguments: toolCall.function?.arguments ?? ""
                }
            };
        }));
    }
    return acc;
}

function mergeToolCalls(acc, cur) {
    if (cur.function != null) {
        acc.function.arguments += cur.function.arguments ?? "";
        acc.function.name += cur.function.name ?? "";
    }
    acc.id += cur.id ?? "";
    return acc;
}

const ChatGptCompletionMessageUtil = {
    transformCompletionChunk,
    accumulate,
    merge,
    mergeChoice,
    mergeToolCalls
};

async function readAll(stream) {
    const reader = stream.getReader();
    const result = [];
    while (true) {
        const {done, value} = await reader.read();
        if (done) {
            break;
        }
        result.push(value);
    }
    return result;
}

async function reduce(stream, reducer, initial) {
    const reader = stream.getReader();
    const iterator = streamDefaultReaderToAsyncGenerator(reader);
    let acc = initial ?? null;
    for await (const value of iterator) {
        if (acc === null) {
            acc = value;
            continue;
        }
        acc = reducer(acc, value);
    }
    return acc;
}

function from(value) {
    const stream = new ReadableStream({
        start: controller => {
            controller.enqueue(value);
            controller.close();
        }
    });
    return stream;
}

async function* toAsyncGenerator(value) {
    yield value;
}

async function* streamDefaultReaderToAsyncGenerator(reader) {
    while (true) {
        const {done, value} = await reader.read();
        if (done) {
            break;
        }
        yield value;
    }
}

function transform(stream, transformer) {
    const reader = stream.getReader();
    return new ReadableStream({
        pull: async controller => {
            const {done, value} = await reader.read();
            if (!done) {
                controller.enqueue(transformer(value));
            } else {
                controller.close();
            }
        }
    });
}

const StreamUtil = {
    readAll,
    reduce,
    from,
    transform
};

function createOperationSelection(props) {
    return {
        operation: props.operation,
        reason: props.reason,
        toJSON: () => ({
            operation: props.operation.toJSON(),
            reason: props.reason
        })
    };
}

function cancelFunctionFromContext(ctx, reference) {
    const index = ctx.stack.findIndex((item => item.operation.name === reference.name));
    if (index === -1) {
        return;
    }
    const item = ctx.stack[index];
    ctx.stack.splice(index, 1);
    const event = createCancelEvent({
        selection: createOperationSelection({
            operation: item.operation,
            reason: reference.reason
        })
    });
    ctx.dispatch(event);
}

async function call(ctx, operations) {
    return station(ctx, operations, []);
}

async function station(ctx, operations, validateEvents) {
    const completionStream = await ctx.request("call", {
        messages: [ {
            role: "system",
            content: AgenticaDefaultPrompt.write(ctx.config)
        }, ...ctx.histories.map(decodeHistory).flat(), {
            role: "user",
            content: ctx.prompt.contents.map(decodeUserMessageContent)
        }, ...ctx.config?.systemPrompt?.execute === null ? [] : [ {
            role: "system",
            content: ctx.config?.systemPrompt?.execute?.(ctx.histories) ?? AgenticaSystemPrompt.EXECUTE
        } ] ],
        tools: operations.map((s => ({
            type: "function",
            function: {
                name: s.name,
                description: s.function.description,
                parameters: "separated" in s.function && s.function.separated !== undefined ? s.function.separated.llm ?? {
                    type: "object",
                    properties: {},
                    required: [],
                    additionalProperties: false,
                    $defs: {}
                } : s.function.parameters
            }
        }))),
        tool_choice: "auto"
    });
    const chunks = await StreamUtil.readAll(completionStream);
    const completion = ChatGptCompletionMessageUtil.merge(chunks);
    const executes = [];
    for (const choice of completion.choices) {
        for (const tc of choice.message.tool_calls ?? []) {
            if (tc.type === "function") {
                const operation = ctx.operations.flat.get(tc.function.name);
                if (operation === undefined) {
                    continue;
                }
                const call = createCallEvent({
                    id: tc.id,
                    operation,
                    arguments: JSON.parse(tc.function.arguments)
                });
                if (call.operation.protocol === "http") {
                    fillHttpArguments({
                        operation: call.operation,
                        arguments: call.arguments
                    });
                }
                ctx.dispatch(call);
                const exec = await propagate(ctx, call, 0, validateEvents);
                ctx.dispatch(exec);
                executes.push(exec);
                if (isAgenticaContext(ctx)) {
                    cancelFunctionFromContext(ctx, {
                        name: call.operation.name,
                        reason: "completed"
                    });
                }
            }
        }
        if (choice.message.role === "assistant" && choice.message.content != null && choice.message.content.length !== 0) {
            const text = choice.message.content;
            const event = creatAssistantMessageEvent({
                get: () => text,
                done: () => true,
                stream: toAsyncGenerator(text),
                join: async () => Promise.resolve(text)
            });
            ctx.dispatch(event);
        }
    }
    return executes;
}

async function propagate(ctx, call, retry, validateEvents) {
    switch (call.operation.protocol) {
      case "http":
        {
            return propagateHttp({
                ctx,
                operation: call.operation,
                call,
                retry,
                validateEvents
            });
        }

      case "class":
        {
            return propagateClass({
                ctx,
                operation: call.operation,
                call,
                retry,
                validateEvents
            });
        }

      case "mcp":
        {
            return propagateMcp({
                ctx,
                operation: call.operation,
                call,
                retry,
                validateEvents
            });
        }

      default:
        {
            call.operation;
            throw new Error("Unsupported protocol");
        }
    }
}

async function propagateHttp(props) {
    const check = props.operation.function.validate(props.call.arguments);
    if (check.success === false) {
        const ve = createValidateEvent({
            id: props.call.id,
            operation: props.call.operation,
            result: check
        });
        props.ctx.dispatch(ve);
        props.validateEvents.push(ve);
        if (props.retry++ < (props.ctx.config?.retry ?? AgenticaConstant.RETRY)) {
            const trial = await correct(props.ctx, props.call, props.retry, check.errors, props.validateEvents);
            if (trial !== null) {
                return trial;
            }
        }
    }
    try {
        const response = await executeHttpOperation(props.operation, props.call.arguments);
        const success = ((response.status === 400 || response.status === 404 || response.status === 422) && props.retry++ < (props.ctx.config?.retry ?? AgenticaConstant.RETRY) && typeof response.body) === false;
        return (success === false ? await correct(props.ctx, props.call, props.retry, response.body, props.validateEvents) : null) ?? createExecuteEvent({
            operation: props.call.operation,
            arguments: props.call.arguments,
            value: response
        });
    } catch (error) {
        return createExecuteEvent({
            operation: props.call.operation,
            arguments: props.call.arguments,
            value: {
                status: 500,
                headers: {},
                body: error instanceof Error ? {
                    ...error,
                    name: error.name,
                    message: error.message
                } : error
            }
        });
    }
}

async function propagateClass(props) {
    const check = props.operation.function.validate(props.call.arguments);
    if (check.success === false) {
        const ve = createValidateEvent({
            id: props.call.id,
            operation: props.call.operation,
            result: check
        });
        props.ctx.dispatch(ve);
        props.validateEvents.push(ve);
        return (props.retry++ < (props.ctx.config?.retry ?? AgenticaConstant.RETRY) ? await correct(props.ctx, props.call, props.retry, check.errors, props.validateEvents) : null) ?? createExecuteEvent({
            operation: props.call.operation,
            arguments: props.call.arguments,
            value: {
                name: "TypeGuardError",
                message: "Invalid arguments.",
                errors: check.errors
            }
        });
    }
    try {
        const value = await executeClassOperation(props.operation, props.call.arguments);
        return createExecuteEvent({
            operation: props.call.operation,
            arguments: props.call.arguments,
            value
        });
    } catch (error) {
        return createExecuteEvent({
            operation: props.call.operation,
            arguments: props.call.arguments,
            value: error instanceof Error ? {
                ...error,
                name: error.name,
                message: error.message
            } : error
        });
    }
}

async function propagateMcp(props) {
    try {
        const value = await executeMcpOperation(props.operation, props.call.arguments);
        return createExecuteEvent({
            operation: props.call.operation,
            arguments: props.call.arguments,
            value
        });
    } catch (error) {
        return createExecuteEvent({
            operation: props.call.operation,
            arguments: props.call.arguments,
            value: error instanceof Error ? {
                ...error,
                name: error.name,
                message: error.message
            } : error
        });
    }
}

async function executeHttpOperation(operation, operationArguments) {
    const controllerBaseArguments = {
        connection: operation.controller.connection,
        application: operation.controller.application,
        function: operation.function
    };
    return operation.controller.execute !== undefined ? operation.controller.execute({
        ...controllerBaseArguments,
        arguments: operationArguments
    }) : HttpLlm.propagate({
        ...controllerBaseArguments,
        input: operationArguments
    });
}

async function executeClassOperation(operation, operationArguments) {
    const execute = operation.controller.execute;
    if (typeof execute === "function") {
        return await execute({
            application: operation.controller.application,
            function: operation.function,
            arguments: operationArguments
        });
    }
    return execute[operation.function.name](operationArguments);
}

async function executeMcpOperation(operation, operationArguments) {
    return operation.controller.client.callTool({
        method: operation.function.name,
        name: operation.function.name,
        arguments: operationArguments
    }).then((v => v.content));
}

async function correct(ctx, call, retry, error, validateEvents) {
    const completionStream = await ctx.request("call", {
        messages: [ {
            role: "system",
            content: AgenticaDefaultPrompt.write(ctx.config)
        }, ...ctx.histories.map(decodeHistory).flat(), {
            role: "user",
            content: ctx.prompt.contents.map(decodeUserMessageContent)
        }, ...ctx.config?.systemPrompt?.execute === null ? [] : [ {
            role: "system",
            content: ctx.config?.systemPrompt?.execute?.(ctx.histories) ?? AgenticaSystemPrompt.EXECUTE
        } ], {
            role: "assistant",
            tool_calls: [ {
                type: "function",
                id: call.id,
                function: {
                    name: call.operation.name,
                    arguments: JSON.stringify(call.arguments)
                }
            } ]
        }, {
            role: "tool",
            content: typeof error === "string" ? error : JSON.stringify(error),
            tool_call_id: call.id
        }, {
            role: "system",
            content: ctx.config?.systemPrompt?.validate?.(validateEvents.slice(0, -1)) ?? [ AgenticaSystemPrompt.VALIDATE, ...validateEvents.length > 1 ? [ "", AgenticaSystemPrompt.VALIDATE_REPEATED.replace("${{HISTORICAL_ERRORS}}", JSON.stringify(validateEvents.slice(0, -1).map((e => e.result.errors)))) ] : [] ].join("\n")
        } ],
        tools: [ {
            type: "function",
            function: {
                name: call.operation.name,
                description: call.operation.function.description,
                parameters: "separated" in call.operation.function && call.operation.function.separated !== undefined ? call.operation.function.separated?.llm ?? {
                    $defs: {},
                    type: "object",
                    properties: {},
                    additionalProperties: false,
                    required: []
                } : call.operation.function.parameters
            }
        } ],
        tool_choice: {
            type: "function",
            function: {
                name: call.operation.name
            }
        }
    });
    const chunks = await StreamUtil.readAll(completionStream);
    const completion = ChatGptCompletionMessageUtil.merge(chunks);
    const toolCall = (completion.choices[0]?.message.tool_calls ?? []).find((tc => tc.type === "function" && tc.function.name === call.operation.name));
    if (toolCall === undefined) {
        return null;
    }
    return propagate(ctx, createCallEvent({
        id: toolCall.id,
        operation: call.operation,
        arguments: JSON.parse(toolCall.function.arguments)
    }), retry, validateEvents);
}

function fillHttpArguments(props) {
    if (props.operation.protocol !== "http") {
        return;
    }
    const route = props.operation.function.route();
    if (route.body !== null && route.operation().requestBody?.required === true && "body" in props.arguments && isObject(props.operation.function.parameters.$defs, props.operation.function.parameters.properties.body)) {
        props.arguments.body = {};
    }
    if (route.query !== null && "query" in props.arguments && props.arguments.query === undefined) {
        props.arguments.query = {};
    }
}

function isObject($defs, schema) {
    return ChatGptTypeChecker.isObject(schema) || ChatGptTypeChecker.isReference(schema) && isObject($defs, $defs[schema.$ref.split("/").at(-1)]) || ChatGptTypeChecker.isAnyOf(schema) && schema.anyOf.every((schema => isObject($defs, schema))) || LlmTypeCheckerV3_1.isOneOf(schema) && schema.oneOf.every((schema => isObject($defs, schema)));
}

const CONTAINER$1 = {
    functions: [ {
        name: "cancelFunctions",
        parameters: {
            description: " Properties of the function\n\n------------------------------\n\nCurrent Type: {@link __IChatFunctionReference.IProps}",
            type: "object",
            properties: {
                functions: {
                    title: "List of target functions",
                    description: "List of target functions.",
                    type: "array",
                    items: {
                        $ref: "#/$defs/___IChatFunctionReference"
                    }
                }
            },
            required: [ "functions" ],
            additionalProperties: false,
            $defs: {
                ___IChatFunctionReference: {
                    type: "object",
                    properties: {
                        reason: {
                            title: "The reason of the function selection",
                            description: "The reason of the function selection.\n\nJust write the reason why you've determined to select this function.",
                            type: "string"
                        },
                        name: {
                            title: "Name of the target function to call",
                            description: "Name of the target function to call.",
                            type: "string"
                        }
                    },
                    required: [ "reason", "name" ]
                }
            }
        },
        description: "Cancel a function from the candidate list to call.\n\nIf you A.I. agent has understood that the user wants to cancel\nsome candidate functions to call from the conversation, please cancel\nthem through this function.\n\nAlso, when you A.I. find a function that has been selected by the candidate\npooling, cancel the function by calling this function. For reference, the\ncandidate pooling means that user wants only one function to call, but you A.I.\nagent selects multiple candidate functions because the A.I. agent can't specify\nonly one thing due to lack of specificity or homogeneity of candidate functions.\n\nAdditionally, if you A.I. agent wants to cancel same function multiply, you can\ndo it by assigning the same function name multiply in the `functions` property.",
        validate: (() => {
            const _io0 = input => Array.isArray(input.functions) && input.functions.every((elem => "object" === typeof elem && null !== elem && _io1(elem)));
            const _io1 = input => "string" === typeof input.reason && "string" === typeof input.name;
            const _vo0 = (input, _path, _exceptionable = true) => [ (Array.isArray(input.functions) || _report(_exceptionable, {
                path: _path + ".functions",
                expected: "Array<___IChatFunctionReference>",
                value: input.functions
            })) && input.functions.map(((elem, _index2) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
                path: _path + ".functions[" + _index2 + "]",
                expected: "___IChatFunctionReference",
                value: elem
            })) && _vo1(elem, _path + ".functions[" + _index2 + "]", _exceptionable) || _report(_exceptionable, {
                path: _path + ".functions[" + _index2 + "]",
                expected: "___IChatFunctionReference",
                value: elem
            }))).every((flag => flag)) || _report(_exceptionable, {
                path: _path + ".functions",
                expected: "Array<___IChatFunctionReference>",
                value: input.functions
            }) ].every((flag => flag));
            const _vo1 = (input, _path, _exceptionable = true) => [ "string" === typeof input.reason || _report(_exceptionable, {
                path: _path + ".reason",
                expected: "string",
                value: input.reason
            }), "string" === typeof input.name || _report(_exceptionable, {
                path: _path + ".name",
                expected: "string",
                value: input.name
            }) ].every((flag => flag));
            const __is = input => "object" === typeof input && null !== input && _io0(input);
            let errors;
            let _report;
            return input => {
                if (false === __is(input)) {
                    errors = [];
                    _report = __typia_transform__validateReport._validateReport(errors);
                    ((input, _path, _exceptionable = true) => ("object" === typeof input && null !== input || _report(true, {
                        path: _path + "",
                        expected: "__IChatFunctionReference.IProps",
                        value: input
                    })) && _vo0(input, _path + "", true) || _report(true, {
                        path: _path + "",
                        expected: "__IChatFunctionReference.IProps",
                        value: input
                    }))(input, "$input", true);
                    const success = 0 === errors.length;
                    return success ? {
                        success,
                        data: input
                    } : {
                        success,
                        errors,
                        data: input
                    };
                }
                return {
                    success: true,
                    data: input
                };
            };
        })()
    } ]
};

async function cancel(ctx) {
    if (ctx.operations.divided === undefined) {
        return step$1(ctx, ctx.operations.array, 0);
    }
    const stacks = ctx.operations.divided.map((() => []));
    const events = [];
    await Promise.all(ctx.operations.divided.map((async (operations, i) => step$1({
        ...ctx,
        stack: stacks[i],
        dispatch: e => {
            events.push(e);
            return e;
        }
    }, operations, 0))));
    if ((ctx.config?.eliticism ?? AgenticaConstant.ELITICISM) === true && stacks.some((s => s.length !== 0))) {
        return step$1(ctx, stacks.flat().map((s => ctx.operations.group.get(s.operation.controller.name).get(s.operation.function.name))), 0);
    } else {
        const cancelled = events.filter((e => e.type === "cancel"));
        (cancelled.length !== 0 ? cancelled : events).forEach(ctx.dispatch);
    }
}

async function step$1(ctx, operations, retry, failures) {
    const completionStream = await ctx.request("cancel", {
        messages: [ {
            role: "system",
            content: AgenticaDefaultPrompt.write(ctx.config)
        }, {
            role: "assistant",
            tool_calls: [ {
                type: "function",
                id: "getApiFunctions",
                function: {
                    name: "getApiFunctions",
                    arguments: JSON.stringify({})
                }
            } ]
        }, {
            role: "tool",
            tool_call_id: "getApiFunctions",
            content: JSON.stringify(operations.map((op => ({
                name: op.name,
                description: op.function.description,
                ...op.protocol === "http" ? {
                    method: op.function.method,
                    path: op.function.path,
                    tags: op.function.tags
                } : {}
            }))))
        }, ...ctx.histories.map(decodeHistory).flat(), {
            role: "user",
            content: ctx.prompt.contents.map(decodeUserMessageContent)
        }, {
            role: "system",
            content: ctx.config?.systemPrompt?.cancel?.(ctx.histories) ?? AgenticaSystemPrompt.CANCEL
        }, ...emendMessages$1(failures ?? []) ],
        tools: [ {
            type: "function",
            function: {
                name: CONTAINER$1.functions[0].name,
                description: CONTAINER$1.functions[0].description,
                parameters: CONTAINER$1.functions[0].parameters
            }
        } ],
        tool_choice: retry === 0 ? "auto" : {
            type: "function",
            function: {
                name: CONTAINER$1.functions[0].name
            }
        }
    });
    const chunks = await StreamUtil.readAll(completionStream);
    const completion = ChatGptCompletionMessageUtil.merge(chunks);
    if (retry++ < (ctx.config?.retry ?? AgenticaConstant.RETRY)) {
        const failures = [];
        for (const choice of completion.choices) {
            for (const tc of choice.message.tool_calls ?? []) {
                if (tc.function.name !== "cancelFunctions") {
                    continue;
                }
                const input = JSON.parse(tc.function.arguments);
                const validation = (() => {
                    const _io0 = input => Array.isArray(input.functions) && input.functions.every((elem => "object" === typeof elem && null !== elem && _io1(elem)));
                    const _io1 = input => "string" === typeof input.reason && "string" === typeof input.name;
                    const _vo0 = (input, _path, _exceptionable = true) => [ (Array.isArray(input.functions) || _report(_exceptionable, {
                        path: _path + ".functions",
                        expected: "Array<___IChatFunctionReference>",
                        value: input.functions
                    })) && input.functions.map(((elem, _index2) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
                        path: _path + ".functions[" + _index2 + "]",
                        expected: "___IChatFunctionReference",
                        value: elem
                    })) && _vo1(elem, _path + ".functions[" + _index2 + "]", _exceptionable) || _report(_exceptionable, {
                        path: _path + ".functions[" + _index2 + "]",
                        expected: "___IChatFunctionReference",
                        value: elem
                    }))).every((flag => flag)) || _report(_exceptionable, {
                        path: _path + ".functions",
                        expected: "Array<___IChatFunctionReference>",
                        value: input.functions
                    }) ].every((flag => flag));
                    const _vo1 = (input, _path, _exceptionable = true) => [ "string" === typeof input.reason || _report(_exceptionable, {
                        path: _path + ".reason",
                        expected: "string",
                        value: input.reason
                    }), "string" === typeof input.name || _report(_exceptionable, {
                        path: _path + ".name",
                        expected: "string",
                        value: input.name
                    }) ].every((flag => flag));
                    const __is = input => "object" === typeof input && null !== input && _io0(input);
                    let errors;
                    let _report;
                    return input => {
                        if (false === __is(input)) {
                            errors = [];
                            _report = __typia_transform__validateReport._validateReport(errors);
                            ((input, _path, _exceptionable = true) => ("object" === typeof input && null !== input || _report(true, {
                                path: _path + "",
                                expected: "__IChatFunctionReference.IProps",
                                value: input
                            })) && _vo0(input, _path + "", true) || _report(true, {
                                path: _path + "",
                                expected: "__IChatFunctionReference.IProps",
                                value: input
                            }))(input, "$input", true);
                            const success = 0 === errors.length;
                            return success ? {
                                success,
                                data: input
                            } : {
                                success,
                                errors,
                                data: input
                            };
                        }
                        return {
                            success: true,
                            data: input
                        };
                    };
                })()(input);
                if (validation.success === false) {
                    failures.push({
                        id: tc.id,
                        name: tc.function.name,
                        validation
                    });
                }
            }
        }
        if (failures.length > 0) {
            return step$1(ctx, operations, retry, failures);
        }
    }
    for (const choice of completion.choices) {
        if (choice.message.tool_calls != null) {
            for (const tc of choice.message.tool_calls) {
                if (tc.type !== "function") {
                    continue;
                } else if (tc.function.name !== "cancelFunctions") {
                    continue;
                }
                const input = (() => {
                    const _io0 = input => Array.isArray(input.functions) && input.functions.every((elem => "object" === typeof elem && null !== elem && _io1(elem)));
                    const _io1 = input => "string" === typeof input.reason && "string" === typeof input.name;
                    const __is = input => "object" === typeof input && null !== input && _io0(input);
                    return input => {
                        input = JSON.parse(input);
                        return __is(input) ? input : null;
                    };
                })()(tc.function.arguments);
                if (input === null) {
                    continue;
                }
                for (const reference of input.functions) {
                    cancelFunctionFromContext(ctx, reference);
                }
            }
        }
    }
}

function emendMessages$1(failures) {
    return failures.map((f => [ {
        role: "assistant",
        tool_calls: [ {
            type: "function",
            id: f.id,
            function: {
                name: f.name,
                arguments: JSON.stringify(f.validation.data)
            }
        } ]
    }, {
        role: "tool",
        content: JSON.stringify(f.validation.errors),
        tool_call_id: f.id
    }, {
        role: "system",
        content: [ "You A.I. assistant has composed wrong typed arguments.", "", "Correct it at the next function calling." ].join("\n")
    } ])).flat();
}

class AsyncQueueClosedError extends Error {
    constructor(message) {
        super(message);
        this.name = "AsyncQueueClosedError";
    }
}

class AsyncQueue {
    constructor() {
        this.queue = [];
        this.resolvers = [];
        this.closeResolvers = [];
        this.emptyResolvers = [];
        this.closed = false;
    }
    enqueue(item) {
        if (this.closed) {
            console.error(new AsyncQueueClosedError("Cannot enqueue item: queue is closed."));
            return;
        }
        this.queue.push(item);
        if (this.resolvers.length > 0) {
            this.resolvers.shift()?.({
                value: this.queue.shift(),
                done: false
            });
        }
    }
    async dequeue() {
        const item = (() => {
            if (!this.isEmpty()) {
                return {
                    value: this.queue.shift(),
                    done: false
                };
            }
            if (this.isClosed()) {
                return {
                    value: undefined,
                    done: true
                };
            }
            return null;
        })();
        if (this.isEmpty() && this.emptyResolvers.length !== 0) {
            this.emptyResolvers.forEach((resolve => resolve()));
            this.emptyResolvers = [];
        }
        if (item !== null) {
            return item;
        }
        return new Promise((resolve => this.resolvers.push(resolve)));
    }
    isEmpty() {
        return this.queue.length === 0;
    }
    isClosed() {
        return this.closed;
    }
    done() {
        return this.isClosed() && this.isEmpty();
    }
    close() {
        this.closed = true;
        while (this.resolvers.length > 0) {
            this.resolvers.shift()?.({
                value: undefined,
                done: true
            });
        }
        this.closeResolvers.forEach((resolve => resolve()));
    }
    async waitUntilEmpty() {
        if (this.isEmpty()) {
            return Promise.resolve();
        }
        return new Promise((resolve => {
            this.emptyResolvers.push(resolve);
        }));
    }
    async waitClosed() {
        if (this.isClosed()) {
            return Promise.resolve();
        }
        return new Promise((resolve => {
            this.closeResolvers.push(resolve);
        }));
    }
}

class MPSC {
    constructor() {
        this.queue = new AsyncQueue;
        this.consumer = new ReadableStream({
            pull: async controller => {
                const {value, done} = await this.queue.dequeue();
                if (done === true) {
                    controller.close();
                    return;
                }
                controller.enqueue(value);
            }
        });
    }
    produce(chunk) {
        this.queue.enqueue(chunk);
    }
    close() {
        this.queue.close();
    }
    done() {
        return this.queue.done();
    }
    async waitClosed() {
        await this.queue.waitClosed();
    }
    async waitUntilEmpty() {
        await this.queue.waitUntilEmpty();
    }
}

async function describe(ctx, histories) {
    if (histories.length === 0) {
        return;
    }
    const completionStream = await ctx.request("describe", {
        messages: [ {
            role: "system",
            content: AgenticaDefaultPrompt.write(ctx.config)
        }, ...histories.map(decodeHistory).flat(), {
            role: "system",
            content: ctx.config?.systemPrompt?.describe?.(histories) ?? AgenticaSystemPrompt.DESCRIBE
        } ]
    });
    const describeContext = [];
    await StreamUtil.reduce(completionStream, (async (accPromise, chunk) => {
        const acc = await accPromise;
        const registerContext = choices => {
            for (const choice of choices) {
                if (choice.finish_reason != null) {
                    describeContext[choice.index].mpsc.close();
                    continue;
                }
                if (choice.delta.content == null) {
                    continue;
                }
                if (describeContext[choice.index] != null) {
                    describeContext[choice.index].content += choice.delta.content;
                    describeContext[choice.index].mpsc.produce(choice.delta.content);
                    continue;
                }
                const mpsc = new MPSC;
                describeContext[choice.index] = {
                    content: choice.delta.content,
                    mpsc
                };
                mpsc.produce(choice.delta.content);
                const event = createDescribeEvent({
                    executes: histories,
                    stream: streamDefaultReaderToAsyncGenerator(mpsc.consumer.getReader()),
                    done: () => mpsc.done(),
                    get: () => describeContext[choice.index]?.content ?? "",
                    join: async () => {
                        await mpsc.waitClosed();
                        return describeContext[choice.index].content;
                    }
                });
                ctx.dispatch(event);
            }
        };
        if (acc.object === "chat.completion.chunk") {
            registerContext([ acc, chunk ].flatMap((v => v.choices)));
            return ChatGptCompletionMessageUtil.merge([ acc, chunk ]);
        }
        registerContext(chunk.choices);
        return ChatGptCompletionMessageUtil.accumulate(acc, chunk);
    }));
}

const ChatGptDescribeFunctionAgent = {
    execute: describe
};

const FUNCTION = {
    functions: [ {
        name: "getApiFunctions",
        parameters: {
            description: "Current Type: {@link object}",
            type: "object",
            properties: {},
            required: [],
            additionalProperties: false,
            $defs: {
                IHttpLlmFunctionchatgpt: {
                    description: "LLM function calling schema from HTTP (OpenAPI) operation.\n\n`IHttpLlmFunction` is a data structure representing a function converted from\nthe {@link OpenApi.IOperation OpenAPI operation}, used for the LLM (Large\nLanguage Model) function calling. It's a typical RPC (Remote Procedure Call)\nstructure containing the function {@link name}, {@link parameters}, and\n{@link output return type}.\n\nIf you provide this `IHttpLlmFunction` data to the LLM provider like\n\"OpenAI\", the \"OpenAI\" will compose a function arguments by analyzing\nconversations with the user. With the LLM composed arguments, you can execute\nthe function through {@link LlmFetcher.execute} and get the result.\n\nFor reference, different between `IHttpLlmFunction` and its origin source\n{@link OpenApi.IOperation} is, `IHttpLlmFunction` has converted every type\nschema information from {@link OpenApi.IJsonSchema} to {@link ILlmSchemaV3} to\nescape {@link OpenApi.IJsonSchema.IReference reference types}, and downgrade\nthe version of the JSON schema to OpenAPI 3.0. It's because LLM function call\nfeature cannot understand both reference types and OpenAPI 3.1\nspecification.\n\nAdditionally, the properties' rule is:\n\n- `pathParameters`: Path parameters of {@link OpenApi.IOperation.parameters}\n- `query`: Query parameter of {@link IHttpMigrateRoute.query}\n- `body`: Body parameter of {@link IHttpMigrateRoute.body}\n\n```typescript\n{\n  ...pathParameters,\n  query,\n  body,\n}\n```\n\n### Description of {@link parameters} property:\n\n> List of parameter types.\n> \n> If you've configured {@link IHttpLlmApplication.IOptions.keyword} as `true`,\n> number of {@link IHttpLlmFunction.parameters} are always 1 and the first\n> parameter's type is always {@link ILlmSchemaV3.IObject}. The properties'\n> rule is:\n> \n> - `pathParameters`: Path parameters of {@link IHttpMigrateRoute.parameters}\n> - `query`: Query parameter of {@link IHttpMigrateRoute.query}\n> - `body`: Body parameter of {@link IHttpMigrateRoute.body}\n> \n> ```typescript\n> {\n>   ...pathParameters,\n>   query,\n>   body,\n> }\n> ```\n> \n> Otherwise, the parameters would be multiple, and the sequence of the\n> parameters are following below rules:\n> \n> ```typescript\n> [\n>   ...pathParameters,\n>   ...(query ? [query] : []),\n>   ...(body ? [body] : []),\n> ];\n> ```\n\n### Description of {@link separated} property:\n\n> Collection of separated parameters.\n> \n> Filled only when {@link IHttpLlmApplication.IOptions.separate} is\n> configured.",
                    type: "object",
                    properties: {
                        method: {
                            title: "HTTP method of the endpoint",
                            description: "HTTP method of the endpoint.",
                            type: "string",
                            enum: [ "get", "post", "patch", "put", "delete" ]
                        },
                        path: {
                            title: "Path of the endpoint",
                            description: "Path of the endpoint.",
                            type: "string"
                        },
                        name: {
                            title: "Representative name of the function",
                            description: "Representative name of the function.\n\nThe `name` is a repsentative name identifying the function in the\n{@link IHttpLlmApplication}. The `name` value is just composed by joining\nthe {@link IHttpMigrateRoute.accessor} by underscore `_` character.\n\nHere is the composition rule of the {@link IHttpMigrateRoute.accessor}:\n\n> The `accessor` is composed with the following rules. At first, namespaces\n> are composed by static directory names in the {@link path}. Parametric\n> symbols represented by `:param` or `{param}` cannot be a part of the\n> namespace.\n\n> Instead, they would be a part of the function name. The function name is\n> composed with the {@link method HTTP method} and parametric symbols like\n> `getByParam` or `postByParam`. If there are multiple path parameters, they\n> would be concatenated by `And` like `getByParam1AndParam2`.\n\n> For refefence, if the {@link operation}'s {@link method} is `delete`, the\n> function name would be replaced to `erase` instead of `delete`. It is the\n> reason why the `delete` is a reserved keyword in many programming\n> languages.\n\n> - Example 1\n\n>   - Path: `POST /shopping/sellers/sales`\n>   - Accessor: `shopping.sellers.sales.post`\n> - Example 2\n\n>   - Endpoint: `GET\n>       /shoppings/sellers/sales/:saleId/reviews/:reviewId/comments/:id\n>   - Accessor:\n>       `shoppings.sellers.sales.reviews.getBySaleIdAndReviewIdAndCommentId`\n\n\n@maxLength 64",
                            type: "string"
                        },
                        parameters: {
                            title: "List of parameter types",
                            $ref: "#/$defs/IChatGptSchema.IParameters"
                        },
                        separated: {
                            title: "Collection of separated parameters",
                            $ref: "#/$defs/IHttpLlmFunction.ISeparatedchatgpt"
                        },
                        output: {
                            title: "Expected return type",
                            description: "Expected return type.\n\nIf the target operation returns nothing (`void`), the `output` would be\n`undefined`.",
                            anyOf: [ {
                                $ref: "#/$defs/IChatGptSchema.IString"
                            }, {
                                $ref: "#/$defs/IChatGptSchema.INumber"
                            }, {
                                $ref: "#/$defs/IChatGptSchema.IInteger"
                            }, {
                                $ref: "#/$defs/IChatGptSchema.IBoolean"
                            }, {
                                $ref: "#/$defs/IChatGptSchema.IArray"
                            }, {
                                $ref: "#/$defs/IChatGptSchema.IObject"
                            }, {
                                $ref: "#/$defs/IChatGptSchema.IReference"
                            }, {
                                $ref: "#/$defs/IChatGptSchema.IAnyOf"
                            }, {
                                $ref: "#/$defs/IChatGptSchema.IUnknown"
                            }, {
                                $ref: "#/$defs/IChatGptSchema.INull"
                            } ]
                        },
                        description: {
                            title: "Description of the function",
                            description: "Description of the function.\n\n`IHttpLlmFunction.description` is composed by below rule:\n\n1. Starts from the {@link OpenApi.IOperation.summary} paragraph.\n2. The next paragraphs are filled with the\n   {@link OpenApi.IOperation.description}. By the way, if the first\n   paragraph of {@link OpenApi.IOperation.description} is same with the\n   {@link OpenApi.IOperation.summary}, it would not be duplicated.\n3. Parameters' descriptions are added with `@param` tag.\n4. {@link OpenApi.IOperation.security Security requirements} are added with\n   `@security` tag.\n5. Tag names are added with `@tag` tag.\n6. If {@link OpenApi.IOperation.deprecated}, `@deprecated` tag is added.\n\nFor reference, the `description` is very important property to teach the\npurpose of the function to the LLM (Language Large Model), and LLM actually\ndetermines which function to call by the description.\n\nAlso, when the LLM conversates with the user, the `description` is used to\nexplain the function to the user. Therefore, the `description` property has\nthe highest priority, and you have to consider it.",
                            type: "string"
                        },
                        deprecated: {
                            title: "Whether the function is deprecated or not",
                            description: "Whether the function is deprecated or not.\n\nIf the `deprecated` is `true`, the function is not recommended to use.\n\nLLM (Large Language Model) may not use the deprecated function.",
                            type: "boolean"
                        },
                        tags: {
                            title: "Category tags for the function",
                            description: "Category tags for the function.\n\nSame with {@link OpenApi.IOperation.tags} indicating the category of the\nfunction.",
                            type: "array",
                            items: {
                                type: "string"
                            }
                        }
                    },
                    required: [ "method", "path", "name", "parameters" ]
                },
                "IChatGptSchema.IParameters": {
                    description: "Type of the function parameters.\n\n`IChatGptSchema.IParameters` is a type defining a function's parameters as\na keyworded object type.\n\nIt also can be utilized for the structured output metadata.\n\n### Description of {@link $defs} property:\n\n> Collection of the named types.\n\n### Description of {@link properties} property:\n\n> Properties of the object.\n> \n> The `properties` means a list of key-value pairs of the object's regular\n> properties. The key is the name of the regular property, and the value is\n> the type schema info.\n\n### Description of {@link examples} property:\n\n> List of example values as key-value pairs.",
                    type: "object",
                    properties: {
                        $defs: {
                            title: "Collection of the named types",
                            $ref: "#/$defs/RecordstringIChatGptSchema"
                        },
                        additionalProperties: {
                            title: "Additional properties' info",
                            description: "Additional properties' info.\n\nThe `additionalProperties` means the type schema info of the additional\nproperties that are not listed in the {@link properties}.\n\nBy the way, it is not allowed in the parameters level.",
                            type: "boolean",
                            enum: [ false ]
                        },
                        type: {
                            title: "Discriminator value of the type",
                            description: "Discriminator value of the type.",
                            type: "string",
                            enum: [ "object" ]
                        },
                        properties: {
                            title: "Properties of the object",
                            $ref: "#/$defs/RecordstringIChatGptSchema"
                        },
                        required: {
                            title: "List of key values of the required properties",
                            description: 'List of key values of the required properties.\n\nThe `required` means a list of the key values of the required\n{@link properties}. If some property key is not listed in the `required`\nlist, it means that property is optional. Otherwise some property key\nexists in the `required` list, it means that the property must be\nfilled.\n\nBelow is an example of the {@link properties} and `required`.\n\n```typescript\ninterface SomeObject {\n  id: string;\n  email: string;\n  name?: string;\n}\n```\n\nAs you can see, `id` and `email` {@link properties} are {@link required},\nso that they are listed in the `required` list.\n\n```json\n{\n  "type": "object",\n  "properties": {\n    "id": { "type": "string" },\n    "email": { "type": "string" },\n    "name": { "type": "string" }\n  },\n  "required": ["id", "email"]\n}\n```',
                            type: "array",
                            items: {
                                type: "string"
                            }
                        },
                        title: {
                            title: "Title of the schema",
                            description: "Title of the schema.",
                            type: "string"
                        },
                        description: {
                            title: "Detailed description of the schema",
                            description: "Detailed description of the schema.",
                            type: "string"
                        },
                        deprecated: {
                            title: "Whether the type is deprecated or not",
                            description: "Whether the type is deprecated or not.",
                            type: "boolean"
                        },
                        example: {
                            title: "Example value",
                            description: "Example value."
                        },
                        examples: {
                            title: "List of example values as key-value pairs",
                            $ref: "#/$defs/Recordstringany"
                        }
                    },
                    required: [ "$defs", "additionalProperties", "type", "properties", "required" ]
                },
                RecordstringIChatGptSchema: {
                    description: "Construct a type with a set of properties K of type T",
                    type: "object",
                    properties: {},
                    required: [],
                    additionalProperties: {
                        $ref: "#/$defs/IChatGptSchema"
                    }
                },
                IChatGptSchema: {
                    title: "Type schema info of the ChatGPT",
                    description: 'Type schema info of the ChatGPT.\n\n`IChatGptSchema` is a type schema info of the ChatGPT function calling.\n\n`IChatGptSchema` basically follows the JSON schema definition of the OpenAPI\nv3.1 speciifcation; {@link OpenApiV3_1.IJsonSchema}.\n\nHowever, the `IChatGptSchema` does not follow the entire specification of the\nOpenAPI v3.1. It has own specific restrictions and definitions. Here is the\nlist of how `IChatGptSchema` is different with the OpenAPI v3.1 JSON schema.\n\n- Decompose mixed type: {@link OpenApiV3_1.IJsonSchema.IMixed}\n- Resolve nullable property:\n  {@link OpenApiV3_1.IJsonSchema.__ISignificant.nullable}\n- Tuple type is banned: {@link OpenApiV3_1.IJsonSchema.ITuple.prefixItems}\n- Constant type is banned: {@link OpenApiV3_1.IJsonSchema.IConstant}\n- Merge {@link OpenApiV3_1.IJsonSchema.IOneOf} to {@link IChatGptSchema.IAnOf}\n- Merge {@link OpenApiV3_1.IJsonSchema.IAllOf} to {@link IChatGptSchema.IObject}\n- Merge {@link OpenApiV3_1.IJsonSchema.IRecursiveReference} to\n  {@link IChatGptSchema.IReference}\n- When {@link IChatGptSchema.IConfig.strict} mode\n\n  - Every object properties must be required\n  - Do not allow {@link IChatGptSchema.IObject.additionalProperties}\n\nIf compare with the {@link OpenApi.IJsonSchema}, the emended JSON schema\nspecification,\n\n- {@link IChatGptSchema.IAnyOf} instead of the {@link OpenApi.IJsonSchema.IOneOf}\n- {@link IChatGptSchema.IParameters.$defs} instead of the\n  {@link OpenApi.IJsonSchema.IComponents.schemas}\n- {@link IChatGptSchema.IString.enum} instead of the\n  {@link OpenApi.IJsonSchema.IConstant}\n- {@link IChatGptSchema.additionalProperties} is fixed to `false`\n- No tuple type {@link OpenApi.IJsonSchema.ITuple} support\n- When {@link IChatGptSchema.IConfig.strict} mode\n\n  - Every object properties must be required\n  - Do not allow {@link IChatGptSchema.IObject.additionalProperties}\n\nFor reference, if you\'ve composed the `IChatGptSchema` type with the\n{@link IChatGptSchema.IConfig.reference} `false` option (default is `false`),\nonly the recursived named types would be archived into the\n{@link IChatGptSchema.IParameters.$defs}, and the others would be ecaped from\nthe {@link IChatGptSchema.IReference} type.\n\nAlso, OpenAI has banned below constraint properties. Instead,\n`IChatGptSchema` fills the {@link IChatGptSchema.__IAttribute.description}\nproperty with the comment text like `"@format uuid"`.\n\n- {@link OpenApi.IJsonSchema.INumber.minimum}\n- {@link OpenApi.IJsonSchema.INumber.maximum}\n- {@link OpenApi.IJsonSchema.INumber.multipleOf}\n- {@link OpenApi.IJsonSchema.IString.minLength}\n- {@link OpenApi.IJsonSchema.IString.maxLength}\n- {@link OpenApi.IJsonSchema.IString.format}\n- {@link OpenApi.IJsonSchema.IString.pattern}\n- {@link OpenApi.IJsonSchema.IString.contentMediaType}\n- {@link OpenApi.IJsonSchema.IString.default}\n- {@link OpenApi.IJsonSchema.IArray.minItems}\n- {@link OpenApi.IJsonSchema.IArray.maxItems}\n- {@link OpenApi.IJsonSchema.IArray.unique}\n\nAdditionally, OpenAI cannot define the `description` property to the\n{@link IChatGptSchema.IReference} type, and even does not understand the\ncapsulization to the {@link IChatGptSchema.IAnyOf} type. Therefore, the\n`description` is written to the parent object type, not the reference type.\n\n```json\n{\n  "type": "object",\n  "description": "### Description of {@link something} property.\\n\\n> Hello?",\n  "properties": {\n    "something": {\n      "$ref": "#/$defs/SomeObject"\n    }\n  }\n}\n```',
                    anyOf: [ {
                        $ref: "#/$defs/IChatGptSchema.IBoolean"
                    }, {
                        $ref: "#/$defs/IChatGptSchema.IInteger"
                    }, {
                        $ref: "#/$defs/IChatGptSchema.INumber"
                    }, {
                        $ref: "#/$defs/IChatGptSchema.IString"
                    }, {
                        $ref: "#/$defs/IChatGptSchema.IArray"
                    }, {
                        $ref: "#/$defs/IChatGptSchema.IObject"
                    }, {
                        $ref: "#/$defs/IChatGptSchema.IReference"
                    }, {
                        $ref: "#/$defs/IChatGptSchema.IAnyOf"
                    }, {
                        $ref: "#/$defs/IChatGptSchema.INull"
                    }, {
                        $ref: "#/$defs/IChatGptSchema.IUnknown"
                    } ]
                },
                "IChatGptSchema.IBoolean": {
                    description: "Boolean type info.\n\n### Description of {@link examples} property:\n\n> List of example values as key-value pairs.",
                    type: "object",
                    properties: {
                        enum: {
                            title: "Enumeration values",
                            description: "Enumeration values.",
                            type: "array",
                            items: {
                                type: "boolean"
                            }
                        },
                        type: {
                            title: "Discriminator value of the type",
                            description: "Discriminator value of the type.",
                            type: "string",
                            enum: [ "boolean" ]
                        },
                        title: {
                            title: "Title of the schema",
                            description: "Title of the schema.",
                            type: "string"
                        },
                        description: {
                            title: "Detailed description of the schema",
                            description: "Detailed description of the schema.",
                            type: "string"
                        },
                        deprecated: {
                            title: "Whether the type is deprecated or not",
                            description: "Whether the type is deprecated or not.",
                            type: "boolean"
                        },
                        example: {
                            title: "Example value",
                            description: "Example value."
                        },
                        examples: {
                            title: "List of example values as key-value pairs",
                            $ref: "#/$defs/Recordstringany"
                        }
                    },
                    required: [ "type" ]
                },
                Recordstringany: {
                    description: "Construct a type with a set of properties K of type T",
                    type: "object",
                    properties: {},
                    required: [],
                    additionalProperties: {}
                },
                "IChatGptSchema.IInteger": {
                    description: "Integer type info.\n\n### Description of {@link examples} property:\n\n> List of example values as key-value pairs.",
                    type: "object",
                    properties: {
                        enum: {
                            title: "Enumeration values",
                            description: "Enumeration values.",
                            type: "array",
                            items: {
                                type: "number"
                            }
                        },
                        type: {
                            title: "Discriminator value of the type",
                            description: "Discriminator value of the type.",
                            type: "string",
                            enum: [ "integer" ]
                        },
                        title: {
                            title: "Title of the schema",
                            description: "Title of the schema.",
                            type: "string"
                        },
                        description: {
                            title: "Detailed description of the schema",
                            description: "Detailed description of the schema.",
                            type: "string"
                        },
                        deprecated: {
                            title: "Whether the type is deprecated or not",
                            description: "Whether the type is deprecated or not.",
                            type: "boolean"
                        },
                        example: {
                            title: "Example value",
                            description: "Example value."
                        },
                        examples: {
                            title: "List of example values as key-value pairs",
                            $ref: "#/$defs/Recordstringany"
                        }
                    },
                    required: [ "type" ]
                },
                "IChatGptSchema.INumber": {
                    description: "Number (double) type info.\n\n### Description of {@link examples} property:\n\n> List of example values as key-value pairs.",
                    type: "object",
                    properties: {
                        enum: {
                            title: "Enumeration values",
                            description: "Enumeration values.",
                            type: "array",
                            items: {
                                type: "number"
                            }
                        },
                        type: {
                            title: "Discriminator value of the type",
                            description: "Discriminator value of the type.",
                            type: "string",
                            enum: [ "number" ]
                        },
                        title: {
                            title: "Title of the schema",
                            description: "Title of the schema.",
                            type: "string"
                        },
                        description: {
                            title: "Detailed description of the schema",
                            description: "Detailed description of the schema.",
                            type: "string"
                        },
                        deprecated: {
                            title: "Whether the type is deprecated or not",
                            description: "Whether the type is deprecated or not.",
                            type: "boolean"
                        },
                        example: {
                            title: "Example value",
                            description: "Example value."
                        },
                        examples: {
                            title: "List of example values as key-value pairs",
                            $ref: "#/$defs/Recordstringany"
                        }
                    },
                    required: [ "type" ]
                },
                "IChatGptSchema.IString": {
                    description: "String type info.\n\n### Description of {@link examples} property:\n\n> List of example values as key-value pairs.",
                    type: "object",
                    properties: {
                        enum: {
                            title: "Enumeration values",
                            description: "Enumeration values.",
                            type: "array",
                            items: {
                                type: "string"
                            }
                        },
                        type: {
                            title: "Discriminator value of the type",
                            description: "Discriminator value of the type.",
                            type: "string",
                            enum: [ "string" ]
                        },
                        title: {
                            title: "Title of the schema",
                            description: "Title of the schema.",
                            type: "string"
                        },
                        description: {
                            title: "Detailed description of the schema",
                            description: "Detailed description of the schema.",
                            type: "string"
                        },
                        deprecated: {
                            title: "Whether the type is deprecated or not",
                            description: "Whether the type is deprecated or not.",
                            type: "boolean"
                        },
                        example: {
                            title: "Example value",
                            description: "Example value."
                        },
                        examples: {
                            title: "List of example values as key-value pairs",
                            $ref: "#/$defs/Recordstringany"
                        }
                    },
                    required: [ "type" ]
                },
                "IChatGptSchema.IArray": {
                    description: "Array type info.\n\n### Description of {@link items} property:\n\n> Items type info.\n> \n> The `items` means the type of the array elements. In other words, it is\n> the type schema info of the `T` in the TypeScript array type `Array<T>`.\n\n### Description of {@link examples} property:\n\n> List of example values as key-value pairs.",
                    type: "object",
                    properties: {
                        items: {
                            title: "Items type info",
                            $ref: "#/$defs/IChatGptSchema"
                        },
                        type: {
                            title: "Discriminator value of the type",
                            description: "Discriminator value of the type.",
                            type: "string",
                            enum: [ "array" ]
                        },
                        title: {
                            title: "Title of the schema",
                            description: "Title of the schema.",
                            type: "string"
                        },
                        description: {
                            title: "Detailed description of the schema",
                            description: "Detailed description of the schema.",
                            type: "string"
                        },
                        deprecated: {
                            title: "Whether the type is deprecated or not",
                            description: "Whether the type is deprecated or not.",
                            type: "boolean"
                        },
                        example: {
                            title: "Example value",
                            description: "Example value."
                        },
                        examples: {
                            title: "List of example values as key-value pairs",
                            $ref: "#/$defs/Recordstringany"
                        }
                    },
                    required: [ "items", "type" ]
                },
                "IChatGptSchema.IObject": {
                    description: "Object type info.\n\n### Description of {@link properties} property:\n\n> Properties of the object.\n> \n> The `properties` means a list of key-value pairs of the object's regular\n> properties. The key is the name of the regular property, and the value is\n> the type schema info.\n\n### Description of {@link examples} property:\n\n> List of example values as key-value pairs.",
                    type: "object",
                    properties: {
                        properties: {
                            title: "Properties of the object",
                            $ref: "#/$defs/RecordstringIChatGptSchema"
                        },
                        additionalProperties: {
                            title: "Additional properties' info",
                            description: "Additional properties' info.\n\nThe `additionalProperties` means the type schema info of the additional\nproperties that are not listed in the {@link properties}.\n\nBy the way, if you've configured {@link IChatGptSchema.IConfig.strict} as\n`true`, ChatGPT function calling does not support such dynamic key typed\nproperties, so the `additionalProperties` becomes always `false`.",
                            anyOf: [ {
                                type: "boolean"
                            }, {
                                $ref: "#/$defs/IChatGptSchema.IString"
                            }, {
                                $ref: "#/$defs/IChatGptSchema.INumber"
                            }, {
                                $ref: "#/$defs/IChatGptSchema.IInteger"
                            }, {
                                $ref: "#/$defs/IChatGptSchema.IBoolean"
                            }, {
                                $ref: "#/$defs/IChatGptSchema.IArray"
                            }, {
                                $ref: "#/$defs/IChatGptSchema.IObject"
                            }, {
                                $ref: "#/$defs/IChatGptSchema.IReference"
                            }, {
                                $ref: "#/$defs/IChatGptSchema.IAnyOf"
                            }, {
                                $ref: "#/$defs/IChatGptSchema.IUnknown"
                            }, {
                                $ref: "#/$defs/IChatGptSchema.INull"
                            } ]
                        },
                        required: {
                            title: "List of key values of the required properties",
                            description: 'List of key values of the required properties.\n\nThe `required` means a list of the key values of the required\n{@link properties}. If some property key is not listed in the `required`\nlist, it means that property is optional. Otherwise some property key\nexists in the `required` list, it means that the property must be\nfilled.\n\nBelow is an example of the {@link properties} and `required`.\n\n```typescript\ninterface SomeObject {\n  id: string;\n  email: string;\n  name?: string;\n}\n```\n\nAs you can see, `id` and `email` {@link properties} are {@link required},\nso that they are listed in the `required` list.\n\n```json\n{\n  "type": "object",\n  "properties": {\n    "id": { "type": "string" },\n    "email": { "type": "string" },\n    "name": { "type": "string" }\n  },\n  "required": ["id", "email"]\n}\n```',
                            type: "array",
                            items: {
                                type: "string"
                            }
                        },
                        type: {
                            title: "Discriminator value of the type",
                            description: "Discriminator value of the type.",
                            type: "string",
                            enum: [ "object" ]
                        },
                        title: {
                            title: "Title of the schema",
                            description: "Title of the schema.",
                            type: "string"
                        },
                        description: {
                            title: "Detailed description of the schema",
                            description: "Detailed description of the schema.",
                            type: "string"
                        },
                        deprecated: {
                            title: "Whether the type is deprecated or not",
                            description: "Whether the type is deprecated or not.",
                            type: "boolean"
                        },
                        example: {
                            title: "Example value",
                            description: "Example value."
                        },
                        examples: {
                            title: "List of example values as key-value pairs",
                            $ref: "#/$defs/Recordstringany"
                        }
                    },
                    required: [ "properties", "required", "type" ]
                },
                "IChatGptSchema.IReference": {
                    description: "Reference type directing named schema.\n\n### Description of {@link examples} property:\n\n> List of example values as key-value pairs.",
                    type: "object",
                    properties: {
                        $ref: {
                            title: "Reference to the named schema",
                            description: "Reference to the named schema.\n\nThe `ref` is a reference to the named schema. Format of the `$ref` is\nfollowing the JSON Pointer specification. In the OpenAPI, the `$ref`\nstarts with `#/$defs/` which means the type is stored in the\n{@link IChatGptSchema.IParameters.$defs} object.\n\n- `#/$defs/SomeObject`\n- `#/$defs/AnotherObject`",
                            type: "string"
                        },
                        title: {
                            title: "Title of the schema",
                            description: "Title of the schema.",
                            type: "string"
                        },
                        description: {
                            title: "Detailed description of the schema",
                            description: "Detailed description of the schema.",
                            type: "string"
                        },
                        deprecated: {
                            title: "Whether the type is deprecated or not",
                            description: "Whether the type is deprecated or not.",
                            type: "boolean"
                        },
                        example: {
                            title: "Example value",
                            description: "Example value."
                        },
                        examples: {
                            title: "List of example values as key-value pairs",
                            $ref: "#/$defs/Recordstringany"
                        }
                    },
                    required: [ "$ref" ]
                },
                "IChatGptSchema.IAnyOf": {
                    description: 'Union type.\n\n`IAnyOf` represents an union type of the TypeScript (`A | B | C`).\n\nFor reference, even though your Swagger (or OpenAPI) document has defined\n`anyOf` instead of the `oneOf`, {@link IChatGptSchema} forcibly converts it\nto `oneOf` type.\n\n### Description of {@link "x-discriminator"} property:\n\n> Discriminator info of the union type.\n\n### Description of {@link examples} property:\n\n> List of example values as key-value pairs.',
                    type: "object",
                    properties: {
                        anyOf: {
                            title: "List of the union types",
                            description: "List of the union types.",
                            type: "array",
                            items: {
                                anyOf: [ {
                                    $ref: "#/$defs/IChatGptSchema.IString"
                                }, {
                                    $ref: "#/$defs/IChatGptSchema.INumber"
                                }, {
                                    $ref: "#/$defs/IChatGptSchema.IInteger"
                                }, {
                                    $ref: "#/$defs/IChatGptSchema.IBoolean"
                                }, {
                                    $ref: "#/$defs/IChatGptSchema.IArray"
                                }, {
                                    $ref: "#/$defs/IChatGptSchema.IObject"
                                }, {
                                    $ref: "#/$defs/IChatGptSchema.IReference"
                                }, {
                                    $ref: "#/$defs/IChatGptSchema.IUnknown"
                                }, {
                                    $ref: "#/$defs/IChatGptSchema.INull"
                                } ]
                            }
                        },
                        "x-discriminator": {
                            title: "Discriminator info of the union type",
                            $ref: "#/$defs/IChatGptSchema.IAnyOf.IDiscriminator"
                        },
                        title: {
                            title: "Title of the schema",
                            description: "Title of the schema.",
                            type: "string"
                        },
                        description: {
                            title: "Detailed description of the schema",
                            description: "Detailed description of the schema.",
                            type: "string"
                        },
                        deprecated: {
                            title: "Whether the type is deprecated or not",
                            description: "Whether the type is deprecated or not.",
                            type: "boolean"
                        },
                        example: {
                            title: "Example value",
                            description: "Example value."
                        },
                        examples: {
                            title: "List of example values as key-value pairs",
                            $ref: "#/$defs/Recordstringany"
                        }
                    },
                    required: [ "anyOf" ]
                },
                "IChatGptSchema.IUnknown": {
                    description: "Unknown, the `any` type.\n\n### Description of {@link examples} property:\n\n> List of example values as key-value pairs.",
                    type: "object",
                    properties: {
                        title: {
                            title: "Title of the schema",
                            description: "Title of the schema.",
                            type: "string"
                        },
                        description: {
                            title: "Detailed description of the schema",
                            description: "Detailed description of the schema.",
                            type: "string"
                        },
                        deprecated: {
                            title: "Whether the type is deprecated or not",
                            description: "Whether the type is deprecated or not.",
                            type: "boolean"
                        },
                        example: {
                            title: "Example value",
                            description: "Example value."
                        },
                        examples: {
                            title: "List of example values as key-value pairs",
                            $ref: "#/$defs/Recordstringany"
                        }
                    },
                    required: []
                },
                "IChatGptSchema.INull": {
                    description: "Null type.\n\n### Description of {@link examples} property:\n\n> List of example values as key-value pairs.",
                    type: "object",
                    properties: {
                        type: {
                            title: "Discriminator value of the type",
                            description: "Discriminator value of the type.",
                            type: "string",
                            enum: [ "null" ]
                        },
                        title: {
                            title: "Title of the schema",
                            description: "Title of the schema.",
                            type: "string"
                        },
                        description: {
                            title: "Detailed description of the schema",
                            description: "Detailed description of the schema.",
                            type: "string"
                        },
                        deprecated: {
                            title: "Whether the type is deprecated or not",
                            description: "Whether the type is deprecated or not.",
                            type: "boolean"
                        },
                        example: {
                            title: "Example value",
                            description: "Example value."
                        },
                        examples: {
                            title: "List of example values as key-value pairs",
                            $ref: "#/$defs/Recordstringany"
                        }
                    },
                    required: [ "type" ]
                },
                "IChatGptSchema.IAnyOf.IDiscriminator": {
                    description: "Discriminator info of the union type.\n\n### Description of {@link mapping} property:\n\n> Mapping of the discriminator value to the schema name.\n> \n> This property is valid only for {@link IReference} typed\n> {@link IAnyOf.oneof} elements. Therefore, `key` of `mapping` is the\n> discriminator value, and `value` of `mapping` is the schema name like\n> `#/components/schemas/SomeObject`.",
                    type: "object",
                    properties: {
                        propertyName: {
                            title: "Property name for the discriminator",
                            description: "Property name for the discriminator.",
                            type: "string"
                        },
                        mapping: {
                            title: "Mapping of the discriminator value to the schema name",
                            $ref: "#/$defs/Recordstringstring"
                        }
                    },
                    required: [ "propertyName" ]
                },
                Recordstringstring: {
                    description: "Construct a type with a set of properties K of type T",
                    type: "object",
                    properties: {},
                    required: [],
                    additionalProperties: {
                        type: "string"
                    }
                },
                "IHttpLlmFunction.ISeparatedchatgpt": {
                    description: "Collection of separated parameters.\n\n### Description of {@link llm} property:\n\n> Parameters that would be composed by the LLM.\n> \n> Even though no property exists in the LLM side, the `llm` property would\n> have at least empty object type.",
                    type: "object",
                    properties: {
                        llm: {
                            title: "Parameters that would be composed by the LLM",
                            $ref: "#/$defs/IChatGptSchema.IParameters"
                        },
                        human: {
                            title: "Parameters that would be composed by the human",
                            description: "Parameters that would be composed by the human.",
                            anyOf: [ {
                                type: "null"
                            }, {
                                $ref: "#/$defs/IChatGptSchema.IParameters"
                            } ]
                        }
                    },
                    required: [ "llm", "human" ]
                }
            }
        },
        output: {
            type: "array",
            items: {
                $ref: "#/$defs/IHttpLlmFunctionchatgpt"
            }
        },
        description: "Get list of API functions.\n\nIf user seems like to request some function calling except this one,\ncall this `getApiFunctions()` to get the list of candidate API functions\nprovided from this application.\n\nAlso, user just wants to list up every remote API functions that can be\ncalled from the backend server, utilize this function too.",
        validate: (() => {
            const _io0 = input => true;
            const _vo0 = (input, _path, _exceptionable = true) => true;
            const __is = input => "object" === typeof input && null !== input && false === Array.isArray(input) && _io0();
            let errors;
            let _report;
            return input => {
                if (false === __is(input)) {
                    errors = [];
                    _report = __typia_transform__validateReport._validateReport(errors);
                    ((input, _path, _exceptionable = true) => ("object" === typeof input && null !== input && false === Array.isArray(input) || _report(true, {
                        path: _path + "",
                        expected: "object",
                        value: input
                    })) && _vo0(input, _path + "", true) || _report(true, {
                        path: _path + "",
                        expected: "object",
                        value: input
                    }))(input, "$input", true);
                    const success = 0 === errors.length;
                    return success ? {
                        success,
                        data: input
                    } : {
                        success,
                        errors,
                        data: input
                    };
                }
                return {
                    success: true,
                    data: input
                };
            };
        })()
    } ]
}.functions[0];

async function initialize(ctx) {
    const completionStream = await ctx.request("initialize", {
        messages: [ {
            role: "system",
            content: AgenticaDefaultPrompt.write(ctx.config)
        }, ...ctx.histories.map(decodeHistory).flat(), {
            role: "user",
            content: ctx.prompt.contents.map(decodeUserMessageContent)
        }, {
            role: "system",
            content: ctx.config?.systemPrompt?.initialize?.(ctx.histories) ?? AgenticaSystemPrompt.INITIALIZE
        } ],
        tools: [ {
            type: "function",
            function: {
                name: FUNCTION.name,
                description: FUNCTION.description,
                parameters: FUNCTION.parameters
            }
        } ],
        tool_choice: "auto"
    });
    const textContext = [];
    const completion = await StreamUtil.reduce(completionStream, (async (accPromise, chunk) => {
        const acc = await accPromise;
        const registerContext = choices => {
            for (const choice of choices) {
                if (choice.finish_reason != null) {
                    textContext[choice.index]?.mpsc.close();
                    continue;
                }
                if (choice.delta.content == null || choice.delta.content.length === 0) {
                    continue;
                }
                if (textContext[choice.index] != null) {
                    textContext[choice.index].content += choice.delta.content;
                    textContext[choice.index].mpsc.produce(choice.delta.content);
                    continue;
                }
                const mpsc = new MPSC;
                textContext[choice.index] = {
                    content: choice.delta.content,
                    mpsc
                };
                mpsc.produce(choice.delta.content);
                const event = creatAssistantMessageEvent({
                    stream: streamDefaultReaderToAsyncGenerator(mpsc.consumer.getReader()),
                    done: () => mpsc.done(),
                    get: () => textContext[choice.index].content,
                    join: async () => {
                        await mpsc.waitClosed();
                        return textContext[choice.index].content;
                    }
                });
                ctx.dispatch(event);
            }
        };
        if (acc.object === "chat.completion.chunk") {
            registerContext([ acc, chunk ].flatMap((v => v.choices)));
            return ChatGptCompletionMessageUtil.merge([ acc, chunk ]);
        }
        registerContext(chunk.choices);
        return ChatGptCompletionMessageUtil.accumulate(acc, chunk);
    }));
    if (completion === null) {
        throw new Error("No completion received");
    }
    if (completion.choices.some((c => c.message.tool_calls != null && c.message.tool_calls.some((tc => tc.type === "function" && tc.function.name === FUNCTION.name))))) {
        await ctx.initialize();
    }
}

function selectFunctionFromContext(ctx, reference) {
    const operation = ctx.operations.flat.get(reference.name);
    if (operation === undefined) {
        return;
    }
    const selection = createOperationSelection({
        operation,
        reason: reference.reason
    });
    ctx.stack.push(selection);
    const event = createSelectEvent({
        selection
    });
    ctx.dispatch(event);
}

const CONTAINER = {
    functions: [ {
        name: "selectFunctions",
        parameters: {
            description: " Properties of the function\n\n------------------------------\n\nCurrent Type: {@link __IChatFunctionReference.IProps}",
            type: "object",
            properties: {
                functions: {
                    title: "List of target functions",
                    description: "List of target functions.",
                    type: "array",
                    items: {
                        $ref: "#/$defs/___IChatFunctionReference"
                    }
                }
            },
            required: [ "functions" ],
            additionalProperties: false,
            $defs: {
                ___IChatFunctionReference: {
                    type: "object",
                    properties: {
                        reason: {
                            title: "The reason of the function selection",
                            description: "The reason of the function selection.\n\nJust write the reason why you've determined to select this function.",
                            type: "string"
                        },
                        name: {
                            title: "Name of the target function to call",
                            description: "Name of the target function to call.",
                            type: "string"
                        }
                    },
                    required: [ "reason", "name" ]
                }
            }
        },
        description: "Select proper API functions to call.\n\nIf you A.I. agent has found some proper API functions to call\nfrom the conversation with user, please select the API functions\njust by calling this function.\n\nWhen user wants to call a same function multiply, you A.I. agent must\nlist up it multiply in the `functions` property. Otherwise the user has\nrequested to call many different functions, you A.I. agent have to assign\nthem all into the `functions` property.\n\nAlso, if you A.I. agent can't specify a specific function to call due to lack\nof specificity or homogeneity of candidate functions, just assign all of them\nby in the` functions` property` too. Instead, when you A.I. agent can specify\na specific function to call, the others would be eliminated.",
        validate: (() => {
            const _io0 = input => Array.isArray(input.functions) && input.functions.every((elem => "object" === typeof elem && null !== elem && _io1(elem)));
            const _io1 = input => "string" === typeof input.reason && "string" === typeof input.name;
            const _vo0 = (input, _path, _exceptionable = true) => [ (Array.isArray(input.functions) || _report(_exceptionable, {
                path: _path + ".functions",
                expected: "Array<___IChatFunctionReference>",
                value: input.functions
            })) && input.functions.map(((elem, _index2) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
                path: _path + ".functions[" + _index2 + "]",
                expected: "___IChatFunctionReference",
                value: elem
            })) && _vo1(elem, _path + ".functions[" + _index2 + "]", _exceptionable) || _report(_exceptionable, {
                path: _path + ".functions[" + _index2 + "]",
                expected: "___IChatFunctionReference",
                value: elem
            }))).every((flag => flag)) || _report(_exceptionable, {
                path: _path + ".functions",
                expected: "Array<___IChatFunctionReference>",
                value: input.functions
            }) ].every((flag => flag));
            const _vo1 = (input, _path, _exceptionable = true) => [ "string" === typeof input.reason || _report(_exceptionable, {
                path: _path + ".reason",
                expected: "string",
                value: input.reason
            }), "string" === typeof input.name || _report(_exceptionable, {
                path: _path + ".name",
                expected: "string",
                value: input.name
            }) ].every((flag => flag));
            const __is = input => "object" === typeof input && null !== input && _io0(input);
            let errors;
            let _report;
            return input => {
                if (false === __is(input)) {
                    errors = [];
                    _report = __typia_transform__validateReport._validateReport(errors);
                    ((input, _path, _exceptionable = true) => ("object" === typeof input && null !== input || _report(true, {
                        path: _path + "",
                        expected: "__IChatFunctionReference.IProps",
                        value: input
                    })) && _vo0(input, _path + "", true) || _report(true, {
                        path: _path + "",
                        expected: "__IChatFunctionReference.IProps",
                        value: input
                    }))(input, "$input", true);
                    const success = 0 === errors.length;
                    return success ? {
                        success,
                        data: input
                    } : {
                        success,
                        errors,
                        data: input
                    };
                }
                return {
                    success: true,
                    data: input
                };
            };
        })()
    } ]
};

async function select(ctx) {
    if (ctx.operations.divided === undefined) {
        return step(ctx, ctx.operations.array, 0);
    }
    const stacks = ctx.operations.divided.map((() => []));
    const events = [];
    await Promise.all(ctx.operations.divided.map((async (operations, i) => step({
        ...ctx,
        stack: stacks[i],
        dispatch: e => {
            events.push(e);
            return e;
        }
    }, operations, 0))));
    if ((ctx.config?.eliticism ?? AgenticaConstant.ELITICISM) === true && stacks.some((s => s.length !== 0))) {
        return step(ctx, stacks.flat().map((s => ctx.operations.group.get(s.operation.controller.name).get(s.operation.function.name))), 0);
    } else {
        const selected = events.filter((e => e.type === "select"));
        (selected.length !== 0 ? selected : events).forEach(ctx.dispatch);
    }
}

async function step(ctx, operations, retry, failures) {
    const completionStream = await ctx.request("select", {
        messages: [ {
            role: "system",
            content: AgenticaDefaultPrompt.write(ctx.config)
        }, {
            role: "assistant",
            tool_calls: [ {
                type: "function",
                id: "getApiFunctions",
                function: {
                    name: "getApiFunctions",
                    arguments: JSON.stringify({})
                }
            } ]
        }, {
            role: "tool",
            tool_call_id: "getApiFunctions",
            content: JSON.stringify(operations.map((op => ({
                name: op.name,
                description: op.function.description,
                ...op.protocol === "http" ? {
                    method: op.function.method,
                    path: op.function.path,
                    tags: op.function.tags
                } : {}
            }))))
        }, ...ctx.histories.map(decodeHistory).flat(), {
            role: "user",
            content: ctx.prompt.contents.map(decodeUserMessageContent)
        }, {
            role: "system",
            content: ctx.config?.systemPrompt?.select?.(ctx.histories) ?? AgenticaSystemPrompt.SELECT
        }, ...emendMessages(failures ?? []) ],
        tools: [ {
            type: "function",
            function: {
                name: CONTAINER.functions[0].name,
                description: CONTAINER.functions[0].description,
                parameters: CONTAINER.functions[0].parameters
            }
        } ],
        tool_choice: retry === 0 ? "auto" : {
            type: "function",
            function: {
                name: CONTAINER.functions[0].name
            }
        }
    });
    const chunks = await StreamUtil.readAll(completionStream);
    const completion = ChatGptCompletionMessageUtil.merge(chunks);
    if (retry++ < (ctx.config?.retry ?? AgenticaConstant.RETRY)) {
        const failures = [];
        for (const choice of completion.choices) {
            for (const tc of choice.message.tool_calls ?? []) {
                if (tc.function.name !== "selectFunctions") {
                    continue;
                }
                const input = JSON.parse(tc.function.arguments);
                const validation = (() => {
                    const _io0 = input => Array.isArray(input.functions) && input.functions.every((elem => "object" === typeof elem && null !== elem && _io1(elem)));
                    const _io1 = input => "string" === typeof input.reason && "string" === typeof input.name;
                    const _vo0 = (input, _path, _exceptionable = true) => [ (Array.isArray(input.functions) || _report(_exceptionable, {
                        path: _path + ".functions",
                        expected: "Array<___IChatFunctionReference>",
                        value: input.functions
                    })) && input.functions.map(((elem, _index2) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
                        path: _path + ".functions[" + _index2 + "]",
                        expected: "___IChatFunctionReference",
                        value: elem
                    })) && _vo1(elem, _path + ".functions[" + _index2 + "]", _exceptionable) || _report(_exceptionable, {
                        path: _path + ".functions[" + _index2 + "]",
                        expected: "___IChatFunctionReference",
                        value: elem
                    }))).every((flag => flag)) || _report(_exceptionable, {
                        path: _path + ".functions",
                        expected: "Array<___IChatFunctionReference>",
                        value: input.functions
                    }) ].every((flag => flag));
                    const _vo1 = (input, _path, _exceptionable = true) => [ "string" === typeof input.reason || _report(_exceptionable, {
                        path: _path + ".reason",
                        expected: "string",
                        value: input.reason
                    }), "string" === typeof input.name || _report(_exceptionable, {
                        path: _path + ".name",
                        expected: "string",
                        value: input.name
                    }) ].every((flag => flag));
                    const __is = input => "object" === typeof input && null !== input && _io0(input);
                    let errors;
                    let _report;
                    return input => {
                        if (false === __is(input)) {
                            errors = [];
                            _report = __typia_transform__validateReport._validateReport(errors);
                            ((input, _path, _exceptionable = true) => ("object" === typeof input && null !== input || _report(true, {
                                path: _path + "",
                                expected: "__IChatFunctionReference.IProps",
                                value: input
                            })) && _vo0(input, _path + "", true) || _report(true, {
                                path: _path + "",
                                expected: "__IChatFunctionReference.IProps",
                                value: input
                            }))(input, "$input", true);
                            const success = 0 === errors.length;
                            return success ? {
                                success,
                                data: input
                            } : {
                                success,
                                errors,
                                data: input
                            };
                        }
                        return {
                            success: true,
                            data: input
                        };
                    };
                })()(input);
                if (validation.success === false) {
                    failures.push({
                        id: tc.id,
                        name: tc.function.name,
                        validation
                    });
                }
            }
        }
        if (failures.length > 0) {
            return step(ctx, operations, retry, failures);
        }
    }
    for (const choice of completion.choices) {
        if (choice.message.tool_calls != null) {
            for (const tc of choice.message.tool_calls) {
                if (tc.type !== "function") {
                    continue;
                } else if (tc.function.name !== "selectFunctions") {
                    continue;
                }
                const input = (() => {
                    const _io0 = input => Array.isArray(input.functions) && input.functions.every((elem => "object" === typeof elem && null !== elem && _io1(elem)));
                    const _io1 = input => "string" === typeof input.reason && "string" === typeof input.name;
                    const __is = input => "object" === typeof input && null !== input && _io0(input);
                    return input => {
                        input = JSON.parse(input);
                        return __is(input) ? input : null;
                    };
                })()(tc.function.arguments);
                if (input === null) {
                    continue;
                }
                for (const reference of input.functions) {
                    selectFunctionFromContext(ctx, reference);
                }
            }
        }
        if (choice.message.role === "assistant" && choice.message.content != null && choice.message.content.length !== 0) {
            const event = creatAssistantMessageEvent({
                stream: toAsyncGenerator(choice.message.content),
                join: async () => Promise.resolve(choice.message.content),
                done: () => true,
                get: () => choice.message.content
            });
            ctx.dispatch(event);
        }
    }
}

function emendMessages(failures) {
    return failures.map((f => [ {
        role: "assistant",
        tool_calls: [ {
            type: "function",
            id: f.id,
            function: {
                name: f.name,
                arguments: JSON.stringify(f.validation.data)
            }
        } ]
    }, {
        role: "tool",
        content: JSON.stringify(f.validation.errors),
        tool_call_id: f.id
    }, {
        role: "system",
        content: [ "You A.I. assistant has composed wrong typed arguments.", "", "Correct it at the next function calling." ].join("\n")
    } ])).flat();
}

function execute(executor) {
    return async ctx => {
        if (ctx.ready() === false) {
            if (executor?.initialize !== true && typeof executor?.initialize !== "function") {
                await ctx.initialize();
            } else {
                await (typeof executor?.initialize === "function" ? executor.initialize : initialize)(ctx);
                if (ctx.ready() === false) {
                    return;
                }
            }
        }
        if (ctx.stack.length !== 0) {
            await (executor?.cancel ?? cancel)(ctx);
        }
        await (executor?.select ?? select)(ctx);
        if (ctx.stack.length === 0) {
            return;
        }
        while (true) {
            const executes = await (executor?.call ?? call)(ctx, ctx.stack.map((s => s.operation)));
            if (executor?.describe !== null && executor?.describe !== false) {
                await (typeof executor?.describe === "function" ? executor.describe : describe)(ctx, executes);
            }
            if (executes.length === 0 || ctx.stack.length === 0) {
                break;
            }
        }
    };
}

function transformHistory(props) {
    if (props.history.type === "userMessage") {
        return transformUserMessage({
            history: props.history
        });
    } else if (props.history.type === "assistantMessage") {
        return transformAssistantMessage({
            history: props.history
        });
    } else if (props.history.type === "systemMessage") {
        return transformSystemMessage({
            history: props.history
        });
    } else if (props.history.type === "select") {
        return transformSelect({
            operations: props.operations,
            history: props.history
        });
    } else if (props.history.type === "cancel") {
        return transformCancel({
            operations: props.operations,
            history: props.history
        });
    } else if (props.history.type === "execute") {
        return transformExecute({
            operations: props.operations,
            history: props.history
        });
    }
    return transformDescribe({
        operations: props.operations,
        history: props.history
    });
}

function transformAssistantMessage(props) {
    return createAssistantMessageHistory(props.history);
}

function transformSystemMessage(props) {
    return createSystemMessageHistory(props.history);
}

function transformUserMessage(props) {
    return createUserMessageHistory(props.history);
}

function transformSelect(props) {
    return createSelectHistory({
        id: props.history.id,
        created_at: props.history.created_at,
        selection: createOperationSelection({
            operation: findOperation({
                operations: props.operations,
                input: props.history.selection.operation
            }),
            reason: props.history.selection.reason
        })
    });
}

function transformCancel(props) {
    return createCancelHistory({
        id: props.history.id,
        created_at: props.history.created_at,
        selection: createOperationSelection({
            operation: findOperation({
                operations: props.operations,
                input: props.history.selection.operation
            }),
            reason: props.history.selection.reason
        })
    });
}

function transformExecute(props) {
    return createExecuteHistory({
        id: props.history.id,
        created_at: props.history.created_at,
        operation: findOperation({
            operations: props.operations,
            input: props.history.operation
        }),
        arguments: props.history.arguments,
        value: props.history.value
    });
}

function transformDescribe(props) {
    return createDescribeHistory({
        id: props.history.id,
        created_at: props.history.created_at,
        text: props.history.text,
        executes: props.history.executes.map((next => transformExecute({
            operations: props.operations,
            history: next
        })))
    });
}

function findOperation(props) {
    const found = props.operations.get(props.input.controller)?.get(props.input.function);
    if (found === undefined) {
        throw new Error(`No operation found: (controller: ${props.input.controller}, function: ${props.input.function})`);
    }
    return found;
}

class Agentica {
    constructor(props) {
        this.props = props;
        this.operations_ = AgenticaOperationComposer.compose({
            controllers: props.controllers,
            config: props.config
        });
        this.stack_ = [];
        this.listeners_ = new Map;
        this.histories_ = (props.histories ?? []).map((input => transformHistory({
            operations: this.operations_.group,
            history: input
        })));
        this.executor_ = typeof props.config?.executor === "function" ? props.config.executor : execute(props.config?.executor ?? null);
        this.semaphore_ = props.vendor.semaphore != null ? typeof props.vendor.semaphore === "object" ? props.vendor.semaphore : new Semaphore(props.vendor.semaphore) : null;
        this.token_usage_ = this.props.tokenUsage !== undefined ? this.props.tokenUsage instanceof AgenticaTokenUsage ? this.props.tokenUsage : new AgenticaTokenUsage(this.props.tokenUsage) : AgenticaTokenUsage.zero();
        this.ready_ = false;
    }
    clone() {
        return new Agentica({
            ...this.props,
            histories: this.props.histories?.slice()
        });
    }
    async conversate(content, options = {}) {
        const historyGetters = [];
        const dispatch = event => {
            this.dispatch(event).catch((() => {}));
            if ("toHistory" in event) {
                if ("join" in event) {
                    historyGetters.push((async () => {
                        await event.join();
                        return event.toHistory();
                    }));
                } else {
                    historyGetters.push((async () => event.toHistory()));
                }
            }
        };
        const prompt = createUserMessageEvent({
            contents: Array.isArray(content) ? content : typeof content === "string" ? [ {
                type: "text",
                text: content
            } ] : [ content ]
        });
        dispatch(prompt);
        await this.executor_(this.getContext({
            dispatch,
            prompt: prompt.toHistory(),
            abortSignal: options.abortSignal,
            usage: this.token_usage_
        }));
        const completed = await Promise.all(historyGetters.map((async h => h())));
        this.histories_.push(...completed);
        return completed;
    }
    getConfig() {
        return this.props.config;
    }
    getVendor() {
        return this.props.vendor;
    }
    getControllers() {
        return this.props.controllers;
    }
    getOperations() {
        return this.operations_.array;
    }
    getHistories() {
        return this.histories_;
    }
    getTokenUsage() {
        return this.token_usage_;
    }
    getContext(props) {
        const request = async (source, body) => {
            const event = createRequestEvent({
                source,
                body: {
                    ...body,
                    model: this.props.vendor.model,
                    stream: true,
                    stream_options: {
                        include_usage: true
                    }
                },
                options: {
                    ...this.props.vendor.options,
                    signal: props.abortSignal
                }
            });
            props.dispatch(event);
            const backoffStrategy = this.props.config?.backoffStrategy ?? (props => {
                throw props.error;
            });
            const completion = await (async () => {
                let count = 0;
                while (true) {
                    try {
                        return await this.props.vendor.api.chat.completions.create(event.body, event.options);
                    } catch (error) {
                        const waiting = backoffStrategy({
                            count,
                            error
                        });
                        await new Promise((resolve => setTimeout(resolve, waiting)));
                        count++;
                    }
                }
            })();
            const [streamForEvent, temporaryStream] = StreamUtil.transform(completion.toReadableStream(), (value => ChatGptCompletionMessageUtil.transformCompletionChunk(value))).tee();
            const [streamForAggregate, streamForReturn] = temporaryStream.tee();
            (async () => {
                const reader = streamForAggregate.getReader();
                while (true) {
                    const chunk = await reader.read();
                    if (chunk.done) {
                        break;
                    }
                    if (chunk.value.usage != null) {
                        AgenticaTokenUsageAggregator.aggregate({
                            kind: source,
                            completionUsage: chunk.value.usage,
                            usage: props.usage
                        });
                    }
                }
            })().catch((() => {}));
            const [streamForStream, streamForJoin] = streamForEvent.tee();
            props.dispatch({
                id: v4(),
                type: "response",
                source,
                stream: streamDefaultReaderToAsyncGenerator(streamForStream.getReader()),
                body: event.body,
                options: event.options,
                join: async () => {
                    const chunks = await StreamUtil.readAll(streamForJoin);
                    return ChatGptCompletionMessageUtil.merge(chunks);
                },
                created_at: (new Date).toISOString()
            });
            return streamForReturn;
        };
        return {
            operations: this.operations_,
            config: this.props.config,
            histories: this.histories_,
            stack: this.stack_,
            ready: () => this.ready_,
            prompt: props.prompt,
            abortSignal: props.abortSignal,
            dispatch: props.dispatch,
            request: this.semaphore_ === null ? request : async (source, body) => {
                await this.semaphore_.acquire();
                try {
                    return await request(source, body);
                } finally {
                    void this.semaphore_.release().catch((() => {}));
                }
            },
            initialize: async () => {
                this.ready_ = true;
                props.dispatch(createInitializeEvent());
            }
        };
    }
    on(type, listener) {
        __map_take(this.listeners_, type, (() => new Set)).add(listener);
        return this;
    }
    off(type, listener) {
        const set = this.listeners_.get(type);
        if (set !== undefined) {
            set.delete(listener);
            if (set.size === 0) {
                this.listeners_.delete(type);
            }
        }
        return this;
    }
    async dispatch(event) {
        const set = this.listeners_.get(event.type);
        if (set !== undefined) {
            await Promise.all(Array.from(set).map((async listener => {
                try {
                    await listener(event);
                } catch {}
            })));
        }
    }
}

var index$2 = Object.freeze({
    __proto__: null,
    creatAssistantMessageEvent,
    createAssistantMessageHistory,
    createCallEvent,
    createCancelEvent,
    createCancelHistory,
    createDescribeEvent,
    createDescribeHistory,
    createExecuteEvent,
    createExecuteHistory,
    createInitializeEvent,
    createOperationSelection,
    createRequestEvent,
    createResponseEvent,
    createSelectEvent,
    createSelectHistory,
    createSystemMessageHistory,
    createUserMessageEvent,
    createUserMessageHistory,
    createValidateEvent,
    decodeHistory,
    decodeUserMessageContent
});

function assertHttpController(props) {
    const document = OpenApi.convert((() => {
        const _io0 = input => null !== input.swagger && undefined !== input.swagger && ("2.0" === input.swagger || "string" === typeof input.swagger && RegExp(/^2\.0\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(input.swagger)) && (undefined === input.info || "object" === typeof input.info && null !== input.info && _io1(input.info)) && (undefined === input.host || "string" === typeof input.host) && (undefined === input.basePath || "string" === typeof input.basePath) && (undefined === input.consumes || Array.isArray(input.consumes) && input.consumes.every((elem => "string" === typeof elem))) && (undefined === input.produces || Array.isArray(input.produces) && input.produces.every((elem => "string" === typeof elem))) && (undefined === input.definitions || "object" === typeof input.definitions && null !== input.definitions && false === Array.isArray(input.definitions) && _io4(input.definitions)) && (undefined === input.parameters || "object" === typeof input.parameters && null !== input.parameters && false === Array.isArray(input.parameters) && _io16(input.parameters)) && (undefined === input.responses || "object" === typeof input.responses && null !== input.responses && false === Array.isArray(input.responses) && _io29(input.responses)) && (undefined === input.securityDefinitions || "object" === typeof input.securityDefinitions && null !== input.securityDefinitions && false === Array.isArray(input.securityDefinitions) && _io31(input.securityDefinitions)) && (undefined === input.security || Array.isArray(input.security) && input.security.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io39(elem)))) && (undefined === input.paths || "object" === typeof input.paths && null !== input.paths && false === Array.isArray(input.paths) && _io40(input.paths)) && (undefined === input.tags || Array.isArray(input.tags) && input.tags.every((elem => "object" === typeof elem && null !== elem && _io47(elem))));
        const _io1 = input => "string" === typeof input.title && (undefined === input.description || "string" === typeof input.description) && (undefined === input.termsOfService || "string" === typeof input.termsOfService) && (undefined === input.contact || "object" === typeof input.contact && null !== input.contact && false === Array.isArray(input.contact) && _io2(input.contact)) && (undefined === input.license || "object" === typeof input.license && null !== input.license && _io3(input.license)) && "string" === typeof input.version;
        const _io2 = input => (undefined === input.name || "string" === typeof input.name) && (undefined === input.url || "string" === typeof input.url) && (undefined === input.email || "string" === typeof input.email);
        const _io3 = input => "string" === typeof input.name && (undefined === input.url || "string" === typeof input.url);
        const _io4 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _iu0(value);
        }));
        const _io5 = input => (null === input["default"] || undefined === input["default"] || "boolean" === typeof input["default"]) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "boolean" === typeof elem))) && "boolean" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"]) && (undefined === input.examples || Array.isArray(input.examples));
        const _io6 = input => (null === input["default"] || undefined === input["default"] || "number" === typeof input["default"] && (Math.floor(input["default"]) === input["default"] && -0x8000000000000000 <= input["default"] && input["default"] <= 0x8000000000000000)) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "number" === typeof elem))) && (undefined === input.minimum || "number" === typeof input.minimum && (Math.floor(input.minimum) === input.minimum && -0x8000000000000000 <= input.minimum && input.minimum <= 0x8000000000000000)) && (undefined === input.maximum || "number" === typeof input.maximum && (Math.floor(input.maximum) === input.maximum && -0x8000000000000000 <= input.maximum && input.maximum <= 0x8000000000000000)) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && (Math.floor(input.multipleOf) === input.multipleOf && 0 <= input.multipleOf && input.multipleOf <= 0x10000000000000000 && 0 < input.multipleOf)) && "integer" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"]) && (undefined === input.examples || Array.isArray(input.examples));
        const _io7 = input => (null === input["default"] || undefined === input["default"] || "number" === typeof input["default"]) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "number" === typeof elem))) && (undefined === input.minimum || "number" === typeof input.minimum) && (undefined === input.maximum || "number" === typeof input.maximum) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && 0 < input.multipleOf) && "number" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"]) && (undefined === input.examples || Array.isArray(input.examples));
        const _io8 = input => (null === input["default"] || undefined === input["default"] || "string" === typeof input["default"]) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "string" === typeof elem))) && (undefined === input.format || "string" === typeof input.format) && (undefined === input.pattern || "string" === typeof input.pattern) && (undefined === input.minLength || "number" === typeof input.minLength && (Math.floor(input.minLength) === input.minLength && 0 <= input.minLength && input.minLength <= 0x10000000000000000)) && (undefined === input.maxLength || "number" === typeof input.maxLength && (Math.floor(input.maxLength) === input.maxLength && 0 <= input.maxLength && input.maxLength <= 0x10000000000000000)) && "string" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"]) && (undefined === input.examples || Array.isArray(input.examples));
        const _io9 = input => "object" === typeof input.items && null !== input.items && false === Array.isArray(input.items) && _iu0(input.items) && (undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems) && (undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000)) && (undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000)) && "array" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"]) && (undefined === input.examples || Array.isArray(input.examples));
        const _io10 = input => (undefined === input.properties || "object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) && _io4(input.properties)) && (undefined === input.required || Array.isArray(input.required) && input.required.every((elem => "string" === typeof elem))) && (null !== input.additionalProperties && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || "object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) && _iu0(input.additionalProperties))) && (undefined === input.maxProperties || "number" === typeof input.maxProperties) && (undefined === input.minProperties || "number" === typeof input.minProperties) && "object" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"]) && (undefined === input.examples || Array.isArray(input.examples));
        const _io11 = input => "string" === typeof input.$ref && (undefined === input.examples || Array.isArray(input.examples)) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io12 = input => Array.isArray(input["x-anyOf"]) && input["x-anyOf"].every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu0(elem))) && (undefined === input.examples || Array.isArray(input.examples)) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io13 = input => Array.isArray(input["x-oneOf"]) && input["x-oneOf"].every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu0(elem))) && (undefined === input.examples || Array.isArray(input.examples)) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io14 = input => "null" === input.type && (null === input["default"] || undefined === input["default"]) && (undefined === input.examples || Array.isArray(input.examples)) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io15 = input => null !== input.type && undefined === input.type && (undefined === input.examples || Array.isArray(input.examples)) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io16 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && _iu9(value);
        }));
        const _io17 = input => (null === input["default"] || undefined === input["default"] || "boolean" === typeof input["default"]) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "boolean" === typeof elem))) && "boolean" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"]) && (undefined === input.examples || Array.isArray(input.examples)) && "string" === typeof input.name && "string" === typeof input["in"];
        const _io18 = input => (null === input["default"] || undefined === input["default"] || "number" === typeof input["default"] && (Math.floor(input["default"]) === input["default"] && -0x8000000000000000 <= input["default"] && input["default"] <= 0x8000000000000000)) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "number" === typeof elem))) && (undefined === input.minimum || "number" === typeof input.minimum && (Math.floor(input.minimum) === input.minimum && -0x8000000000000000 <= input.minimum && input.minimum <= 0x8000000000000000)) && (undefined === input.maximum || "number" === typeof input.maximum && (Math.floor(input.maximum) === input.maximum && -0x8000000000000000 <= input.maximum && input.maximum <= 0x8000000000000000)) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && (Math.floor(input.multipleOf) === input.multipleOf && 0 <= input.multipleOf && input.multipleOf <= 0x10000000000000000 && 0 < input.multipleOf)) && "integer" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"]) && (undefined === input.examples || Array.isArray(input.examples)) && "string" === typeof input.name && "string" === typeof input["in"];
        const _io19 = input => (null === input["default"] || undefined === input["default"] || "number" === typeof input["default"]) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "number" === typeof elem))) && (undefined === input.minimum || "number" === typeof input.minimum) && (undefined === input.maximum || "number" === typeof input.maximum) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && 0 < input.multipleOf) && "number" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"]) && (undefined === input.examples || Array.isArray(input.examples)) && "string" === typeof input.name && "string" === typeof input["in"];
        const _io20 = input => (null === input["default"] || undefined === input["default"] || "string" === typeof input["default"]) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "string" === typeof elem))) && (undefined === input.format || "string" === typeof input.format) && (undefined === input.pattern || "string" === typeof input.pattern) && (undefined === input.minLength || "number" === typeof input.minLength && (Math.floor(input.minLength) === input.minLength && 0 <= input.minLength && input.minLength <= 0x10000000000000000)) && (undefined === input.maxLength || "number" === typeof input.maxLength && (Math.floor(input.maxLength) === input.maxLength && 0 <= input.maxLength && input.maxLength <= 0x10000000000000000)) && "string" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"]) && (undefined === input.examples || Array.isArray(input.examples)) && "string" === typeof input.name && "string" === typeof input["in"];
        const _io21 = input => "object" === typeof input.items && null !== input.items && false === Array.isArray(input.items) && _iu0(input.items) && (undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems) && (undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000)) && (undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000)) && "array" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"]) && (undefined === input.examples || Array.isArray(input.examples)) && "string" === typeof input.name && "string" === typeof input["in"];
        const _io22 = input => (undefined === input.properties || "object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) && _io4(input.properties)) && (undefined === input.required || Array.isArray(input.required) && input.required.every((elem => "string" === typeof elem))) && (null !== input.additionalProperties && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || "object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) && _iu0(input.additionalProperties))) && (undefined === input.maxProperties || "number" === typeof input.maxProperties) && (undefined === input.minProperties || "number" === typeof input.minProperties) && "object" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"]) && (undefined === input.examples || Array.isArray(input.examples)) && "string" === typeof input.name && "string" === typeof input["in"];
        const _io23 = input => "string" === typeof input.$ref && (undefined === input.examples || Array.isArray(input.examples)) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && "string" === typeof input.name && "string" === typeof input["in"];
        const _io24 = input => Array.isArray(input["x-anyOf"]) && input["x-anyOf"].every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu0(elem))) && (undefined === input.examples || Array.isArray(input.examples)) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && "string" === typeof input.name && "string" === typeof input["in"];
        const _io25 = input => Array.isArray(input["x-oneOf"]) && input["x-oneOf"].every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu0(elem))) && (undefined === input.examples || Array.isArray(input.examples)) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && "string" === typeof input.name && "string" === typeof input["in"];
        const _io26 = input => "null" === input.type && (null === input["default"] || undefined === input["default"]) && (undefined === input.examples || Array.isArray(input.examples)) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && "string" === typeof input.name && "string" === typeof input["in"];
        const _io27 = input => null !== input.type && undefined === input.type && (undefined === input.examples || Array.isArray(input.examples)) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && "string" === typeof input.name && "string" === typeof input["in"];
        const _io28 = input => "object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) && _iu0(input.schema) && "string" === typeof input.name && "string" === typeof input["in"] && (undefined === input.description || "string" === typeof input.description) && (undefined === input.required || "boolean" === typeof input.required);
        const _io29 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _io30(value);
        }));
        const _io30 = input => (undefined === input.description || "string" === typeof input.description) && (undefined === input.headers || "object" === typeof input.headers && null !== input.headers && false === Array.isArray(input.headers) && _io4(input.headers)) && (undefined === input.schema || "object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) && _iu0(input.schema)) && true;
        const _io31 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && _iu10(value);
        }));
        const _io32 = input => "apiKey" === input.type && (undefined === input["in"] || "query" === input["in"] || "header" === input["in"] || "cookie" === input["in"]) && (undefined === input.name || "string" === typeof input.name) && (undefined === input.description || "string" === typeof input.description);
        const _io33 = input => "basic" === input.type && (undefined === input.name || "string" === typeof input.name) && (undefined === input.description || "string" === typeof input.description);
        const _io34 = input => "oauth2" === input.type && "implicit" === input.flow && (undefined === input.authorizationUrl || "string" === typeof input.authorizationUrl) && (undefined === input.scopes || "object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) && _io35(input.scopes)) && (undefined === input.description || "string" === typeof input.description);
        const _io35 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "string" === typeof value;
        }));
        const _io36 = input => "oauth2" === input.type && "accessCode" === input.flow && (undefined === input.authorizationUrl || "string" === typeof input.authorizationUrl) && (undefined === input.tokenUrl || "string" === typeof input.tokenUrl) && (undefined === input.scopes || "object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) && _io35(input.scopes)) && (undefined === input.description || "string" === typeof input.description);
        const _io37 = input => "oauth2" === input.type && "password" === input.flow && (undefined === input.tokenUrl || "string" === typeof input.tokenUrl) && (undefined === input.scopes || "object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) && _io35(input.scopes)) && (undefined === input.description || "string" === typeof input.description);
        const _io38 = input => "oauth2" === input.type && "application" === input.flow && (undefined === input.tokenUrl || "string" === typeof input.tokenUrl) && (undefined === input.scopes || "object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) && _io35(input.scopes)) && (undefined === input.description || "string" === typeof input.description);
        const _io39 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return Array.isArray(value) && value.every((elem => "string" === typeof elem));
        }));
        const _io40 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _io41(value);
        }));
        const _io41 = input => (undefined === input.parameters || Array.isArray(input.parameters) && input.parameters.every((elem => "object" === typeof elem && null !== elem && _iu1(elem)))) && (undefined === input.options || "object" === typeof input.options && null !== input.options && false === Array.isArray(input.options) && _io43(input.options)) && (undefined === input.get || "object" === typeof input.get && null !== input.get && false === Array.isArray(input.get) && _io43(input.get)) && (undefined === input.post || "object" === typeof input.post && null !== input.post && false === Array.isArray(input.post) && _io43(input.post)) && (undefined === input.patch || "object" === typeof input.patch && null !== input.patch && false === Array.isArray(input.patch) && _io43(input.patch)) && (undefined === input.put || "object" === typeof input.put && null !== input.put && false === Array.isArray(input.put) && _io43(input.put)) && (undefined === input["delete"] || "object" === typeof input["delete"] && null !== input["delete"] && false === Array.isArray(input["delete"]) && _io43(input["delete"])) && (undefined === input.head || "object" === typeof input.head && null !== input.head && false === Array.isArray(input.head) && _io43(input.head)) && (undefined === input.trace || "object" === typeof input.trace && null !== input.trace && false === Array.isArray(input.trace) && _io43(input.trace));
        const _io42 = input => "string" === typeof input.$ref && RegExp(/^#\/parameters\/(.*)/).test(input.$ref) && (undefined === input.examples || Array.isArray(input.examples)) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io43 = input => (undefined === input.operationId || "string" === typeof input.operationId) && (undefined === input.parameters || Array.isArray(input.parameters) && input.parameters.every((elem => "object" === typeof elem && null !== elem && _iu2(elem)))) && (undefined === input.responses || "object" === typeof input.responses && null !== input.responses && false === Array.isArray(input.responses) && _io45(input.responses)) && (undefined === input.summary || "string" === typeof input.summary) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.security || Array.isArray(input.security) && input.security.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io39(elem)))) && (undefined === input.tags || Array.isArray(input.tags) && input.tags.every((elem => "string" === typeof elem))) && (undefined === input.deprecated || "boolean" === typeof input.deprecated);
        const _io44 = input => "string" === typeof input.$ref && RegExp(/^#\/definitions\/parameters\/(.*)/).test(input.$ref) && (undefined === input.examples || Array.isArray(input.examples)) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io45 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _iu11(value);
        }));
        const _io46 = input => "string" === typeof input.$ref && RegExp(/^#\/definitions\/responses\/(.*)/).test(input.$ref) && (undefined === input.examples || Array.isArray(input.examples)) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io47 = input => "string" === typeof input.name && (undefined === input.description || "string" === typeof input.description);
        const _io48 = input => null !== input.openapi && undefined !== input.openapi && ("3.0" === input.openapi || "string" === typeof input.openapi && RegExp(/^3\.0\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(input.openapi)) && (undefined === input.servers || Array.isArray(input.servers) && input.servers.every((elem => "object" === typeof elem && null !== elem && _io49(elem)))) && (undefined === input.info || "object" === typeof input.info && null !== input.info && _io52(input.info)) && (undefined === input.components || "object" === typeof input.components && null !== input.components && false === Array.isArray(input.components) && _io55(input.components)) && (undefined === input.paths || "object" === typeof input.paths && null !== input.paths && false === Array.isArray(input.paths) && _io97(input.paths)) && (undefined === input.security || Array.isArray(input.security) && input.security.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io39(elem)))) && (undefined === input.tags || Array.isArray(input.tags) && input.tags.every((elem => "object" === typeof elem && null !== elem && _io104(elem))));
        const _io49 = input => "string" === typeof input.url && (undefined === input.description || "string" === typeof input.description) && (undefined === input.variables || "object" === typeof input.variables && null !== input.variables && false === Array.isArray(input.variables) && _io50(input.variables));
        const _io50 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && _io51(value);
        }));
        const _io51 = input => "string" === typeof input["default"] && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => "string" === typeof elem))) && (undefined === input.description || "string" === typeof input.description);
        const _io52 = input => "string" === typeof input.title && (undefined === input.description || "string" === typeof input.description) && (undefined === input.termsOfService || "string" === typeof input.termsOfService) && (undefined === input.contact || "object" === typeof input.contact && null !== input.contact && false === Array.isArray(input.contact) && _io53(input.contact)) && (undefined === input.license || "object" === typeof input.license && null !== input.license && _io54(input.license)) && "string" === typeof input.version;
        const _io53 = input => (undefined === input.name || "string" === typeof input.name) && (undefined === input.url || "string" === typeof input.url) && (undefined === input.email || "string" === typeof input.email);
        const _io54 = input => "string" === typeof input.name && (undefined === input.url || "string" === typeof input.url);
        const _io55 = input => (undefined === input.schemas || "object" === typeof input.schemas && null !== input.schemas && false === Array.isArray(input.schemas) && _io56(input.schemas)) && (undefined === input.responses || "object" === typeof input.responses && null !== input.responses && false === Array.isArray(input.responses) && _io71(input.responses)) && (undefined === input.parameters || "object" === typeof input.parameters && null !== input.parameters && false === Array.isArray(input.parameters) && _io81(input.parameters)) && (undefined === input.requestBodies || "object" === typeof input.requestBodies && null !== input.requestBodies && false === Array.isArray(input.requestBodies) && _io83(input.requestBodies)) && (undefined === input.securitySchemes || "object" === typeof input.securitySchemes && null !== input.securitySchemes && false === Array.isArray(input.securitySchemes) && _io85(input.securitySchemes)) && (undefined === input.headers || "object" === typeof input.headers && null !== input.headers && false === Array.isArray(input.headers) && _io95(input.headers)) && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io96(input.examples));
        const _io56 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _iu3(value);
        }));
        const _io57 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && (null === input["default"] || undefined === input["default"] || "boolean" === typeof input["default"]) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "boolean" === typeof elem))) && "boolean" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples))));
        const _io58 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return true;
        }));
        const _io59 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && (null === input["default"] || undefined === input["default"] || "number" === typeof input["default"] && (Math.floor(input["default"]) === input["default"] && -0x8000000000000000 <= input["default"] && input["default"] <= 0x8000000000000000)) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "number" === typeof elem))) && (undefined === input.minimum || "number" === typeof input.minimum && (Math.floor(input.minimum) === input.minimum && -0x8000000000000000 <= input.minimum && input.minimum <= 0x8000000000000000)) && (undefined === input.maximum || "number" === typeof input.maximum && (Math.floor(input.maximum) === input.maximum && -0x8000000000000000 <= input.maximum && input.maximum <= 0x8000000000000000)) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && (Math.floor(input.multipleOf) === input.multipleOf && 0 <= input.multipleOf && input.multipleOf <= 0x10000000000000000 && 0 < input.multipleOf)) && "integer" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples))));
        const _io60 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && (null === input["default"] || undefined === input["default"] || "number" === typeof input["default"]) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "number" === typeof elem))) && (undefined === input.minimum || "number" === typeof input.minimum) && (undefined === input.maximum || "number" === typeof input.maximum) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && 0 < input.multipleOf) && "number" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples))));
        const _io61 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && (null === input["default"] || undefined === input["default"] || "string" === typeof input["default"]) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "string" === typeof elem))) && (undefined === input.format || "string" === typeof input.format) && (undefined === input.pattern || "string" === typeof input.pattern) && (undefined === input.minLength || "number" === typeof input.minLength && (Math.floor(input.minLength) === input.minLength && 0 <= input.minLength && input.minLength <= 0x10000000000000000)) && (undefined === input.maxLength || "number" === typeof input.maxLength && (Math.floor(input.maxLength) === input.maxLength && 0 <= input.maxLength && input.maxLength <= 0x10000000000000000)) && "string" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples))));
        const _io62 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && ("object" === typeof input.items && null !== input.items && false === Array.isArray(input.items) && _iu3(input.items)) && (undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems) && (undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000)) && (undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000)) && "array" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples))));
        const _io63 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && (undefined === input.properties || "object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) && _io56(input.properties)) && (undefined === input.required || Array.isArray(input.required) && input.required.every((elem => "string" === typeof elem))) && (null !== input.additionalProperties && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || "object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) && _iu3(input.additionalProperties))) && (undefined === input.maxProperties || "number" === typeof input.maxProperties) && (undefined === input.minProperties || "number" === typeof input.minProperties) && "object" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples))));
        const _io64 = input => "string" === typeof input.$ref && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io65 = input => Array.isArray(input.allOf) && input.allOf.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu3(elem))) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io66 = input => Array.isArray(input.anyOf) && input.anyOf.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu3(elem))) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io67 = input => Array.isArray(input.oneOf) && input.oneOf.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu3(elem))) && (undefined === input.discriminator || "object" === typeof input.discriminator && null !== input.discriminator && _io68(input.discriminator)) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io68 = input => "string" === typeof input.propertyName && (undefined === input.mapping || "object" === typeof input.mapping && null !== input.mapping && false === Array.isArray(input.mapping) && _io35(input.mapping));
        const _io69 = input => (null === input["default"] || undefined === input["default"]) && "null" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples))));
        const _io70 = input => null !== input.type && undefined === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples))));
        const _io71 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _io72(value);
        }));
        const _io72 = input => (undefined === input.content || "object" === typeof input.content && null !== input.content && false === Array.isArray(input.content) && _io73(input.content)) && (undefined === input.headers || "object" === typeof input.headers && null !== input.headers && false === Array.isArray(input.headers) && _io78(input.headers)) && (undefined === input.description || "string" === typeof input.description);
        const _io73 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _io74(value);
        }));
        const _io74 = input => (undefined === input.schema || "object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) && _iu3(input.schema)) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io75(input.examples));
        const _io75 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _iu12(value);
        }));
        const _io76 = input => (undefined === input.summary || "string" === typeof input.summary) && (undefined === input.description || "string" === typeof input.description) && true && (undefined === input.externalValue || "string" === typeof input.externalValue);
        const _io77 = input => "string" === typeof input.$ref && RegExp(/^#\/components\/examples\/(.*)/).test(input.$ref) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io78 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && _iu13(value);
        }));
        const _io79 = input => (undefined === input.name || "string" === typeof input.name) && (undefined === input.required || "boolean" === typeof input.required) && (undefined === input.description || "string" === typeof input.description) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io75(input.examples)) && ("object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) && _iu3(input.schema));
        const _io80 = input => "string" === typeof input.$ref && RegExp(/^#\/components\/headers\/(.*)/).test(input.$ref) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io81 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && _io82(value);
        }));
        const _io82 = input => (undefined === input.name || "string" === typeof input.name) && ("path" === input["in"] || "query" === input["in"] || "header" === input["in"] || "cookie" === input["in"]) && ("object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) && _iu3(input.schema)) && (undefined === input.required || "boolean" === typeof input.required) && (undefined === input.description || "string" === typeof input.description) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io75(input.examples));
        const _io83 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _io84(value);
        }));
        const _io84 = input => (undefined === input.description || "string" === typeof input.description) && (undefined === input.required || "boolean" === typeof input.required) && (undefined === input.content || "object" === typeof input.content && null !== input.content && false === Array.isArray(input.content) && _io73(input.content));
        const _io85 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && _iu14(value);
        }));
        const _io86 = input => "apiKey" === input.type && (undefined === input["in"] || "query" === input["in"] || "header" === input["in"] || "cookie" === input["in"]) && (undefined === input.name || "string" === typeof input.name) && (undefined === input.description || "string" === typeof input.description);
        const _io87 = input => "http" === input.type && "basic" === input.scheme && (undefined === input.description || "string" === typeof input.description);
        const _io88 = input => "http" === input.type && "bearer" === input.scheme && (undefined === input.bearerFormat || "string" === typeof input.bearerFormat) && (undefined === input.description || "string" === typeof input.description);
        const _io89 = input => "oauth2" === input.type && ("object" === typeof input.flows && null !== input.flows && false === Array.isArray(input.flows) && _io90(input.flows)) && (undefined === input.description || "string" === typeof input.description);
        const _io90 = input => (undefined === input.authorizationCode || "object" === typeof input.authorizationCode && null !== input.authorizationCode && false === Array.isArray(input.authorizationCode) && _io91(input.authorizationCode)) && (undefined === input.implicit || "object" === typeof input.implicit && null !== input.implicit && false === Array.isArray(input.implicit) && _io92(input.implicit)) && (undefined === input.password || "object" === typeof input.password && null !== input.password && false === Array.isArray(input.password) && _io93(input.password)) && (undefined === input.clientCredentials || "object" === typeof input.clientCredentials && null !== input.clientCredentials && false === Array.isArray(input.clientCredentials) && _io93(input.clientCredentials));
        const _io91 = input => (undefined === input.authorizationUrl || "string" === typeof input.authorizationUrl) && (undefined === input.tokenUrl || "string" === typeof input.tokenUrl) && (undefined === input.refreshUrl || "string" === typeof input.refreshUrl) && (undefined === input.scopes || "object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) && _io35(input.scopes));
        const _io92 = input => (undefined === input.authorizationUrl || "string" === typeof input.authorizationUrl) && (undefined === input.refreshUrl || "string" === typeof input.refreshUrl) && (undefined === input.scopes || "object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) && _io35(input.scopes));
        const _io93 = input => (undefined === input.tokenUrl || "string" === typeof input.tokenUrl) && (undefined === input.refreshUrl || "string" === typeof input.refreshUrl) && (undefined === input.scopes || "object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) && _io35(input.scopes));
        const _io94 = input => "openIdConnect" === input.type && "string" === typeof input.openIdConnectUrl && (undefined === input.description || "string" === typeof input.description);
        const _io95 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && _io79(value);
        }));
        const _io96 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _io76(value);
        }));
        const _io97 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _io98(value);
        }));
        const _io98 = input => (undefined === input.parameters || Array.isArray(input.parameters) && input.parameters.every((elem => "object" === typeof elem && null !== elem && _iu4(elem)))) && (undefined === input.servers || Array.isArray(input.servers) && input.servers.every((elem => "object" === typeof elem && null !== elem && _io49(elem)))) && (undefined === input.summary || "string" === typeof input.summary) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.options || "object" === typeof input.options && null !== input.options && false === Array.isArray(input.options) && _io100(input.options)) && (undefined === input.get || "object" === typeof input.get && null !== input.get && false === Array.isArray(input.get) && _io100(input.get)) && (undefined === input.post || "object" === typeof input.post && null !== input.post && false === Array.isArray(input.post) && _io100(input.post)) && (undefined === input.patch || "object" === typeof input.patch && null !== input.patch && false === Array.isArray(input.patch) && _io100(input.patch)) && (undefined === input.put || "object" === typeof input.put && null !== input.put && false === Array.isArray(input.put) && _io100(input.put)) && (undefined === input["delete"] || "object" === typeof input["delete"] && null !== input["delete"] && false === Array.isArray(input["delete"]) && _io100(input["delete"])) && (undefined === input.head || "object" === typeof input.head && null !== input.head && false === Array.isArray(input.head) && _io100(input.head)) && (undefined === input.trace || "object" === typeof input.trace && null !== input.trace && false === Array.isArray(input.trace) && _io100(input.trace));
        const _io99 = input => "string" === typeof input.$ref && RegExp(/^#\/components\/parameters\/(.*)/).test(input.$ref) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io100 = input => (undefined === input.operationId || "string" === typeof input.operationId) && (undefined === input.parameters || Array.isArray(input.parameters) && input.parameters.every((elem => "object" === typeof elem && null !== elem && _iu4(elem)))) && (undefined === input.requestBody || "object" === typeof input.requestBody && null !== input.requestBody && false === Array.isArray(input.requestBody) && _iu15(input.requestBody)) && (undefined === input.responses || "object" === typeof input.responses && null !== input.responses && false === Array.isArray(input.responses) && _io102(input.responses)) && (undefined === input.servers || Array.isArray(input.servers) && input.servers.every((elem => "object" === typeof elem && null !== elem && _io49(elem)))) && (undefined === input.summary || "string" === typeof input.summary) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.security || Array.isArray(input.security) && input.security.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io39(elem)))) && (undefined === input.tags || Array.isArray(input.tags) && input.tags.every((elem => "string" === typeof elem))) && (undefined === input.deprecated || "boolean" === typeof input.deprecated);
        const _io101 = input => "string" === typeof input.$ref && RegExp(/^#\/components\/requestBodies\/(.*)/).test(input.$ref) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io102 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _iu16(value);
        }));
        const _io103 = input => "string" === typeof input.$ref && RegExp(/^#\/components\/responses\/(.*)/).test(input.$ref) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io104 = input => "string" === typeof input.name && (undefined === input.description || "string" === typeof input.description);
        const _io105 = input => "string" === typeof input.openapi && RegExp(/^3\.1\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(input.openapi) && (undefined === input.servers || Array.isArray(input.servers) && input.servers.every((elem => "object" === typeof elem && null !== elem && _io106(elem)))) && (undefined === input.info || "object" === typeof input.info && null !== input.info && _io109(input.info)) && (undefined === input.components || "object" === typeof input.components && null !== input.components && false === Array.isArray(input.components) && _io112(input.components)) && (undefined === input.paths || "object" === typeof input.paths && null !== input.paths && false === Array.isArray(input.paths) && _io130(input.paths)) && (undefined === input.webhooks || "object" === typeof input.webhooks && null !== input.webhooks && false === Array.isArray(input.webhooks) && _io163(input.webhooks)) && (undefined === input.security || Array.isArray(input.security) && input.security.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io39(elem)))) && (undefined === input.tags || Array.isArray(input.tags) && input.tags.every((elem => "object" === typeof elem && null !== elem && _io165(elem))));
        const _io106 = input => "string" === typeof input.url && (undefined === input.description || "string" === typeof input.description) && (undefined === input.variables || "object" === typeof input.variables && null !== input.variables && false === Array.isArray(input.variables) && _io107(input.variables));
        const _io107 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && _io108(value);
        }));
        const _io108 = input => "string" === typeof input["default"] && (undefined === input["enum"] || Array.isArray(input["enum"]) && (1 <= input["enum"].length && input["enum"].every((elem => "string" === typeof elem)))) && (undefined === input.description || "string" === typeof input.description);
        const _io109 = input => "string" === typeof input.title && (undefined === input.summary || "string" === typeof input.summary) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.termsOfService || "string" === typeof input.termsOfService) && (undefined === input.contact || "object" === typeof input.contact && null !== input.contact && false === Array.isArray(input.contact) && _io110(input.contact)) && (undefined === input.license || "object" === typeof input.license && null !== input.license && _io111(input.license)) && "string" === typeof input.version;
        const _io110 = input => (undefined === input.name || "string" === typeof input.name) && (undefined === input.url || "string" === typeof input.url) && (undefined === input.email || "string" === typeof input.email);
        const _io111 = input => "string" === typeof input.name && (undefined === input.identifier || "string" === typeof input.identifier) && (undefined === input.url || "string" === typeof input.url);
        const _io112 = input => (undefined === input.schemas || "object" === typeof input.schemas && null !== input.schemas && false === Array.isArray(input.schemas) && _io113(input.schemas)) && (undefined === input.pathItems || "object" === typeof input.pathItems && null !== input.pathItems && false === Array.isArray(input.pathItems) && _io130(input.pathItems)) && (undefined === input.responses || "object" === typeof input.responses && null !== input.responses && false === Array.isArray(input.responses) && _io148(input.responses)) && (undefined === input.parameters || "object" === typeof input.parameters && null !== input.parameters && false === Array.isArray(input.parameters) && _io149(input.parameters)) && (undefined === input.requestBodies || "object" === typeof input.requestBodies && null !== input.requestBodies && false === Array.isArray(input.requestBodies) && _io150(input.requestBodies)) && (undefined === input.securitySchemes || "object" === typeof input.securitySchemes && null !== input.securitySchemes && false === Array.isArray(input.securitySchemes) && _io151(input.securitySchemes)) && (undefined === input.headers || "object" === typeof input.headers && null !== input.headers && false === Array.isArray(input.headers) && _io161(input.headers)) && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io162(input.examples));
        const _io113 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _iu5(value);
        }));
        const _io114 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && (undefined === input.properties || "object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) && _io113(input.properties)) && (undefined === input.required || Array.isArray(input.required) && input.required.every((elem => "string" === typeof elem))) && (null !== input.additionalProperties && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || "object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) && _iu5(input.additionalProperties))) && (undefined === input.maxProperties || "number" === typeof input.maxProperties) && (undefined === input.minProperties || "number" === typeof input.minProperties) && "object" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples))));
        const _io115 = input => Array.isArray(input.type) && input.type.every((elem => "string" === elem || "number" === elem || "boolean" === elem || "object" === elem || "integer" === elem || "array" === elem || "null" === elem)) && (null === input["default"] || undefined === input["default"] || Array.isArray(input["default"])) && (undefined === input["enum"] || Array.isArray(input["enum"])) && ("string" === typeof input["const"] || "number" === typeof input["const"] || "boolean" === typeof input["const"]) && (undefined === input.nullable || "boolean" === typeof input.nullable) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input.minimum || "number" === typeof input.minimum) && (undefined === input.maximum || "number" === typeof input.maximum) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && 0 < input.multipleOf) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum) && (undefined === input.format || "string" === typeof input.format) && (undefined === input.maxLength || "number" === typeof input.maxLength && (Math.floor(input.maxLength) === input.maxLength && 0 <= input.maxLength && input.maxLength <= 0x10000000000000000)) && (undefined === input.pattern || "string" === typeof input.pattern) && (undefined === input.contentMediaType || "string" === typeof input.contentMediaType) && (undefined === input.minLength || "number" === typeof input.minLength && (Math.floor(input.minLength) === input.minLength && 0 <= input.minLength && input.minLength <= 0x10000000000000000)) && (null !== input.items && (undefined === input.items || (Array.isArray(input.items) && input.items.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu5(elem))) || "object" === typeof input.items && null !== input.items && false === Array.isArray(input.items) && _iu5(input.items)))) && (undefined === input.prefixItems || Array.isArray(input.prefixItems) && input.prefixItems.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu5(elem)))) && (undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems) && (null !== input.additionalItems && (undefined === input.additionalItems || "boolean" === typeof input.additionalItems || "object" === typeof input.additionalItems && null !== input.additionalItems && false === Array.isArray(input.additionalItems) && _iu5(input.additionalItems))) && (undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000)) && (undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000)) && (null !== input.additionalProperties && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || "object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) && _iu5(input.additionalProperties))) && (undefined === input.properties || "object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) && _io113(input.properties)) && (undefined === input.required || Array.isArray(input.required) && input.required.every((elem => "string" === typeof elem))) && (undefined === input.maxProperties || "number" === typeof input.maxProperties) && (undefined === input.minProperties || "number" === typeof input.minProperties) && (Array.isArray(input.oneOf) && input.oneOf.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu5(elem)))) && (undefined === input.discriminator || "object" === typeof input.discriminator && null !== input.discriminator && _io127(input.discriminator)) && (Array.isArray(input.anyOf) && input.anyOf.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu5(elem)))) && (Array.isArray(input.allOf) && input.allOf.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu5(elem)))) && "string" === typeof input.$ref;
        const _io116 = input => ("string" === typeof input["const"] || "number" === typeof input["const"] || "boolean" === typeof input["const"]) && (undefined === input.nullable || "boolean" === typeof input.nullable) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io117 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && (null === input["default"] || undefined === input["default"] || "boolean" === typeof input["default"]) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "boolean" === typeof elem))) && "boolean" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples))));
        const _io118 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && (null === input["default"] || undefined === input["default"] || "number" === typeof input["default"] && (Math.floor(input["default"]) === input["default"] && -0x8000000000000000 <= input["default"] && input["default"] <= 0x8000000000000000)) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "number" === typeof elem))) && (undefined === input.minimum || "number" === typeof input.minimum && (Math.floor(input.minimum) === input.minimum && -0x8000000000000000 <= input.minimum && input.minimum <= 0x8000000000000000)) && (undefined === input.maximum || "number" === typeof input.maximum && (Math.floor(input.maximum) === input.maximum && -0x8000000000000000 <= input.maximum && input.maximum <= 0x8000000000000000)) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum && (Math.floor(input.exclusiveMinimum) === input.exclusiveMinimum && -0x8000000000000000 <= input.exclusiveMinimum && input.exclusiveMinimum <= 0x8000000000000000) || "boolean" === typeof input.exclusiveMinimum) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum && (Math.floor(input.exclusiveMaximum) === input.exclusiveMaximum && -0x8000000000000000 <= input.exclusiveMaximum && input.exclusiveMaximum <= 0x8000000000000000) || "boolean" === typeof input.exclusiveMaximum) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && (Math.floor(input.multipleOf) === input.multipleOf && 0 <= input.multipleOf && input.multipleOf <= 0x10000000000000000 && 0 < input.multipleOf)) && "integer" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples))));
        const _io119 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && (null === input["default"] || undefined === input["default"] || "number" === typeof input["default"]) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "number" === typeof elem))) && (undefined === input.minimum || "number" === typeof input.minimum) && (undefined === input.maximum || "number" === typeof input.maximum) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && 0 < input.multipleOf) && "number" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples))));
        const _io120 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && (null === input["default"] || undefined === input["default"] || "string" === typeof input["default"]) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "string" === typeof elem))) && (undefined === input.format || "string" === typeof input.format) && (undefined === input.pattern || "string" === typeof input.pattern) && (undefined === input.contentMediaType || "string" === typeof input.contentMediaType) && (undefined === input.minLength || "number" === typeof input.minLength && (Math.floor(input.minLength) === input.minLength && 0 <= input.minLength && input.minLength <= 0x10000000000000000)) && (undefined === input.maxLength || "number" === typeof input.maxLength && (Math.floor(input.maxLength) === input.maxLength && 0 <= input.maxLength && input.maxLength <= 0x10000000000000000)) && "string" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples))));
        const _io121 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && (null !== input.items && (undefined === input.items || (Array.isArray(input.items) && input.items.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu5(elem))) || "object" === typeof input.items && null !== input.items && false === Array.isArray(input.items) && _iu5(input.items)))) && (undefined === input.prefixItems || Array.isArray(input.prefixItems) && input.prefixItems.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu5(elem)))) && (undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems) && (null !== input.additionalItems && (undefined === input.additionalItems || "boolean" === typeof input.additionalItems || "object" === typeof input.additionalItems && null !== input.additionalItems && false === Array.isArray(input.additionalItems) && _iu5(input.additionalItems))) && (undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000)) && (undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000)) && "array" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples))));
        const _io122 = input => "string" === typeof input.$ref && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io123 = input => "string" === typeof input.$recursiveRef && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io124 = input => Array.isArray(input.allOf) && input.allOf.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu5(elem))) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io125 = input => Array.isArray(input.anyOf) && input.anyOf.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu5(elem))) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io126 = input => Array.isArray(input.oneOf) && input.oneOf.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu5(elem))) && (undefined === input.discriminator || "object" === typeof input.discriminator && null !== input.discriminator && _io127(input.discriminator)) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io127 = input => "string" === typeof input.propertyName && (undefined === input.mapping || "object" === typeof input.mapping && null !== input.mapping && false === Array.isArray(input.mapping) && _io35(input.mapping));
        const _io128 = input => (null === input["default"] || undefined === input["default"]) && "null" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples))));
        const _io129 = input => null !== input.type && undefined === input.type && true && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples))));
        const _io130 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _io131(value);
        }));
        const _io131 = input => (undefined === input.parameters || Array.isArray(input.parameters) && input.parameters.every((elem => "object" === typeof elem && null !== elem && _iu6(elem)))) && (undefined === input.servers || Array.isArray(input.servers) && input.servers.every((elem => "object" === typeof elem && null !== elem && _io106(elem)))) && (undefined === input.summary || "string" === typeof input.summary) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.options || "object" === typeof input.options && null !== input.options && false === Array.isArray(input.options) && _io138(input.options)) && (undefined === input.get || "object" === typeof input.get && null !== input.get && false === Array.isArray(input.get) && _io138(input.get)) && (undefined === input.post || "object" === typeof input.post && null !== input.post && false === Array.isArray(input.post) && _io138(input.post)) && (undefined === input.patch || "object" === typeof input.patch && null !== input.patch && false === Array.isArray(input.patch) && _io138(input.patch)) && (undefined === input.put || "object" === typeof input.put && null !== input.put && false === Array.isArray(input.put) && _io138(input.put)) && (undefined === input["delete"] || "object" === typeof input["delete"] && null !== input["delete"] && false === Array.isArray(input["delete"]) && _io138(input["delete"])) && (undefined === input.head || "object" === typeof input.head && null !== input.head && false === Array.isArray(input.head) && _io138(input.head)) && (undefined === input.trace || "object" === typeof input.trace && null !== input.trace && false === Array.isArray(input.trace) && _io138(input.trace));
        const _io132 = input => (undefined === input.name || "string" === typeof input.name) && ("path" === input["in"] || "query" === input["in"] || "header" === input["in"] || "cookie" === input["in"]) && ("object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) && _iu5(input.schema)) && (undefined === input.required || "boolean" === typeof input.required) && (undefined === input.description || "string" === typeof input.description) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io133(input.examples));
        const _io133 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _iu17(value);
        }));
        const _io134 = input => (undefined === input.summary || "string" === typeof input.summary) && (undefined === input.description || "string" === typeof input.description) && true && (undefined === input.externalValue || "string" === typeof input.externalValue);
        const _io135 = input => "string" === typeof input.$ref && RegExp(/^#\/components\/examples\/(.*)/).test(input.$ref) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io136 = input => "string" === typeof input.$ref && RegExp(/^#\/components\/headers\/(.*)/).test(input.$ref) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io137 = input => "string" === typeof input.$ref && RegExp(/^#\/components\/parameters\/(.*)/).test(input.$ref) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io138 = input => (undefined === input.operationId || "string" === typeof input.operationId) && (undefined === input.parameters || Array.isArray(input.parameters) && input.parameters.every((elem => "object" === typeof elem && null !== elem && _iu6(elem)))) && (undefined === input.requestBody || "object" === typeof input.requestBody && null !== input.requestBody && false === Array.isArray(input.requestBody) && _iu18(input.requestBody)) && (undefined === input.responses || "object" === typeof input.responses && null !== input.responses && false === Array.isArray(input.responses) && _io143(input.responses)) && (undefined === input.servers || Array.isArray(input.servers) && input.servers.every((elem => "object" === typeof elem && null !== elem && _io106(elem)))) && (undefined === input.summary || "string" === typeof input.summary) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.security || Array.isArray(input.security) && input.security.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io39(elem)))) && (undefined === input.tags || Array.isArray(input.tags) && input.tags.every((elem => "string" === typeof elem))) && (undefined === input.deprecated || "boolean" === typeof input.deprecated);
        const _io139 = input => (undefined === input.description || "string" === typeof input.description) && (undefined === input.required || "boolean" === typeof input.required) && (undefined === input.content || "object" === typeof input.content && null !== input.content && false === Array.isArray(input.content) && _io140(input.content));
        const _io140 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _io141(value);
        }));
        const _io141 = input => (undefined === input.schema || "object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) && _iu5(input.schema)) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io133(input.examples));
        const _io142 = input => "string" === typeof input.$ref && RegExp(/^#\/components\/requestBodies\/(.*)/).test(input.$ref) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io143 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _iu19(value);
        }));
        const _io144 = input => (undefined === input.content || "object" === typeof input.content && null !== input.content && false === Array.isArray(input.content) && _io140(input.content)) && (undefined === input.headers || "object" === typeof input.headers && null !== input.headers && false === Array.isArray(input.headers) && _io145(input.headers)) && (undefined === input.description || "string" === typeof input.description);
        const _io145 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && _iu20(value);
        }));
        const _io146 = input => (undefined === input.name || "string" === typeof input.name) && (undefined === input.required || "boolean" === typeof input.required) && (undefined === input.description || "string" === typeof input.description) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io133(input.examples)) && ("object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) && _iu5(input.schema));
        const _io147 = input => "string" === typeof input.$ref && RegExp(/^#\/components\/responses\/(.*)/).test(input.$ref) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io148 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _io144(value);
        }));
        const _io149 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && _io132(value);
        }));
        const _io150 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _io139(value);
        }));
        const _io151 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && _iu21(value);
        }));
        const _io152 = input => "apiKey" === input.type && (undefined === input["in"] || "query" === input["in"] || "header" === input["in"] || "cookie" === input["in"]) && (undefined === input.name || "string" === typeof input.name) && (undefined === input.description || "string" === typeof input.description);
        const _io153 = input => "http" === input.type && "basic" === input.scheme && (undefined === input.description || "string" === typeof input.description);
        const _io154 = input => "http" === input.type && "bearer" === input.scheme && (undefined === input.bearerFormat || "string" === typeof input.bearerFormat) && (undefined === input.description || "string" === typeof input.description);
        const _io155 = input => "oauth2" === input.type && ("object" === typeof input.flows && null !== input.flows && false === Array.isArray(input.flows) && _io156(input.flows)) && (undefined === input.description || "string" === typeof input.description);
        const _io156 = input => (undefined === input.authorizationCode || "object" === typeof input.authorizationCode && null !== input.authorizationCode && false === Array.isArray(input.authorizationCode) && _io157(input.authorizationCode)) && (undefined === input.implicit || "object" === typeof input.implicit && null !== input.implicit && false === Array.isArray(input.implicit) && _io158(input.implicit)) && (undefined === input.password || "object" === typeof input.password && null !== input.password && false === Array.isArray(input.password) && _io159(input.password)) && (undefined === input.clientCredentials || "object" === typeof input.clientCredentials && null !== input.clientCredentials && false === Array.isArray(input.clientCredentials) && _io159(input.clientCredentials));
        const _io157 = input => (undefined === input.authorizationUrl || "string" === typeof input.authorizationUrl) && (undefined === input.tokenUrl || "string" === typeof input.tokenUrl) && (undefined === input.refreshUrl || "string" === typeof input.refreshUrl) && (undefined === input.scopes || "object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) && _io35(input.scopes));
        const _io158 = input => (undefined === input.authorizationUrl || "string" === typeof input.authorizationUrl) && (undefined === input.refreshUrl || "string" === typeof input.refreshUrl) && (undefined === input.scopes || "object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) && _io35(input.scopes));
        const _io159 = input => (undefined === input.tokenUrl || "string" === typeof input.tokenUrl) && (undefined === input.refreshUrl || "string" === typeof input.refreshUrl) && (undefined === input.scopes || "object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) && _io35(input.scopes));
        const _io160 = input => "openIdConnect" === input.type && "string" === typeof input.openIdConnectUrl && (undefined === input.description || "string" === typeof input.description);
        const _io161 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && _io146(value);
        }));
        const _io162 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _io134(value);
        }));
        const _io163 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _iu22(value);
        }));
        const _io164 = input => "string" === typeof input.$ref && RegExp(/^#\/components\/pathItems\/(.*)/).test(input.$ref) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io165 = input => "string" === typeof input.name && (undefined === input.description || "string" === typeof input.description);
        const _io166 = input => "string" === typeof input.openapi && RegExp(/^3\.1\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(input.openapi) && (undefined === input.servers || Array.isArray(input.servers) && input.servers.every((elem => "object" === typeof elem && null !== elem && _io167(elem)))) && (undefined === input.info || "object" === typeof input.info && null !== input.info && _io170(input.info)) && ("object" === typeof input.components && null !== input.components && false === Array.isArray(input.components) && _io173(input.components)) && (undefined === input.paths || "object" === typeof input.paths && null !== input.paths && false === Array.isArray(input.paths) && _io198(input.paths)) && (undefined === input.webhooks || "object" === typeof input.webhooks && null !== input.webhooks && false === Array.isArray(input.webhooks) && _io198(input.webhooks)) && (undefined === input.security || Array.isArray(input.security) && input.security.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io39(elem)))) && (undefined === input.tags || Array.isArray(input.tags) && input.tags.every((elem => "object" === typeof elem && null !== elem && _io210(elem)))) && true === input["x-samchon-emended-v4"];
        const _io167 = input => "string" === typeof input.url && (undefined === input.description || "string" === typeof input.description) && (undefined === input.variables || "object" === typeof input.variables && null !== input.variables && false === Array.isArray(input.variables) && _io168(input.variables));
        const _io168 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && _io169(value);
        }));
        const _io169 = input => "string" === typeof input["default"] && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => "string" === typeof elem))) && (undefined === input.description || "string" === typeof input.description);
        const _io170 = input => "string" === typeof input.title && (undefined === input.summary || "string" === typeof input.summary) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.termsOfService || "string" === typeof input.termsOfService) && (undefined === input.contact || "object" === typeof input.contact && null !== input.contact && false === Array.isArray(input.contact) && _io171(input.contact)) && (undefined === input.license || "object" === typeof input.license && null !== input.license && _io172(input.license)) && "string" === typeof input.version;
        const _io171 = input => (undefined === input.name || "string" === typeof input.name) && (undefined === input.url || "string" === typeof input.url) && (undefined === input.email || "string" === typeof input.email && /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i.test(input.email));
        const _io172 = input => "string" === typeof input.name && (undefined === input.identifier || "string" === typeof input.identifier) && (undefined === input.url || "string" === typeof input.url);
        const _io173 = input => (undefined === input.schemas || "object" === typeof input.schemas && null !== input.schemas && false === Array.isArray(input.schemas) && _io174(input.schemas)) && (undefined === input.securitySchemes || "object" === typeof input.securitySchemes && null !== input.securitySchemes && false === Array.isArray(input.securitySchemes) && _io188(input.securitySchemes));
        const _io174 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _iu7(value);
        }));
        const _io175 = input => ("string" === typeof input["const"] || "number" === typeof input["const"] || "boolean" === typeof input["const"]) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples));
        const _io176 = input => (undefined === input["default"] || "boolean" === typeof input["default"]) && "boolean" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples));
        const _io177 = input => (undefined === input["default"] || "number" === typeof input["default"] && (Math.floor(input["default"]) === input["default"] && -0x8000000000000000 <= input["default"] && input["default"] <= 0x8000000000000000)) && (undefined === input.minimum || "number" === typeof input.minimum && (Math.floor(input.minimum) === input.minimum && -0x8000000000000000 <= input.minimum && input.minimum <= 0x8000000000000000)) && (undefined === input.maximum || "number" === typeof input.maximum && (Math.floor(input.maximum) === input.maximum && -0x8000000000000000 <= input.maximum && input.maximum <= 0x8000000000000000)) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && (Math.floor(input.multipleOf) === input.multipleOf && 0 <= input.multipleOf && input.multipleOf <= 0x10000000000000000 && 0 < input.multipleOf)) && "integer" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples));
        const _io178 = input => (undefined === input["default"] || "number" === typeof input["default"]) && (undefined === input.minimum || "number" === typeof input.minimum) && (undefined === input.maximum || "number" === typeof input.maximum) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && 0 < input.multipleOf) && "number" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples));
        const _io179 = input => (undefined === input["default"] || "string" === typeof input["default"]) && (undefined === input.format || "string" === typeof input.format) && (undefined === input.pattern || "string" === typeof input.pattern) && (undefined === input.contentMediaType || "string" === typeof input.contentMediaType) && (undefined === input.minLength || "number" === typeof input.minLength && (Math.floor(input.minLength) === input.minLength && 0 <= input.minLength && input.minLength <= 0x10000000000000000)) && (undefined === input.maxLength || "number" === typeof input.maxLength && (Math.floor(input.maxLength) === input.maxLength && 0 <= input.maxLength && input.maxLength <= 0x10000000000000000)) && "string" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples));
        const _io180 = input => "object" === typeof input.items && null !== input.items && false === Array.isArray(input.items) && _iu7(input.items) && (undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems) && (undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000)) && (undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000)) && "array" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples));
        const _io181 = input => "array" === input.type && (Array.isArray(input.prefixItems) && input.prefixItems.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu7(elem)))) && (null !== input.additionalItems && (undefined === input.additionalItems || "boolean" === typeof input.additionalItems || "object" === typeof input.additionalItems && null !== input.additionalItems && false === Array.isArray(input.additionalItems) && _iu7(input.additionalItems))) && (undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems) && (undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000)) && (undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000)) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples));
        const _io182 = input => (undefined === input.properties || "object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) && _io174(input.properties)) && (null !== input.additionalProperties && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || "object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) && _iu7(input.additionalProperties))) && (undefined === input.required || Array.isArray(input.required) && input.required.every((elem => "string" === typeof elem))) && "object" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples));
        const _io183 = input => "string" === typeof input.$ref && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples));
        const _io184 = input => Array.isArray(input.oneOf) && input.oneOf.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu8(elem))) && (undefined === input.discriminator || "object" === typeof input.discriminator && null !== input.discriminator && _io187(input.discriminator)) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples));
        const _io185 = input => (null === input["default"] || undefined === input["default"]) && "null" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples));
        const _io186 = input => null !== input.type && undefined === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples));
        const _io187 = input => "string" === typeof input.propertyName && (undefined === input.mapping || "object" === typeof input.mapping && null !== input.mapping && false === Array.isArray(input.mapping) && _io35(input.mapping));
        const _io188 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && _iu23(value);
        }));
        const _io189 = input => "apiKey" === input.type && (undefined === input["in"] || "query" === input["in"] || "header" === input["in"] || "cookie" === input["in"]) && (undefined === input.name || "string" === typeof input.name) && (undefined === input.description || "string" === typeof input.description);
        const _io190 = input => "http" === input.type && "basic" === input.scheme && (undefined === input.description || "string" === typeof input.description);
        const _io191 = input => "http" === input.type && "bearer" === input.scheme && (undefined === input.bearerFormat || "string" === typeof input.bearerFormat) && (undefined === input.description || "string" === typeof input.description);
        const _io192 = input => "oauth2" === input.type && ("object" === typeof input.flows && null !== input.flows && false === Array.isArray(input.flows) && _io193(input.flows)) && (undefined === input.description || "string" === typeof input.description);
        const _io193 = input => (undefined === input.authorizationCode || "object" === typeof input.authorizationCode && null !== input.authorizationCode && false === Array.isArray(input.authorizationCode) && _io194(input.authorizationCode)) && (undefined === input.implicit || "object" === typeof input.implicit && null !== input.implicit && false === Array.isArray(input.implicit) && _io195(input.implicit)) && (undefined === input.password || "object" === typeof input.password && null !== input.password && false === Array.isArray(input.password) && _io196(input.password)) && (undefined === input.clientCredentials || "object" === typeof input.clientCredentials && null !== input.clientCredentials && false === Array.isArray(input.clientCredentials) && _io196(input.clientCredentials));
        const _io194 = input => (undefined === input.authorizationUrl || "string" === typeof input.authorizationUrl) && (undefined === input.tokenUrl || "string" === typeof input.tokenUrl) && (undefined === input.refreshUrl || "string" === typeof input.refreshUrl) && (undefined === input.scopes || "object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) && _io35(input.scopes));
        const _io195 = input => (undefined === input.authorizationUrl || "string" === typeof input.authorizationUrl) && (undefined === input.refreshUrl || "string" === typeof input.refreshUrl) && (undefined === input.scopes || "object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) && _io35(input.scopes));
        const _io196 = input => (undefined === input.tokenUrl || "string" === typeof input.tokenUrl) && (undefined === input.refreshUrl || "string" === typeof input.refreshUrl) && (undefined === input.scopes || "object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) && _io35(input.scopes));
        const _io197 = input => "openIdConnect" === input.type && "string" === typeof input.openIdConnectUrl && (undefined === input.description || "string" === typeof input.description);
        const _io198 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _io199(value);
        }));
        const _io199 = input => (undefined === input.servers || Array.isArray(input.servers) && input.servers.every((elem => "object" === typeof elem && null !== elem && _io167(elem)))) && (undefined === input.summary || "string" === typeof input.summary) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.options || "object" === typeof input.options && null !== input.options && false === Array.isArray(input.options) && _io200(input.options)) && (undefined === input.get || "object" === typeof input.get && null !== input.get && false === Array.isArray(input.get) && _io200(input.get)) && (undefined === input.post || "object" === typeof input.post && null !== input.post && false === Array.isArray(input.post) && _io200(input.post)) && (undefined === input.patch || "object" === typeof input.patch && null !== input.patch && false === Array.isArray(input.patch) && _io200(input.patch)) && (undefined === input.put || "object" === typeof input.put && null !== input.put && false === Array.isArray(input.put) && _io200(input.put)) && (undefined === input["delete"] || "object" === typeof input["delete"] && null !== input["delete"] && false === Array.isArray(input["delete"]) && _io200(input["delete"])) && (undefined === input.head || "object" === typeof input.head && null !== input.head && false === Array.isArray(input.head) && _io200(input.head)) && (undefined === input.trace || "object" === typeof input.trace && null !== input.trace && false === Array.isArray(input.trace) && _io200(input.trace));
        const _io200 = input => (undefined === input.operationId || "string" === typeof input.operationId) && (undefined === input.parameters || Array.isArray(input.parameters) && input.parameters.every((elem => "object" === typeof elem && null !== elem && _io201(elem)))) && (undefined === input.requestBody || "object" === typeof input.requestBody && null !== input.requestBody && false === Array.isArray(input.requestBody) && _io204(input.requestBody)) && (undefined === input.responses || "object" === typeof input.responses && null !== input.responses && false === Array.isArray(input.responses) && _io207(input.responses)) && (undefined === input.servers || Array.isArray(input.servers) && input.servers.every((elem => "object" === typeof elem && null !== elem && _io167(elem)))) && (undefined === input.summary || "string" === typeof input.summary) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.security || Array.isArray(input.security) && input.security.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io39(elem)))) && (undefined === input.tags || Array.isArray(input.tags) && input.tags.every((elem => "string" === typeof elem))) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && (undefined === input["x-samchon-human"] || "boolean" === typeof input["x-samchon-human"]) && (undefined === input["x-samchon-accessor"] || Array.isArray(input["x-samchon-accessor"]) && input["x-samchon-accessor"].every((elem => "string" === typeof elem))) && (undefined === input["x-samchon-controller"] || "string" === typeof input["x-samchon-controller"]);
        const _io201 = input => (undefined === input.name || "string" === typeof input.name) && ("path" === input["in"] || "query" === input["in"] || "header" === input["in"] || "cookie" === input["in"]) && ("object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) && _iu7(input.schema)) && (undefined === input.required || "boolean" === typeof input.required) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io202(input.examples));
        const _io202 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _io203(value);
        }));
        const _io203 = input => (undefined === input.summary || "string" === typeof input.summary) && (undefined === input.description || "string" === typeof input.description) && true && (undefined === input.externalValue || "string" === typeof input.externalValue);
        const _io204 = input => (undefined === input.content || "object" === typeof input.content && null !== input.content && false === Array.isArray(input.content) && _io205(input.content)) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.required || "boolean" === typeof input.required) && (undefined === input["x-nestia-encrypted"] || "boolean" === typeof input["x-nestia-encrypted"]);
        const _io205 = input => (undefined === input["text/plain"] || "object" === typeof input["text/plain"] && null !== input["text/plain"] && false === Array.isArray(input["text/plain"]) && _io206(input["text/plain"])) && (undefined === input["application/json"] || "object" === typeof input["application/json"] && null !== input["application/json"] && false === Array.isArray(input["application/json"]) && _io206(input["application/json"])) && (undefined === input["application/x-www-form-url-encoded"] || "object" === typeof input["application/x-www-form-url-encoded"] && null !== input["application/x-www-form-url-encoded"] && false === Array.isArray(input["application/x-www-form-url-encoded"]) && _io206(input["application/x-www-form-url-encoded"])) && (undefined === input["multipart/form-data"] || "object" === typeof input["multipart/form-data"] && null !== input["multipart/form-data"] && false === Array.isArray(input["multipart/form-data"]) && _io206(input["multipart/form-data"])) && (undefined === input["*/*"] || "object" === typeof input["*/*"] && null !== input["*/*"] && false === Array.isArray(input["*/*"]) && _io206(input["*/*"])) && Object.keys(input).every((key => {
            if ([ "text/plain", "application/json", "application/x-www-form-url-encoded", "multipart/form-data", "*/*" ].some((prop => key === prop))) return true;
            const value = input[key];
            if (undefined === value) return true;
            return undefined === value || "object" === typeof value && null !== value && false === Array.isArray(value) && _io206(value);
        }));
        const _io206 = input => (undefined === input.schema || "object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) && _iu7(input.schema)) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io202(input.examples));
        const _io207 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _io208(value);
        }));
        const _io208 = input => (undefined === input.headers || "object" === typeof input.headers && null !== input.headers && false === Array.isArray(input.headers) && _io209(input.headers)) && (undefined === input.content || "object" === typeof input.content && null !== input.content && false === Array.isArray(input.content) && _io205(input.content)) && (undefined === input.description || "string" === typeof input.description) && (undefined === input["x-nestia-encrypted"] || "boolean" === typeof input["x-nestia-encrypted"]);
        const _io209 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && _io201(value);
        }));
        const _io210 = input => "string" === typeof input.name && (undefined === input.description || "string" === typeof input.description);
        const _iu0 = input => (() => {
            if ("boolean" === input.type) return _io5(input); else if ("number" === input.type) return _io7(input); else if ("integer" === input.type) return _io6(input); else if ("string" === input.type) return _io8(input); else if ("array" === input.type) return _io9(input); else if ("object" === input.type) return _io10(input); else if (undefined !== input.$ref) return _io11(input); else if (undefined !== input["x-anyOf"]) return _io12(input); else if (undefined !== input["x-oneOf"]) return _io13(input); else if ("null" === input.type) return _io14(input); else return _io15(input);
        })();
        const _iu1 = input => (() => {
            if ("boolean" === input.type) return _io17(input); else if ("number" === input.type) return _io19(input); else if ("integer" === input.type) return _io18(input); else if ("string" === input.type) return _io20(input); else if ("array" === input.type) return _io21(input); else if ("object" === input.type) return _io22(input); else if (undefined !== input["x-anyOf"]) return _io24(input); else if (undefined !== input["x-oneOf"]) return _io25(input); else if ("null" === input.type) return _io26(input); else if (undefined !== input.schema) return _io28(input); else return (() => {
                if (_io23(input)) return _io23(input);
                if (_io27(input)) return _io27(input);
                if (_io42(input)) return _io42(input);
                return false;
            })();
        })();
        const _iu2 = input => (() => {
            if ("boolean" === input.type) return _io17(input); else if ("number" === input.type) return _io19(input); else if ("integer" === input.type) return _io18(input); else if ("string" === input.type) return _io20(input); else if ("array" === input.type) return _io21(input); else if ("object" === input.type) return _io22(input); else if (undefined !== input["x-anyOf"]) return _io24(input); else if (undefined !== input["x-oneOf"]) return _io25(input); else if ("null" === input.type) return _io26(input); else if (undefined !== input.schema) return _io28(input); else return (() => {
                if (_io23(input)) return _io23(input);
                if (_io27(input)) return _io27(input);
                if (_io44(input)) return _io44(input);
                return false;
            })();
        })();
        const _iu3 = input => (() => {
            if ("boolean" === input.type) return _io57(input); else if ("number" === input.type) return _io60(input); else if ("integer" === input.type) return _io59(input); else if ("string" === input.type) return _io61(input); else if ("array" === input.type) return _io62(input); else if ("object" === input.type) return _io63(input); else if (undefined !== input.$ref) return _io64(input); else if (undefined !== input.allOf) return _io65(input); else if (undefined !== input.anyOf) return _io66(input); else if (undefined !== input.oneOf) return _io67(input); else if ("null" === input.type) return _io69(input); else return _io70(input);
        })();
        const _iu4 = input => (() => {
            if (undefined !== input["in"]) return _io82(input); else if ("string" === typeof input.$ref && RegExp(/^#\/components\/parameters\/(.*)/).test(input.$ref)) return _io99(input); else if ("string" === typeof input.$ref && RegExp(/^#\/components\/headers\/(.*)/).test(input.$ref)) return _io80(input); else return false;
        })();
        const _iu5 = input => (() => {
            if ("object" === input.type) return _io114(input); else if (Array.isArray(input.type) && input.type.every((elem => "string" === elem || "number" === elem || "boolean" === elem || "object" === elem || "integer" === elem || "array" === elem || "null" === elem))) return _io115(input); else if ("boolean" === input.type) return _io117(input); else if ("number" === input.type) return _io119(input); else if ("integer" === input.type) return _io118(input); else if ("string" === input.type) return _io120(input); else if ("array" === input.type) return _io121(input); else if (undefined !== input.$recursiveRef) return _io123(input); else if ("null" === input.type) return _io128(input); else return (() => {
                if (undefined !== input["const"]) return _io116(input); else if (undefined !== input.$ref) return _io122(input); else if (undefined !== input.allOf) return _io124(input); else if (undefined !== input.anyOf) return _io125(input); else if (undefined !== input.oneOf) return _io126(input); else return _io129(input);
            })();
        })();
        const _iu6 = input => (() => {
            if (undefined !== input["in"]) return _io132(input); else if ("string" === typeof input.$ref && RegExp(/^#\/components\/parameters\/(.*)/).test(input.$ref)) return _io137(input); else if ("string" === typeof input.$ref && RegExp(/^#\/components\/headers\/(.*)/).test(input.$ref)) return _io136(input); else return false;
        })();
        const _iu7 = input => (() => {
            if (undefined !== input["const"]) return _io175(input); else if ("boolean" === input.type) return _io176(input); else if ("number" === input.type) return _io178(input); else if ("integer" === input.type) return _io177(input); else if ("string" === input.type) return _io179(input); else if (undefined !== input.items) return _io180(input); else if (undefined !== input.prefixItems) return _io181(input); else if ("object" === input.type) return _io182(input); else if (undefined !== input.$ref) return _io183(input); else if (undefined !== input.oneOf) return _io184(input); else if ("null" === input.type) return _io185(input); else return _io186(input);
        })();
        const _iu8 = input => (() => {
            if (undefined !== input["const"]) return _io175(input); else if ("boolean" === input.type) return _io176(input); else if ("number" === input.type) return _io178(input); else if ("integer" === input.type) return _io177(input); else if ("string" === input.type) return _io179(input); else if (undefined !== input.items) return _io180(input); else if (undefined !== input.prefixItems) return _io181(input); else if ("object" === input.type) return _io182(input); else if (undefined !== input.$ref) return _io183(input); else if ("null" === input.type) return _io185(input); else return _io186(input);
        })();
        const _iu9 = input => (() => {
            if ("boolean" === input.type) return _io17(input); else if ("number" === input.type) return _io19(input); else if ("integer" === input.type) return _io18(input); else if ("string" === input.type) return _io20(input); else if ("array" === input.type) return _io21(input); else if ("object" === input.type) return _io22(input); else if (undefined !== input.$ref) return _io23(input); else if (undefined !== input["x-anyOf"]) return _io24(input); else if (undefined !== input["x-oneOf"]) return _io25(input); else if ("null" === input.type) return _io26(input); else if (undefined !== input.schema) return _io28(input); else return _io27(input);
        })();
        const _iu10 = input => (() => {
            if ("apiKey" === input.type) return _io32(input); else if ("basic" === input.type) return _io33(input); else if ("implicit" === input.flow) return _io34(input); else if ("accessCode" === input.flow) return _io36(input); else if ("application" === input.flow) return _io38(input); else if ("password" === input.flow) return _io37(input); else return false;
        })();
        const _iu11 = input => (() => {
            if (undefined !== input.$ref) return _io46(input); else return _io30(input);
        })();
        const _iu12 = input => (() => {
            if (undefined !== input.$ref) return _io77(input); else return _io76(input);
        })();
        const _iu13 = input => (() => {
            if (undefined !== input.schema) return _io79(input); else if (undefined !== input.$ref) return _io80(input); else return false;
        })();
        const _iu14 = input => (() => {
            if ("apiKey" === input.type) return _io86(input); else if ("basic" === input.scheme) return _io87(input); else if ("bearer" === input.scheme) return _io88(input); else if ("oauth2" === input.type) return _io89(input); else if ("openIdConnect" === input.type) return _io94(input); else return false;
        })();
        const _iu15 = input => (() => {
            if (undefined !== input.$ref) return _io101(input); else return _io84(input);
        })();
        const _iu16 = input => (() => {
            if (undefined !== input.$ref) return _io103(input); else return _io72(input);
        })();
        const _iu17 = input => (() => {
            if (undefined !== input.$ref) return _io135(input); else return _io134(input);
        })();
        const _iu18 = input => (() => {
            if (undefined !== input.$ref) return _io142(input); else return _io139(input);
        })();
        const _iu19 = input => (() => {
            if (undefined !== input.$ref) return _io147(input); else return _io144(input);
        })();
        const _iu20 = input => (() => {
            if (undefined !== input.$ref) return _io136(input); else if (undefined !== input.schema) return _io146(input); else return false;
        })();
        const _iu21 = input => (() => {
            if ("apiKey" === input.type) return _io152(input); else if ("basic" === input.scheme) return _io153(input); else if ("bearer" === input.scheme) return _io154(input); else if ("oauth2" === input.type) return _io155(input); else if ("openIdConnect" === input.type) return _io160(input); else return false;
        })();
        const _iu22 = input => (() => {
            if (undefined !== input.$ref) return _io164(input); else return _io131(input);
        })();
        const _iu23 = input => (() => {
            if ("apiKey" === input.type) return _io189(input); else if ("basic" === input.scheme) return _io190(input); else if ("bearer" === input.scheme) return _io191(input); else if ("oauth2" === input.type) return _io192(input); else if ("openIdConnect" === input.type) return _io197(input); else return false;
        })();
        const _iu24 = input => (() => {
            if (undefined !== input.swagger) return _io0(input); else if (null !== input.openapi && undefined !== input.openapi && ("3.0" === input.openapi || "string" === typeof input.openapi && RegExp(/^3\.0\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(input.openapi))) return _io48(input); else if ("string" === typeof input.openapi && RegExp(/^3\.1\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(input.openapi)) return _io105(input); else if (undefined !== input["x-samchon-emended-v4"]) return _io166(input); else return false;
        })();
        const _ao0 = (input, _path, _exceptionable = true) => (null !== input.swagger || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".swagger",
            expected: '("2.0" | `2.0.${number}`)',
            value: input.swagger
        }, _errorFactory)) && (undefined !== input.swagger || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".swagger",
            expected: '("2.0" | `2.0.${number}`)',
            value: input.swagger
        }, _errorFactory)) && ("2.0" === input.swagger || "string" === typeof input.swagger && RegExp(/^2\.0\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(input.swagger) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".swagger",
            expected: '("2.0" | `2.0.${number}`)',
            value: input.swagger
        }, _errorFactory)) && (undefined === input.info || ("object" === typeof input.info && null !== input.info || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".info",
            expected: "(SwaggerV2.IDocument.IInfo | undefined)",
            value: input.info
        }, _errorFactory)) && _ao1(input.info, _path + ".info", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".info",
            expected: "(SwaggerV2.IDocument.IInfo | undefined)",
            value: input.info
        }, _errorFactory)) && (undefined === input.host || "string" === typeof input.host || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".host",
            expected: "(string | undefined)",
            value: input.host
        }, _errorFactory)) && (undefined === input.basePath || "string" === typeof input.basePath || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".basePath",
            expected: "(string | undefined)",
            value: input.basePath
        }, _errorFactory)) && (undefined === input.consumes || (Array.isArray(input.consumes) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".consumes",
            expected: "(Array<string> | undefined)",
            value: input.consumes
        }, _errorFactory)) && input.consumes.every(((elem, _index83) => "string" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".consumes[" + _index83 + "]",
            expected: "string",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".consumes",
            expected: "(Array<string> | undefined)",
            value: input.consumes
        }, _errorFactory)) && (undefined === input.produces || (Array.isArray(input.produces) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".produces",
            expected: "(Array<string> | undefined)",
            value: input.produces
        }, _errorFactory)) && input.produces.every(((elem, _index84) => "string" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".produces[" + _index84 + "]",
            expected: "string",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".produces",
            expected: "(Array<string> | undefined)",
            value: input.produces
        }, _errorFactory)) && (undefined === input.definitions || ("object" === typeof input.definitions && null !== input.definitions && false === Array.isArray(input.definitions) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".definitions",
            expected: "(Record<string, SwaggerV2.IJsonSchema> | undefined)",
            value: input.definitions
        }, _errorFactory)) && _ao4(input.definitions, _path + ".definitions", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".definitions",
            expected: "(Record<string, SwaggerV2.IJsonSchema> | undefined)",
            value: input.definitions
        }, _errorFactory)) && (undefined === input.parameters || ("object" === typeof input.parameters && null !== input.parameters && false === Array.isArray(input.parameters) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".parameters",
            expected: "(Record<string, SwaggerV2.IOperation.IParameter> | undefined)",
            value: input.parameters
        }, _errorFactory)) && _ao16(input.parameters, _path + ".parameters", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".parameters",
            expected: "(Record<string, SwaggerV2.IOperation.IParameter> | undefined)",
            value: input.parameters
        }, _errorFactory)) && (undefined === input.responses || ("object" === typeof input.responses && null !== input.responses && false === Array.isArray(input.responses) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".responses",
            expected: "(Record<string, SwaggerV2.IOperation.IResponse> | undefined)",
            value: input.responses
        }, _errorFactory)) && _ao29(input.responses, _path + ".responses", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".responses",
            expected: "(Record<string, SwaggerV2.IOperation.IResponse> | undefined)",
            value: input.responses
        }, _errorFactory)) && (undefined === input.securityDefinitions || ("object" === typeof input.securityDefinitions && null !== input.securityDefinitions && false === Array.isArray(input.securityDefinitions) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".securityDefinitions",
            expected: "(Record<string, SwaggerV2.ISecurityDefinition> | undefined)",
            value: input.securityDefinitions
        }, _errorFactory)) && _ao31(input.securityDefinitions, _path + ".securityDefinitions", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".securityDefinitions",
            expected: "(Record<string, SwaggerV2.ISecurityDefinition> | undefined)",
            value: input.securityDefinitions
        }, _errorFactory)) && (undefined === input.security || (Array.isArray(input.security) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".security",
            expected: "(Array<Record<string, Array<string>>> | undefined)",
            value: input.security
        }, _errorFactory)) && input.security.every(((elem, _index85) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".security[" + _index85 + "]",
            expected: "Record<string, Array<string>>",
            value: elem
        }, _errorFactory)) && _ao39(elem, _path + ".security[" + _index85 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".security[" + _index85 + "]",
            expected: "Record<string, Array<string>>",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".security",
            expected: "(Array<Record<string, Array<string>>> | undefined)",
            value: input.security
        }, _errorFactory)) && (undefined === input.paths || ("object" === typeof input.paths && null !== input.paths && false === Array.isArray(input.paths) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".paths",
            expected: "(Record<string, SwaggerV2.IPath> | undefined)",
            value: input.paths
        }, _errorFactory)) && _ao40(input.paths, _path + ".paths", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".paths",
            expected: "(Record<string, SwaggerV2.IPath> | undefined)",
            value: input.paths
        }, _errorFactory)) && (undefined === input.tags || (Array.isArray(input.tags) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".tags",
            expected: "(Array<SwaggerV2.IDocument.ITag> | undefined)",
            value: input.tags
        }, _errorFactory)) && input.tags.every(((elem, _index86) => ("object" === typeof elem && null !== elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".tags[" + _index86 + "]",
            expected: "SwaggerV2.IDocument.ITag",
            value: elem
        }, _errorFactory)) && _ao47(elem, _path + ".tags[" + _index86 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".tags[" + _index86 + "]",
            expected: "SwaggerV2.IDocument.ITag",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".tags",
            expected: "(Array<SwaggerV2.IDocument.ITag> | undefined)",
            value: input.tags
        }, _errorFactory));
        const _ao1 = (input, _path, _exceptionable = true) => ("string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "string",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.termsOfService || "string" === typeof input.termsOfService || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".termsOfService",
            expected: "(string | undefined)",
            value: input.termsOfService
        }, _errorFactory)) && (undefined === input.contact || ("object" === typeof input.contact && null !== input.contact && false === Array.isArray(input.contact) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".contact",
            expected: "(SwaggerV2.IDocument.IContact | undefined)",
            value: input.contact
        }, _errorFactory)) && _ao2(input.contact, _path + ".contact", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".contact",
            expected: "(SwaggerV2.IDocument.IContact | undefined)",
            value: input.contact
        }, _errorFactory)) && (undefined === input.license || ("object" === typeof input.license && null !== input.license || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".license",
            expected: "(SwaggerV2.IDocument.ILicense | undefined)",
            value: input.license
        }, _errorFactory)) && _ao3(input.license, _path + ".license", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".license",
            expected: "(SwaggerV2.IDocument.ILicense | undefined)",
            value: input.license
        }, _errorFactory)) && ("string" === typeof input.version || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".version",
            expected: "string",
            value: input.version
        }, _errorFactory));
        const _ao2 = (input, _path, _exceptionable = true) => (undefined === input.name || "string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".name",
            expected: "(string | undefined)",
            value: input.name
        }, _errorFactory)) && (undefined === input.url || "string" === typeof input.url || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".url",
            expected: "(string | undefined)",
            value: input.url
        }, _errorFactory)) && (undefined === input.email || "string" === typeof input.email || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".email",
            expected: "(string | undefined)",
            value: input.email
        }, _errorFactory));
        const _ao3 = (input, _path, _exceptionable = true) => ("string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".name",
            expected: "string",
            value: input.name
        }, _errorFactory)) && (undefined === input.url || "string" === typeof input.url || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".url",
            expected: "(string | undefined)",
            value: input.url
        }, _errorFactory));
        const _ao4 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown)",
                value
            }, _errorFactory)) && _au0(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown)",
                value
            }, _errorFactory);
        }));
        const _ao5 = (input, _path, _exceptionable = true) => (null === input["default"] || undefined === input["default"] || "boolean" === typeof input["default"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["default"]',
            expected: "(boolean | null | undefined)",
            value: input["default"]
        }, _errorFactory)) && (undefined === input["enum"] || (Array.isArray(input["enum"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["enum"]',
            expected: "(Array<boolean | null> | undefined)",
            value: input["enum"]
        }, _errorFactory)) && input["enum"].every(((elem, _index87) => null === elem || "boolean" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["enum"][' + _index87 + "]",
            expected: "(boolean | null)",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["enum"]',
            expected: "(Array<boolean | null> | undefined)",
            value: input["enum"]
        }, _errorFactory)) && ("boolean" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: '"boolean"',
            value: input.type
        }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["x-nullable"]',
            expected: "(boolean | undefined)",
            value: input["x-nullable"]
        }, _errorFactory)) && (undefined === input.examples || Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }, _errorFactory));
        const _ao6 = (input, _path, _exceptionable = true) => (null === input["default"] || undefined === input["default"] || "number" === typeof input["default"] && (Math.floor(input["default"]) === input["default"] && -0x8000000000000000 <= input["default"] && input["default"] <= 0x8000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["default"]',
            expected: 'number & Type<"int64">',
            value: input["default"]
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["default"]',
            expected: '((number & Type<"int64">) | null | undefined)',
            value: input["default"]
        }, _errorFactory)) && (undefined === input["enum"] || (Array.isArray(input["enum"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["enum"]',
            expected: "(Array<number | null> | undefined)",
            value: input["enum"]
        }, _errorFactory)) && input["enum"].every(((elem, _index88) => null === elem || "number" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["enum"][' + _index88 + "]",
            expected: "(null | number)",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["enum"]',
            expected: "(Array<number | null> | undefined)",
            value: input["enum"]
        }, _errorFactory)) && (undefined === input.minimum || "number" === typeof input.minimum && (Math.floor(input.minimum) === input.minimum && -0x8000000000000000 <= input.minimum && input.minimum <= 0x8000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".minimum",
            expected: 'number & Type<"int64">',
            value: input.minimum
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".minimum",
            expected: '((number & Type<"int64">) | undefined)',
            value: input.minimum
        }, _errorFactory)) && (undefined === input.maximum || "number" === typeof input.maximum && (Math.floor(input.maximum) === input.maximum && -0x8000000000000000 <= input.maximum && input.maximum <= 0x8000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".maximum",
            expected: 'number & Type<"int64">',
            value: input.maximum
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".maximum",
            expected: '((number & Type<"int64">) | undefined)',
            value: input.maximum
        }, _errorFactory)) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".exclusiveMinimum",
            expected: "(boolean | number | undefined)",
            value: input.exclusiveMinimum
        }, _errorFactory)) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".exclusiveMaximum",
            expected: "(boolean | number | undefined)",
            value: input.exclusiveMaximum
        }, _errorFactory)) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && (Math.floor(input.multipleOf) === input.multipleOf && 0 <= input.multipleOf && input.multipleOf <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".multipleOf",
            expected: 'number & Type<"uint64">',
            value: input.multipleOf
        }, _errorFactory)) && (0 < input.multipleOf || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".multipleOf",
            expected: "number & ExclusiveMinimum<0>",
            value: input.multipleOf
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".multipleOf",
            expected: '((number & Type<"uint64"> & ExclusiveMinimum<0>) | undefined)',
            value: input.multipleOf
        }, _errorFactory)) && ("integer" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: '"integer"',
            value: input.type
        }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["x-nullable"]',
            expected: "(boolean | undefined)",
            value: input["x-nullable"]
        }, _errorFactory)) && (undefined === input.examples || Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }, _errorFactory));
        const _ao7 = (input, _path, _exceptionable = true) => (null === input["default"] || undefined === input["default"] || "number" === typeof input["default"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["default"]',
            expected: "(null | number | undefined)",
            value: input["default"]
        }, _errorFactory)) && (undefined === input["enum"] || (Array.isArray(input["enum"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["enum"]',
            expected: "(Array<number | null> | undefined)",
            value: input["enum"]
        }, _errorFactory)) && input["enum"].every(((elem, _index89) => null === elem || "number" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["enum"][' + _index89 + "]",
            expected: "(null | number)",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["enum"]',
            expected: "(Array<number | null> | undefined)",
            value: input["enum"]
        }, _errorFactory)) && (undefined === input.minimum || "number" === typeof input.minimum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".minimum",
            expected: "(number | undefined)",
            value: input.minimum
        }, _errorFactory)) && (undefined === input.maximum || "number" === typeof input.maximum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".maximum",
            expected: "(number | undefined)",
            value: input.maximum
        }, _errorFactory)) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".exclusiveMinimum",
            expected: "(boolean | number | undefined)",
            value: input.exclusiveMinimum
        }, _errorFactory)) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".exclusiveMaximum",
            expected: "(boolean | number | undefined)",
            value: input.exclusiveMaximum
        }, _errorFactory)) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && (0 < input.multipleOf || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".multipleOf",
            expected: "number & ExclusiveMinimum<0>",
            value: input.multipleOf
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".multipleOf",
            expected: "((number & ExclusiveMinimum<0>) | undefined)",
            value: input.multipleOf
        }, _errorFactory)) && ("number" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: '"number"',
            value: input.type
        }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["x-nullable"]',
            expected: "(boolean | undefined)",
            value: input["x-nullable"]
        }, _errorFactory)) && (undefined === input.examples || Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }, _errorFactory));
        const _ao8 = (input, _path, _exceptionable = true) => (null === input["default"] || undefined === input["default"] || "string" === typeof input["default"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["default"]',
            expected: "(null | string | undefined)",
            value: input["default"]
        }, _errorFactory)) && (undefined === input["enum"] || (Array.isArray(input["enum"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["enum"]',
            expected: "(Array<string | null> | undefined)",
            value: input["enum"]
        }, _errorFactory)) && input["enum"].every(((elem, _index90) => null === elem || "string" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["enum"][' + _index90 + "]",
            expected: "(null | string)",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["enum"]',
            expected: "(Array<string | null> | undefined)",
            value: input["enum"]
        }, _errorFactory)) && (undefined === input.format || "string" === typeof input.format || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".format",
            expected: "(string | undefined)",
            value: input.format
        }, _errorFactory)) && (undefined === input.pattern || "string" === typeof input.pattern || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".pattern",
            expected: "(string | undefined)",
            value: input.pattern
        }, _errorFactory)) && (undefined === input.minLength || "number" === typeof input.minLength && (Math.floor(input.minLength) === input.minLength && 0 <= input.minLength && input.minLength <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".minLength",
            expected: 'number & Type<"uint64">',
            value: input.minLength
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".minLength",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.minLength
        }, _errorFactory)) && (undefined === input.maxLength || "number" === typeof input.maxLength && (Math.floor(input.maxLength) === input.maxLength && 0 <= input.maxLength && input.maxLength <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".maxLength",
            expected: 'number & Type<"uint64">',
            value: input.maxLength
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".maxLength",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.maxLength
        }, _errorFactory)) && ("string" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: '"string"',
            value: input.type
        }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["x-nullable"]',
            expected: "(boolean | undefined)",
            value: input["x-nullable"]
        }, _errorFactory)) && (undefined === input.examples || Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }, _errorFactory));
        const _ao9 = (input, _path, _exceptionable = true) => (("object" === typeof input.items && null !== input.items && false === Array.isArray(input.items) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".items",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown)",
            value: input.items
        }, _errorFactory)) && _au0(input.items, _path + ".items", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".items",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown)",
            value: input.items
        }, _errorFactory)) && (undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".uniqueItems",
            expected: "(boolean | undefined)",
            value: input.uniqueItems
        }, _errorFactory)) && (undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".minItems",
            expected: 'number & Type<"uint64">',
            value: input.minItems
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".minItems",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.minItems
        }, _errorFactory)) && (undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".maxItems",
            expected: 'number & Type<"uint64">',
            value: input.maxItems
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".maxItems",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.maxItems
        }, _errorFactory)) && ("array" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: '"array"',
            value: input.type
        }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["x-nullable"]',
            expected: "(boolean | undefined)",
            value: input["x-nullable"]
        }, _errorFactory)) && (undefined === input.examples || Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }, _errorFactory));
        const _ao10 = (input, _path, _exceptionable = true) => (undefined === input.properties || ("object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".properties",
            expected: "(Record<string, SwaggerV2.IJsonSchema> | undefined)",
            value: input.properties
        }, _errorFactory)) && _ao4(input.properties, _path + ".properties", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".properties",
            expected: "(Record<string, SwaggerV2.IJsonSchema> | undefined)",
            value: input.properties
        }, _errorFactory)) && (undefined === input.required || (Array.isArray(input.required) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".required",
            expected: "(Array<string> | undefined)",
            value: input.required
        }, _errorFactory)) && input.required.every(((elem, _index91) => "string" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".required[" + _index91 + "]",
            expected: "string",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".required",
            expected: "(Array<string> | undefined)",
            value: input.required
        }, _errorFactory)) && ((null !== input.additionalProperties || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".additionalProperties",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalProperties
        }, _errorFactory)) && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || ("object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".additionalProperties",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalProperties
        }, _errorFactory)) && _au0(input.additionalProperties, _path + ".additionalProperties", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".additionalProperties",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalProperties
        }, _errorFactory))) && (undefined === input.maxProperties || "number" === typeof input.maxProperties || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".maxProperties",
            expected: "(number | undefined)",
            value: input.maxProperties
        }, _errorFactory)) && (undefined === input.minProperties || "number" === typeof input.minProperties || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".minProperties",
            expected: "(number | undefined)",
            value: input.minProperties
        }, _errorFactory)) && ("object" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: '"object"',
            value: input.type
        }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["x-nullable"]',
            expected: "(boolean | undefined)",
            value: input["x-nullable"]
        }, _errorFactory)) && (undefined === input.examples || Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }, _errorFactory));
        const _ao11 = (input, _path, _exceptionable = true) => ("string" === typeof input.$ref || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".$ref",
            expected: "string",
            value: input.$ref
        }, _errorFactory)) && (undefined === input.examples || Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true;
        const _ao12 = (input, _path, _exceptionable = true) => ((Array.isArray(input["x-anyOf"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["x-anyOf"]',
            expected: "Array<SwaggerV2.IJsonSchema>",
            value: input["x-anyOf"]
        }, _errorFactory)) && input["x-anyOf"].every(((elem, _index92) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["x-anyOf"][' + _index92 + "]",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown)",
            value: elem
        }, _errorFactory)) && _au0(elem, _path + '["x-anyOf"][' + _index92 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["x-anyOf"][' + _index92 + "]",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown)",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["x-anyOf"]',
            expected: "Array<SwaggerV2.IJsonSchema>",
            value: input["x-anyOf"]
        }, _errorFactory)) && (undefined === input.examples || Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true;
        const _ao13 = (input, _path, _exceptionable = true) => ((Array.isArray(input["x-oneOf"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["x-oneOf"]',
            expected: "Array<SwaggerV2.IJsonSchema>",
            value: input["x-oneOf"]
        }, _errorFactory)) && input["x-oneOf"].every(((elem, _index93) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["x-oneOf"][' + _index93 + "]",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown)",
            value: elem
        }, _errorFactory)) && _au0(elem, _path + '["x-oneOf"][' + _index93 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["x-oneOf"][' + _index93 + "]",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown)",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["x-oneOf"]',
            expected: "Array<SwaggerV2.IJsonSchema>",
            value: input["x-oneOf"]
        }, _errorFactory)) && (undefined === input.examples || Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true;
        const _ao14 = (input, _path, _exceptionable = true) => ("null" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: '"null"',
            value: input.type
        }, _errorFactory)) && (null === input["default"] || undefined === input["default"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["default"]',
            expected: "(null | undefined)",
            value: input["default"]
        }, _errorFactory)) && (undefined === input.examples || Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true;
        const _ao15 = (input, _path, _exceptionable = true) => (null !== input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: "undefined",
            value: input.type
        }, _errorFactory)) && (undefined === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: "undefined",
            value: input.type
        }, _errorFactory)) && (undefined === input.examples || Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true;
        const _ao16 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(IAnyOf & { name: string; in: string; description?: string | undefined; } | IArray & { name: string; in: string; description?: string | undefined; } | IBoolean & { name: string; in: string; description?: string | undefined; } | IInteger & { name: string; in: string; description?: string | undefined; } | INullOnly & { name: string; in: string; description?: string | undefined; } | INumber & { name: string; in: string; description?: string | undefined; } | IObject & { name: string; in: string; description?: string | undefined; } | IOneOf & { name: string; in: string; description?: string | undefined; } | IReference<string> & { name: string; in: string; description?: string | undefined; } | IString & { name: string; in: string; description?: string | undefined; } | IUnknown & { name: string; in: string; description?: string | undefined; } | SwaggerV2.IOperation.IBodyParameter)",
                value
            }, _errorFactory)) && _au9(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(IAnyOf & { name: string; in: string; description?: string | undefined; } | IArray & { name: string; in: string; description?: string | undefined; } | IBoolean & { name: string; in: string; description?: string | undefined; } | IInteger & { name: string; in: string; description?: string | undefined; } | INullOnly & { name: string; in: string; description?: string | undefined; } | INumber & { name: string; in: string; description?: string | undefined; } | IObject & { name: string; in: string; description?: string | undefined; } | IOneOf & { name: string; in: string; description?: string | undefined; } | IReference<string> & { name: string; in: string; description?: string | undefined; } | IString & { name: string; in: string; description?: string | undefined; } | IUnknown & { name: string; in: string; description?: string | undefined; } | SwaggerV2.IOperation.IBodyParameter)",
                value
            }, _errorFactory);
        }));
        const _ao17 = (input, _path, _exceptionable = true) => (null === input["default"] || undefined === input["default"] || "boolean" === typeof input["default"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["default"]',
            expected: "(boolean | null | undefined)",
            value: input["default"]
        }, _errorFactory)) && (undefined === input["enum"] || (Array.isArray(input["enum"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["enum"]',
            expected: "(Array<boolean | null> | undefined)",
            value: input["enum"]
        }, _errorFactory)) && input["enum"].every(((elem, _index94) => null === elem || "boolean" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["enum"][' + _index94 + "]",
            expected: "(boolean | null)",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["enum"]',
            expected: "(Array<boolean | null> | undefined)",
            value: input["enum"]
        }, _errorFactory)) && ("boolean" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: '"boolean"',
            value: input.type
        }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["x-nullable"]',
            expected: "(boolean | undefined)",
            value: input["x-nullable"]
        }, _errorFactory)) && (undefined === input.examples || Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }, _errorFactory)) && ("string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".name",
            expected: "string",
            value: input.name
        }, _errorFactory)) && ("string" === typeof input["in"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["in"]',
            expected: "string",
            value: input["in"]
        }, _errorFactory));
        const _ao18 = (input, _path, _exceptionable = true) => (null === input["default"] || undefined === input["default"] || "number" === typeof input["default"] && (Math.floor(input["default"]) === input["default"] && -0x8000000000000000 <= input["default"] && input["default"] <= 0x8000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["default"]',
            expected: 'number & Type<"int64">',
            value: input["default"]
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["default"]',
            expected: '((number & Type<"int64">) | null | undefined)',
            value: input["default"]
        }, _errorFactory)) && (undefined === input["enum"] || (Array.isArray(input["enum"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["enum"]',
            expected: "(Array<number | null> | undefined)",
            value: input["enum"]
        }, _errorFactory)) && input["enum"].every(((elem, _index95) => null === elem || "number" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["enum"][' + _index95 + "]",
            expected: "(null | number)",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["enum"]',
            expected: "(Array<number | null> | undefined)",
            value: input["enum"]
        }, _errorFactory)) && (undefined === input.minimum || "number" === typeof input.minimum && (Math.floor(input.minimum) === input.minimum && -0x8000000000000000 <= input.minimum && input.minimum <= 0x8000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".minimum",
            expected: 'number & Type<"int64">',
            value: input.minimum
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".minimum",
            expected: '((number & Type<"int64">) | undefined)',
            value: input.minimum
        }, _errorFactory)) && (undefined === input.maximum || "number" === typeof input.maximum && (Math.floor(input.maximum) === input.maximum && -0x8000000000000000 <= input.maximum && input.maximum <= 0x8000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".maximum",
            expected: 'number & Type<"int64">',
            value: input.maximum
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".maximum",
            expected: '((number & Type<"int64">) | undefined)',
            value: input.maximum
        }, _errorFactory)) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".exclusiveMinimum",
            expected: "(boolean | number | undefined)",
            value: input.exclusiveMinimum
        }, _errorFactory)) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".exclusiveMaximum",
            expected: "(boolean | number | undefined)",
            value: input.exclusiveMaximum
        }, _errorFactory)) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && (Math.floor(input.multipleOf) === input.multipleOf && 0 <= input.multipleOf && input.multipleOf <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".multipleOf",
            expected: 'number & Type<"uint64">',
            value: input.multipleOf
        }, _errorFactory)) && (0 < input.multipleOf || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".multipleOf",
            expected: "number & ExclusiveMinimum<0>",
            value: input.multipleOf
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".multipleOf",
            expected: '((number & Type<"uint64"> & ExclusiveMinimum<0>) | undefined)',
            value: input.multipleOf
        }, _errorFactory)) && ("integer" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: '"integer"',
            value: input.type
        }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["x-nullable"]',
            expected: "(boolean | undefined)",
            value: input["x-nullable"]
        }, _errorFactory)) && (undefined === input.examples || Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }, _errorFactory)) && ("string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".name",
            expected: "string",
            value: input.name
        }, _errorFactory)) && ("string" === typeof input["in"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["in"]',
            expected: "string",
            value: input["in"]
        }, _errorFactory));
        const _ao19 = (input, _path, _exceptionable = true) => (null === input["default"] || undefined === input["default"] || "number" === typeof input["default"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["default"]',
            expected: "(null | number | undefined)",
            value: input["default"]
        }, _errorFactory)) && (undefined === input["enum"] || (Array.isArray(input["enum"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["enum"]',
            expected: "(Array<number | null> | undefined)",
            value: input["enum"]
        }, _errorFactory)) && input["enum"].every(((elem, _index96) => null === elem || "number" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["enum"][' + _index96 + "]",
            expected: "(null | number)",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["enum"]',
            expected: "(Array<number | null> | undefined)",
            value: input["enum"]
        }, _errorFactory)) && (undefined === input.minimum || "number" === typeof input.minimum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".minimum",
            expected: "(number | undefined)",
            value: input.minimum
        }, _errorFactory)) && (undefined === input.maximum || "number" === typeof input.maximum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".maximum",
            expected: "(number | undefined)",
            value: input.maximum
        }, _errorFactory)) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".exclusiveMinimum",
            expected: "(boolean | number | undefined)",
            value: input.exclusiveMinimum
        }, _errorFactory)) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".exclusiveMaximum",
            expected: "(boolean | number | undefined)",
            value: input.exclusiveMaximum
        }, _errorFactory)) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && (0 < input.multipleOf || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".multipleOf",
            expected: "number & ExclusiveMinimum<0>",
            value: input.multipleOf
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".multipleOf",
            expected: "((number & ExclusiveMinimum<0>) | undefined)",
            value: input.multipleOf
        }, _errorFactory)) && ("number" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: '"number"',
            value: input.type
        }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["x-nullable"]',
            expected: "(boolean | undefined)",
            value: input["x-nullable"]
        }, _errorFactory)) && (undefined === input.examples || Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }, _errorFactory)) && ("string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".name",
            expected: "string",
            value: input.name
        }, _errorFactory)) && ("string" === typeof input["in"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["in"]',
            expected: "string",
            value: input["in"]
        }, _errorFactory));
        const _ao20 = (input, _path, _exceptionable = true) => (null === input["default"] || undefined === input["default"] || "string" === typeof input["default"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["default"]',
            expected: "(null | string | undefined)",
            value: input["default"]
        }, _errorFactory)) && (undefined === input["enum"] || (Array.isArray(input["enum"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["enum"]',
            expected: "(Array<string | null> | undefined)",
            value: input["enum"]
        }, _errorFactory)) && input["enum"].every(((elem, _index97) => null === elem || "string" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["enum"][' + _index97 + "]",
            expected: "(null | string)",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["enum"]',
            expected: "(Array<string | null> | undefined)",
            value: input["enum"]
        }, _errorFactory)) && (undefined === input.format || "string" === typeof input.format || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".format",
            expected: "(string | undefined)",
            value: input.format
        }, _errorFactory)) && (undefined === input.pattern || "string" === typeof input.pattern || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".pattern",
            expected: "(string | undefined)",
            value: input.pattern
        }, _errorFactory)) && (undefined === input.minLength || "number" === typeof input.minLength && (Math.floor(input.minLength) === input.minLength && 0 <= input.minLength && input.minLength <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".minLength",
            expected: 'number & Type<"uint64">',
            value: input.minLength
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".minLength",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.minLength
        }, _errorFactory)) && (undefined === input.maxLength || "number" === typeof input.maxLength && (Math.floor(input.maxLength) === input.maxLength && 0 <= input.maxLength && input.maxLength <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".maxLength",
            expected: 'number & Type<"uint64">',
            value: input.maxLength
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".maxLength",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.maxLength
        }, _errorFactory)) && ("string" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: '"string"',
            value: input.type
        }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["x-nullable"]',
            expected: "(boolean | undefined)",
            value: input["x-nullable"]
        }, _errorFactory)) && (undefined === input.examples || Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }, _errorFactory)) && ("string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".name",
            expected: "string",
            value: input.name
        }, _errorFactory)) && ("string" === typeof input["in"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["in"]',
            expected: "string",
            value: input["in"]
        }, _errorFactory));
        const _ao21 = (input, _path, _exceptionable = true) => (("object" === typeof input.items && null !== input.items && false === Array.isArray(input.items) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".items",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown)",
            value: input.items
        }, _errorFactory)) && _au0(input.items, _path + ".items", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".items",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown)",
            value: input.items
        }, _errorFactory)) && (undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".uniqueItems",
            expected: "(boolean | undefined)",
            value: input.uniqueItems
        }, _errorFactory)) && (undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".minItems",
            expected: 'number & Type<"uint64">',
            value: input.minItems
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".minItems",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.minItems
        }, _errorFactory)) && (undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".maxItems",
            expected: 'number & Type<"uint64">',
            value: input.maxItems
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".maxItems",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.maxItems
        }, _errorFactory)) && ("array" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: '"array"',
            value: input.type
        }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["x-nullable"]',
            expected: "(boolean | undefined)",
            value: input["x-nullable"]
        }, _errorFactory)) && (undefined === input.examples || Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }, _errorFactory)) && ("string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".name",
            expected: "string",
            value: input.name
        }, _errorFactory)) && ("string" === typeof input["in"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["in"]',
            expected: "string",
            value: input["in"]
        }, _errorFactory));
        const _ao22 = (input, _path, _exceptionable = true) => (undefined === input.properties || ("object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".properties",
            expected: "(Record<string, SwaggerV2.IJsonSchema> | undefined)",
            value: input.properties
        }, _errorFactory)) && _ao4(input.properties, _path + ".properties", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".properties",
            expected: "(Record<string, SwaggerV2.IJsonSchema> | undefined)",
            value: input.properties
        }, _errorFactory)) && (undefined === input.required || (Array.isArray(input.required) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".required",
            expected: "(Array<string> | undefined)",
            value: input.required
        }, _errorFactory)) && input.required.every(((elem, _index98) => "string" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".required[" + _index98 + "]",
            expected: "string",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".required",
            expected: "(Array<string> | undefined)",
            value: input.required
        }, _errorFactory)) && ((null !== input.additionalProperties || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".additionalProperties",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalProperties
        }, _errorFactory)) && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || ("object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".additionalProperties",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalProperties
        }, _errorFactory)) && _au0(input.additionalProperties, _path + ".additionalProperties", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".additionalProperties",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalProperties
        }, _errorFactory))) && (undefined === input.maxProperties || "number" === typeof input.maxProperties || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".maxProperties",
            expected: "(number | undefined)",
            value: input.maxProperties
        }, _errorFactory)) && (undefined === input.minProperties || "number" === typeof input.minProperties || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".minProperties",
            expected: "(number | undefined)",
            value: input.minProperties
        }, _errorFactory)) && ("object" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: '"object"',
            value: input.type
        }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["x-nullable"]',
            expected: "(boolean | undefined)",
            value: input["x-nullable"]
        }, _errorFactory)) && (undefined === input.examples || Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }, _errorFactory)) && ("string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".name",
            expected: "string",
            value: input.name
        }, _errorFactory)) && ("string" === typeof input["in"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["in"]',
            expected: "string",
            value: input["in"]
        }, _errorFactory));
        const _ao23 = (input, _path, _exceptionable = true) => ("string" === typeof input.$ref || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".$ref",
            expected: "string",
            value: input.$ref
        }, _errorFactory)) && (undefined === input.examples || Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true && ("string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".name",
            expected: "string",
            value: input.name
        }, _errorFactory)) && ("string" === typeof input["in"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["in"]',
            expected: "string",
            value: input["in"]
        }, _errorFactory));
        const _ao24 = (input, _path, _exceptionable = true) => ((Array.isArray(input["x-anyOf"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["x-anyOf"]',
            expected: "Array<SwaggerV2.IJsonSchema>",
            value: input["x-anyOf"]
        }, _errorFactory)) && input["x-anyOf"].every(((elem, _index99) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["x-anyOf"][' + _index99 + "]",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown)",
            value: elem
        }, _errorFactory)) && _au0(elem, _path + '["x-anyOf"][' + _index99 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["x-anyOf"][' + _index99 + "]",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown)",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["x-anyOf"]',
            expected: "Array<SwaggerV2.IJsonSchema>",
            value: input["x-anyOf"]
        }, _errorFactory)) && (undefined === input.examples || Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true && ("string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".name",
            expected: "string",
            value: input.name
        }, _errorFactory)) && ("string" === typeof input["in"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["in"]',
            expected: "string",
            value: input["in"]
        }, _errorFactory));
        const _ao25 = (input, _path, _exceptionable = true) => ((Array.isArray(input["x-oneOf"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["x-oneOf"]',
            expected: "Array<SwaggerV2.IJsonSchema>",
            value: input["x-oneOf"]
        }, _errorFactory)) && input["x-oneOf"].every(((elem, _index100) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["x-oneOf"][' + _index100 + "]",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown)",
            value: elem
        }, _errorFactory)) && _au0(elem, _path + '["x-oneOf"][' + _index100 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["x-oneOf"][' + _index100 + "]",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown)",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["x-oneOf"]',
            expected: "Array<SwaggerV2.IJsonSchema>",
            value: input["x-oneOf"]
        }, _errorFactory)) && (undefined === input.examples || Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true && ("string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".name",
            expected: "string",
            value: input.name
        }, _errorFactory)) && ("string" === typeof input["in"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["in"]',
            expected: "string",
            value: input["in"]
        }, _errorFactory));
        const _ao26 = (input, _path, _exceptionable = true) => ("null" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: '"null"',
            value: input.type
        }, _errorFactory)) && (null === input["default"] || undefined === input["default"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["default"]',
            expected: "(null | undefined)",
            value: input["default"]
        }, _errorFactory)) && (undefined === input.examples || Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true && ("string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".name",
            expected: "string",
            value: input.name
        }, _errorFactory)) && ("string" === typeof input["in"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["in"]',
            expected: "string",
            value: input["in"]
        }, _errorFactory));
        const _ao27 = (input, _path, _exceptionable = true) => (null !== input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: "undefined",
            value: input.type
        }, _errorFactory)) && (undefined === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: "undefined",
            value: input.type
        }, _errorFactory)) && (undefined === input.examples || Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true && ("string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".name",
            expected: "string",
            value: input.name
        }, _errorFactory)) && ("string" === typeof input["in"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["in"]',
            expected: "string",
            value: input["in"]
        }, _errorFactory));
        const _ao28 = (input, _path, _exceptionable = true) => (("object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".schema",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown)",
            value: input.schema
        }, _errorFactory)) && _au0(input.schema, _path + ".schema", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".schema",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown)",
            value: input.schema
        }, _errorFactory)) && ("string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".name",
            expected: "string",
            value: input.name
        }, _errorFactory)) && ("string" === typeof input["in"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["in"]',
            expected: "string",
            value: input["in"]
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.required || "boolean" === typeof input.required || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".required",
            expected: "(boolean | undefined)",
            value: input.required
        }, _errorFactory));
        const _ao29 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "SwaggerV2.IOperation.IResponse",
                value
            }, _errorFactory)) && _ao30(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "SwaggerV2.IOperation.IResponse",
                value
            }, _errorFactory);
        }));
        const _ao30 = (input, _path, _exceptionable = true) => (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.headers || ("object" === typeof input.headers && null !== input.headers && false === Array.isArray(input.headers) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".headers",
            expected: "(Record<string, SwaggerV2.IJsonSchema> | undefined)",
            value: input.headers
        }, _errorFactory)) && _ao4(input.headers, _path + ".headers", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".headers",
            expected: "(Record<string, SwaggerV2.IJsonSchema> | undefined)",
            value: input.headers
        }, _errorFactory)) && (undefined === input.schema || ("object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".schema",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown | undefined)",
            value: input.schema
        }, _errorFactory)) && _au0(input.schema, _path + ".schema", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".schema",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown | undefined)",
            value: input.schema
        }, _errorFactory)) && true;
        const _ao31 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(SwaggerV2.ISecurityDefinition.IApiKey | SwaggerV2.ISecurityDefinition.IBasic | SwaggerV2.ISecurityDefinition.IOauth2AccessCode | SwaggerV2.ISecurityDefinition.IOauth2Application | SwaggerV2.ISecurityDefinition.IOauth2Implicit | SwaggerV2.ISecurityDefinition.IOauth2Password)",
                value
            }, _errorFactory)) && _au10(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(SwaggerV2.ISecurityDefinition.IApiKey | SwaggerV2.ISecurityDefinition.IBasic | SwaggerV2.ISecurityDefinition.IOauth2AccessCode | SwaggerV2.ISecurityDefinition.IOauth2Application | SwaggerV2.ISecurityDefinition.IOauth2Implicit | SwaggerV2.ISecurityDefinition.IOauth2Password)",
                value
            }, _errorFactory);
        }));
        const _ao32 = (input, _path, _exceptionable = true) => ("apiKey" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: '"apiKey"',
            value: input.type
        }, _errorFactory)) && (undefined === input["in"] || "query" === input["in"] || "header" === input["in"] || "cookie" === input["in"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["in"]',
            expected: '("cookie" | "header" | "query" | undefined)',
            value: input["in"]
        }, _errorFactory)) && (undefined === input.name || "string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".name",
            expected: "(string | undefined)",
            value: input.name
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory));
        const _ao33 = (input, _path, _exceptionable = true) => ("basic" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: '"basic"',
            value: input.type
        }, _errorFactory)) && (undefined === input.name || "string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".name",
            expected: "(string | undefined)",
            value: input.name
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory));
        const _ao34 = (input, _path, _exceptionable = true) => ("oauth2" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: '"oauth2"',
            value: input.type
        }, _errorFactory)) && ("implicit" === input.flow || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".flow",
            expected: '"implicit"',
            value: input.flow
        }, _errorFactory)) && (undefined === input.authorizationUrl || "string" === typeof input.authorizationUrl || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".authorizationUrl",
            expected: "(string | undefined)",
            value: input.authorizationUrl
        }, _errorFactory)) && (undefined === input.scopes || ("object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        }, _errorFactory)) && _ao35(input.scopes, _path + ".scopes", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory));
        const _ao35 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "string" === typeof value || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "string",
                value
            }, _errorFactory);
        }));
        const _ao36 = (input, _path, _exceptionable = true) => ("oauth2" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: '"oauth2"',
            value: input.type
        }, _errorFactory)) && ("accessCode" === input.flow || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".flow",
            expected: '"accessCode"',
            value: input.flow
        }, _errorFactory)) && (undefined === input.authorizationUrl || "string" === typeof input.authorizationUrl || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".authorizationUrl",
            expected: "(string | undefined)",
            value: input.authorizationUrl
        }, _errorFactory)) && (undefined === input.tokenUrl || "string" === typeof input.tokenUrl || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".tokenUrl",
            expected: "(string | undefined)",
            value: input.tokenUrl
        }, _errorFactory)) && (undefined === input.scopes || ("object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        }, _errorFactory)) && _ao35(input.scopes, _path + ".scopes", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory));
        const _ao37 = (input, _path, _exceptionable = true) => ("oauth2" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: '"oauth2"',
            value: input.type
        }, _errorFactory)) && ("password" === input.flow || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".flow",
            expected: '"password"',
            value: input.flow
        }, _errorFactory)) && (undefined === input.tokenUrl || "string" === typeof input.tokenUrl || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".tokenUrl",
            expected: "(string | undefined)",
            value: input.tokenUrl
        }, _errorFactory)) && (undefined === input.scopes || ("object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        }, _errorFactory)) && _ao35(input.scopes, _path + ".scopes", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory));
        const _ao38 = (input, _path, _exceptionable = true) => ("oauth2" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: '"oauth2"',
            value: input.type
        }, _errorFactory)) && ("application" === input.flow || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".flow",
            expected: '"application"',
            value: input.flow
        }, _errorFactory)) && (undefined === input.tokenUrl || "string" === typeof input.tokenUrl || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".tokenUrl",
            expected: "(string | undefined)",
            value: input.tokenUrl
        }, _errorFactory)) && (undefined === input.scopes || ("object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        }, _errorFactory)) && _ao35(input.scopes, _path + ".scopes", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory));
        const _ao39 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return (Array.isArray(value) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "Array<string>",
                value
            }, _errorFactory)) && value.every(((elem, _index101) => "string" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key) + "[" + _index101 + "]",
                expected: "string",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "Array<string>",
                value
            }, _errorFactory);
        }));
        const _ao40 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "SwaggerV2.IPath",
                value
            }, _errorFactory)) && _ao41(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "SwaggerV2.IPath",
                value
            }, _errorFactory);
        }));
        const _ao41 = (input, _path, _exceptionable = true) => (undefined === input.parameters || (Array.isArray(input.parameters) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".parameters",
            expected: "(Array<IParameter | IReference<`#/parameters/${string}`>> | undefined)",
            value: input.parameters
        }, _errorFactory)) && input.parameters.every(((elem, _index102) => ("object" === typeof elem && null !== elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".parameters[" + _index102 + "]",
            expected: "(IAnyOf & { name: string; in: string; description?: string | undefined; } | IArray & { name: string; in: string; description?: string | undefined; } | IBoolean & { name: string; in: string; description?: string | undefined; } | IInteger & { name: string; in: string; description?: string | undefined; } | INullOnly & { name: string; in: string; description?: string | undefined; } | INumber & { name: string; in: string; description?: string | undefined; } | IObject & { name: string; in: string; description?: string | undefined; } | IOneOf & { name: string; in: string; description?: string | undefined; } | IReference<string> & { name: string; in: string; description?: string | undefined; } | IString & { name: string; in: string; description?: string | undefined; } | IUnknown & { name: string; in: string; description?: string | undefined; } | SwaggerV2.IJsonSchema.IReference<`#/parameters/${string}`> | SwaggerV2.IOperation.IBodyParameter)",
            value: elem
        }, _errorFactory)) && _au1(elem, _path + ".parameters[" + _index102 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".parameters[" + _index102 + "]",
            expected: "(IAnyOf & { name: string; in: string; description?: string | undefined; } | IArray & { name: string; in: string; description?: string | undefined; } | IBoolean & { name: string; in: string; description?: string | undefined; } | IInteger & { name: string; in: string; description?: string | undefined; } | INullOnly & { name: string; in: string; description?: string | undefined; } | INumber & { name: string; in: string; description?: string | undefined; } | IObject & { name: string; in: string; description?: string | undefined; } | IOneOf & { name: string; in: string; description?: string | undefined; } | IReference<string> & { name: string; in: string; description?: string | undefined; } | IString & { name: string; in: string; description?: string | undefined; } | IUnknown & { name: string; in: string; description?: string | undefined; } | SwaggerV2.IJsonSchema.IReference<`#/parameters/${string}`> | SwaggerV2.IOperation.IBodyParameter)",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".parameters",
            expected: "(Array<IParameter | IReference<`#/parameters/${string}`>> | undefined)",
            value: input.parameters
        }, _errorFactory)) && (undefined === input.options || ("object" === typeof input.options && null !== input.options && false === Array.isArray(input.options) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".options",
            expected: "(SwaggerV2.IOperation | undefined)",
            value: input.options
        }, _errorFactory)) && _ao43(input.options, _path + ".options", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".options",
            expected: "(SwaggerV2.IOperation | undefined)",
            value: input.options
        }, _errorFactory)) && (undefined === input.get || ("object" === typeof input.get && null !== input.get && false === Array.isArray(input.get) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".get",
            expected: "(SwaggerV2.IOperation | undefined)",
            value: input.get
        }, _errorFactory)) && _ao43(input.get, _path + ".get", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".get",
            expected: "(SwaggerV2.IOperation | undefined)",
            value: input.get
        }, _errorFactory)) && (undefined === input.post || ("object" === typeof input.post && null !== input.post && false === Array.isArray(input.post) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".post",
            expected: "(SwaggerV2.IOperation | undefined)",
            value: input.post
        }, _errorFactory)) && _ao43(input.post, _path + ".post", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".post",
            expected: "(SwaggerV2.IOperation | undefined)",
            value: input.post
        }, _errorFactory)) && (undefined === input.patch || ("object" === typeof input.patch && null !== input.patch && false === Array.isArray(input.patch) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".patch",
            expected: "(SwaggerV2.IOperation | undefined)",
            value: input.patch
        }, _errorFactory)) && _ao43(input.patch, _path + ".patch", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".patch",
            expected: "(SwaggerV2.IOperation | undefined)",
            value: input.patch
        }, _errorFactory)) && (undefined === input.put || ("object" === typeof input.put && null !== input.put && false === Array.isArray(input.put) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".put",
            expected: "(SwaggerV2.IOperation | undefined)",
            value: input.put
        }, _errorFactory)) && _ao43(input.put, _path + ".put", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".put",
            expected: "(SwaggerV2.IOperation | undefined)",
            value: input.put
        }, _errorFactory)) && (undefined === input["delete"] || ("object" === typeof input["delete"] && null !== input["delete"] && false === Array.isArray(input["delete"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["delete"]',
            expected: "(SwaggerV2.IOperation | undefined)",
            value: input["delete"]
        }, _errorFactory)) && _ao43(input["delete"], _path + '["delete"]', _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["delete"]',
            expected: "(SwaggerV2.IOperation | undefined)",
            value: input["delete"]
        }, _errorFactory)) && (undefined === input.head || ("object" === typeof input.head && null !== input.head && false === Array.isArray(input.head) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".head",
            expected: "(SwaggerV2.IOperation | undefined)",
            value: input.head
        }, _errorFactory)) && _ao43(input.head, _path + ".head", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".head",
            expected: "(SwaggerV2.IOperation | undefined)",
            value: input.head
        }, _errorFactory)) && (undefined === input.trace || ("object" === typeof input.trace && null !== input.trace && false === Array.isArray(input.trace) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".trace",
            expected: "(SwaggerV2.IOperation | undefined)",
            value: input.trace
        }, _errorFactory)) && _ao43(input.trace, _path + ".trace", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".trace",
            expected: "(SwaggerV2.IOperation | undefined)",
            value: input.trace
        }, _errorFactory));
        const _ao42 = (input, _path, _exceptionable = true) => ("string" === typeof input.$ref && RegExp(/^#\/parameters\/(.*)/).test(input.$ref) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".$ref",
            expected: "`#/parameters/${string}`",
            value: input.$ref
        }, _errorFactory)) && (undefined === input.examples || Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true;
        const _ao43 = (input, _path, _exceptionable = true) => (undefined === input.operationId || "string" === typeof input.operationId || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".operationId",
            expected: "(string | undefined)",
            value: input.operationId
        }, _errorFactory)) && (undefined === input.parameters || (Array.isArray(input.parameters) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".parameters",
            expected: "(Array<IParameter | IReference<`#/definitions/parameters/${string}`>> | undefined)",
            value: input.parameters
        }, _errorFactory)) && input.parameters.every(((elem, _index103) => ("object" === typeof elem && null !== elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".parameters[" + _index103 + "]",
            expected: "(IAnyOf & { name: string; in: string; description?: string | undefined; } | IArray & { name: string; in: string; description?: string | undefined; } | IBoolean & { name: string; in: string; description?: string | undefined; } | IInteger & { name: string; in: string; description?: string | undefined; } | INullOnly & { name: string; in: string; description?: string | undefined; } | INumber & { name: string; in: string; description?: string | undefined; } | IObject & { name: string; in: string; description?: string | undefined; } | IOneOf & { name: string; in: string; description?: string | undefined; } | IReference<string> & { name: string; in: string; description?: string | undefined; } | IString & { name: string; in: string; description?: string | undefined; } | IUnknown & { name: string; in: string; description?: string | undefined; } | SwaggerV2.IJsonSchema.IReference<`#/definitions/parameters/${string}`> | SwaggerV2.IOperation.IBodyParameter)",
            value: elem
        }, _errorFactory)) && _au2(elem, _path + ".parameters[" + _index103 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".parameters[" + _index103 + "]",
            expected: "(IAnyOf & { name: string; in: string; description?: string | undefined; } | IArray & { name: string; in: string; description?: string | undefined; } | IBoolean & { name: string; in: string; description?: string | undefined; } | IInteger & { name: string; in: string; description?: string | undefined; } | INullOnly & { name: string; in: string; description?: string | undefined; } | INumber & { name: string; in: string; description?: string | undefined; } | IObject & { name: string; in: string; description?: string | undefined; } | IOneOf & { name: string; in: string; description?: string | undefined; } | IReference<string> & { name: string; in: string; description?: string | undefined; } | IString & { name: string; in: string; description?: string | undefined; } | IUnknown & { name: string; in: string; description?: string | undefined; } | SwaggerV2.IJsonSchema.IReference<`#/definitions/parameters/${string}`> | SwaggerV2.IOperation.IBodyParameter)",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".parameters",
            expected: "(Array<IParameter | IReference<`#/definitions/parameters/${string}`>> | undefined)",
            value: input.parameters
        }, _errorFactory)) && (undefined === input.responses || ("object" === typeof input.responses && null !== input.responses && false === Array.isArray(input.responses) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".responses",
            expected: "(Record<string, IResponse | IReference<`#/definitions/responses/${string}`>> | undefined)",
            value: input.responses
        }, _errorFactory)) && _ao45(input.responses, _path + ".responses", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".responses",
            expected: "(Record<string, IResponse | IReference<`#/definitions/responses/${string}`>> | undefined)",
            value: input.responses
        }, _errorFactory)) && (undefined === input.summary || "string" === typeof input.summary || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".summary",
            expected: "(string | undefined)",
            value: input.summary
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.security || (Array.isArray(input.security) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".security",
            expected: "(Array<Record<string, Array<string>>> | undefined)",
            value: input.security
        }, _errorFactory)) && input.security.every(((elem, _index104) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".security[" + _index104 + "]",
            expected: "Record<string, Array<string>>",
            value: elem
        }, _errorFactory)) && _ao39(elem, _path + ".security[" + _index104 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".security[" + _index104 + "]",
            expected: "Record<string, Array<string>>",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".security",
            expected: "(Array<Record<string, Array<string>>> | undefined)",
            value: input.security
        }, _errorFactory)) && (undefined === input.tags || (Array.isArray(input.tags) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".tags",
            expected: "(Array<string> | undefined)",
            value: input.tags
        }, _errorFactory)) && input.tags.every(((elem, _index105) => "string" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".tags[" + _index105 + "]",
            expected: "string",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".tags",
            expected: "(Array<string> | undefined)",
            value: input.tags
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory));
        const _ao44 = (input, _path, _exceptionable = true) => ("string" === typeof input.$ref && RegExp(/^#\/definitions\/parameters\/(.*)/).test(input.$ref) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".$ref",
            expected: "`#/definitions/parameters/${string}`",
            value: input.$ref
        }, _errorFactory)) && (undefined === input.examples || Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true;
        const _ao45 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(SwaggerV2.IJsonSchema.IReference<`#/definitions/responses/${string}`> | SwaggerV2.IOperation.IResponse)",
                value
            }, _errorFactory)) && _au11(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(SwaggerV2.IJsonSchema.IReference<`#/definitions/responses/${string}`> | SwaggerV2.IOperation.IResponse)",
                value
            }, _errorFactory);
        }));
        const _ao46 = (input, _path, _exceptionable = true) => ("string" === typeof input.$ref && RegExp(/^#\/definitions\/responses\/(.*)/).test(input.$ref) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".$ref",
            expected: "`#/definitions/responses/${string}`",
            value: input.$ref
        }, _errorFactory)) && (undefined === input.examples || Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true;
        const _ao47 = (input, _path, _exceptionable = true) => ("string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".name",
            expected: "string",
            value: input.name
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory));
        const _ao48 = (input, _path, _exceptionable = true) => (null !== input.openapi || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".openapi",
            expected: '("3.0" | `3.0.${number}`)',
            value: input.openapi
        }, _errorFactory)) && (undefined !== input.openapi || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".openapi",
            expected: '("3.0" | `3.0.${number}`)',
            value: input.openapi
        }, _errorFactory)) && ("3.0" === input.openapi || "string" === typeof input.openapi && RegExp(/^3\.0\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(input.openapi) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".openapi",
            expected: '("3.0" | `3.0.${number}`)',
            value: input.openapi
        }, _errorFactory)) && (undefined === input.servers || (Array.isArray(input.servers) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".servers",
            expected: "(Array<OpenApiV3.IServer> | undefined)",
            value: input.servers
        }, _errorFactory)) && input.servers.every(((elem, _index106) => ("object" === typeof elem && null !== elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".servers[" + _index106 + "]",
            expected: "OpenApiV3.IServer",
            value: elem
        }, _errorFactory)) && _ao49(elem, _path + ".servers[" + _index106 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".servers[" + _index106 + "]",
            expected: "OpenApiV3.IServer",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".servers",
            expected: "(Array<OpenApiV3.IServer> | undefined)",
            value: input.servers
        }, _errorFactory)) && (undefined === input.info || ("object" === typeof input.info && null !== input.info || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".info",
            expected: "(OpenApiV3.IDocument.IInfo | undefined)",
            value: input.info
        }, _errorFactory)) && _ao52(input.info, _path + ".info", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".info",
            expected: "(OpenApiV3.IDocument.IInfo | undefined)",
            value: input.info
        }, _errorFactory)) && (undefined === input.components || ("object" === typeof input.components && null !== input.components && false === Array.isArray(input.components) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".components",
            expected: "(OpenApiV3.IComponents | undefined)",
            value: input.components
        }, _errorFactory)) && _ao55(input.components, _path + ".components", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".components",
            expected: "(OpenApiV3.IComponents | undefined)",
            value: input.components
        }, _errorFactory)) && (undefined === input.paths || ("object" === typeof input.paths && null !== input.paths && false === Array.isArray(input.paths) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".paths",
            expected: "(Record<string, OpenApiV3.IPath> | undefined)",
            value: input.paths
        }, _errorFactory)) && _ao97(input.paths, _path + ".paths", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".paths",
            expected: "(Record<string, OpenApiV3.IPath> | undefined)",
            value: input.paths
        }, _errorFactory)) && (undefined === input.security || (Array.isArray(input.security) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".security",
            expected: "(Array<Record<string, Array<string>>> | undefined)",
            value: input.security
        }, _errorFactory)) && input.security.every(((elem, _index107) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".security[" + _index107 + "]",
            expected: "Record<string, Array<string>>",
            value: elem
        }, _errorFactory)) && _ao39(elem, _path + ".security[" + _index107 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".security[" + _index107 + "]",
            expected: "Record<string, Array<string>>",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".security",
            expected: "(Array<Record<string, Array<string>>> | undefined)",
            value: input.security
        }, _errorFactory)) && (undefined === input.tags || (Array.isArray(input.tags) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".tags",
            expected: "(Array<OpenApiV3.IDocument.ITag> | undefined)",
            value: input.tags
        }, _errorFactory)) && input.tags.every(((elem, _index108) => ("object" === typeof elem && null !== elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".tags[" + _index108 + "]",
            expected: "OpenApiV3.IDocument.ITag",
            value: elem
        }, _errorFactory)) && _ao104(elem, _path + ".tags[" + _index108 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".tags[" + _index108 + "]",
            expected: "OpenApiV3.IDocument.ITag",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".tags",
            expected: "(Array<OpenApiV3.IDocument.ITag> | undefined)",
            value: input.tags
        }, _errorFactory));
        const _ao49 = (input, _path, _exceptionable = true) => ("string" === typeof input.url || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".url",
            expected: "string",
            value: input.url
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.variables || ("object" === typeof input.variables && null !== input.variables && false === Array.isArray(input.variables) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".variables",
            expected: "(Record<string, OpenApiV3.IServer.IVariable> | undefined)",
            value: input.variables
        }, _errorFactory)) && _ao50(input.variables, _path + ".variables", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".variables",
            expected: "(Record<string, OpenApiV3.IServer.IVariable> | undefined)",
            value: input.variables
        }, _errorFactory));
        const _ao50 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3.IServer.IVariable",
                value
            }, _errorFactory)) && _ao51(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3.IServer.IVariable",
                value
            }, _errorFactory);
        }));
        const _ao51 = (input, _path, _exceptionable = true) => ("string" === typeof input["default"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["default"]',
            expected: "string",
            value: input["default"]
        }, _errorFactory)) && (undefined === input["enum"] || (Array.isArray(input["enum"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["enum"]',
            expected: "(Array<string> | undefined)",
            value: input["enum"]
        }, _errorFactory)) && input["enum"].every(((elem, _index109) => "string" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["enum"][' + _index109 + "]",
            expected: "string",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["enum"]',
            expected: "(Array<string> | undefined)",
            value: input["enum"]
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory));
        const _ao52 = (input, _path, _exceptionable = true) => ("string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "string",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.termsOfService || "string" === typeof input.termsOfService || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".termsOfService",
            expected: "(string | undefined)",
            value: input.termsOfService
        }, _errorFactory)) && (undefined === input.contact || ("object" === typeof input.contact && null !== input.contact && false === Array.isArray(input.contact) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".contact",
            expected: "(OpenApiV3.IDocument.IContact | undefined)",
            value: input.contact
        }, _errorFactory)) && _ao53(input.contact, _path + ".contact", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".contact",
            expected: "(OpenApiV3.IDocument.IContact | undefined)",
            value: input.contact
        }, _errorFactory)) && (undefined === input.license || ("object" === typeof input.license && null !== input.license || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".license",
            expected: "(OpenApiV3.IDocument.ILicense | undefined)",
            value: input.license
        }, _errorFactory)) && _ao54(input.license, _path + ".license", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".license",
            expected: "(OpenApiV3.IDocument.ILicense | undefined)",
            value: input.license
        }, _errorFactory)) && ("string" === typeof input.version || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".version",
            expected: "string",
            value: input.version
        }, _errorFactory));
        const _ao53 = (input, _path, _exceptionable = true) => (undefined === input.name || "string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".name",
            expected: "(string | undefined)",
            value: input.name
        }, _errorFactory)) && (undefined === input.url || "string" === typeof input.url || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".url",
            expected: "(string | undefined)",
            value: input.url
        }, _errorFactory)) && (undefined === input.email || "string" === typeof input.email || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".email",
            expected: "(string | undefined)",
            value: input.email
        }, _errorFactory));
        const _ao54 = (input, _path, _exceptionable = true) => ("string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".name",
            expected: "string",
            value: input.name
        }, _errorFactory)) && (undefined === input.url || "string" === typeof input.url || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".url",
            expected: "(string | undefined)",
            value: input.url
        }, _errorFactory));
        const _ao55 = (input, _path, _exceptionable = true) => (undefined === input.schemas || ("object" === typeof input.schemas && null !== input.schemas && false === Array.isArray(input.schemas) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".schemas",
            expected: "(Record<string, OpenApiV3.IJsonSchema> | undefined)",
            value: input.schemas
        }, _errorFactory)) && _ao56(input.schemas, _path + ".schemas", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".schemas",
            expected: "(Record<string, OpenApiV3.IJsonSchema> | undefined)",
            value: input.schemas
        }, _errorFactory)) && (undefined === input.responses || ("object" === typeof input.responses && null !== input.responses && false === Array.isArray(input.responses) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".responses",
            expected: "(Record<string, OpenApiV3.IOperation.IResponse> | undefined)",
            value: input.responses
        }, _errorFactory)) && _ao71(input.responses, _path + ".responses", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".responses",
            expected: "(Record<string, OpenApiV3.IOperation.IResponse> | undefined)",
            value: input.responses
        }, _errorFactory)) && (undefined === input.parameters || ("object" === typeof input.parameters && null !== input.parameters && false === Array.isArray(input.parameters) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".parameters",
            expected: "(Record<string, OpenApiV3.IOperation.IParameter> | undefined)",
            value: input.parameters
        }, _errorFactory)) && _ao81(input.parameters, _path + ".parameters", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".parameters",
            expected: "(Record<string, OpenApiV3.IOperation.IParameter> | undefined)",
            value: input.parameters
        }, _errorFactory)) && (undefined === input.requestBodies || ("object" === typeof input.requestBodies && null !== input.requestBodies && false === Array.isArray(input.requestBodies) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".requestBodies",
            expected: "(Record<string, OpenApiV3.IOperation.IRequestBody> | undefined)",
            value: input.requestBodies
        }, _errorFactory)) && _ao83(input.requestBodies, _path + ".requestBodies", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".requestBodies",
            expected: "(Record<string, OpenApiV3.IOperation.IRequestBody> | undefined)",
            value: input.requestBodies
        }, _errorFactory)) && (undefined === input.securitySchemes || ("object" === typeof input.securitySchemes && null !== input.securitySchemes && false === Array.isArray(input.securitySchemes) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".securitySchemes",
            expected: "(Record<string, OpenApiV3.ISecurityScheme> | undefined)",
            value: input.securitySchemes
        }, _errorFactory)) && _ao85(input.securitySchemes, _path + ".securitySchemes", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".securitySchemes",
            expected: "(Record<string, OpenApiV3.ISecurityScheme> | undefined)",
            value: input.securitySchemes
        }, _errorFactory)) && (undefined === input.headers || ("object" === typeof input.headers && null !== input.headers && false === Array.isArray(input.headers) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".headers",
            expected: '(Record<string, Omit<OpenApiV3.IOperation.IParameter, "in">> | undefined)',
            value: input.headers
        }, _errorFactory)) && _ao95(input.headers, _path + ".headers", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".headers",
            expected: '(Record<string, Omit<OpenApiV3.IOperation.IParameter, "in">> | undefined)',
            value: input.headers
        }, _errorFactory)) && (undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Record<string, OpenApiV3.IExample> | undefined)",
            value: input.examples
        }, _errorFactory)) && _ao96(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Record<string, OpenApiV3.IExample> | undefined)",
            value: input.examples
        }, _errorFactory));
        const _ao56 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown)",
                value
            }, _errorFactory)) && _au3(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown)",
                value
            }, _errorFactory);
        }));
        const _ao57 = (input, _path, _exceptionable = true) => (undefined === input.nullable || "boolean" === typeof input.nullable || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".nullable",
            expected: "(boolean | undefined)",
            value: input.nullable
        }, _errorFactory)) && (null === input["default"] || undefined === input["default"] || "boolean" === typeof input["default"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["default"]',
            expected: "(boolean | null | undefined)",
            value: input["default"]
        }, _errorFactory)) && (undefined === input["enum"] || (Array.isArray(input["enum"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["enum"]',
            expected: "(Array<boolean | null> | undefined)",
            value: input["enum"]
        }, _errorFactory)) && input["enum"].every(((elem, _index110) => null === elem || "boolean" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["enum"][' + _index110 + "]",
            expected: "(boolean | null)",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["enum"]',
            expected: "(Array<boolean | null> | undefined)",
            value: input["enum"]
        }, _errorFactory)) && ("boolean" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: '"boolean"',
            value: input.type
        }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)));
        const _ao58 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return true;
        }));
        const _ao59 = (input, _path, _exceptionable = true) => (undefined === input.nullable || "boolean" === typeof input.nullable || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".nullable",
            expected: "(boolean | undefined)",
            value: input.nullable
        }, _errorFactory)) && (null === input["default"] || undefined === input["default"] || "number" === typeof input["default"] && (Math.floor(input["default"]) === input["default"] && -0x8000000000000000 <= input["default"] && input["default"] <= 0x8000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["default"]',
            expected: 'number & Type<"int64">',
            value: input["default"]
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["default"]',
            expected: '((number & Type<"int64">) | null | undefined)',
            value: input["default"]
        }, _errorFactory)) && (undefined === input["enum"] || (Array.isArray(input["enum"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["enum"]',
            expected: "(Array<number | null> | undefined)",
            value: input["enum"]
        }, _errorFactory)) && input["enum"].every(((elem, _index111) => null === elem || "number" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["enum"][' + _index111 + "]",
            expected: "(null | number)",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["enum"]',
            expected: "(Array<number | null> | undefined)",
            value: input["enum"]
        }, _errorFactory)) && (undefined === input.minimum || "number" === typeof input.minimum && (Math.floor(input.minimum) === input.minimum && -0x8000000000000000 <= input.minimum && input.minimum <= 0x8000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".minimum",
            expected: 'number & Type<"int64">',
            value: input.minimum
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".minimum",
            expected: '((number & Type<"int64">) | undefined)',
            value: input.minimum
        }, _errorFactory)) && (undefined === input.maximum || "number" === typeof input.maximum && (Math.floor(input.maximum) === input.maximum && -0x8000000000000000 <= input.maximum && input.maximum <= 0x8000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".maximum",
            expected: 'number & Type<"int64">',
            value: input.maximum
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".maximum",
            expected: '((number & Type<"int64">) | undefined)',
            value: input.maximum
        }, _errorFactory)) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".exclusiveMinimum",
            expected: "(boolean | number | undefined)",
            value: input.exclusiveMinimum
        }, _errorFactory)) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".exclusiveMaximum",
            expected: "(boolean | number | undefined)",
            value: input.exclusiveMaximum
        }, _errorFactory)) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && (Math.floor(input.multipleOf) === input.multipleOf && 0 <= input.multipleOf && input.multipleOf <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".multipleOf",
            expected: 'number & Type<"uint64">',
            value: input.multipleOf
        }, _errorFactory)) && (0 < input.multipleOf || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".multipleOf",
            expected: "number & ExclusiveMinimum<0>",
            value: input.multipleOf
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".multipleOf",
            expected: '((number & Type<"uint64"> & ExclusiveMinimum<0>) | undefined)',
            value: input.multipleOf
        }, _errorFactory)) && ("integer" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: '"integer"',
            value: input.type
        }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)));
        const _ao60 = (input, _path, _exceptionable = true) => (undefined === input.nullable || "boolean" === typeof input.nullable || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".nullable",
            expected: "(boolean | undefined)",
            value: input.nullable
        }, _errorFactory)) && (null === input["default"] || undefined === input["default"] || "number" === typeof input["default"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["default"]',
            expected: "(null | number | undefined)",
            value: input["default"]
        }, _errorFactory)) && (undefined === input["enum"] || (Array.isArray(input["enum"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["enum"]',
            expected: "(Array<number | null> | undefined)",
            value: input["enum"]
        }, _errorFactory)) && input["enum"].every(((elem, _index112) => null === elem || "number" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["enum"][' + _index112 + "]",
            expected: "(null | number)",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["enum"]',
            expected: "(Array<number | null> | undefined)",
            value: input["enum"]
        }, _errorFactory)) && (undefined === input.minimum || "number" === typeof input.minimum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".minimum",
            expected: "(number | undefined)",
            value: input.minimum
        }, _errorFactory)) && (undefined === input.maximum || "number" === typeof input.maximum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".maximum",
            expected: "(number | undefined)",
            value: input.maximum
        }, _errorFactory)) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".exclusiveMinimum",
            expected: "(boolean | number | undefined)",
            value: input.exclusiveMinimum
        }, _errorFactory)) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".exclusiveMaximum",
            expected: "(boolean | number | undefined)",
            value: input.exclusiveMaximum
        }, _errorFactory)) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && (0 < input.multipleOf || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".multipleOf",
            expected: "number & ExclusiveMinimum<0>",
            value: input.multipleOf
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".multipleOf",
            expected: "((number & ExclusiveMinimum<0>) | undefined)",
            value: input.multipleOf
        }, _errorFactory)) && ("number" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: '"number"',
            value: input.type
        }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)));
        const _ao61 = (input, _path, _exceptionable = true) => (undefined === input.nullable || "boolean" === typeof input.nullable || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".nullable",
            expected: "(boolean | undefined)",
            value: input.nullable
        }, _errorFactory)) && (null === input["default"] || undefined === input["default"] || "string" === typeof input["default"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["default"]',
            expected: "(null | string | undefined)",
            value: input["default"]
        }, _errorFactory)) && (undefined === input["enum"] || (Array.isArray(input["enum"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["enum"]',
            expected: "(Array<string | null> | undefined)",
            value: input["enum"]
        }, _errorFactory)) && input["enum"].every(((elem, _index113) => null === elem || "string" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["enum"][' + _index113 + "]",
            expected: "(null | string)",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["enum"]',
            expected: "(Array<string | null> | undefined)",
            value: input["enum"]
        }, _errorFactory)) && (undefined === input.format || "string" === typeof input.format || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".format",
            expected: "(string | undefined)",
            value: input.format
        }, _errorFactory)) && (undefined === input.pattern || "string" === typeof input.pattern || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".pattern",
            expected: "(string | undefined)",
            value: input.pattern
        }, _errorFactory)) && (undefined === input.minLength || "number" === typeof input.minLength && (Math.floor(input.minLength) === input.minLength && 0 <= input.minLength && input.minLength <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".minLength",
            expected: 'number & Type<"uint64">',
            value: input.minLength
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".minLength",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.minLength
        }, _errorFactory)) && (undefined === input.maxLength || "number" === typeof input.maxLength && (Math.floor(input.maxLength) === input.maxLength && 0 <= input.maxLength && input.maxLength <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".maxLength",
            expected: 'number & Type<"uint64">',
            value: input.maxLength
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".maxLength",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.maxLength
        }, _errorFactory)) && ("string" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: '"string"',
            value: input.type
        }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)));
        const _ao62 = (input, _path, _exceptionable = true) => (undefined === input.nullable || "boolean" === typeof input.nullable || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".nullable",
            expected: "(boolean | undefined)",
            value: input.nullable
        }, _errorFactory)) && (("object" === typeof input.items && null !== input.items && false === Array.isArray(input.items) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".items",
            expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown)",
            value: input.items
        }, _errorFactory)) && _au3(input.items, _path + ".items", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".items",
            expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown)",
            value: input.items
        }, _errorFactory)) && (undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".uniqueItems",
            expected: "(boolean | undefined)",
            value: input.uniqueItems
        }, _errorFactory)) && (undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".minItems",
            expected: 'number & Type<"uint64">',
            value: input.minItems
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".minItems",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.minItems
        }, _errorFactory)) && (undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".maxItems",
            expected: 'number & Type<"uint64">',
            value: input.maxItems
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".maxItems",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.maxItems
        }, _errorFactory)) && ("array" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: '"array"',
            value: input.type
        }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)));
        const _ao63 = (input, _path, _exceptionable = true) => (undefined === input.nullable || "boolean" === typeof input.nullable || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".nullable",
            expected: "(boolean | undefined)",
            value: input.nullable
        }, _errorFactory)) && (undefined === input.properties || ("object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".properties",
            expected: "(Record<string, OpenApiV3.IJsonSchema> | undefined)",
            value: input.properties
        }, _errorFactory)) && _ao56(input.properties, _path + ".properties", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".properties",
            expected: "(Record<string, OpenApiV3.IJsonSchema> | undefined)",
            value: input.properties
        }, _errorFactory)) && (undefined === input.required || (Array.isArray(input.required) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".required",
            expected: "(Array<string> | undefined)",
            value: input.required
        }, _errorFactory)) && input.required.every(((elem, _index114) => "string" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".required[" + _index114 + "]",
            expected: "string",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".required",
            expected: "(Array<string> | undefined)",
            value: input.required
        }, _errorFactory)) && ((null !== input.additionalProperties || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".additionalProperties",
            expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalProperties
        }, _errorFactory)) && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || ("object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".additionalProperties",
            expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalProperties
        }, _errorFactory)) && _au3(input.additionalProperties, _path + ".additionalProperties", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".additionalProperties",
            expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalProperties
        }, _errorFactory))) && (undefined === input.maxProperties || "number" === typeof input.maxProperties || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".maxProperties",
            expected: "(number | undefined)",
            value: input.maxProperties
        }, _errorFactory)) && (undefined === input.minProperties || "number" === typeof input.minProperties || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".minProperties",
            expected: "(number | undefined)",
            value: input.minProperties
        }, _errorFactory)) && ("object" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: '"object"',
            value: input.type
        }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)));
        const _ao64 = (input, _path, _exceptionable = true) => ("string" === typeof input.$ref || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".$ref",
            expected: "string",
            value: input.$ref
        }, _errorFactory)) && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory))) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true;
        const _ao65 = (input, _path, _exceptionable = true) => ((Array.isArray(input.allOf) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".allOf",
            expected: "Array<OpenApiV3.IJsonSchema>",
            value: input.allOf
        }, _errorFactory)) && input.allOf.every(((elem, _index115) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".allOf[" + _index115 + "]",
            expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown)",
            value: elem
        }, _errorFactory)) && _au3(elem, _path + ".allOf[" + _index115 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".allOf[" + _index115 + "]",
            expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown)",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".allOf",
            expected: "Array<OpenApiV3.IJsonSchema>",
            value: input.allOf
        }, _errorFactory)) && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory))) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true;
        const _ao66 = (input, _path, _exceptionable = true) => ((Array.isArray(input.anyOf) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".anyOf",
            expected: "Array<OpenApiV3.IJsonSchema>",
            value: input.anyOf
        }, _errorFactory)) && input.anyOf.every(((elem, _index116) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".anyOf[" + _index116 + "]",
            expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown)",
            value: elem
        }, _errorFactory)) && _au3(elem, _path + ".anyOf[" + _index116 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".anyOf[" + _index116 + "]",
            expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown)",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".anyOf",
            expected: "Array<OpenApiV3.IJsonSchema>",
            value: input.anyOf
        }, _errorFactory)) && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory))) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true;
        const _ao67 = (input, _path, _exceptionable = true) => ((Array.isArray(input.oneOf) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".oneOf",
            expected: "Array<OpenApiV3.IJsonSchema>",
            value: input.oneOf
        }, _errorFactory)) && input.oneOf.every(((elem, _index117) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".oneOf[" + _index117 + "]",
            expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown)",
            value: elem
        }, _errorFactory)) && _au3(elem, _path + ".oneOf[" + _index117 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".oneOf[" + _index117 + "]",
            expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown)",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".oneOf",
            expected: "Array<OpenApiV3.IJsonSchema>",
            value: input.oneOf
        }, _errorFactory)) && (undefined === input.discriminator || ("object" === typeof input.discriminator && null !== input.discriminator || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".discriminator",
            expected: "(OpenApiV3.IJsonSchema.IOneOf.IDiscriminator | undefined)",
            value: input.discriminator
        }, _errorFactory)) && _ao68(input.discriminator, _path + ".discriminator", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".discriminator",
            expected: "(OpenApiV3.IJsonSchema.IOneOf.IDiscriminator | undefined)",
            value: input.discriminator
        }, _errorFactory)) && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory))) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true;
        const _ao68 = (input, _path, _exceptionable = true) => ("string" === typeof input.propertyName || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".propertyName",
            expected: "string",
            value: input.propertyName
        }, _errorFactory)) && (undefined === input.mapping || ("object" === typeof input.mapping && null !== input.mapping && false === Array.isArray(input.mapping) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".mapping",
            expected: "(Record<string, string> | undefined)",
            value: input.mapping
        }, _errorFactory)) && _ao35(input.mapping, _path + ".mapping", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".mapping",
            expected: "(Record<string, string> | undefined)",
            value: input.mapping
        }, _errorFactory));
        const _ao69 = (input, _path, _exceptionable = true) => (null === input["default"] || undefined === input["default"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["default"]',
            expected: "(null | undefined)",
            value: input["default"]
        }, _errorFactory)) && ("null" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: '"null"',
            value: input.type
        }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)));
        const _ao70 = (input, _path, _exceptionable = true) => (null !== input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: "undefined",
            value: input.type
        }, _errorFactory)) && (undefined === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: "undefined",
            value: input.type
        }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)));
        const _ao71 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3.IOperation.IResponse",
                value
            }, _errorFactory)) && _ao72(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3.IOperation.IResponse",
                value
            }, _errorFactory);
        }));
        const _ao72 = (input, _path, _exceptionable = true) => (undefined === input.content || ("object" === typeof input.content && null !== input.content && false === Array.isArray(input.content) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".content",
            expected: "(Record<string, OpenApiV3.IOperation.IMediaType> | undefined)",
            value: input.content
        }, _errorFactory)) && _ao73(input.content, _path + ".content", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".content",
            expected: "(Record<string, OpenApiV3.IOperation.IMediaType> | undefined)",
            value: input.content
        }, _errorFactory)) && (undefined === input.headers || ("object" === typeof input.headers && null !== input.headers && false === Array.isArray(input.headers) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".headers",
            expected: '(Record<string, Omit<IParameter, "in"> | IReference<`#/components/headers/${string}`>> | undefined)',
            value: input.headers
        }, _errorFactory)) && _ao78(input.headers, _path + ".headers", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".headers",
            expected: '(Record<string, Omit<IParameter, "in"> | IReference<`#/components/headers/${string}`>> | undefined)',
            value: input.headers
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory));
        const _ao73 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3.IOperation.IMediaType",
                value
            }, _errorFactory)) && _ao74(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3.IOperation.IMediaType",
                value
            }, _errorFactory);
        }));
        const _ao74 = (input, _path, _exceptionable = true) => (undefined === input.schema || ("object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".schema",
            expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown | undefined)",
            value: input.schema
        }, _errorFactory)) && _au3(input.schema, _path + ".schema", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".schema",
            expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown | undefined)",
            value: input.schema
        }, _errorFactory)) && true && (undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Record<string, IExample | IReference<`#/components/examples/${string}`>> | undefined)",
            value: input.examples
        }, _errorFactory)) && _ao75(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Record<string, IExample | IReference<`#/components/examples/${string}`>> | undefined)",
            value: input.examples
        }, _errorFactory));
        const _ao75 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApiV3.IExample | OpenApiV3.IJsonSchema.IReference<`#/components/examples/${string}`>)",
                value
            }, _errorFactory)) && _au12(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApiV3.IExample | OpenApiV3.IJsonSchema.IReference<`#/components/examples/${string}`>)",
                value
            }, _errorFactory);
        }));
        const _ao76 = (input, _path, _exceptionable = true) => (undefined === input.summary || "string" === typeof input.summary || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".summary",
            expected: "(string | undefined)",
            value: input.summary
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && true && (undefined === input.externalValue || "string" === typeof input.externalValue || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".externalValue",
            expected: "(string | undefined)",
            value: input.externalValue
        }, _errorFactory));
        const _ao77 = (input, _path, _exceptionable = true) => ("string" === typeof input.$ref && RegExp(/^#\/components\/examples\/(.*)/).test(input.$ref) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".$ref",
            expected: "`#/components/examples/${string}`",
            value: input.$ref
        }, _errorFactory)) && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory))) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true;
        const _ao78 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: '(Omit<OpenApiV3.IOperation.IParameter, "in"> | OpenApiV3.IJsonSchema.IReference<`#/components/headers/${string}`>)',
                value
            }, _errorFactory)) && _au13(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: '(Omit<OpenApiV3.IOperation.IParameter, "in"> | OpenApiV3.IJsonSchema.IReference<`#/components/headers/${string}`>)',
                value
            }, _errorFactory);
        }));
        const _ao79 = (input, _path, _exceptionable = true) => (undefined === input.name || "string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".name",
            expected: "(string | undefined)",
            value: input.name
        }, _errorFactory)) && (undefined === input.required || "boolean" === typeof input.required || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".required",
            expected: "(boolean | undefined)",
            value: input.required
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && true && (undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Record<string, IExample | IReference<`#/components/examples/${string}`>> | undefined)",
            value: input.examples
        }, _errorFactory)) && _ao75(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Record<string, IExample | IReference<`#/components/examples/${string}`>> | undefined)",
            value: input.examples
        }, _errorFactory)) && (("object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".schema",
            expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown)",
            value: input.schema
        }, _errorFactory)) && _au3(input.schema, _path + ".schema", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".schema",
            expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown)",
            value: input.schema
        }, _errorFactory));
        const _ao80 = (input, _path, _exceptionable = true) => ("string" === typeof input.$ref && RegExp(/^#\/components\/headers\/(.*)/).test(input.$ref) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".$ref",
            expected: "`#/components/headers/${string}`",
            value: input.$ref
        }, _errorFactory)) && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory))) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true;
        const _ao81 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3.IOperation.IParameter",
                value
            }, _errorFactory)) && _ao82(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3.IOperation.IParameter",
                value
            }, _errorFactory);
        }));
        const _ao82 = (input, _path, _exceptionable = true) => (undefined === input.name || "string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".name",
            expected: "(string | undefined)",
            value: input.name
        }, _errorFactory)) && ("path" === input["in"] || "query" === input["in"] || "header" === input["in"] || "cookie" === input["in"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["in"]',
            expected: '("cookie" | "header" | "path" | "query")',
            value: input["in"]
        }, _errorFactory)) && (("object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".schema",
            expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown)",
            value: input.schema
        }, _errorFactory)) && _au3(input.schema, _path + ".schema", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".schema",
            expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown)",
            value: input.schema
        }, _errorFactory)) && (undefined === input.required || "boolean" === typeof input.required || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".required",
            expected: "(boolean | undefined)",
            value: input.required
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && true && (undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Record<string, IExample | IReference<`#/components/examples/${string}`>> | undefined)",
            value: input.examples
        }, _errorFactory)) && _ao75(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Record<string, IExample | IReference<`#/components/examples/${string}`>> | undefined)",
            value: input.examples
        }, _errorFactory));
        const _ao83 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3.IOperation.IRequestBody",
                value
            }, _errorFactory)) && _ao84(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3.IOperation.IRequestBody",
                value
            }, _errorFactory);
        }));
        const _ao84 = (input, _path, _exceptionable = true) => (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.required || "boolean" === typeof input.required || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".required",
            expected: "(boolean | undefined)",
            value: input.required
        }, _errorFactory)) && (undefined === input.content || ("object" === typeof input.content && null !== input.content && false === Array.isArray(input.content) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".content",
            expected: "(Record<string, OpenApiV3.IOperation.IMediaType> | undefined)",
            value: input.content
        }, _errorFactory)) && _ao73(input.content, _path + ".content", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".content",
            expected: "(Record<string, OpenApiV3.IOperation.IMediaType> | undefined)",
            value: input.content
        }, _errorFactory));
        const _ao85 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApiV3.ISecurityScheme.IApiKey | OpenApiV3.ISecurityScheme.IHttpBasic | OpenApiV3.ISecurityScheme.IHttpBearer | OpenApiV3.ISecurityScheme.IOAuth2 | OpenApiV3.ISecurityScheme.IOpenId)",
                value
            }, _errorFactory)) && _au14(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApiV3.ISecurityScheme.IApiKey | OpenApiV3.ISecurityScheme.IHttpBasic | OpenApiV3.ISecurityScheme.IHttpBearer | OpenApiV3.ISecurityScheme.IOAuth2 | OpenApiV3.ISecurityScheme.IOpenId)",
                value
            }, _errorFactory);
        }));
        const _ao86 = (input, _path, _exceptionable = true) => ("apiKey" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: '"apiKey"',
            value: input.type
        }, _errorFactory)) && (undefined === input["in"] || "query" === input["in"] || "header" === input["in"] || "cookie" === input["in"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["in"]',
            expected: '("cookie" | "header" | "query" | undefined)',
            value: input["in"]
        }, _errorFactory)) && (undefined === input.name || "string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".name",
            expected: "(string | undefined)",
            value: input.name
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory));
        const _ao87 = (input, _path, _exceptionable = true) => ("http" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: '"http"',
            value: input.type
        }, _errorFactory)) && ("basic" === input.scheme || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".scheme",
            expected: '"basic"',
            value: input.scheme
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory));
        const _ao88 = (input, _path, _exceptionable = true) => ("http" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: '"http"',
            value: input.type
        }, _errorFactory)) && ("bearer" === input.scheme || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".scheme",
            expected: '"bearer"',
            value: input.scheme
        }, _errorFactory)) && (undefined === input.bearerFormat || "string" === typeof input.bearerFormat || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".bearerFormat",
            expected: "(string | undefined)",
            value: input.bearerFormat
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory));
        const _ao89 = (input, _path, _exceptionable = true) => ("oauth2" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: '"oauth2"',
            value: input.type
        }, _errorFactory)) && (("object" === typeof input.flows && null !== input.flows && false === Array.isArray(input.flows) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".flows",
            expected: "OpenApiV3.ISecurityScheme.IOAuth2.IFlowSet",
            value: input.flows
        }, _errorFactory)) && _ao90(input.flows, _path + ".flows", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".flows",
            expected: "OpenApiV3.ISecurityScheme.IOAuth2.IFlowSet",
            value: input.flows
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory));
        const _ao90 = (input, _path, _exceptionable = true) => (undefined === input.authorizationCode || ("object" === typeof input.authorizationCode && null !== input.authorizationCode && false === Array.isArray(input.authorizationCode) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".authorizationCode",
            expected: "(OpenApiV3.ISecurityScheme.IOAuth2.IFlow | undefined)",
            value: input.authorizationCode
        }, _errorFactory)) && _ao91(input.authorizationCode, _path + ".authorizationCode", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".authorizationCode",
            expected: "(OpenApiV3.ISecurityScheme.IOAuth2.IFlow | undefined)",
            value: input.authorizationCode
        }, _errorFactory)) && (undefined === input.implicit || ("object" === typeof input.implicit && null !== input.implicit && false === Array.isArray(input.implicit) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".implicit",
            expected: '(Omit<OpenApiV3.ISecurityScheme.IOAuth2.IFlow, "tokenUrl"> | undefined)',
            value: input.implicit
        }, _errorFactory)) && _ao92(input.implicit, _path + ".implicit", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".implicit",
            expected: '(Omit<OpenApiV3.ISecurityScheme.IOAuth2.IFlow, "tokenUrl"> | undefined)',
            value: input.implicit
        }, _errorFactory)) && (undefined === input.password || ("object" === typeof input.password && null !== input.password && false === Array.isArray(input.password) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".password",
            expected: '(Omit<OpenApiV3.ISecurityScheme.IOAuth2.IFlow, "authorizationUrl"> | undefined)',
            value: input.password
        }, _errorFactory)) && _ao93(input.password, _path + ".password", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".password",
            expected: '(Omit<OpenApiV3.ISecurityScheme.IOAuth2.IFlow, "authorizationUrl"> | undefined)',
            value: input.password
        }, _errorFactory)) && (undefined === input.clientCredentials || ("object" === typeof input.clientCredentials && null !== input.clientCredentials && false === Array.isArray(input.clientCredentials) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".clientCredentials",
            expected: '(Omit<OpenApiV3.ISecurityScheme.IOAuth2.IFlow, "authorizationUrl"> | undefined)',
            value: input.clientCredentials
        }, _errorFactory)) && _ao93(input.clientCredentials, _path + ".clientCredentials", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".clientCredentials",
            expected: '(Omit<OpenApiV3.ISecurityScheme.IOAuth2.IFlow, "authorizationUrl"> | undefined)',
            value: input.clientCredentials
        }, _errorFactory));
        const _ao91 = (input, _path, _exceptionable = true) => (undefined === input.authorizationUrl || "string" === typeof input.authorizationUrl || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".authorizationUrl",
            expected: "(string | undefined)",
            value: input.authorizationUrl
        }, _errorFactory)) && (undefined === input.tokenUrl || "string" === typeof input.tokenUrl || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".tokenUrl",
            expected: "(string | undefined)",
            value: input.tokenUrl
        }, _errorFactory)) && (undefined === input.refreshUrl || "string" === typeof input.refreshUrl || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".refreshUrl",
            expected: "(string | undefined)",
            value: input.refreshUrl
        }, _errorFactory)) && (undefined === input.scopes || ("object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        }, _errorFactory)) && _ao35(input.scopes, _path + ".scopes", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        }, _errorFactory));
        const _ao92 = (input, _path, _exceptionable = true) => (undefined === input.authorizationUrl || "string" === typeof input.authorizationUrl || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".authorizationUrl",
            expected: "(string | undefined)",
            value: input.authorizationUrl
        }, _errorFactory)) && (undefined === input.refreshUrl || "string" === typeof input.refreshUrl || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".refreshUrl",
            expected: "(string | undefined)",
            value: input.refreshUrl
        }, _errorFactory)) && (undefined === input.scopes || ("object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        }, _errorFactory)) && _ao35(input.scopes, _path + ".scopes", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        }, _errorFactory));
        const _ao93 = (input, _path, _exceptionable = true) => (undefined === input.tokenUrl || "string" === typeof input.tokenUrl || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".tokenUrl",
            expected: "(string | undefined)",
            value: input.tokenUrl
        }, _errorFactory)) && (undefined === input.refreshUrl || "string" === typeof input.refreshUrl || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".refreshUrl",
            expected: "(string | undefined)",
            value: input.refreshUrl
        }, _errorFactory)) && (undefined === input.scopes || ("object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        }, _errorFactory)) && _ao35(input.scopes, _path + ".scopes", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        }, _errorFactory));
        const _ao94 = (input, _path, _exceptionable = true) => ("openIdConnect" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: '"openIdConnect"',
            value: input.type
        }, _errorFactory)) && ("string" === typeof input.openIdConnectUrl || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".openIdConnectUrl",
            expected: "string",
            value: input.openIdConnectUrl
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory));
        const _ao95 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: 'Omit<OpenApiV3.IOperation.IParameter, "in">',
                value
            }, _errorFactory)) && _ao79(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: 'Omit<OpenApiV3.IOperation.IParameter, "in">',
                value
            }, _errorFactory);
        }));
        const _ao96 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3.IExample",
                value
            }, _errorFactory)) && _ao76(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3.IExample",
                value
            }, _errorFactory);
        }));
        const _ao97 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3.IPath",
                value
            }, _errorFactory)) && _ao98(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3.IPath",
                value
            }, _errorFactory);
        }));
        const _ao98 = (input, _path, _exceptionable = true) => (undefined === input.parameters || (Array.isArray(input.parameters) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".parameters",
            expected: "(Array<IParameter | IReference<`#/components/headers/${string}`> | IReference<`#/components/parameters/${string}`>> | undefined)",
            value: input.parameters
        }, _errorFactory)) && input.parameters.every(((elem, _index118) => ("object" === typeof elem && null !== elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".parameters[" + _index118 + "]",
            expected: "(OpenApiV3.IJsonSchema.IReference<`#/components/headers/${string}`> | OpenApiV3.IJsonSchema.IReference<`#/components/parameters/${string}`> | OpenApiV3.IOperation.IParameter)",
            value: elem
        }, _errorFactory)) && _au4(elem, _path + ".parameters[" + _index118 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".parameters[" + _index118 + "]",
            expected: "(OpenApiV3.IJsonSchema.IReference<`#/components/headers/${string}`> | OpenApiV3.IJsonSchema.IReference<`#/components/parameters/${string}`> | OpenApiV3.IOperation.IParameter)",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".parameters",
            expected: "(Array<IParameter | IReference<`#/components/headers/${string}`> | IReference<`#/components/parameters/${string}`>> | undefined)",
            value: input.parameters
        }, _errorFactory)) && (undefined === input.servers || (Array.isArray(input.servers) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".servers",
            expected: "(Array<OpenApiV3.IServer> | undefined)",
            value: input.servers
        }, _errorFactory)) && input.servers.every(((elem, _index119) => ("object" === typeof elem && null !== elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".servers[" + _index119 + "]",
            expected: "OpenApiV3.IServer",
            value: elem
        }, _errorFactory)) && _ao49(elem, _path + ".servers[" + _index119 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".servers[" + _index119 + "]",
            expected: "OpenApiV3.IServer",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".servers",
            expected: "(Array<OpenApiV3.IServer> | undefined)",
            value: input.servers
        }, _errorFactory)) && (undefined === input.summary || "string" === typeof input.summary || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".summary",
            expected: "(string | undefined)",
            value: input.summary
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.options || ("object" === typeof input.options && null !== input.options && false === Array.isArray(input.options) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".options",
            expected: "(OpenApiV3.IOperation | undefined)",
            value: input.options
        }, _errorFactory)) && _ao100(input.options, _path + ".options", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".options",
            expected: "(OpenApiV3.IOperation | undefined)",
            value: input.options
        }, _errorFactory)) && (undefined === input.get || ("object" === typeof input.get && null !== input.get && false === Array.isArray(input.get) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".get",
            expected: "(OpenApiV3.IOperation | undefined)",
            value: input.get
        }, _errorFactory)) && _ao100(input.get, _path + ".get", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".get",
            expected: "(OpenApiV3.IOperation | undefined)",
            value: input.get
        }, _errorFactory)) && (undefined === input.post || ("object" === typeof input.post && null !== input.post && false === Array.isArray(input.post) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".post",
            expected: "(OpenApiV3.IOperation | undefined)",
            value: input.post
        }, _errorFactory)) && _ao100(input.post, _path + ".post", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".post",
            expected: "(OpenApiV3.IOperation | undefined)",
            value: input.post
        }, _errorFactory)) && (undefined === input.patch || ("object" === typeof input.patch && null !== input.patch && false === Array.isArray(input.patch) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".patch",
            expected: "(OpenApiV3.IOperation | undefined)",
            value: input.patch
        }, _errorFactory)) && _ao100(input.patch, _path + ".patch", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".patch",
            expected: "(OpenApiV3.IOperation | undefined)",
            value: input.patch
        }, _errorFactory)) && (undefined === input.put || ("object" === typeof input.put && null !== input.put && false === Array.isArray(input.put) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".put",
            expected: "(OpenApiV3.IOperation | undefined)",
            value: input.put
        }, _errorFactory)) && _ao100(input.put, _path + ".put", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".put",
            expected: "(OpenApiV3.IOperation | undefined)",
            value: input.put
        }, _errorFactory)) && (undefined === input["delete"] || ("object" === typeof input["delete"] && null !== input["delete"] && false === Array.isArray(input["delete"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["delete"]',
            expected: "(OpenApiV3.IOperation | undefined)",
            value: input["delete"]
        }, _errorFactory)) && _ao100(input["delete"], _path + '["delete"]', _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["delete"]',
            expected: "(OpenApiV3.IOperation | undefined)",
            value: input["delete"]
        }, _errorFactory)) && (undefined === input.head || ("object" === typeof input.head && null !== input.head && false === Array.isArray(input.head) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".head",
            expected: "(OpenApiV3.IOperation | undefined)",
            value: input.head
        }, _errorFactory)) && _ao100(input.head, _path + ".head", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".head",
            expected: "(OpenApiV3.IOperation | undefined)",
            value: input.head
        }, _errorFactory)) && (undefined === input.trace || ("object" === typeof input.trace && null !== input.trace && false === Array.isArray(input.trace) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".trace",
            expected: "(OpenApiV3.IOperation | undefined)",
            value: input.trace
        }, _errorFactory)) && _ao100(input.trace, _path + ".trace", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".trace",
            expected: "(OpenApiV3.IOperation | undefined)",
            value: input.trace
        }, _errorFactory));
        const _ao99 = (input, _path, _exceptionable = true) => ("string" === typeof input.$ref && RegExp(/^#\/components\/parameters\/(.*)/).test(input.$ref) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".$ref",
            expected: "`#/components/parameters/${string}`",
            value: input.$ref
        }, _errorFactory)) && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory))) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true;
        const _ao100 = (input, _path, _exceptionable = true) => (undefined === input.operationId || "string" === typeof input.operationId || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".operationId",
            expected: "(string | undefined)",
            value: input.operationId
        }, _errorFactory)) && (undefined === input.parameters || (Array.isArray(input.parameters) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".parameters",
            expected: "(Array<IParameter | IReference<`#/components/headers/${string}`> | IReference<`#/components/parameters/${string}`>> | undefined)",
            value: input.parameters
        }, _errorFactory)) && input.parameters.every(((elem, _index120) => ("object" === typeof elem && null !== elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".parameters[" + _index120 + "]",
            expected: "(OpenApiV3.IJsonSchema.IReference<`#/components/headers/${string}`> | OpenApiV3.IJsonSchema.IReference<`#/components/parameters/${string}`> | OpenApiV3.IOperation.IParameter)",
            value: elem
        }, _errorFactory)) && _au4(elem, _path + ".parameters[" + _index120 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".parameters[" + _index120 + "]",
            expected: "(OpenApiV3.IJsonSchema.IReference<`#/components/headers/${string}`> | OpenApiV3.IJsonSchema.IReference<`#/components/parameters/${string}`> | OpenApiV3.IOperation.IParameter)",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".parameters",
            expected: "(Array<IParameter | IReference<`#/components/headers/${string}`> | IReference<`#/components/parameters/${string}`>> | undefined)",
            value: input.parameters
        }, _errorFactory)) && (undefined === input.requestBody || ("object" === typeof input.requestBody && null !== input.requestBody && false === Array.isArray(input.requestBody) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".requestBody",
            expected: "(OpenApiV3.IJsonSchema.IReference<`#/components/requestBodies/${string}`> | OpenApiV3.IOperation.IRequestBody | undefined)",
            value: input.requestBody
        }, _errorFactory)) && _au15(input.requestBody, _path + ".requestBody", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".requestBody",
            expected: "(OpenApiV3.IJsonSchema.IReference<`#/components/requestBodies/${string}`> | OpenApiV3.IOperation.IRequestBody | undefined)",
            value: input.requestBody
        }, _errorFactory)) && (undefined === input.responses || ("object" === typeof input.responses && null !== input.responses && false === Array.isArray(input.responses) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".responses",
            expected: "(Record<string, IResponse | IReference<`#/components/responses/${string}`>> | undefined)",
            value: input.responses
        }, _errorFactory)) && _ao102(input.responses, _path + ".responses", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".responses",
            expected: "(Record<string, IResponse | IReference<`#/components/responses/${string}`>> | undefined)",
            value: input.responses
        }, _errorFactory)) && (undefined === input.servers || (Array.isArray(input.servers) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".servers",
            expected: "(Array<OpenApiV3.IServer> | undefined)",
            value: input.servers
        }, _errorFactory)) && input.servers.every(((elem, _index121) => ("object" === typeof elem && null !== elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".servers[" + _index121 + "]",
            expected: "OpenApiV3.IServer",
            value: elem
        }, _errorFactory)) && _ao49(elem, _path + ".servers[" + _index121 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".servers[" + _index121 + "]",
            expected: "OpenApiV3.IServer",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".servers",
            expected: "(Array<OpenApiV3.IServer> | undefined)",
            value: input.servers
        }, _errorFactory)) && (undefined === input.summary || "string" === typeof input.summary || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".summary",
            expected: "(string | undefined)",
            value: input.summary
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.security || (Array.isArray(input.security) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".security",
            expected: "(Array<Record<string, Array<string>>> | undefined)",
            value: input.security
        }, _errorFactory)) && input.security.every(((elem, _index122) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".security[" + _index122 + "]",
            expected: "Record<string, Array<string>>",
            value: elem
        }, _errorFactory)) && _ao39(elem, _path + ".security[" + _index122 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".security[" + _index122 + "]",
            expected: "Record<string, Array<string>>",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".security",
            expected: "(Array<Record<string, Array<string>>> | undefined)",
            value: input.security
        }, _errorFactory)) && (undefined === input.tags || (Array.isArray(input.tags) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".tags",
            expected: "(Array<string> | undefined)",
            value: input.tags
        }, _errorFactory)) && input.tags.every(((elem, _index123) => "string" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".tags[" + _index123 + "]",
            expected: "string",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".tags",
            expected: "(Array<string> | undefined)",
            value: input.tags
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory));
        const _ao101 = (input, _path, _exceptionable = true) => ("string" === typeof input.$ref && RegExp(/^#\/components\/requestBodies\/(.*)/).test(input.$ref) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".$ref",
            expected: "`#/components/requestBodies/${string}`",
            value: input.$ref
        }, _errorFactory)) && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory))) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true;
        const _ao102 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApiV3.IJsonSchema.IReference<`#/components/responses/${string}`> | OpenApiV3.IOperation.IResponse)",
                value
            }, _errorFactory)) && _au16(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApiV3.IJsonSchema.IReference<`#/components/responses/${string}`> | OpenApiV3.IOperation.IResponse)",
                value
            }, _errorFactory);
        }));
        const _ao103 = (input, _path, _exceptionable = true) => ("string" === typeof input.$ref && RegExp(/^#\/components\/responses\/(.*)/).test(input.$ref) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".$ref",
            expected: "`#/components/responses/${string}`",
            value: input.$ref
        }, _errorFactory)) && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory))) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true;
        const _ao104 = (input, _path, _exceptionable = true) => ("string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".name",
            expected: "string",
            value: input.name
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory));
        const _ao105 = (input, _path, _exceptionable = true) => ("string" === typeof input.openapi && RegExp(/^3\.1\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(input.openapi) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".openapi",
            expected: "`3.1.${number}`",
            value: input.openapi
        }, _errorFactory)) && (undefined === input.servers || (Array.isArray(input.servers) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".servers",
            expected: "(Array<OpenApiV3_1.IServer> | undefined)",
            value: input.servers
        }, _errorFactory)) && input.servers.every(((elem, _index124) => ("object" === typeof elem && null !== elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".servers[" + _index124 + "]",
            expected: "OpenApiV3_1.IServer",
            value: elem
        }, _errorFactory)) && _ao106(elem, _path + ".servers[" + _index124 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".servers[" + _index124 + "]",
            expected: "OpenApiV3_1.IServer",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".servers",
            expected: "(Array<OpenApiV3_1.IServer> | undefined)",
            value: input.servers
        }, _errorFactory)) && (undefined === input.info || ("object" === typeof input.info && null !== input.info || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".info",
            expected: "(OpenApiV3_1.IDocument.IInfo | undefined)",
            value: input.info
        }, _errorFactory)) && _ao109(input.info, _path + ".info", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".info",
            expected: "(OpenApiV3_1.IDocument.IInfo | undefined)",
            value: input.info
        }, _errorFactory)) && (undefined === input.components || ("object" === typeof input.components && null !== input.components && false === Array.isArray(input.components) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".components",
            expected: "(OpenApiV3_1.IComponents | undefined)",
            value: input.components
        }, _errorFactory)) && _ao112(input.components, _path + ".components", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".components",
            expected: "(OpenApiV3_1.IComponents | undefined)",
            value: input.components
        }, _errorFactory)) && (undefined === input.paths || ("object" === typeof input.paths && null !== input.paths && false === Array.isArray(input.paths) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".paths",
            expected: "(Record<string, OpenApiV3_1.IPath> | undefined)",
            value: input.paths
        }, _errorFactory)) && _ao130(input.paths, _path + ".paths", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".paths",
            expected: "(Record<string, OpenApiV3_1.IPath> | undefined)",
            value: input.paths
        }, _errorFactory)) && (undefined === input.webhooks || ("object" === typeof input.webhooks && null !== input.webhooks && false === Array.isArray(input.webhooks) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".webhooks",
            expected: "(Record<string, IPath | IReference<`#/components/pathItems/${string}`>> | undefined)",
            value: input.webhooks
        }, _errorFactory)) && _ao163(input.webhooks, _path + ".webhooks", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".webhooks",
            expected: "(Record<string, IPath | IReference<`#/components/pathItems/${string}`>> | undefined)",
            value: input.webhooks
        }, _errorFactory)) && (undefined === input.security || (Array.isArray(input.security) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".security",
            expected: "(Array<Record<string, Array<string>>> | undefined)",
            value: input.security
        }, _errorFactory)) && input.security.every(((elem, _index125) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".security[" + _index125 + "]",
            expected: "Record<string, Array<string>>",
            value: elem
        }, _errorFactory)) && _ao39(elem, _path + ".security[" + _index125 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".security[" + _index125 + "]",
            expected: "Record<string, Array<string>>",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".security",
            expected: "(Array<Record<string, Array<string>>> | undefined)",
            value: input.security
        }, _errorFactory)) && (undefined === input.tags || (Array.isArray(input.tags) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".tags",
            expected: "(Array<OpenApiV3_1.IDocument.ITag> | undefined)",
            value: input.tags
        }, _errorFactory)) && input.tags.every(((elem, _index126) => ("object" === typeof elem && null !== elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".tags[" + _index126 + "]",
            expected: "OpenApiV3_1.IDocument.ITag",
            value: elem
        }, _errorFactory)) && _ao165(elem, _path + ".tags[" + _index126 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".tags[" + _index126 + "]",
            expected: "OpenApiV3_1.IDocument.ITag",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".tags",
            expected: "(Array<OpenApiV3_1.IDocument.ITag> | undefined)",
            value: input.tags
        }, _errorFactory));
        const _ao106 = (input, _path, _exceptionable = true) => ("string" === typeof input.url || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".url",
            expected: "string",
            value: input.url
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.variables || ("object" === typeof input.variables && null !== input.variables && false === Array.isArray(input.variables) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".variables",
            expected: "(Record<string, OpenApiV3_1.IServer.IVariable> | undefined)",
            value: input.variables
        }, _errorFactory)) && _ao107(input.variables, _path + ".variables", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".variables",
            expected: "(Record<string, OpenApiV3_1.IServer.IVariable> | undefined)",
            value: input.variables
        }, _errorFactory));
        const _ao107 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3_1.IServer.IVariable",
                value
            }, _errorFactory)) && _ao108(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3_1.IServer.IVariable",
                value
            }, _errorFactory);
        }));
        const _ao108 = (input, _path, _exceptionable = true) => ("string" === typeof input["default"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["default"]',
            expected: "string",
            value: input["default"]
        }, _errorFactory)) && (undefined === input["enum"] || (Array.isArray(input["enum"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["enum"]',
            expected: "((Array<string> & MinItems<1>) | undefined)",
            value: input["enum"]
        }, _errorFactory)) && ((1 <= input["enum"].length || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["enum"]',
            expected: "Array<> & MinItems<1>",
            value: input["enum"]
        }, _errorFactory)) && input["enum"].every(((elem, _index127) => "string" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["enum"][' + _index127 + "]",
            expected: "string",
            value: elem
        }, _errorFactory)))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["enum"]',
            expected: "((Array<string> & MinItems<1>) | undefined)",
            value: input["enum"]
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory));
        const _ao109 = (input, _path, _exceptionable = true) => ("string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "string",
            value: input.title
        }, _errorFactory)) && (undefined === input.summary || "string" === typeof input.summary || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".summary",
            expected: "(string | undefined)",
            value: input.summary
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.termsOfService || "string" === typeof input.termsOfService || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".termsOfService",
            expected: "(string | undefined)",
            value: input.termsOfService
        }, _errorFactory)) && (undefined === input.contact || ("object" === typeof input.contact && null !== input.contact && false === Array.isArray(input.contact) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".contact",
            expected: "(OpenApiV3_1.IDocument.IContact | undefined)",
            value: input.contact
        }, _errorFactory)) && _ao110(input.contact, _path + ".contact", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".contact",
            expected: "(OpenApiV3_1.IDocument.IContact | undefined)",
            value: input.contact
        }, _errorFactory)) && (undefined === input.license || ("object" === typeof input.license && null !== input.license || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".license",
            expected: "(OpenApiV3_1.IDocument.ILicense | undefined)",
            value: input.license
        }, _errorFactory)) && _ao111(input.license, _path + ".license", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".license",
            expected: "(OpenApiV3_1.IDocument.ILicense | undefined)",
            value: input.license
        }, _errorFactory)) && ("string" === typeof input.version || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".version",
            expected: "string",
            value: input.version
        }, _errorFactory));
        const _ao110 = (input, _path, _exceptionable = true) => (undefined === input.name || "string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".name",
            expected: "(string | undefined)",
            value: input.name
        }, _errorFactory)) && (undefined === input.url || "string" === typeof input.url || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".url",
            expected: "(string | undefined)",
            value: input.url
        }, _errorFactory)) && (undefined === input.email || "string" === typeof input.email || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".email",
            expected: "(string | undefined)",
            value: input.email
        }, _errorFactory));
        const _ao111 = (input, _path, _exceptionable = true) => ("string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".name",
            expected: "string",
            value: input.name
        }, _errorFactory)) && (undefined === input.identifier || "string" === typeof input.identifier || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".identifier",
            expected: "(string | undefined)",
            value: input.identifier
        }, _errorFactory)) && (undefined === input.url || "string" === typeof input.url || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".url",
            expected: "(string | undefined)",
            value: input.url
        }, _errorFactory));
        const _ao112 = (input, _path, _exceptionable = true) => (undefined === input.schemas || ("object" === typeof input.schemas && null !== input.schemas && false === Array.isArray(input.schemas) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".schemas",
            expected: "(Record<string, OpenApiV3_1.IJsonSchema> | undefined)",
            value: input.schemas
        }, _errorFactory)) && _ao113(input.schemas, _path + ".schemas", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".schemas",
            expected: "(Record<string, OpenApiV3_1.IJsonSchema> | undefined)",
            value: input.schemas
        }, _errorFactory)) && (undefined === input.pathItems || ("object" === typeof input.pathItems && null !== input.pathItems && false === Array.isArray(input.pathItems) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".pathItems",
            expected: "(Record<string, OpenApiV3_1.IPath> | undefined)",
            value: input.pathItems
        }, _errorFactory)) && _ao130(input.pathItems, _path + ".pathItems", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".pathItems",
            expected: "(Record<string, OpenApiV3_1.IPath> | undefined)",
            value: input.pathItems
        }, _errorFactory)) && (undefined === input.responses || ("object" === typeof input.responses && null !== input.responses && false === Array.isArray(input.responses) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".responses",
            expected: "(Record<string, OpenApiV3_1.IOperation.IResponse> | undefined)",
            value: input.responses
        }, _errorFactory)) && _ao148(input.responses, _path + ".responses", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".responses",
            expected: "(Record<string, OpenApiV3_1.IOperation.IResponse> | undefined)",
            value: input.responses
        }, _errorFactory)) && (undefined === input.parameters || ("object" === typeof input.parameters && null !== input.parameters && false === Array.isArray(input.parameters) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".parameters",
            expected: "(Record<string, OpenApiV3_1.IOperation.IParameter> | undefined)",
            value: input.parameters
        }, _errorFactory)) && _ao149(input.parameters, _path + ".parameters", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".parameters",
            expected: "(Record<string, OpenApiV3_1.IOperation.IParameter> | undefined)",
            value: input.parameters
        }, _errorFactory)) && (undefined === input.requestBodies || ("object" === typeof input.requestBodies && null !== input.requestBodies && false === Array.isArray(input.requestBodies) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".requestBodies",
            expected: "(Record<string, OpenApiV3_1.IOperation.IRequestBody> | undefined)",
            value: input.requestBodies
        }, _errorFactory)) && _ao150(input.requestBodies, _path + ".requestBodies", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".requestBodies",
            expected: "(Record<string, OpenApiV3_1.IOperation.IRequestBody> | undefined)",
            value: input.requestBodies
        }, _errorFactory)) && (undefined === input.securitySchemes || ("object" === typeof input.securitySchemes && null !== input.securitySchemes && false === Array.isArray(input.securitySchemes) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".securitySchemes",
            expected: "(Record<string, OpenApiV3_1.ISecurityScheme> | undefined)",
            value: input.securitySchemes
        }, _errorFactory)) && _ao151(input.securitySchemes, _path + ".securitySchemes", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".securitySchemes",
            expected: "(Record<string, OpenApiV3_1.ISecurityScheme> | undefined)",
            value: input.securitySchemes
        }, _errorFactory)) && (undefined === input.headers || ("object" === typeof input.headers && null !== input.headers && false === Array.isArray(input.headers) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".headers",
            expected: '(Record<string, Omit<OpenApiV3_1.IOperation.IParameter, "in">> | undefined)',
            value: input.headers
        }, _errorFactory)) && _ao161(input.headers, _path + ".headers", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".headers",
            expected: '(Record<string, Omit<OpenApiV3_1.IOperation.IParameter, "in">> | undefined)',
            value: input.headers
        }, _errorFactory)) && (undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Record<string, OpenApiV3_1.IExample> | undefined)",
            value: input.examples
        }, _errorFactory)) && _ao162(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Record<string, OpenApiV3_1.IExample> | undefined)",
            value: input.examples
        }, _errorFactory));
        const _ao113 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value
            }, _errorFactory)) && _au5(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value
            }, _errorFactory);
        }));
        const _ao114 = (input, _path, _exceptionable = true) => (undefined === input.nullable || "boolean" === typeof input.nullable || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".nullable",
            expected: "(boolean | undefined)",
            value: input.nullable
        }, _errorFactory)) && (undefined === input.properties || ("object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".properties",
            expected: "(Record<string, OpenApiV3_1.IJsonSchema> | undefined)",
            value: input.properties
        }, _errorFactory)) && _ao113(input.properties, _path + ".properties", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".properties",
            expected: "(Record<string, OpenApiV3_1.IJsonSchema> | undefined)",
            value: input.properties
        }, _errorFactory)) && (undefined === input.required || (Array.isArray(input.required) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".required",
            expected: "(Array<string> | undefined)",
            value: input.required
        }, _errorFactory)) && input.required.every(((elem, _index128) => "string" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".required[" + _index128 + "]",
            expected: "string",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".required",
            expected: "(Array<string> | undefined)",
            value: input.required
        }, _errorFactory)) && ((null !== input.additionalProperties || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".additionalProperties",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalProperties
        }, _errorFactory)) && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || ("object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".additionalProperties",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalProperties
        }, _errorFactory)) && _au5(input.additionalProperties, _path + ".additionalProperties", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".additionalProperties",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalProperties
        }, _errorFactory))) && (undefined === input.maxProperties || "number" === typeof input.maxProperties || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".maxProperties",
            expected: "(number | undefined)",
            value: input.maxProperties
        }, _errorFactory)) && (undefined === input.minProperties || "number" === typeof input.minProperties || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".minProperties",
            expected: "(number | undefined)",
            value: input.minProperties
        }, _errorFactory)) && ("object" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: '"object"',
            value: input.type
        }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)));
        const _ao115 = (input, _path, _exceptionable = true) => ((Array.isArray(input.type) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: 'Array<"string" | "number" | "boolean" | "object" | "integer" | "array" | "null">',
            value: input.type
        }, _errorFactory)) && input.type.every(((elem, _index129) => "string" === elem || "number" === elem || "boolean" === elem || "object" === elem || "integer" === elem || "array" === elem || "null" === elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type[" + _index129 + "]",
            expected: '("array" | "boolean" | "integer" | "null" | "number" | "object" | "string")',
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: 'Array<"string" | "number" | "boolean" | "object" | "integer" | "array" | "null">',
            value: input.type
        }, _errorFactory)) && (null === input["default"] || undefined === input["default"] || Array.isArray(input["default"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["default"]',
            expected: "(Array<any> | null | undefined)",
            value: input["default"]
        }, _errorFactory)) && (undefined === input["enum"] || Array.isArray(input["enum"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["enum"]',
            expected: "(Array<any> | undefined)",
            value: input["enum"]
        }, _errorFactory)) && ("string" === typeof input["const"] || "number" === typeof input["const"] || "boolean" === typeof input["const"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["const"]',
            expected: "(boolean | number | string)",
            value: input["const"]
        }, _errorFactory)) && (undefined === input.nullable || "boolean" === typeof input.nullable || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".nullable",
            expected: "(boolean | undefined)",
            value: input.nullable
        }, _errorFactory)) && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory))) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true && (undefined === input.minimum || "number" === typeof input.minimum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".minimum",
            expected: "(number | undefined)",
            value: input.minimum
        }, _errorFactory)) && (undefined === input.maximum || "number" === typeof input.maximum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".maximum",
            expected: "(number | undefined)",
            value: input.maximum
        }, _errorFactory)) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && (0 < input.multipleOf || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".multipleOf",
            expected: "number & ExclusiveMinimum<0>",
            value: input.multipleOf
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".multipleOf",
            expected: "((number & ExclusiveMinimum<0>) | undefined)",
            value: input.multipleOf
        }, _errorFactory)) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".exclusiveMinimum",
            expected: "(boolean | number | undefined)",
            value: input.exclusiveMinimum
        }, _errorFactory)) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".exclusiveMaximum",
            expected: "(boolean | number | undefined)",
            value: input.exclusiveMaximum
        }, _errorFactory)) && (undefined === input.format || "string" === typeof input.format || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".format",
            expected: "(string | undefined)",
            value: input.format
        }, _errorFactory)) && (undefined === input.maxLength || "number" === typeof input.maxLength && (Math.floor(input.maxLength) === input.maxLength && 0 <= input.maxLength && input.maxLength <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".maxLength",
            expected: 'number & Type<"uint64">',
            value: input.maxLength
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".maxLength",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.maxLength
        }, _errorFactory)) && (undefined === input.pattern || "string" === typeof input.pattern || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".pattern",
            expected: "(string | undefined)",
            value: input.pattern
        }, _errorFactory)) && (undefined === input.contentMediaType || "string" === typeof input.contentMediaType || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".contentMediaType",
            expected: "(string | undefined)",
            value: input.contentMediaType
        }, _errorFactory)) && (undefined === input.minLength || "number" === typeof input.minLength && (Math.floor(input.minLength) === input.minLength && 0 <= input.minLength && input.minLength <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".minLength",
            expected: 'number & Type<"uint64">',
            value: input.minLength
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".minLength",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.minLength
        }, _errorFactory)) && ((null !== input.items || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".items",
            expected: "(Array<OpenApiV3_1.IJsonSchema> | OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | undefined)",
            value: input.items
        }, _errorFactory)) && (undefined === input.items || (Array.isArray(input.items) && input.items.every(((elem, _index130) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".items[" + _index130 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        }, _errorFactory)) && _au5(elem, _path + ".items[" + _index130 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".items[" + _index130 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        }, _errorFactory))) || "object" === typeof input.items && null !== input.items && false === Array.isArray(input.items) && _au5(input.items, _path + ".items", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".items",
            expected: "(Array<OpenApiV3_1.IJsonSchema> | OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | undefined)",
            value: input.items
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".items",
            expected: "(Array<OpenApiV3_1.IJsonSchema> | OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | undefined)",
            value: input.items
        }, _errorFactory))) && (undefined === input.prefixItems || (Array.isArray(input.prefixItems) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".prefixItems",
            expected: "(Array<OpenApiV3_1.IJsonSchema> | undefined)",
            value: input.prefixItems
        }, _errorFactory)) && input.prefixItems.every(((elem, _index131) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".prefixItems[" + _index131 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        }, _errorFactory)) && _au5(elem, _path + ".prefixItems[" + _index131 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".prefixItems[" + _index131 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".prefixItems",
            expected: "(Array<OpenApiV3_1.IJsonSchema> | undefined)",
            value: input.prefixItems
        }, _errorFactory)) && (undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".uniqueItems",
            expected: "(boolean | undefined)",
            value: input.uniqueItems
        }, _errorFactory)) && ((null !== input.additionalItems || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".additionalItems",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalItems
        }, _errorFactory)) && (undefined === input.additionalItems || "boolean" === typeof input.additionalItems || ("object" === typeof input.additionalItems && null !== input.additionalItems && false === Array.isArray(input.additionalItems) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".additionalItems",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalItems
        }, _errorFactory)) && _au5(input.additionalItems, _path + ".additionalItems", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".additionalItems",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalItems
        }, _errorFactory))) && (undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".minItems",
            expected: 'number & Type<"uint64">',
            value: input.minItems
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".minItems",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.minItems
        }, _errorFactory)) && (undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".maxItems",
            expected: 'number & Type<"uint64">',
            value: input.maxItems
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".maxItems",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.maxItems
        }, _errorFactory)) && ((null !== input.additionalProperties || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".additionalProperties",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalProperties
        }, _errorFactory)) && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || ("object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".additionalProperties",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalProperties
        }, _errorFactory)) && _au5(input.additionalProperties, _path + ".additionalProperties", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".additionalProperties",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalProperties
        }, _errorFactory))) && (undefined === input.properties || ("object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".properties",
            expected: "(Record<string, OpenApiV3_1.IJsonSchema> | undefined)",
            value: input.properties
        }, _errorFactory)) && _ao113(input.properties, _path + ".properties", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".properties",
            expected: "(Record<string, OpenApiV3_1.IJsonSchema> | undefined)",
            value: input.properties
        }, _errorFactory)) && (undefined === input.required || (Array.isArray(input.required) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".required",
            expected: "(Array<string> | undefined)",
            value: input.required
        }, _errorFactory)) && input.required.every(((elem, _index132) => "string" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".required[" + _index132 + "]",
            expected: "string",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".required",
            expected: "(Array<string> | undefined)",
            value: input.required
        }, _errorFactory)) && (undefined === input.maxProperties || "number" === typeof input.maxProperties || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".maxProperties",
            expected: "(number | undefined)",
            value: input.maxProperties
        }, _errorFactory)) && (undefined === input.minProperties || "number" === typeof input.minProperties || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".minProperties",
            expected: "(number | undefined)",
            value: input.minProperties
        }, _errorFactory)) && ((Array.isArray(input.oneOf) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".oneOf",
            expected: "Array<OpenApiV3_1.IJsonSchema>",
            value: input.oneOf
        }, _errorFactory)) && input.oneOf.every(((elem, _index133) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".oneOf[" + _index133 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        }, _errorFactory)) && _au5(elem, _path + ".oneOf[" + _index133 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".oneOf[" + _index133 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".oneOf",
            expected: "Array<OpenApiV3_1.IJsonSchema>",
            value: input.oneOf
        }, _errorFactory)) && (undefined === input.discriminator || ("object" === typeof input.discriminator && null !== input.discriminator || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".discriminator",
            expected: "(OpenApiV3_1.IJsonSchema.IOneOf.IDiscriminator | undefined)",
            value: input.discriminator
        }, _errorFactory)) && _ao127(input.discriminator, _path + ".discriminator", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".discriminator",
            expected: "(OpenApiV3_1.IJsonSchema.IOneOf.IDiscriminator | undefined)",
            value: input.discriminator
        }, _errorFactory)) && ((Array.isArray(input.anyOf) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".anyOf",
            expected: "Array<OpenApiV3_1.IJsonSchema>",
            value: input.anyOf
        }, _errorFactory)) && input.anyOf.every(((elem, _index134) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".anyOf[" + _index134 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        }, _errorFactory)) && _au5(elem, _path + ".anyOf[" + _index134 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".anyOf[" + _index134 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".anyOf",
            expected: "Array<OpenApiV3_1.IJsonSchema>",
            value: input.anyOf
        }, _errorFactory)) && ((Array.isArray(input.allOf) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".allOf",
            expected: "Array<OpenApiV3_1.IJsonSchema>",
            value: input.allOf
        }, _errorFactory)) && input.allOf.every(((elem, _index135) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".allOf[" + _index135 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        }, _errorFactory)) && _au5(elem, _path + ".allOf[" + _index135 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".allOf[" + _index135 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".allOf",
            expected: "Array<OpenApiV3_1.IJsonSchema>",
            value: input.allOf
        }, _errorFactory)) && ("string" === typeof input.$ref || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".$ref",
            expected: "string",
            value: input.$ref
        }, _errorFactory));
        const _ao116 = (input, _path, _exceptionable = true) => ("string" === typeof input["const"] || "number" === typeof input["const"] || "boolean" === typeof input["const"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["const"]',
            expected: "(boolean | number | string)",
            value: input["const"]
        }, _errorFactory)) && (undefined === input.nullable || "boolean" === typeof input.nullable || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".nullable",
            expected: "(boolean | undefined)",
            value: input.nullable
        }, _errorFactory)) && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory))) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true;
        const _ao117 = (input, _path, _exceptionable = true) => (undefined === input.nullable || "boolean" === typeof input.nullable || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".nullable",
            expected: "(boolean | undefined)",
            value: input.nullable
        }, _errorFactory)) && (null === input["default"] || undefined === input["default"] || "boolean" === typeof input["default"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["default"]',
            expected: "(boolean | null | undefined)",
            value: input["default"]
        }, _errorFactory)) && (undefined === input["enum"] || (Array.isArray(input["enum"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["enum"]',
            expected: "(Array<boolean | null> | undefined)",
            value: input["enum"]
        }, _errorFactory)) && input["enum"].every(((elem, _index136) => null === elem || "boolean" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["enum"][' + _index136 + "]",
            expected: "(boolean | null)",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["enum"]',
            expected: "(Array<boolean | null> | undefined)",
            value: input["enum"]
        }, _errorFactory)) && ("boolean" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: '"boolean"',
            value: input.type
        }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)));
        const _ao118 = (input, _path, _exceptionable = true) => (undefined === input.nullable || "boolean" === typeof input.nullable || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".nullable",
            expected: "(boolean | undefined)",
            value: input.nullable
        }, _errorFactory)) && (null === input["default"] || undefined === input["default"] || "number" === typeof input["default"] && (Math.floor(input["default"]) === input["default"] && -0x8000000000000000 <= input["default"] && input["default"] <= 0x8000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["default"]',
            expected: 'number & Type<"int64">',
            value: input["default"]
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["default"]',
            expected: '((number & Type<"int64">) | null | undefined)',
            value: input["default"]
        }, _errorFactory)) && (undefined === input["enum"] || (Array.isArray(input["enum"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["enum"]',
            expected: "(Array<number | null> | undefined)",
            value: input["enum"]
        }, _errorFactory)) && input["enum"].every(((elem, _index137) => null === elem || "number" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["enum"][' + _index137 + "]",
            expected: "(null | number)",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["enum"]',
            expected: "(Array<number | null> | undefined)",
            value: input["enum"]
        }, _errorFactory)) && (undefined === input.minimum || "number" === typeof input.minimum && (Math.floor(input.minimum) === input.minimum && -0x8000000000000000 <= input.minimum && input.minimum <= 0x8000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".minimum",
            expected: 'number & Type<"int64">',
            value: input.minimum
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".minimum",
            expected: '((number & Type<"int64">) | undefined)',
            value: input.minimum
        }, _errorFactory)) && (undefined === input.maximum || "number" === typeof input.maximum && (Math.floor(input.maximum) === input.maximum && -0x8000000000000000 <= input.maximum && input.maximum <= 0x8000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".maximum",
            expected: 'number & Type<"int64">',
            value: input.maximum
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".maximum",
            expected: '((number & Type<"int64">) | undefined)',
            value: input.maximum
        }, _errorFactory)) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum && (Math.floor(input.exclusiveMinimum) === input.exclusiveMinimum && -0x8000000000000000 <= input.exclusiveMinimum && input.exclusiveMinimum <= 0x8000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".exclusiveMinimum",
            expected: 'number & Type<"int64">',
            value: input.exclusiveMinimum
        }, _errorFactory)) || "boolean" === typeof input.exclusiveMinimum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".exclusiveMinimum",
            expected: '((number & Type<"int64">) | boolean | undefined)',
            value: input.exclusiveMinimum
        }, _errorFactory)) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum && (Math.floor(input.exclusiveMaximum) === input.exclusiveMaximum && -0x8000000000000000 <= input.exclusiveMaximum && input.exclusiveMaximum <= 0x8000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".exclusiveMaximum",
            expected: 'number & Type<"int64">',
            value: input.exclusiveMaximum
        }, _errorFactory)) || "boolean" === typeof input.exclusiveMaximum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".exclusiveMaximum",
            expected: '((number & Type<"int64">) | boolean | undefined)',
            value: input.exclusiveMaximum
        }, _errorFactory)) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && (Math.floor(input.multipleOf) === input.multipleOf && 0 <= input.multipleOf && input.multipleOf <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".multipleOf",
            expected: 'number & Type<"uint64">',
            value: input.multipleOf
        }, _errorFactory)) && (0 < input.multipleOf || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".multipleOf",
            expected: "number & ExclusiveMinimum<0>",
            value: input.multipleOf
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".multipleOf",
            expected: '((number & Type<"uint64"> & ExclusiveMinimum<0>) | undefined)',
            value: input.multipleOf
        }, _errorFactory)) && ("integer" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: '"integer"',
            value: input.type
        }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)));
        const _ao119 = (input, _path, _exceptionable = true) => (undefined === input.nullable || "boolean" === typeof input.nullable || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".nullable",
            expected: "(boolean | undefined)",
            value: input.nullable
        }, _errorFactory)) && (null === input["default"] || undefined === input["default"] || "number" === typeof input["default"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["default"]',
            expected: "(null | number | undefined)",
            value: input["default"]
        }, _errorFactory)) && (undefined === input["enum"] || (Array.isArray(input["enum"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["enum"]',
            expected: "(Array<number | null> | undefined)",
            value: input["enum"]
        }, _errorFactory)) && input["enum"].every(((elem, _index138) => null === elem || "number" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["enum"][' + _index138 + "]",
            expected: "(null | number)",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["enum"]',
            expected: "(Array<number | null> | undefined)",
            value: input["enum"]
        }, _errorFactory)) && (undefined === input.minimum || "number" === typeof input.minimum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".minimum",
            expected: "(number | undefined)",
            value: input.minimum
        }, _errorFactory)) && (undefined === input.maximum || "number" === typeof input.maximum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".maximum",
            expected: "(number | undefined)",
            value: input.maximum
        }, _errorFactory)) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".exclusiveMinimum",
            expected: "(boolean | number | undefined)",
            value: input.exclusiveMinimum
        }, _errorFactory)) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".exclusiveMaximum",
            expected: "(boolean | number | undefined)",
            value: input.exclusiveMaximum
        }, _errorFactory)) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && (0 < input.multipleOf || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".multipleOf",
            expected: "number & ExclusiveMinimum<0>",
            value: input.multipleOf
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".multipleOf",
            expected: "((number & ExclusiveMinimum<0>) | undefined)",
            value: input.multipleOf
        }, _errorFactory)) && ("number" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: '"number"',
            value: input.type
        }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)));
        const _ao120 = (input, _path, _exceptionable = true) => (undefined === input.nullable || "boolean" === typeof input.nullable || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".nullable",
            expected: "(boolean | undefined)",
            value: input.nullable
        }, _errorFactory)) && (null === input["default"] || undefined === input["default"] || "string" === typeof input["default"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["default"]',
            expected: "(null | string | undefined)",
            value: input["default"]
        }, _errorFactory)) && (undefined === input["enum"] || (Array.isArray(input["enum"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["enum"]',
            expected: "(Array<string | null> | undefined)",
            value: input["enum"]
        }, _errorFactory)) && input["enum"].every(((elem, _index139) => null === elem || "string" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["enum"][' + _index139 + "]",
            expected: "(null | string)",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["enum"]',
            expected: "(Array<string | null> | undefined)",
            value: input["enum"]
        }, _errorFactory)) && (undefined === input.format || "string" === typeof input.format || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".format",
            expected: "(string | undefined)",
            value: input.format
        }, _errorFactory)) && (undefined === input.pattern || "string" === typeof input.pattern || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".pattern",
            expected: "(string | undefined)",
            value: input.pattern
        }, _errorFactory)) && (undefined === input.contentMediaType || "string" === typeof input.contentMediaType || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".contentMediaType",
            expected: "(string | undefined)",
            value: input.contentMediaType
        }, _errorFactory)) && (undefined === input.minLength || "number" === typeof input.minLength && (Math.floor(input.minLength) === input.minLength && 0 <= input.minLength && input.minLength <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".minLength",
            expected: 'number & Type<"uint64">',
            value: input.minLength
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".minLength",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.minLength
        }, _errorFactory)) && (undefined === input.maxLength || "number" === typeof input.maxLength && (Math.floor(input.maxLength) === input.maxLength && 0 <= input.maxLength && input.maxLength <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".maxLength",
            expected: 'number & Type<"uint64">',
            value: input.maxLength
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".maxLength",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.maxLength
        }, _errorFactory)) && ("string" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: '"string"',
            value: input.type
        }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)));
        const _ao121 = (input, _path, _exceptionable = true) => (undefined === input.nullable || "boolean" === typeof input.nullable || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".nullable",
            expected: "(boolean | undefined)",
            value: input.nullable
        }, _errorFactory)) && ((null !== input.items || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".items",
            expected: "(Array<OpenApiV3_1.IJsonSchema> | OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | undefined)",
            value: input.items
        }, _errorFactory)) && (undefined === input.items || (Array.isArray(input.items) && input.items.every(((elem, _index140) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".items[" + _index140 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        }, _errorFactory)) && _au5(elem, _path + ".items[" + _index140 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".items[" + _index140 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        }, _errorFactory))) || "object" === typeof input.items && null !== input.items && false === Array.isArray(input.items) && _au5(input.items, _path + ".items", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".items",
            expected: "(Array<OpenApiV3_1.IJsonSchema> | OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | undefined)",
            value: input.items
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".items",
            expected: "(Array<OpenApiV3_1.IJsonSchema> | OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | undefined)",
            value: input.items
        }, _errorFactory))) && (undefined === input.prefixItems || (Array.isArray(input.prefixItems) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".prefixItems",
            expected: "(Array<OpenApiV3_1.IJsonSchema> | undefined)",
            value: input.prefixItems
        }, _errorFactory)) && input.prefixItems.every(((elem, _index141) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".prefixItems[" + _index141 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        }, _errorFactory)) && _au5(elem, _path + ".prefixItems[" + _index141 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".prefixItems[" + _index141 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".prefixItems",
            expected: "(Array<OpenApiV3_1.IJsonSchema> | undefined)",
            value: input.prefixItems
        }, _errorFactory)) && (undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".uniqueItems",
            expected: "(boolean | undefined)",
            value: input.uniqueItems
        }, _errorFactory)) && ((null !== input.additionalItems || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".additionalItems",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalItems
        }, _errorFactory)) && (undefined === input.additionalItems || "boolean" === typeof input.additionalItems || ("object" === typeof input.additionalItems && null !== input.additionalItems && false === Array.isArray(input.additionalItems) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".additionalItems",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalItems
        }, _errorFactory)) && _au5(input.additionalItems, _path + ".additionalItems", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".additionalItems",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalItems
        }, _errorFactory))) && (undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".minItems",
            expected: 'number & Type<"uint64">',
            value: input.minItems
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".minItems",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.minItems
        }, _errorFactory)) && (undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".maxItems",
            expected: 'number & Type<"uint64">',
            value: input.maxItems
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".maxItems",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.maxItems
        }, _errorFactory)) && ("array" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: '"array"',
            value: input.type
        }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)));
        const _ao122 = (input, _path, _exceptionable = true) => ("string" === typeof input.$ref || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".$ref",
            expected: "string",
            value: input.$ref
        }, _errorFactory)) && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory))) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true;
        const _ao123 = (input, _path, _exceptionable = true) => ("string" === typeof input.$recursiveRef || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".$recursiveRef",
            expected: "string",
            value: input.$recursiveRef
        }, _errorFactory)) && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory))) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true;
        const _ao124 = (input, _path, _exceptionable = true) => ((Array.isArray(input.allOf) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".allOf",
            expected: "Array<OpenApiV3_1.IJsonSchema>",
            value: input.allOf
        }, _errorFactory)) && input.allOf.every(((elem, _index142) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".allOf[" + _index142 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        }, _errorFactory)) && _au5(elem, _path + ".allOf[" + _index142 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".allOf[" + _index142 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".allOf",
            expected: "Array<OpenApiV3_1.IJsonSchema>",
            value: input.allOf
        }, _errorFactory)) && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory))) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true;
        const _ao125 = (input, _path, _exceptionable = true) => ((Array.isArray(input.anyOf) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".anyOf",
            expected: "Array<OpenApiV3_1.IJsonSchema>",
            value: input.anyOf
        }, _errorFactory)) && input.anyOf.every(((elem, _index143) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".anyOf[" + _index143 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        }, _errorFactory)) && _au5(elem, _path + ".anyOf[" + _index143 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".anyOf[" + _index143 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".anyOf",
            expected: "Array<OpenApiV3_1.IJsonSchema>",
            value: input.anyOf
        }, _errorFactory)) && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory))) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true;
        const _ao126 = (input, _path, _exceptionable = true) => ((Array.isArray(input.oneOf) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".oneOf",
            expected: "Array<OpenApiV3_1.IJsonSchema>",
            value: input.oneOf
        }, _errorFactory)) && input.oneOf.every(((elem, _index144) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".oneOf[" + _index144 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        }, _errorFactory)) && _au5(elem, _path + ".oneOf[" + _index144 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".oneOf[" + _index144 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".oneOf",
            expected: "Array<OpenApiV3_1.IJsonSchema>",
            value: input.oneOf
        }, _errorFactory)) && (undefined === input.discriminator || ("object" === typeof input.discriminator && null !== input.discriminator || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".discriminator",
            expected: "(OpenApiV3_1.IJsonSchema.IOneOf.IDiscriminator | undefined)",
            value: input.discriminator
        }, _errorFactory)) && _ao127(input.discriminator, _path + ".discriminator", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".discriminator",
            expected: "(OpenApiV3_1.IJsonSchema.IOneOf.IDiscriminator | undefined)",
            value: input.discriminator
        }, _errorFactory)) && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory))) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true;
        const _ao127 = (input, _path, _exceptionable = true) => ("string" === typeof input.propertyName || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".propertyName",
            expected: "string",
            value: input.propertyName
        }, _errorFactory)) && (undefined === input.mapping || ("object" === typeof input.mapping && null !== input.mapping && false === Array.isArray(input.mapping) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".mapping",
            expected: "(Record<string, string> | undefined)",
            value: input.mapping
        }, _errorFactory)) && _ao35(input.mapping, _path + ".mapping", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".mapping",
            expected: "(Record<string, string> | undefined)",
            value: input.mapping
        }, _errorFactory));
        const _ao128 = (input, _path, _exceptionable = true) => (null === input["default"] || undefined === input["default"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["default"]',
            expected: "(null | undefined)",
            value: input["default"]
        }, _errorFactory)) && ("null" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: '"null"',
            value: input.type
        }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)));
        const _ao129 = (input, _path, _exceptionable = true) => (null !== input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: "undefined",
            value: input.type
        }, _errorFactory)) && (undefined === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: "undefined",
            value: input.type
        }, _errorFactory)) && true && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)));
        const _ao130 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3_1.IPath",
                value
            }, _errorFactory)) && _ao131(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3_1.IPath",
                value
            }, _errorFactory);
        }));
        const _ao131 = (input, _path, _exceptionable = true) => (undefined === input.parameters || (Array.isArray(input.parameters) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".parameters",
            expected: "(Array<IParameter | IReference<`#/components/headers/${string}`> | IReference<`#/components/parameters/${string}`>>.o1 | undefined)",
            value: input.parameters
        }, _errorFactory)) && input.parameters.every(((elem, _index145) => ("object" === typeof elem && null !== elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".parameters[" + _index145 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IReference<`#/components/headers/${string}`> | OpenApiV3_1.IJsonSchema.IReference<`#/components/parameters/${string}`> | OpenApiV3_1.IOperation.IParameter)",
            value: elem
        }, _errorFactory)) && _au6(elem, _path + ".parameters[" + _index145 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".parameters[" + _index145 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IReference<`#/components/headers/${string}`> | OpenApiV3_1.IJsonSchema.IReference<`#/components/parameters/${string}`> | OpenApiV3_1.IOperation.IParameter)",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".parameters",
            expected: "(Array<IParameter | IReference<`#/components/headers/${string}`> | IReference<`#/components/parameters/${string}`>>.o1 | undefined)",
            value: input.parameters
        }, _errorFactory)) && (undefined === input.servers || (Array.isArray(input.servers) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".servers",
            expected: "(Array<OpenApiV3_1.IServer> | undefined)",
            value: input.servers
        }, _errorFactory)) && input.servers.every(((elem, _index146) => ("object" === typeof elem && null !== elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".servers[" + _index146 + "]",
            expected: "OpenApiV3_1.IServer",
            value: elem
        }, _errorFactory)) && _ao106(elem, _path + ".servers[" + _index146 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".servers[" + _index146 + "]",
            expected: "OpenApiV3_1.IServer",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".servers",
            expected: "(Array<OpenApiV3_1.IServer> | undefined)",
            value: input.servers
        }, _errorFactory)) && (undefined === input.summary || "string" === typeof input.summary || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".summary",
            expected: "(string | undefined)",
            value: input.summary
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.options || ("object" === typeof input.options && null !== input.options && false === Array.isArray(input.options) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".options",
            expected: "(OpenApiV3_1.IOperation | undefined)",
            value: input.options
        }, _errorFactory)) && _ao138(input.options, _path + ".options", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".options",
            expected: "(OpenApiV3_1.IOperation | undefined)",
            value: input.options
        }, _errorFactory)) && (undefined === input.get || ("object" === typeof input.get && null !== input.get && false === Array.isArray(input.get) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".get",
            expected: "(OpenApiV3_1.IOperation | undefined)",
            value: input.get
        }, _errorFactory)) && _ao138(input.get, _path + ".get", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".get",
            expected: "(OpenApiV3_1.IOperation | undefined)",
            value: input.get
        }, _errorFactory)) && (undefined === input.post || ("object" === typeof input.post && null !== input.post && false === Array.isArray(input.post) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".post",
            expected: "(OpenApiV3_1.IOperation | undefined)",
            value: input.post
        }, _errorFactory)) && _ao138(input.post, _path + ".post", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".post",
            expected: "(OpenApiV3_1.IOperation | undefined)",
            value: input.post
        }, _errorFactory)) && (undefined === input.patch || ("object" === typeof input.patch && null !== input.patch && false === Array.isArray(input.patch) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".patch",
            expected: "(OpenApiV3_1.IOperation | undefined)",
            value: input.patch
        }, _errorFactory)) && _ao138(input.patch, _path + ".patch", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".patch",
            expected: "(OpenApiV3_1.IOperation | undefined)",
            value: input.patch
        }, _errorFactory)) && (undefined === input.put || ("object" === typeof input.put && null !== input.put && false === Array.isArray(input.put) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".put",
            expected: "(OpenApiV3_1.IOperation | undefined)",
            value: input.put
        }, _errorFactory)) && _ao138(input.put, _path + ".put", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".put",
            expected: "(OpenApiV3_1.IOperation | undefined)",
            value: input.put
        }, _errorFactory)) && (undefined === input["delete"] || ("object" === typeof input["delete"] && null !== input["delete"] && false === Array.isArray(input["delete"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["delete"]',
            expected: "(OpenApiV3_1.IOperation | undefined)",
            value: input["delete"]
        }, _errorFactory)) && _ao138(input["delete"], _path + '["delete"]', _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["delete"]',
            expected: "(OpenApiV3_1.IOperation | undefined)",
            value: input["delete"]
        }, _errorFactory)) && (undefined === input.head || ("object" === typeof input.head && null !== input.head && false === Array.isArray(input.head) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".head",
            expected: "(OpenApiV3_1.IOperation | undefined)",
            value: input.head
        }, _errorFactory)) && _ao138(input.head, _path + ".head", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".head",
            expected: "(OpenApiV3_1.IOperation | undefined)",
            value: input.head
        }, _errorFactory)) && (undefined === input.trace || ("object" === typeof input.trace && null !== input.trace && false === Array.isArray(input.trace) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".trace",
            expected: "(OpenApiV3_1.IOperation | undefined)",
            value: input.trace
        }, _errorFactory)) && _ao138(input.trace, _path + ".trace", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".trace",
            expected: "(OpenApiV3_1.IOperation | undefined)",
            value: input.trace
        }, _errorFactory));
        const _ao132 = (input, _path, _exceptionable = true) => (undefined === input.name || "string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".name",
            expected: "(string | undefined)",
            value: input.name
        }, _errorFactory)) && ("path" === input["in"] || "query" === input["in"] || "header" === input["in"] || "cookie" === input["in"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["in"]',
            expected: '("cookie" | "header" | "path" | "query")',
            value: input["in"]
        }, _errorFactory)) && (("object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".schema",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: input.schema
        }, _errorFactory)) && _au5(input.schema, _path + ".schema", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".schema",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: input.schema
        }, _errorFactory)) && (undefined === input.required || "boolean" === typeof input.required || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".required",
            expected: "(boolean | undefined)",
            value: input.required
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && true && (undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Record<string, IExample | IReference<`#/components/examples/${string}`>>.o1 | undefined)",
            value: input.examples
        }, _errorFactory)) && _ao133(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Record<string, IExample | IReference<`#/components/examples/${string}`>>.o1 | undefined)",
            value: input.examples
        }, _errorFactory));
        const _ao133 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApiV3_1.IExample | OpenApiV3_1.IJsonSchema.IReference<`#/components/examples/${string}`>)",
                value
            }, _errorFactory)) && _au17(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApiV3_1.IExample | OpenApiV3_1.IJsonSchema.IReference<`#/components/examples/${string}`>)",
                value
            }, _errorFactory);
        }));
        const _ao134 = (input, _path, _exceptionable = true) => (undefined === input.summary || "string" === typeof input.summary || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".summary",
            expected: "(string | undefined)",
            value: input.summary
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && true && (undefined === input.externalValue || "string" === typeof input.externalValue || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".externalValue",
            expected: "(string | undefined)",
            value: input.externalValue
        }, _errorFactory));
        const _ao135 = (input, _path, _exceptionable = true) => ("string" === typeof input.$ref && RegExp(/^#\/components\/examples\/(.*)/).test(input.$ref) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".$ref",
            expected: "`#/components/examples/${string}`",
            value: input.$ref
        }, _errorFactory)) && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory))) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true;
        const _ao136 = (input, _path, _exceptionable = true) => ("string" === typeof input.$ref && RegExp(/^#\/components\/headers\/(.*)/).test(input.$ref) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".$ref",
            expected: "`#/components/headers/${string}`",
            value: input.$ref
        }, _errorFactory)) && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory))) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true;
        const _ao137 = (input, _path, _exceptionable = true) => ("string" === typeof input.$ref && RegExp(/^#\/components\/parameters\/(.*)/).test(input.$ref) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".$ref",
            expected: "`#/components/parameters/${string}`",
            value: input.$ref
        }, _errorFactory)) && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory))) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true;
        const _ao138 = (input, _path, _exceptionable = true) => (undefined === input.operationId || "string" === typeof input.operationId || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".operationId",
            expected: "(string | undefined)",
            value: input.operationId
        }, _errorFactory)) && (undefined === input.parameters || (Array.isArray(input.parameters) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".parameters",
            expected: "(Array<IParameter | IReference<`#/components/headers/${string}`> | IReference<`#/components/parameters/${string}`>>.o1 | undefined)",
            value: input.parameters
        }, _errorFactory)) && input.parameters.every(((elem, _index147) => ("object" === typeof elem && null !== elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".parameters[" + _index147 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IReference<`#/components/headers/${string}`> | OpenApiV3_1.IJsonSchema.IReference<`#/components/parameters/${string}`> | OpenApiV3_1.IOperation.IParameter)",
            value: elem
        }, _errorFactory)) && _au6(elem, _path + ".parameters[" + _index147 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".parameters[" + _index147 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IReference<`#/components/headers/${string}`> | OpenApiV3_1.IJsonSchema.IReference<`#/components/parameters/${string}`> | OpenApiV3_1.IOperation.IParameter)",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".parameters",
            expected: "(Array<IParameter | IReference<`#/components/headers/${string}`> | IReference<`#/components/parameters/${string}`>>.o1 | undefined)",
            value: input.parameters
        }, _errorFactory)) && (undefined === input.requestBody || ("object" === typeof input.requestBody && null !== input.requestBody && false === Array.isArray(input.requestBody) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".requestBody",
            expected: "(OpenApiV3_1.IJsonSchema.IReference<`#/components/requestBodies/${string}`> | OpenApiV3_1.IOperation.IRequestBody | undefined)",
            value: input.requestBody
        }, _errorFactory)) && _au18(input.requestBody, _path + ".requestBody", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".requestBody",
            expected: "(OpenApiV3_1.IJsonSchema.IReference<`#/components/requestBodies/${string}`> | OpenApiV3_1.IOperation.IRequestBody | undefined)",
            value: input.requestBody
        }, _errorFactory)) && (undefined === input.responses || ("object" === typeof input.responses && null !== input.responses && false === Array.isArray(input.responses) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".responses",
            expected: "(Record<string, IResponse | IReference<`#/components/responses/${string}`>>.o1 | undefined)",
            value: input.responses
        }, _errorFactory)) && _ao143(input.responses, _path + ".responses", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".responses",
            expected: "(Record<string, IResponse | IReference<`#/components/responses/${string}`>>.o1 | undefined)",
            value: input.responses
        }, _errorFactory)) && (undefined === input.servers || (Array.isArray(input.servers) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".servers",
            expected: "(Array<OpenApiV3_1.IServer> | undefined)",
            value: input.servers
        }, _errorFactory)) && input.servers.every(((elem, _index148) => ("object" === typeof elem && null !== elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".servers[" + _index148 + "]",
            expected: "OpenApiV3_1.IServer",
            value: elem
        }, _errorFactory)) && _ao106(elem, _path + ".servers[" + _index148 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".servers[" + _index148 + "]",
            expected: "OpenApiV3_1.IServer",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".servers",
            expected: "(Array<OpenApiV3_1.IServer> | undefined)",
            value: input.servers
        }, _errorFactory)) && (undefined === input.summary || "string" === typeof input.summary || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".summary",
            expected: "(string | undefined)",
            value: input.summary
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.security || (Array.isArray(input.security) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".security",
            expected: "(Array<Record<string, Array<string>>> | undefined)",
            value: input.security
        }, _errorFactory)) && input.security.every(((elem, _index149) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".security[" + _index149 + "]",
            expected: "Record<string, Array<string>>",
            value: elem
        }, _errorFactory)) && _ao39(elem, _path + ".security[" + _index149 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".security[" + _index149 + "]",
            expected: "Record<string, Array<string>>",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".security",
            expected: "(Array<Record<string, Array<string>>> | undefined)",
            value: input.security
        }, _errorFactory)) && (undefined === input.tags || (Array.isArray(input.tags) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".tags",
            expected: "(Array<string> | undefined)",
            value: input.tags
        }, _errorFactory)) && input.tags.every(((elem, _index150) => "string" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".tags[" + _index150 + "]",
            expected: "string",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".tags",
            expected: "(Array<string> | undefined)",
            value: input.tags
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory));
        const _ao139 = (input, _path, _exceptionable = true) => (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.required || "boolean" === typeof input.required || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".required",
            expected: "(boolean | undefined)",
            value: input.required
        }, _errorFactory)) && (undefined === input.content || ("object" === typeof input.content && null !== input.content && false === Array.isArray(input.content) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".content",
            expected: "(Record<string, OpenApiV3_1.IOperation.IMediaType> | undefined)",
            value: input.content
        }, _errorFactory)) && _ao140(input.content, _path + ".content", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".content",
            expected: "(Record<string, OpenApiV3_1.IOperation.IMediaType> | undefined)",
            value: input.content
        }, _errorFactory));
        const _ao140 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3_1.IOperation.IMediaType",
                value
            }, _errorFactory)) && _ao141(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3_1.IOperation.IMediaType",
                value
            }, _errorFactory);
        }));
        const _ao141 = (input, _path, _exceptionable = true) => (undefined === input.schema || ("object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".schema",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | undefined)",
            value: input.schema
        }, _errorFactory)) && _au5(input.schema, _path + ".schema", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".schema",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | undefined)",
            value: input.schema
        }, _errorFactory)) && true && (undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Record<string, IExample | IReference<`#/components/examples/${string}`>>.o1 | undefined)",
            value: input.examples
        }, _errorFactory)) && _ao133(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Record<string, IExample | IReference<`#/components/examples/${string}`>>.o1 | undefined)",
            value: input.examples
        }, _errorFactory));
        const _ao142 = (input, _path, _exceptionable = true) => ("string" === typeof input.$ref && RegExp(/^#\/components\/requestBodies\/(.*)/).test(input.$ref) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".$ref",
            expected: "`#/components/requestBodies/${string}`",
            value: input.$ref
        }, _errorFactory)) && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory))) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true;
        const _ao143 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApiV3_1.IJsonSchema.IReference<`#/components/responses/${string}`> | OpenApiV3_1.IOperation.IResponse)",
                value
            }, _errorFactory)) && _au19(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApiV3_1.IJsonSchema.IReference<`#/components/responses/${string}`> | OpenApiV3_1.IOperation.IResponse)",
                value
            }, _errorFactory);
        }));
        const _ao144 = (input, _path, _exceptionable = true) => (undefined === input.content || ("object" === typeof input.content && null !== input.content && false === Array.isArray(input.content) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".content",
            expected: "(Record<string, OpenApiV3_1.IOperation.IMediaType> | undefined)",
            value: input.content
        }, _errorFactory)) && _ao140(input.content, _path + ".content", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".content",
            expected: "(Record<string, OpenApiV3_1.IOperation.IMediaType> | undefined)",
            value: input.content
        }, _errorFactory)) && (undefined === input.headers || ("object" === typeof input.headers && null !== input.headers && false === Array.isArray(input.headers) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".headers",
            expected: '(Record<string, IReference<`#/components/headers/${string}`> | Omit<IParameter, "in">> | undefined)',
            value: input.headers
        }, _errorFactory)) && _ao145(input.headers, _path + ".headers", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".headers",
            expected: '(Record<string, IReference<`#/components/headers/${string}`> | Omit<IParameter, "in">> | undefined)',
            value: input.headers
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory));
        const _ao145 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: '(Omit<OpenApiV3_1.IOperation.IParameter, "in"> | OpenApiV3_1.IJsonSchema.IReference<`#/components/headers/${string}`>)',
                value
            }, _errorFactory)) && _au20(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: '(Omit<OpenApiV3_1.IOperation.IParameter, "in"> | OpenApiV3_1.IJsonSchema.IReference<`#/components/headers/${string}`>)',
                value
            }, _errorFactory);
        }));
        const _ao146 = (input, _path, _exceptionable = true) => (undefined === input.name || "string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".name",
            expected: "(string | undefined)",
            value: input.name
        }, _errorFactory)) && (undefined === input.required || "boolean" === typeof input.required || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".required",
            expected: "(boolean | undefined)",
            value: input.required
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && true && (undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Record<string, IExample | IReference<`#/components/examples/${string}`>>.o1 | undefined)",
            value: input.examples
        }, _errorFactory)) && _ao133(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Record<string, IExample | IReference<`#/components/examples/${string}`>>.o1 | undefined)",
            value: input.examples
        }, _errorFactory)) && (("object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".schema",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: input.schema
        }, _errorFactory)) && _au5(input.schema, _path + ".schema", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".schema",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: input.schema
        }, _errorFactory));
        const _ao147 = (input, _path, _exceptionable = true) => ("string" === typeof input.$ref && RegExp(/^#\/components\/responses\/(.*)/).test(input.$ref) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".$ref",
            expected: "`#/components/responses/${string}`",
            value: input.$ref
        }, _errorFactory)) && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory))) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true;
        const _ao148 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3_1.IOperation.IResponse",
                value
            }, _errorFactory)) && _ao144(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3_1.IOperation.IResponse",
                value
            }, _errorFactory);
        }));
        const _ao149 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3_1.IOperation.IParameter",
                value
            }, _errorFactory)) && _ao132(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3_1.IOperation.IParameter",
                value
            }, _errorFactory);
        }));
        const _ao150 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3_1.IOperation.IRequestBody",
                value
            }, _errorFactory)) && _ao139(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3_1.IOperation.IRequestBody",
                value
            }, _errorFactory);
        }));
        const _ao151 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApiV3_1.ISecurityScheme.IApiKey | OpenApiV3_1.ISecurityScheme.IHttpBasic | OpenApiV3_1.ISecurityScheme.IHttpBearer | OpenApiV3_1.ISecurityScheme.IOAuth2 | OpenApiV3_1.ISecurityScheme.IOpenId)",
                value
            }, _errorFactory)) && _au21(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApiV3_1.ISecurityScheme.IApiKey | OpenApiV3_1.ISecurityScheme.IHttpBasic | OpenApiV3_1.ISecurityScheme.IHttpBearer | OpenApiV3_1.ISecurityScheme.IOAuth2 | OpenApiV3_1.ISecurityScheme.IOpenId)",
                value
            }, _errorFactory);
        }));
        const _ao152 = (input, _path, _exceptionable = true) => ("apiKey" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: '"apiKey"',
            value: input.type
        }, _errorFactory)) && (undefined === input["in"] || "query" === input["in"] || "header" === input["in"] || "cookie" === input["in"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["in"]',
            expected: '("cookie" | "header" | "query" | undefined)',
            value: input["in"]
        }, _errorFactory)) && (undefined === input.name || "string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".name",
            expected: "(string | undefined)",
            value: input.name
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory));
        const _ao153 = (input, _path, _exceptionable = true) => ("http" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: '"http"',
            value: input.type
        }, _errorFactory)) && ("basic" === input.scheme || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".scheme",
            expected: '"basic"',
            value: input.scheme
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory));
        const _ao154 = (input, _path, _exceptionable = true) => ("http" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: '"http"',
            value: input.type
        }, _errorFactory)) && ("bearer" === input.scheme || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".scheme",
            expected: '"bearer"',
            value: input.scheme
        }, _errorFactory)) && (undefined === input.bearerFormat || "string" === typeof input.bearerFormat || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".bearerFormat",
            expected: "(string | undefined)",
            value: input.bearerFormat
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory));
        const _ao155 = (input, _path, _exceptionable = true) => ("oauth2" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: '"oauth2"',
            value: input.type
        }, _errorFactory)) && (("object" === typeof input.flows && null !== input.flows && false === Array.isArray(input.flows) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".flows",
            expected: "OpenApiV3_1.ISecurityScheme.IOAuth2.IFlowSet",
            value: input.flows
        }, _errorFactory)) && _ao156(input.flows, _path + ".flows", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".flows",
            expected: "OpenApiV3_1.ISecurityScheme.IOAuth2.IFlowSet",
            value: input.flows
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory));
        const _ao156 = (input, _path, _exceptionable = true) => (undefined === input.authorizationCode || ("object" === typeof input.authorizationCode && null !== input.authorizationCode && false === Array.isArray(input.authorizationCode) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".authorizationCode",
            expected: "(OpenApiV3_1.ISecurityScheme.IOAuth2.IFlow | undefined)",
            value: input.authorizationCode
        }, _errorFactory)) && _ao157(input.authorizationCode, _path + ".authorizationCode", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".authorizationCode",
            expected: "(OpenApiV3_1.ISecurityScheme.IOAuth2.IFlow | undefined)",
            value: input.authorizationCode
        }, _errorFactory)) && (undefined === input.implicit || ("object" === typeof input.implicit && null !== input.implicit && false === Array.isArray(input.implicit) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".implicit",
            expected: '(Omit<OpenApiV3_1.ISecurityScheme.IOAuth2.IFlow, "tokenUrl"> | undefined)',
            value: input.implicit
        }, _errorFactory)) && _ao158(input.implicit, _path + ".implicit", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".implicit",
            expected: '(Omit<OpenApiV3_1.ISecurityScheme.IOAuth2.IFlow, "tokenUrl"> | undefined)',
            value: input.implicit
        }, _errorFactory)) && (undefined === input.password || ("object" === typeof input.password && null !== input.password && false === Array.isArray(input.password) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".password",
            expected: '(Omit<OpenApiV3_1.ISecurityScheme.IOAuth2.IFlow, "authorizationUrl"> | undefined)',
            value: input.password
        }, _errorFactory)) && _ao159(input.password, _path + ".password", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".password",
            expected: '(Omit<OpenApiV3_1.ISecurityScheme.IOAuth2.IFlow, "authorizationUrl"> | undefined)',
            value: input.password
        }, _errorFactory)) && (undefined === input.clientCredentials || ("object" === typeof input.clientCredentials && null !== input.clientCredentials && false === Array.isArray(input.clientCredentials) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".clientCredentials",
            expected: '(Omit<OpenApiV3_1.ISecurityScheme.IOAuth2.IFlow, "authorizationUrl"> | undefined)',
            value: input.clientCredentials
        }, _errorFactory)) && _ao159(input.clientCredentials, _path + ".clientCredentials", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".clientCredentials",
            expected: '(Omit<OpenApiV3_1.ISecurityScheme.IOAuth2.IFlow, "authorizationUrl"> | undefined)',
            value: input.clientCredentials
        }, _errorFactory));
        const _ao157 = (input, _path, _exceptionable = true) => (undefined === input.authorizationUrl || "string" === typeof input.authorizationUrl || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".authorizationUrl",
            expected: "(string | undefined)",
            value: input.authorizationUrl
        }, _errorFactory)) && (undefined === input.tokenUrl || "string" === typeof input.tokenUrl || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".tokenUrl",
            expected: "(string | undefined)",
            value: input.tokenUrl
        }, _errorFactory)) && (undefined === input.refreshUrl || "string" === typeof input.refreshUrl || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".refreshUrl",
            expected: "(string | undefined)",
            value: input.refreshUrl
        }, _errorFactory)) && (undefined === input.scopes || ("object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        }, _errorFactory)) && _ao35(input.scopes, _path + ".scopes", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        }, _errorFactory));
        const _ao158 = (input, _path, _exceptionable = true) => (undefined === input.authorizationUrl || "string" === typeof input.authorizationUrl || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".authorizationUrl",
            expected: "(string | undefined)",
            value: input.authorizationUrl
        }, _errorFactory)) && (undefined === input.refreshUrl || "string" === typeof input.refreshUrl || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".refreshUrl",
            expected: "(string | undefined)",
            value: input.refreshUrl
        }, _errorFactory)) && (undefined === input.scopes || ("object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        }, _errorFactory)) && _ao35(input.scopes, _path + ".scopes", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        }, _errorFactory));
        const _ao159 = (input, _path, _exceptionable = true) => (undefined === input.tokenUrl || "string" === typeof input.tokenUrl || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".tokenUrl",
            expected: "(string | undefined)",
            value: input.tokenUrl
        }, _errorFactory)) && (undefined === input.refreshUrl || "string" === typeof input.refreshUrl || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".refreshUrl",
            expected: "(string | undefined)",
            value: input.refreshUrl
        }, _errorFactory)) && (undefined === input.scopes || ("object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        }, _errorFactory)) && _ao35(input.scopes, _path + ".scopes", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        }, _errorFactory));
        const _ao160 = (input, _path, _exceptionable = true) => ("openIdConnect" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: '"openIdConnect"',
            value: input.type
        }, _errorFactory)) && ("string" === typeof input.openIdConnectUrl || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".openIdConnectUrl",
            expected: "string",
            value: input.openIdConnectUrl
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory));
        const _ao161 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: 'Omit<OpenApiV3_1.IOperation.IParameter, "in">',
                value
            }, _errorFactory)) && _ao146(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: 'Omit<OpenApiV3_1.IOperation.IParameter, "in">',
                value
            }, _errorFactory);
        }));
        const _ao162 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3_1.IExample",
                value
            }, _errorFactory)) && _ao134(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3_1.IExample",
                value
            }, _errorFactory);
        }));
        const _ao163 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApiV3_1.IJsonSchema.IReference<`#/components/pathItems/${string}`> | OpenApiV3_1.IPath)",
                value
            }, _errorFactory)) && _au22(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApiV3_1.IJsonSchema.IReference<`#/components/pathItems/${string}`> | OpenApiV3_1.IPath)",
                value
            }, _errorFactory);
        }));
        const _ao164 = (input, _path, _exceptionable = true) => ("string" === typeof input.$ref && RegExp(/^#\/components\/pathItems\/(.*)/).test(input.$ref) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".$ref",
            expected: "`#/components/pathItems/${string}`",
            value: input.$ref
        }, _errorFactory)) && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory))) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true;
        const _ao165 = (input, _path, _exceptionable = true) => ("string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".name",
            expected: "string",
            value: input.name
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory));
        const _ao166 = (input, _path, _exceptionable = true) => ("string" === typeof input.openapi && RegExp(/^3\.1\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(input.openapi) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".openapi",
            expected: "`3.1.${number}`",
            value: input.openapi
        }, _errorFactory)) && (undefined === input.servers || (Array.isArray(input.servers) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".servers",
            expected: "(Array<OpenApi.IServer> | undefined)",
            value: input.servers
        }, _errorFactory)) && input.servers.every(((elem, _index151) => ("object" === typeof elem && null !== elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".servers[" + _index151 + "]",
            expected: "OpenApi.IServer",
            value: elem
        }, _errorFactory)) && _ao167(elem, _path + ".servers[" + _index151 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".servers[" + _index151 + "]",
            expected: "OpenApi.IServer",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".servers",
            expected: "(Array<OpenApi.IServer> | undefined)",
            value: input.servers
        }, _errorFactory)) && (undefined === input.info || ("object" === typeof input.info && null !== input.info || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".info",
            expected: "(OpenApi.IDocument.IInfo | undefined)",
            value: input.info
        }, _errorFactory)) && _ao170(input.info, _path + ".info", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".info",
            expected: "(OpenApi.IDocument.IInfo | undefined)",
            value: input.info
        }, _errorFactory)) && (("object" === typeof input.components && null !== input.components && false === Array.isArray(input.components) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".components",
            expected: "OpenApi.IComponents",
            value: input.components
        }, _errorFactory)) && _ao173(input.components, _path + ".components", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".components",
            expected: "OpenApi.IComponents",
            value: input.components
        }, _errorFactory)) && (undefined === input.paths || ("object" === typeof input.paths && null !== input.paths && false === Array.isArray(input.paths) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".paths",
            expected: "(Record<string, OpenApi.IPath> | undefined)",
            value: input.paths
        }, _errorFactory)) && _ao198(input.paths, _path + ".paths", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".paths",
            expected: "(Record<string, OpenApi.IPath> | undefined)",
            value: input.paths
        }, _errorFactory)) && (undefined === input.webhooks || ("object" === typeof input.webhooks && null !== input.webhooks && false === Array.isArray(input.webhooks) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".webhooks",
            expected: "(Record<string, OpenApi.IPath> | undefined)",
            value: input.webhooks
        }, _errorFactory)) && _ao198(input.webhooks, _path + ".webhooks", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".webhooks",
            expected: "(Record<string, OpenApi.IPath> | undefined)",
            value: input.webhooks
        }, _errorFactory)) && (undefined === input.security || (Array.isArray(input.security) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".security",
            expected: "(Array<Record<string, Array<string>>> | undefined)",
            value: input.security
        }, _errorFactory)) && input.security.every(((elem, _index152) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".security[" + _index152 + "]",
            expected: "Record<string, Array<string>>",
            value: elem
        }, _errorFactory)) && _ao39(elem, _path + ".security[" + _index152 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".security[" + _index152 + "]",
            expected: "Record<string, Array<string>>",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".security",
            expected: "(Array<Record<string, Array<string>>> | undefined)",
            value: input.security
        }, _errorFactory)) && (undefined === input.tags || (Array.isArray(input.tags) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".tags",
            expected: "(Array<OpenApi.IDocument.ITag> | undefined)",
            value: input.tags
        }, _errorFactory)) && input.tags.every(((elem, _index153) => ("object" === typeof elem && null !== elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".tags[" + _index153 + "]",
            expected: "OpenApi.IDocument.ITag",
            value: elem
        }, _errorFactory)) && _ao210(elem, _path + ".tags[" + _index153 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".tags[" + _index153 + "]",
            expected: "OpenApi.IDocument.ITag",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".tags",
            expected: "(Array<OpenApi.IDocument.ITag> | undefined)",
            value: input.tags
        }, _errorFactory)) && (true === input["x-samchon-emended-v4"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["x-samchon-emended-v4"]',
            expected: "true",
            value: input["x-samchon-emended-v4"]
        }, _errorFactory));
        const _ao167 = (input, _path, _exceptionable = true) => ("string" === typeof input.url || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".url",
            expected: "string",
            value: input.url
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.variables || ("object" === typeof input.variables && null !== input.variables && false === Array.isArray(input.variables) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".variables",
            expected: "(Record<string, OpenApi.IServer.IVariable> | undefined)",
            value: input.variables
        }, _errorFactory)) && _ao168(input.variables, _path + ".variables", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".variables",
            expected: "(Record<string, OpenApi.IServer.IVariable> | undefined)",
            value: input.variables
        }, _errorFactory));
        const _ao168 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApi.IServer.IVariable",
                value
            }, _errorFactory)) && _ao169(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApi.IServer.IVariable",
                value
            }, _errorFactory);
        }));
        const _ao169 = (input, _path, _exceptionable = true) => ("string" === typeof input["default"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["default"]',
            expected: "string",
            value: input["default"]
        }, _errorFactory)) && (undefined === input["enum"] || (Array.isArray(input["enum"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["enum"]',
            expected: "(Array<string> | undefined)",
            value: input["enum"]
        }, _errorFactory)) && input["enum"].every(((elem, _index154) => "string" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["enum"][' + _index154 + "]",
            expected: "string",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["enum"]',
            expected: "(Array<string> | undefined)",
            value: input["enum"]
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory));
        const _ao170 = (input, _path, _exceptionable = true) => ("string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "string",
            value: input.title
        }, _errorFactory)) && (undefined === input.summary || "string" === typeof input.summary || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".summary",
            expected: "(string | undefined)",
            value: input.summary
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.termsOfService || "string" === typeof input.termsOfService || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".termsOfService",
            expected: "(string | undefined)",
            value: input.termsOfService
        }, _errorFactory)) && (undefined === input.contact || ("object" === typeof input.contact && null !== input.contact && false === Array.isArray(input.contact) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".contact",
            expected: "(OpenApi.IDocument.IContact | undefined)",
            value: input.contact
        }, _errorFactory)) && _ao171(input.contact, _path + ".contact", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".contact",
            expected: "(OpenApi.IDocument.IContact | undefined)",
            value: input.contact
        }, _errorFactory)) && (undefined === input.license || ("object" === typeof input.license && null !== input.license || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".license",
            expected: "(OpenApi.IDocument.ILicense | undefined)",
            value: input.license
        }, _errorFactory)) && _ao172(input.license, _path + ".license", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".license",
            expected: "(OpenApi.IDocument.ILicense | undefined)",
            value: input.license
        }, _errorFactory)) && ("string" === typeof input.version || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".version",
            expected: "string",
            value: input.version
        }, _errorFactory));
        const _ao171 = (input, _path, _exceptionable = true) => (undefined === input.name || "string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".name",
            expected: "(string | undefined)",
            value: input.name
        }, _errorFactory)) && (undefined === input.url || "string" === typeof input.url || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".url",
            expected: "(string | undefined)",
            value: input.url
        }, _errorFactory)) && (undefined === input.email || "string" === typeof input.email && (/^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i.test(input.email) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".email",
            expected: 'string & Format<"email">',
            value: input.email
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".email",
            expected: '((string & Format<"email">) | undefined)',
            value: input.email
        }, _errorFactory));
        const _ao172 = (input, _path, _exceptionable = true) => ("string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".name",
            expected: "string",
            value: input.name
        }, _errorFactory)) && (undefined === input.identifier || "string" === typeof input.identifier || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".identifier",
            expected: "(string | undefined)",
            value: input.identifier
        }, _errorFactory)) && (undefined === input.url || "string" === typeof input.url || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".url",
            expected: "(string | undefined)",
            value: input.url
        }, _errorFactory));
        const _ao173 = (input, _path, _exceptionable = true) => (undefined === input.schemas || ("object" === typeof input.schemas && null !== input.schemas && false === Array.isArray(input.schemas) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".schemas",
            expected: "(Record<string, OpenApi.IJsonSchema> | undefined)",
            value: input.schemas
        }, _errorFactory)) && _ao174(input.schemas, _path + ".schemas", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".schemas",
            expected: "(Record<string, OpenApi.IJsonSchema> | undefined)",
            value: input.schemas
        }, _errorFactory)) && (undefined === input.securitySchemes || ("object" === typeof input.securitySchemes && null !== input.securitySchemes && false === Array.isArray(input.securitySchemes) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".securitySchemes",
            expected: "(Record<string, OpenApi.ISecurityScheme> | undefined)",
            value: input.securitySchemes
        }, _errorFactory)) && _ao188(input.securitySchemes, _path + ".securitySchemes", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".securitySchemes",
            expected: "(Record<string, OpenApi.ISecurityScheme> | undefined)",
            value: input.securitySchemes
        }, _errorFactory));
        const _ao174 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IOneOf | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown)",
                value
            }, _errorFactory)) && _au7(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IOneOf | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown)",
                value
            }, _errorFactory);
        }));
        const _ao175 = (input, _path, _exceptionable = true) => ("string" === typeof input["const"] || "number" === typeof input["const"] || "boolean" === typeof input["const"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["const"]',
            expected: "(boolean | number | string)",
            value: input["const"]
        }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true && (undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory));
        const _ao176 = (input, _path, _exceptionable = true) => (undefined === input["default"] || "boolean" === typeof input["default"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["default"]',
            expected: "(boolean | undefined)",
            value: input["default"]
        }, _errorFactory)) && ("boolean" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: '"boolean"',
            value: input.type
        }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true && (undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory));
        const _ao177 = (input, _path, _exceptionable = true) => (undefined === input["default"] || "number" === typeof input["default"] && (Math.floor(input["default"]) === input["default"] && -0x8000000000000000 <= input["default"] && input["default"] <= 0x8000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["default"]',
            expected: 'number & Type<"int64">',
            value: input["default"]
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["default"]',
            expected: '((number & Type<"int64">) | undefined)',
            value: input["default"]
        }, _errorFactory)) && (undefined === input.minimum || "number" === typeof input.minimum && (Math.floor(input.minimum) === input.minimum && -0x8000000000000000 <= input.minimum && input.minimum <= 0x8000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".minimum",
            expected: 'number & Type<"int64">',
            value: input.minimum
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".minimum",
            expected: '((number & Type<"int64">) | undefined)',
            value: input.minimum
        }, _errorFactory)) && (undefined === input.maximum || "number" === typeof input.maximum && (Math.floor(input.maximum) === input.maximum && -0x8000000000000000 <= input.maximum && input.maximum <= 0x8000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".maximum",
            expected: 'number & Type<"int64">',
            value: input.maximum
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".maximum",
            expected: '((number & Type<"int64">) | undefined)',
            value: input.maximum
        }, _errorFactory)) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".exclusiveMinimum",
            expected: "(number | undefined)",
            value: input.exclusiveMinimum
        }, _errorFactory)) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".exclusiveMaximum",
            expected: "(number | undefined)",
            value: input.exclusiveMaximum
        }, _errorFactory)) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && (Math.floor(input.multipleOf) === input.multipleOf && 0 <= input.multipleOf && input.multipleOf <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".multipleOf",
            expected: 'number & Type<"uint64">',
            value: input.multipleOf
        }, _errorFactory)) && (0 < input.multipleOf || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".multipleOf",
            expected: "number & ExclusiveMinimum<0>",
            value: input.multipleOf
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".multipleOf",
            expected: '((number & Type<"uint64"> & ExclusiveMinimum<0>) | undefined)',
            value: input.multipleOf
        }, _errorFactory)) && ("integer" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: '"integer"',
            value: input.type
        }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true && (undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory));
        const _ao178 = (input, _path, _exceptionable = true) => (undefined === input["default"] || "number" === typeof input["default"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["default"]',
            expected: "(number | undefined)",
            value: input["default"]
        }, _errorFactory)) && (undefined === input.minimum || "number" === typeof input.minimum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".minimum",
            expected: "(number | undefined)",
            value: input.minimum
        }, _errorFactory)) && (undefined === input.maximum || "number" === typeof input.maximum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".maximum",
            expected: "(number | undefined)",
            value: input.maximum
        }, _errorFactory)) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".exclusiveMinimum",
            expected: "(number | undefined)",
            value: input.exclusiveMinimum
        }, _errorFactory)) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".exclusiveMaximum",
            expected: "(number | undefined)",
            value: input.exclusiveMaximum
        }, _errorFactory)) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && (0 < input.multipleOf || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".multipleOf",
            expected: "number & ExclusiveMinimum<0>",
            value: input.multipleOf
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".multipleOf",
            expected: "((number & ExclusiveMinimum<0>) | undefined)",
            value: input.multipleOf
        }, _errorFactory)) && ("number" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: '"number"',
            value: input.type
        }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true && (undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory));
        const _ao179 = (input, _path, _exceptionable = true) => (undefined === input["default"] || "string" === typeof input["default"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["default"]',
            expected: "(string | undefined)",
            value: input["default"]
        }, _errorFactory)) && (undefined === input.format || "string" === typeof input.format || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".format",
            expected: "(string | undefined)",
            value: input.format
        }, _errorFactory)) && (undefined === input.pattern || "string" === typeof input.pattern || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".pattern",
            expected: "(string | undefined)",
            value: input.pattern
        }, _errorFactory)) && (undefined === input.contentMediaType || "string" === typeof input.contentMediaType || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".contentMediaType",
            expected: "(string | undefined)",
            value: input.contentMediaType
        }, _errorFactory)) && (undefined === input.minLength || "number" === typeof input.minLength && (Math.floor(input.minLength) === input.minLength && 0 <= input.minLength && input.minLength <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".minLength",
            expected: 'number & Type<"uint64">',
            value: input.minLength
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".minLength",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.minLength
        }, _errorFactory)) && (undefined === input.maxLength || "number" === typeof input.maxLength && (Math.floor(input.maxLength) === input.maxLength && 0 <= input.maxLength && input.maxLength <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".maxLength",
            expected: 'number & Type<"uint64">',
            value: input.maxLength
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".maxLength",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.maxLength
        }, _errorFactory)) && ("string" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: '"string"',
            value: input.type
        }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true && (undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory));
        const _ao180 = (input, _path, _exceptionable = true) => (("object" === typeof input.items && null !== input.items && false === Array.isArray(input.items) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".items",
            expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IOneOf | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown)",
            value: input.items
        }, _errorFactory)) && _au7(input.items, _path + ".items", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".items",
            expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IOneOf | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown)",
            value: input.items
        }, _errorFactory)) && (undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".uniqueItems",
            expected: "(boolean | undefined)",
            value: input.uniqueItems
        }, _errorFactory)) && (undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".minItems",
            expected: 'number & Type<"uint64">',
            value: input.minItems
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".minItems",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.minItems
        }, _errorFactory)) && (undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".maxItems",
            expected: 'number & Type<"uint64">',
            value: input.maxItems
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".maxItems",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.maxItems
        }, _errorFactory)) && ("array" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: '"array"',
            value: input.type
        }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true && (undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory));
        const _ao181 = (input, _path, _exceptionable = true) => ("array" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: '"array"',
            value: input.type
        }, _errorFactory)) && ((Array.isArray(input.prefixItems) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".prefixItems",
            expected: "Array<OpenApi.IJsonSchema>",
            value: input.prefixItems
        }, _errorFactory)) && input.prefixItems.every(((elem, _index155) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".prefixItems[" + _index155 + "]",
            expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IOneOf | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown)",
            value: elem
        }, _errorFactory)) && _au7(elem, _path + ".prefixItems[" + _index155 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".prefixItems[" + _index155 + "]",
            expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IOneOf | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown)",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".prefixItems",
            expected: "Array<OpenApi.IJsonSchema>",
            value: input.prefixItems
        }, _errorFactory)) && ((null !== input.additionalItems || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".additionalItems",
            expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IOneOf | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalItems
        }, _errorFactory)) && (undefined === input.additionalItems || "boolean" === typeof input.additionalItems || ("object" === typeof input.additionalItems && null !== input.additionalItems && false === Array.isArray(input.additionalItems) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".additionalItems",
            expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IOneOf | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalItems
        }, _errorFactory)) && _au7(input.additionalItems, _path + ".additionalItems", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".additionalItems",
            expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IOneOf | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalItems
        }, _errorFactory))) && (undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".uniqueItems",
            expected: "(boolean | undefined)",
            value: input.uniqueItems
        }, _errorFactory)) && (undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".minItems",
            expected: 'number & Type<"uint64">',
            value: input.minItems
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".minItems",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.minItems
        }, _errorFactory)) && (undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".maxItems",
            expected: 'number & Type<"uint64">',
            value: input.maxItems
        }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".maxItems",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.maxItems
        }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true && (undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory));
        const _ao182 = (input, _path, _exceptionable = true) => (undefined === input.properties || ("object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".properties",
            expected: "(Record<string, OpenApi.IJsonSchema> | undefined)",
            value: input.properties
        }, _errorFactory)) && _ao174(input.properties, _path + ".properties", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".properties",
            expected: "(Record<string, OpenApi.IJsonSchema> | undefined)",
            value: input.properties
        }, _errorFactory)) && ((null !== input.additionalProperties || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".additionalProperties",
            expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IOneOf | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalProperties
        }, _errorFactory)) && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || ("object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".additionalProperties",
            expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IOneOf | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalProperties
        }, _errorFactory)) && _au7(input.additionalProperties, _path + ".additionalProperties", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".additionalProperties",
            expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IOneOf | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalProperties
        }, _errorFactory))) && (undefined === input.required || (Array.isArray(input.required) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".required",
            expected: "(Array<string> | undefined)",
            value: input.required
        }, _errorFactory)) && input.required.every(((elem, _index156) => "string" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".required[" + _index156 + "]",
            expected: "string",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".required",
            expected: "(Array<string> | undefined)",
            value: input.required
        }, _errorFactory)) && ("object" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: '"object"',
            value: input.type
        }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true && (undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory));
        const _ao183 = (input, _path, _exceptionable = true) => ("string" === typeof input.$ref || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".$ref",
            expected: "string",
            value: input.$ref
        }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true && (undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory));
        const _ao184 = (input, _path, _exceptionable = true) => ((Array.isArray(input.oneOf) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".oneOf",
            expected: "Array<IConstant | IBoolean | IInteger | INumber | IString | IArray | ITuple | IObject | IReference<string> | INull | IUnknown>",
            value: input.oneOf
        }, _errorFactory)) && input.oneOf.every(((elem, _index157) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".oneOf[" + _index157 + "]",
            expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown)",
            value: elem
        }, _errorFactory)) && _au8(elem, _path + ".oneOf[" + _index157 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".oneOf[" + _index157 + "]",
            expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown)",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".oneOf",
            expected: "Array<IConstant | IBoolean | IInteger | INumber | IString | IArray | ITuple | IObject | IReference<string> | INull | IUnknown>",
            value: input.oneOf
        }, _errorFactory)) && (undefined === input.discriminator || ("object" === typeof input.discriminator && null !== input.discriminator || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".discriminator",
            expected: "(OpenApi.IJsonSchema.IOneOf.IDiscriminator | undefined)",
            value: input.discriminator
        }, _errorFactory)) && _ao187(input.discriminator, _path + ".discriminator", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".discriminator",
            expected: "(OpenApi.IJsonSchema.IOneOf.IDiscriminator | undefined)",
            value: input.discriminator
        }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true && (undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory));
        const _ao185 = (input, _path, _exceptionable = true) => (null === input["default"] || undefined === input["default"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["default"]',
            expected: "(null | undefined)",
            value: input["default"]
        }, _errorFactory)) && ("null" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: '"null"',
            value: input.type
        }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true && (undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory));
        const _ao186 = (input, _path, _exceptionable = true) => (null !== input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: "undefined",
            value: input.type
        }, _errorFactory)) && (undefined === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: "undefined",
            value: input.type
        }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && true && (undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory)) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        }, _errorFactory));
        const _ao187 = (input, _path, _exceptionable = true) => ("string" === typeof input.propertyName || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".propertyName",
            expected: "string",
            value: input.propertyName
        }, _errorFactory)) && (undefined === input.mapping || ("object" === typeof input.mapping && null !== input.mapping && false === Array.isArray(input.mapping) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".mapping",
            expected: "(Record<string, string> | undefined)",
            value: input.mapping
        }, _errorFactory)) && _ao35(input.mapping, _path + ".mapping", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".mapping",
            expected: "(Record<string, string> | undefined)",
            value: input.mapping
        }, _errorFactory));
        const _ao188 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApi.ISecurityScheme.IApiKey | OpenApi.ISecurityScheme.IHttpBasic | OpenApi.ISecurityScheme.IHttpBearer | OpenApi.ISecurityScheme.IOAuth2 | OpenApi.ISecurityScheme.IOpenId)",
                value
            }, _errorFactory)) && _au23(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApi.ISecurityScheme.IApiKey | OpenApi.ISecurityScheme.IHttpBasic | OpenApi.ISecurityScheme.IHttpBearer | OpenApi.ISecurityScheme.IOAuth2 | OpenApi.ISecurityScheme.IOpenId)",
                value
            }, _errorFactory);
        }));
        const _ao189 = (input, _path, _exceptionable = true) => ("apiKey" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: '"apiKey"',
            value: input.type
        }, _errorFactory)) && (undefined === input["in"] || "query" === input["in"] || "header" === input["in"] || "cookie" === input["in"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["in"]',
            expected: '("cookie" | "header" | "query" | undefined)',
            value: input["in"]
        }, _errorFactory)) && (undefined === input.name || "string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".name",
            expected: "(string | undefined)",
            value: input.name
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory));
        const _ao190 = (input, _path, _exceptionable = true) => ("http" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: '"http"',
            value: input.type
        }, _errorFactory)) && ("basic" === input.scheme || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".scheme",
            expected: '"basic"',
            value: input.scheme
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory));
        const _ao191 = (input, _path, _exceptionable = true) => ("http" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: '"http"',
            value: input.type
        }, _errorFactory)) && ("bearer" === input.scheme || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".scheme",
            expected: '"bearer"',
            value: input.scheme
        }, _errorFactory)) && (undefined === input.bearerFormat || "string" === typeof input.bearerFormat || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".bearerFormat",
            expected: "(string | undefined)",
            value: input.bearerFormat
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory));
        const _ao192 = (input, _path, _exceptionable = true) => ("oauth2" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: '"oauth2"',
            value: input.type
        }, _errorFactory)) && (("object" === typeof input.flows && null !== input.flows && false === Array.isArray(input.flows) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".flows",
            expected: "OpenApi.ISecurityScheme.IOAuth2.IFlowSet",
            value: input.flows
        }, _errorFactory)) && _ao193(input.flows, _path + ".flows", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".flows",
            expected: "OpenApi.ISecurityScheme.IOAuth2.IFlowSet",
            value: input.flows
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory));
        const _ao193 = (input, _path, _exceptionable = true) => (undefined === input.authorizationCode || ("object" === typeof input.authorizationCode && null !== input.authorizationCode && false === Array.isArray(input.authorizationCode) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".authorizationCode",
            expected: "(OpenApi.ISecurityScheme.IOAuth2.IFlow | undefined)",
            value: input.authorizationCode
        }, _errorFactory)) && _ao194(input.authorizationCode, _path + ".authorizationCode", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".authorizationCode",
            expected: "(OpenApi.ISecurityScheme.IOAuth2.IFlow | undefined)",
            value: input.authorizationCode
        }, _errorFactory)) && (undefined === input.implicit || ("object" === typeof input.implicit && null !== input.implicit && false === Array.isArray(input.implicit) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".implicit",
            expected: '(Omit<OpenApi.ISecurityScheme.IOAuth2.IFlow, "tokenUrl"> | undefined)',
            value: input.implicit
        }, _errorFactory)) && _ao195(input.implicit, _path + ".implicit", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".implicit",
            expected: '(Omit<OpenApi.ISecurityScheme.IOAuth2.IFlow, "tokenUrl"> | undefined)',
            value: input.implicit
        }, _errorFactory)) && (undefined === input.password || ("object" === typeof input.password && null !== input.password && false === Array.isArray(input.password) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".password",
            expected: '(Omit<OpenApi.ISecurityScheme.IOAuth2.IFlow, "authorizationUrl"> | undefined)',
            value: input.password
        }, _errorFactory)) && _ao196(input.password, _path + ".password", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".password",
            expected: '(Omit<OpenApi.ISecurityScheme.IOAuth2.IFlow, "authorizationUrl"> | undefined)',
            value: input.password
        }, _errorFactory)) && (undefined === input.clientCredentials || ("object" === typeof input.clientCredentials && null !== input.clientCredentials && false === Array.isArray(input.clientCredentials) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".clientCredentials",
            expected: '(Omit<OpenApi.ISecurityScheme.IOAuth2.IFlow, "authorizationUrl"> | undefined)',
            value: input.clientCredentials
        }, _errorFactory)) && _ao196(input.clientCredentials, _path + ".clientCredentials", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".clientCredentials",
            expected: '(Omit<OpenApi.ISecurityScheme.IOAuth2.IFlow, "authorizationUrl"> | undefined)',
            value: input.clientCredentials
        }, _errorFactory));
        const _ao194 = (input, _path, _exceptionable = true) => (undefined === input.authorizationUrl || "string" === typeof input.authorizationUrl || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".authorizationUrl",
            expected: "(string | undefined)",
            value: input.authorizationUrl
        }, _errorFactory)) && (undefined === input.tokenUrl || "string" === typeof input.tokenUrl || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".tokenUrl",
            expected: "(string | undefined)",
            value: input.tokenUrl
        }, _errorFactory)) && (undefined === input.refreshUrl || "string" === typeof input.refreshUrl || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".refreshUrl",
            expected: "(string | undefined)",
            value: input.refreshUrl
        }, _errorFactory)) && (undefined === input.scopes || ("object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        }, _errorFactory)) && _ao35(input.scopes, _path + ".scopes", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        }, _errorFactory));
        const _ao195 = (input, _path, _exceptionable = true) => (undefined === input.authorizationUrl || "string" === typeof input.authorizationUrl || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".authorizationUrl",
            expected: "(string | undefined)",
            value: input.authorizationUrl
        }, _errorFactory)) && (undefined === input.refreshUrl || "string" === typeof input.refreshUrl || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".refreshUrl",
            expected: "(string | undefined)",
            value: input.refreshUrl
        }, _errorFactory)) && (undefined === input.scopes || ("object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        }, _errorFactory)) && _ao35(input.scopes, _path + ".scopes", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        }, _errorFactory));
        const _ao196 = (input, _path, _exceptionable = true) => (undefined === input.tokenUrl || "string" === typeof input.tokenUrl || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".tokenUrl",
            expected: "(string | undefined)",
            value: input.tokenUrl
        }, _errorFactory)) && (undefined === input.refreshUrl || "string" === typeof input.refreshUrl || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".refreshUrl",
            expected: "(string | undefined)",
            value: input.refreshUrl
        }, _errorFactory)) && (undefined === input.scopes || ("object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        }, _errorFactory)) && _ao35(input.scopes, _path + ".scopes", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        }, _errorFactory));
        const _ao197 = (input, _path, _exceptionable = true) => ("openIdConnect" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".type",
            expected: '"openIdConnect"',
            value: input.type
        }, _errorFactory)) && ("string" === typeof input.openIdConnectUrl || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".openIdConnectUrl",
            expected: "string",
            value: input.openIdConnectUrl
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory));
        const _ao198 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApi.IPath",
                value
            }, _errorFactory)) && _ao199(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApi.IPath",
                value
            }, _errorFactory);
        }));
        const _ao199 = (input, _path, _exceptionable = true) => (undefined === input.servers || (Array.isArray(input.servers) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".servers",
            expected: "(Array<OpenApi.IServer> | undefined)",
            value: input.servers
        }, _errorFactory)) && input.servers.every(((elem, _index158) => ("object" === typeof elem && null !== elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".servers[" + _index158 + "]",
            expected: "OpenApi.IServer",
            value: elem
        }, _errorFactory)) && _ao167(elem, _path + ".servers[" + _index158 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".servers[" + _index158 + "]",
            expected: "OpenApi.IServer",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".servers",
            expected: "(Array<OpenApi.IServer> | undefined)",
            value: input.servers
        }, _errorFactory)) && (undefined === input.summary || "string" === typeof input.summary || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".summary",
            expected: "(string | undefined)",
            value: input.summary
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.options || ("object" === typeof input.options && null !== input.options && false === Array.isArray(input.options) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".options",
            expected: "(OpenApi.IOperation | undefined)",
            value: input.options
        }, _errorFactory)) && _ao200(input.options, _path + ".options", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".options",
            expected: "(OpenApi.IOperation | undefined)",
            value: input.options
        }, _errorFactory)) && (undefined === input.get || ("object" === typeof input.get && null !== input.get && false === Array.isArray(input.get) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".get",
            expected: "(OpenApi.IOperation | undefined)",
            value: input.get
        }, _errorFactory)) && _ao200(input.get, _path + ".get", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".get",
            expected: "(OpenApi.IOperation | undefined)",
            value: input.get
        }, _errorFactory)) && (undefined === input.post || ("object" === typeof input.post && null !== input.post && false === Array.isArray(input.post) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".post",
            expected: "(OpenApi.IOperation | undefined)",
            value: input.post
        }, _errorFactory)) && _ao200(input.post, _path + ".post", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".post",
            expected: "(OpenApi.IOperation | undefined)",
            value: input.post
        }, _errorFactory)) && (undefined === input.patch || ("object" === typeof input.patch && null !== input.patch && false === Array.isArray(input.patch) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".patch",
            expected: "(OpenApi.IOperation | undefined)",
            value: input.patch
        }, _errorFactory)) && _ao200(input.patch, _path + ".patch", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".patch",
            expected: "(OpenApi.IOperation | undefined)",
            value: input.patch
        }, _errorFactory)) && (undefined === input.put || ("object" === typeof input.put && null !== input.put && false === Array.isArray(input.put) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".put",
            expected: "(OpenApi.IOperation | undefined)",
            value: input.put
        }, _errorFactory)) && _ao200(input.put, _path + ".put", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".put",
            expected: "(OpenApi.IOperation | undefined)",
            value: input.put
        }, _errorFactory)) && (undefined === input["delete"] || ("object" === typeof input["delete"] && null !== input["delete"] && false === Array.isArray(input["delete"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["delete"]',
            expected: "(OpenApi.IOperation | undefined)",
            value: input["delete"]
        }, _errorFactory)) && _ao200(input["delete"], _path + '["delete"]', _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["delete"]',
            expected: "(OpenApi.IOperation | undefined)",
            value: input["delete"]
        }, _errorFactory)) && (undefined === input.head || ("object" === typeof input.head && null !== input.head && false === Array.isArray(input.head) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".head",
            expected: "(OpenApi.IOperation | undefined)",
            value: input.head
        }, _errorFactory)) && _ao200(input.head, _path + ".head", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".head",
            expected: "(OpenApi.IOperation | undefined)",
            value: input.head
        }, _errorFactory)) && (undefined === input.trace || ("object" === typeof input.trace && null !== input.trace && false === Array.isArray(input.trace) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".trace",
            expected: "(OpenApi.IOperation | undefined)",
            value: input.trace
        }, _errorFactory)) && _ao200(input.trace, _path + ".trace", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".trace",
            expected: "(OpenApi.IOperation | undefined)",
            value: input.trace
        }, _errorFactory));
        const _ao200 = (input, _path, _exceptionable = true) => (undefined === input.operationId || "string" === typeof input.operationId || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".operationId",
            expected: "(string | undefined)",
            value: input.operationId
        }, _errorFactory)) && (undefined === input.parameters || (Array.isArray(input.parameters) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".parameters",
            expected: "(Array<OpenApi.IOperation.IParameter> | undefined)",
            value: input.parameters
        }, _errorFactory)) && input.parameters.every(((elem, _index159) => ("object" === typeof elem && null !== elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".parameters[" + _index159 + "]",
            expected: "OpenApi.IOperation.IParameter",
            value: elem
        }, _errorFactory)) && _ao201(elem, _path + ".parameters[" + _index159 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".parameters[" + _index159 + "]",
            expected: "OpenApi.IOperation.IParameter",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".parameters",
            expected: "(Array<OpenApi.IOperation.IParameter> | undefined)",
            value: input.parameters
        }, _errorFactory)) && (undefined === input.requestBody || ("object" === typeof input.requestBody && null !== input.requestBody && false === Array.isArray(input.requestBody) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".requestBody",
            expected: "(OpenApi.IOperation.IRequestBody | undefined)",
            value: input.requestBody
        }, _errorFactory)) && _ao204(input.requestBody, _path + ".requestBody", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".requestBody",
            expected: "(OpenApi.IOperation.IRequestBody | undefined)",
            value: input.requestBody
        }, _errorFactory)) && (undefined === input.responses || ("object" === typeof input.responses && null !== input.responses && false === Array.isArray(input.responses) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".responses",
            expected: "(Record<string, OpenApi.IOperation.IResponse> | undefined)",
            value: input.responses
        }, _errorFactory)) && _ao207(input.responses, _path + ".responses", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".responses",
            expected: "(Record<string, OpenApi.IOperation.IResponse> | undefined)",
            value: input.responses
        }, _errorFactory)) && (undefined === input.servers || (Array.isArray(input.servers) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".servers",
            expected: "(Array<OpenApi.IServer> | undefined)",
            value: input.servers
        }, _errorFactory)) && input.servers.every(((elem, _index160) => ("object" === typeof elem && null !== elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".servers[" + _index160 + "]",
            expected: "OpenApi.IServer",
            value: elem
        }, _errorFactory)) && _ao167(elem, _path + ".servers[" + _index160 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".servers[" + _index160 + "]",
            expected: "OpenApi.IServer",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".servers",
            expected: "(Array<OpenApi.IServer> | undefined)",
            value: input.servers
        }, _errorFactory)) && (undefined === input.summary || "string" === typeof input.summary || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".summary",
            expected: "(string | undefined)",
            value: input.summary
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.security || (Array.isArray(input.security) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".security",
            expected: "(Array<Record<string, Array<string>>> | undefined)",
            value: input.security
        }, _errorFactory)) && input.security.every(((elem, _index161) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".security[" + _index161 + "]",
            expected: "Record<string, Array<string>>",
            value: elem
        }, _errorFactory)) && _ao39(elem, _path + ".security[" + _index161 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".security[" + _index161 + "]",
            expected: "Record<string, Array<string>>",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".security",
            expected: "(Array<Record<string, Array<string>>> | undefined)",
            value: input.security
        }, _errorFactory)) && (undefined === input.tags || (Array.isArray(input.tags) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".tags",
            expected: "(Array<string> | undefined)",
            value: input.tags
        }, _errorFactory)) && input.tags.every(((elem, _index162) => "string" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".tags[" + _index162 + "]",
            expected: "string",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".tags",
            expected: "(Array<string> | undefined)",
            value: input.tags
        }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }, _errorFactory)) && (undefined === input["x-samchon-human"] || "boolean" === typeof input["x-samchon-human"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["x-samchon-human"]',
            expected: "(boolean | undefined)",
            value: input["x-samchon-human"]
        }, _errorFactory)) && (undefined === input["x-samchon-accessor"] || (Array.isArray(input["x-samchon-accessor"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["x-samchon-accessor"]',
            expected: "(Array<string> | undefined)",
            value: input["x-samchon-accessor"]
        }, _errorFactory)) && input["x-samchon-accessor"].every(((elem, _index163) => "string" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["x-samchon-accessor"][' + _index163 + "]",
            expected: "string",
            value: elem
        }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["x-samchon-accessor"]',
            expected: "(Array<string> | undefined)",
            value: input["x-samchon-accessor"]
        }, _errorFactory)) && (undefined === input["x-samchon-controller"] || "string" === typeof input["x-samchon-controller"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["x-samchon-controller"]',
            expected: "(string | undefined)",
            value: input["x-samchon-controller"]
        }, _errorFactory));
        const _ao201 = (input, _path, _exceptionable = true) => (undefined === input.name || "string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".name",
            expected: "(string | undefined)",
            value: input.name
        }, _errorFactory)) && ("path" === input["in"] || "query" === input["in"] || "header" === input["in"] || "cookie" === input["in"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["in"]',
            expected: '("cookie" | "header" | "path" | "query")',
            value: input["in"]
        }, _errorFactory)) && (("object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".schema",
            expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IOneOf | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown)",
            value: input.schema
        }, _errorFactory)) && _au7(input.schema, _path + ".schema", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".schema",
            expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IOneOf | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown)",
            value: input.schema
        }, _errorFactory)) && (undefined === input.required || "boolean" === typeof input.required || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".required",
            expected: "(boolean | undefined)",
            value: input.required
        }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && true && (undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Record<string, OpenApi.IExample> | undefined)",
            value: input.examples
        }, _errorFactory)) && _ao202(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Record<string, OpenApi.IExample> | undefined)",
            value: input.examples
        }, _errorFactory));
        const _ao202 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApi.IExample",
                value
            }, _errorFactory)) && _ao203(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApi.IExample",
                value
            }, _errorFactory);
        }));
        const _ao203 = (input, _path, _exceptionable = true) => (undefined === input.summary || "string" === typeof input.summary || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".summary",
            expected: "(string | undefined)",
            value: input.summary
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && true && (undefined === input.externalValue || "string" === typeof input.externalValue || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".externalValue",
            expected: "(string | undefined)",
            value: input.externalValue
        }, _errorFactory));
        const _ao204 = (input, _path, _exceptionable = true) => (undefined === input.content || ("object" === typeof input.content && null !== input.content && false === Array.isArray(input.content) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".content",
            expected: "(OpenApi.IOperation.IContent | undefined)",
            value: input.content
        }, _errorFactory)) && _ao205(input.content, _path + ".content", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".content",
            expected: "(OpenApi.IOperation.IContent | undefined)",
            value: input.content
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input.required || "boolean" === typeof input.required || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".required",
            expected: "(boolean | undefined)",
            value: input.required
        }, _errorFactory)) && (undefined === input["x-nestia-encrypted"] || "boolean" === typeof input["x-nestia-encrypted"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["x-nestia-encrypted"]',
            expected: "(boolean | undefined)",
            value: input["x-nestia-encrypted"]
        }, _errorFactory));
        const _ao205 = (input, _path, _exceptionable = true) => (undefined === input["text/plain"] || ("object" === typeof input["text/plain"] && null !== input["text/plain"] && false === Array.isArray(input["text/plain"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["text/plain"]',
            expected: "(OpenApi.IOperation.IMediaType | undefined)",
            value: input["text/plain"]
        }, _errorFactory)) && _ao206(input["text/plain"], _path + '["text/plain"]', _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["text/plain"]',
            expected: "(OpenApi.IOperation.IMediaType | undefined)",
            value: input["text/plain"]
        }, _errorFactory)) && (undefined === input["application/json"] || ("object" === typeof input["application/json"] && null !== input["application/json"] && false === Array.isArray(input["application/json"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["application/json"]',
            expected: "(OpenApi.IOperation.IMediaType | undefined)",
            value: input["application/json"]
        }, _errorFactory)) && _ao206(input["application/json"], _path + '["application/json"]', _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["application/json"]',
            expected: "(OpenApi.IOperation.IMediaType | undefined)",
            value: input["application/json"]
        }, _errorFactory)) && (undefined === input["application/x-www-form-url-encoded"] || ("object" === typeof input["application/x-www-form-url-encoded"] && null !== input["application/x-www-form-url-encoded"] && false === Array.isArray(input["application/x-www-form-url-encoded"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["application/x-www-form-url-encoded"]',
            expected: "(OpenApi.IOperation.IMediaType | undefined)",
            value: input["application/x-www-form-url-encoded"]
        }, _errorFactory)) && _ao206(input["application/x-www-form-url-encoded"], _path + '["application/x-www-form-url-encoded"]', _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["application/x-www-form-url-encoded"]',
            expected: "(OpenApi.IOperation.IMediaType | undefined)",
            value: input["application/x-www-form-url-encoded"]
        }, _errorFactory)) && (undefined === input["multipart/form-data"] || ("object" === typeof input["multipart/form-data"] && null !== input["multipart/form-data"] && false === Array.isArray(input["multipart/form-data"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["multipart/form-data"]',
            expected: "(OpenApi.IOperation.IMediaType | undefined)",
            value: input["multipart/form-data"]
        }, _errorFactory)) && _ao206(input["multipart/form-data"], _path + '["multipart/form-data"]', _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["multipart/form-data"]',
            expected: "(OpenApi.IOperation.IMediaType | undefined)",
            value: input["multipart/form-data"]
        }, _errorFactory)) && (undefined === input["*/*"] || ("object" === typeof input["*/*"] && null !== input["*/*"] && false === Array.isArray(input["*/*"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["*/*"]',
            expected: "(OpenApi.IOperation.IMediaType | undefined)",
            value: input["*/*"]
        }, _errorFactory)) && _ao206(input["*/*"], _path + '["*/*"]', _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["*/*"]',
            expected: "(OpenApi.IOperation.IMediaType | undefined)",
            value: input["*/*"]
        }, _errorFactory)) && (false === _exceptionable || Object.keys(input).every((key => {
            if ([ "text/plain", "application/json", "application/x-www-form-url-encoded", "multipart/form-data", "*/*" ].some((prop => key === prop))) return true;
            const value = input[key];
            if (undefined === value) return true;
            return undefined === value || ("object" === typeof value && null !== value && false === Array.isArray(value) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApi.IOperation.IMediaType | undefined)",
                value
            }, _errorFactory)) && _ao206(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApi.IOperation.IMediaType | undefined)",
                value
            }, _errorFactory);
        })));
        const _ao206 = (input, _path, _exceptionable = true) => (undefined === input.schema || ("object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".schema",
            expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IOneOf | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown | undefined)",
            value: input.schema
        }, _errorFactory)) && _au7(input.schema, _path + ".schema", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".schema",
            expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IOneOf | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown | undefined)",
            value: input.schema
        }, _errorFactory)) && true && (undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Record<string, OpenApi.IExample> | undefined)",
            value: input.examples
        }, _errorFactory)) && _ao202(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".examples",
            expected: "(Record<string, OpenApi.IExample> | undefined)",
            value: input.examples
        }, _errorFactory));
        const _ao207 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApi.IOperation.IResponse",
                value
            }, _errorFactory)) && _ao208(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApi.IOperation.IResponse",
                value
            }, _errorFactory);
        }));
        const _ao208 = (input, _path, _exceptionable = true) => (undefined === input.headers || ("object" === typeof input.headers && null !== input.headers && false === Array.isArray(input.headers) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".headers",
            expected: "(Record<string, OpenApi.IOperation.IParameter> | undefined)",
            value: input.headers
        }, _errorFactory)) && _ao209(input.headers, _path + ".headers", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".headers",
            expected: "(Record<string, OpenApi.IOperation.IParameter> | undefined)",
            value: input.headers
        }, _errorFactory)) && (undefined === input.content || ("object" === typeof input.content && null !== input.content && false === Array.isArray(input.content) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".content",
            expected: "(OpenApi.IOperation.IContent | undefined)",
            value: input.content
        }, _errorFactory)) && _ao205(input.content, _path + ".content", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".content",
            expected: "(OpenApi.IOperation.IContent | undefined)",
            value: input.content
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory)) && (undefined === input["x-nestia-encrypted"] || "boolean" === typeof input["x-nestia-encrypted"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + '["x-nestia-encrypted"]',
            expected: "(boolean | undefined)",
            value: input["x-nestia-encrypted"]
        }, _errorFactory));
        const _ao209 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApi.IOperation.IParameter",
                value
            }, _errorFactory)) && _ao201(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApi.IOperation.IParameter",
                value
            }, _errorFactory);
        }));
        const _ao210 = (input, _path, _exceptionable = true) => ("string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".name",
            expected: "string",
            value: input.name
        }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
            method: "typia.assert",
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }, _errorFactory));
        const _au0 = (input, _path, _exceptionable = true) => (() => {
            if ("boolean" === input.type) return _ao5(input, _path, _exceptionable); else if ("number" === input.type) return _ao7(input, _path, _exceptionable); else if ("integer" === input.type) return _ao6(input, _path, _exceptionable); else if ("string" === input.type) return _ao8(input, _path, _exceptionable); else if ("array" === input.type) return _ao9(input, _path, _exceptionable); else if ("object" === input.type) return _ao10(input, _path, _exceptionable); else if (undefined !== input.$ref) return _ao11(input, _path, _exceptionable); else if (undefined !== input["x-anyOf"]) return _ao12(input, _path, _exceptionable); else if (undefined !== input["x-oneOf"]) return _ao13(input, _path, _exceptionable); else if ("null" === input.type) return _ao14(input, _path, _exceptionable); else return _ao15(input, _path, _exceptionable);
        })();
        const _au1 = (input, _path, _exceptionable = true) => (() => {
            if ("boolean" === input.type) return _ao17(input, _path, _exceptionable); else if ("number" === input.type) return _ao19(input, _path, _exceptionable); else if ("integer" === input.type) return _ao18(input, _path, _exceptionable); else if ("string" === input.type) return _ao20(input, _path, _exceptionable); else if ("array" === input.type) return _ao21(input, _path, _exceptionable); else if ("object" === input.type) return _ao22(input, _path, _exceptionable); else if (undefined !== input["x-anyOf"]) return _ao24(input, _path, _exceptionable); else if (undefined !== input["x-oneOf"]) return _ao25(input, _path, _exceptionable); else if ("null" === input.type) return _ao26(input, _path, _exceptionable); else if (undefined !== input.schema) return _ao28(input, _path, _exceptionable); else return _ao23(input, _path, false) || _ao27(input, _path, false) || _ao42(input, _path, false) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path,
                expected: "(IReference<string> & { name: string; in: string; description?: string | undefined; } | IUnknown & { name: string; in: string; description?: string | undefined; } | SwaggerV2.IJsonSchema.IReference<`#/parameters/${string}`>)",
                value: input
            }, _errorFactory);
        })();
        const _au2 = (input, _path, _exceptionable = true) => (() => {
            if ("boolean" === input.type) return _ao17(input, _path, _exceptionable); else if ("number" === input.type) return _ao19(input, _path, _exceptionable); else if ("integer" === input.type) return _ao18(input, _path, _exceptionable); else if ("string" === input.type) return _ao20(input, _path, _exceptionable); else if ("array" === input.type) return _ao21(input, _path, _exceptionable); else if ("object" === input.type) return _ao22(input, _path, _exceptionable); else if (undefined !== input["x-anyOf"]) return _ao24(input, _path, _exceptionable); else if (undefined !== input["x-oneOf"]) return _ao25(input, _path, _exceptionable); else if ("null" === input.type) return _ao26(input, _path, _exceptionable); else if (undefined !== input.schema) return _ao28(input, _path, _exceptionable); else return _ao23(input, _path, false) || _ao27(input, _path, false) || _ao44(input, _path, false) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path,
                expected: "(IReference<string> & { name: string; in: string; description?: string | undefined; } | IUnknown & { name: string; in: string; description?: string | undefined; } | SwaggerV2.IJsonSchema.IReference<`#/definitions/parameters/${string}`>)",
                value: input
            }, _errorFactory);
        })();
        const _au3 = (input, _path, _exceptionable = true) => (() => {
            if ("boolean" === input.type) return _ao57(input, _path, _exceptionable); else if ("number" === input.type) return _ao60(input, _path, _exceptionable); else if ("integer" === input.type) return _ao59(input, _path, _exceptionable); else if ("string" === input.type) return _ao61(input, _path, _exceptionable); else if ("array" === input.type) return _ao62(input, _path, _exceptionable); else if ("object" === input.type) return _ao63(input, _path, _exceptionable); else if (undefined !== input.$ref) return _ao64(input, _path, _exceptionable); else if (undefined !== input.allOf) return _ao65(input, _path, _exceptionable); else if (undefined !== input.anyOf) return _ao66(input, _path, _exceptionable); else if (undefined !== input.oneOf) return _ao67(input, _path, _exceptionable); else if ("null" === input.type) return _ao69(input, _path, _exceptionable); else return _ao70(input, _path, _exceptionable);
        })();
        const _au4 = (input, _path, _exceptionable = true) => (() => {
            if (undefined !== input["in"]) return _ao82(input, _path, _exceptionable); else if ("string" === typeof input.$ref && RegExp(/^#\/components\/parameters\/(.*)/).test(input.$ref)) return _ao99(input, _path, _exceptionable); else if ("string" === typeof input.$ref && RegExp(/^#\/components\/headers\/(.*)/).test(input.$ref)) return _ao80(input, _path, _exceptionable); else return __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path,
                expected: "(OpenApiV3.IOperation.IParameter | OpenApiV3.IJsonSchema.IReference<`#/components/parameters/${string}`> | OpenApiV3.IJsonSchema.IReference<`#/components/headers/${string}`>)",
                value: input
            }, _errorFactory);
        })();
        const _au5 = (input, _path, _exceptionable = true) => (() => {
            if ("object" === input.type) return _ao114(input, _path, _exceptionable); else if (Array.isArray(input.type) && input.type.every(((elem, _index164) => "string" === elem || "number" === elem || "boolean" === elem || "object" === elem || "integer" === elem || "array" === elem || "null" === elem))) return _ao115(input, _path, _exceptionable); else if ("boolean" === input.type) return _ao117(input, _path, _exceptionable); else if ("number" === input.type) return _ao119(input, _path, _exceptionable); else if ("integer" === input.type) return _ao118(input, _path, _exceptionable); else if ("string" === input.type) return _ao120(input, _path, _exceptionable); else if ("array" === input.type) return _ao121(input, _path, _exceptionable); else if (undefined !== input.$recursiveRef) return _ao123(input, _path, _exceptionable); else if ("null" === input.type) return _ao128(input, _path, _exceptionable); else return (() => {
                if (undefined !== input["const"]) return _ao116(input, _path, _exceptionable); else if (undefined !== input.$ref) return _ao122(input, _path, _exceptionable); else if (undefined !== input.allOf) return _ao124(input, _path, _exceptionable); else if (undefined !== input.anyOf) return _ao125(input, _path, _exceptionable); else if (undefined !== input.oneOf) return _ao126(input, _path, _exceptionable); else return _ao129(input, _path, _exceptionable);
            })();
        })();
        const _au6 = (input, _path, _exceptionable = true) => (() => {
            if (undefined !== input["in"]) return _ao132(input, _path, _exceptionable); else if ("string" === typeof input.$ref && RegExp(/^#\/components\/parameters\/(.*)/).test(input.$ref)) return _ao137(input, _path, _exceptionable); else if ("string" === typeof input.$ref && RegExp(/^#\/components\/headers\/(.*)/).test(input.$ref)) return _ao136(input, _path, _exceptionable); else return __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path,
                expected: "(OpenApiV3_1.IOperation.IParameter | OpenApiV3_1.IJsonSchema.IReference<`#/components/parameters/${string}`> | OpenApiV3_1.IJsonSchema.IReference<`#/components/headers/${string}`>)",
                value: input
            }, _errorFactory);
        })();
        const _au7 = (input, _path, _exceptionable = true) => (() => {
            if (undefined !== input["const"]) return _ao175(input, _path, _exceptionable); else if ("boolean" === input.type) return _ao176(input, _path, _exceptionable); else if ("number" === input.type) return _ao178(input, _path, _exceptionable); else if ("integer" === input.type) return _ao177(input, _path, _exceptionable); else if ("string" === input.type) return _ao179(input, _path, _exceptionable); else if (undefined !== input.items) return _ao180(input, _path, _exceptionable); else if (undefined !== input.prefixItems) return _ao181(input, _path, _exceptionable); else if ("object" === input.type) return _ao182(input, _path, _exceptionable); else if (undefined !== input.$ref) return _ao183(input, _path, _exceptionable); else if (undefined !== input.oneOf) return _ao184(input, _path, _exceptionable); else if ("null" === input.type) return _ao185(input, _path, _exceptionable); else return _ao186(input, _path, _exceptionable);
        })();
        const _au8 = (input, _path, _exceptionable = true) => (() => {
            if (undefined !== input["const"]) return _ao175(input, _path, _exceptionable); else if ("boolean" === input.type) return _ao176(input, _path, _exceptionable); else if ("number" === input.type) return _ao178(input, _path, _exceptionable); else if ("integer" === input.type) return _ao177(input, _path, _exceptionable); else if ("string" === input.type) return _ao179(input, _path, _exceptionable); else if (undefined !== input.items) return _ao180(input, _path, _exceptionable); else if (undefined !== input.prefixItems) return _ao181(input, _path, _exceptionable); else if ("object" === input.type) return _ao182(input, _path, _exceptionable); else if (undefined !== input.$ref) return _ao183(input, _path, _exceptionable); else if ("null" === input.type) return _ao185(input, _path, _exceptionable); else return _ao186(input, _path, _exceptionable);
        })();
        const _au9 = (input, _path, _exceptionable = true) => (() => {
            if ("boolean" === input.type) return _ao17(input, _path, _exceptionable); else if ("number" === input.type) return _ao19(input, _path, _exceptionable); else if ("integer" === input.type) return _ao18(input, _path, _exceptionable); else if ("string" === input.type) return _ao20(input, _path, _exceptionable); else if ("array" === input.type) return _ao21(input, _path, _exceptionable); else if ("object" === input.type) return _ao22(input, _path, _exceptionable); else if (undefined !== input.$ref) return _ao23(input, _path, _exceptionable); else if (undefined !== input["x-anyOf"]) return _ao24(input, _path, _exceptionable); else if (undefined !== input["x-oneOf"]) return _ao25(input, _path, _exceptionable); else if ("null" === input.type) return _ao26(input, _path, _exceptionable); else if (undefined !== input.schema) return _ao28(input, _path, _exceptionable); else return _ao27(input, _path, _exceptionable);
        })();
        const _au10 = (input, _path, _exceptionable = true) => (() => {
            if ("apiKey" === input.type) return _ao32(input, _path, _exceptionable); else if ("basic" === input.type) return _ao33(input, _path, _exceptionable); else if ("implicit" === input.flow) return _ao34(input, _path, _exceptionable); else if ("accessCode" === input.flow) return _ao36(input, _path, _exceptionable); else if ("application" === input.flow) return _ao38(input, _path, _exceptionable); else if ("password" === input.flow) return _ao37(input, _path, _exceptionable); else return __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path,
                expected: "(SwaggerV2.ISecurityDefinition.IApiKey | SwaggerV2.ISecurityDefinition.IBasic | SwaggerV2.ISecurityDefinition.IOauth2Implicit | SwaggerV2.ISecurityDefinition.IOauth2AccessCode | SwaggerV2.ISecurityDefinition.IOauth2Application | SwaggerV2.ISecurityDefinition.IOauth2Password)",
                value: input
            }, _errorFactory);
        })();
        const _au11 = (input, _path, _exceptionable = true) => (() => {
            if (undefined !== input.$ref) return _ao46(input, _path, _exceptionable); else return _ao30(input, _path, _exceptionable);
        })();
        const _au12 = (input, _path, _exceptionable = true) => (() => {
            if (undefined !== input.$ref) return _ao77(input, _path, _exceptionable); else return _ao76(input, _path, _exceptionable);
        })();
        const _au13 = (input, _path, _exceptionable = true) => (() => {
            if (undefined !== input.schema) return _ao79(input, _path, _exceptionable); else if (undefined !== input.$ref) return _ao80(input, _path, _exceptionable); else return __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path,
                expected: '(Omit<OpenApiV3.IOperation.IParameter, "in"> | OpenApiV3.IJsonSchema.IReference<`#/components/headers/${string}`>)',
                value: input
            }, _errorFactory);
        })();
        const _au14 = (input, _path, _exceptionable = true) => (() => {
            if ("apiKey" === input.type) return _ao86(input, _path, _exceptionable); else if ("basic" === input.scheme) return _ao87(input, _path, _exceptionable); else if ("bearer" === input.scheme) return _ao88(input, _path, _exceptionable); else if ("oauth2" === input.type) return _ao89(input, _path, _exceptionable); else if ("openIdConnect" === input.type) return _ao94(input, _path, _exceptionable); else return __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path,
                expected: "(OpenApiV3.ISecurityScheme.IApiKey | OpenApiV3.ISecurityScheme.IHttpBasic | OpenApiV3.ISecurityScheme.IHttpBearer | OpenApiV3.ISecurityScheme.IOAuth2 | OpenApiV3.ISecurityScheme.IOpenId)",
                value: input
            }, _errorFactory);
        })();
        const _au15 = (input, _path, _exceptionable = true) => (() => {
            if (undefined !== input.$ref) return _ao101(input, _path, _exceptionable); else return _ao84(input, _path, _exceptionable);
        })();
        const _au16 = (input, _path, _exceptionable = true) => (() => {
            if (undefined !== input.$ref) return _ao103(input, _path, _exceptionable); else return _ao72(input, _path, _exceptionable);
        })();
        const _au17 = (input, _path, _exceptionable = true) => (() => {
            if (undefined !== input.$ref) return _ao135(input, _path, _exceptionable); else return _ao134(input, _path, _exceptionable);
        })();
        const _au18 = (input, _path, _exceptionable = true) => (() => {
            if (undefined !== input.$ref) return _ao142(input, _path, _exceptionable); else return _ao139(input, _path, _exceptionable);
        })();
        const _au19 = (input, _path, _exceptionable = true) => (() => {
            if (undefined !== input.$ref) return _ao147(input, _path, _exceptionable); else return _ao144(input, _path, _exceptionable);
        })();
        const _au20 = (input, _path, _exceptionable = true) => (() => {
            if (undefined !== input.$ref) return _ao136(input, _path, _exceptionable); else if (undefined !== input.schema) return _ao146(input, _path, _exceptionable); else return __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path,
                expected: '(OpenApiV3_1.IJsonSchema.IReference<`#/components/headers/${string}`> | Omit<OpenApiV3_1.IOperation.IParameter, "in">)',
                value: input
            }, _errorFactory);
        })();
        const _au21 = (input, _path, _exceptionable = true) => (() => {
            if ("apiKey" === input.type) return _ao152(input, _path, _exceptionable); else if ("basic" === input.scheme) return _ao153(input, _path, _exceptionable); else if ("bearer" === input.scheme) return _ao154(input, _path, _exceptionable); else if ("oauth2" === input.type) return _ao155(input, _path, _exceptionable); else if ("openIdConnect" === input.type) return _ao160(input, _path, _exceptionable); else return __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path,
                expected: "(OpenApiV3_1.ISecurityScheme.IApiKey | OpenApiV3_1.ISecurityScheme.IHttpBasic | OpenApiV3_1.ISecurityScheme.IHttpBearer | OpenApiV3_1.ISecurityScheme.IOAuth2 | OpenApiV3_1.ISecurityScheme.IOpenId)",
                value: input
            }, _errorFactory);
        })();
        const _au22 = (input, _path, _exceptionable = true) => (() => {
            if (undefined !== input.$ref) return _ao164(input, _path, _exceptionable); else return _ao131(input, _path, _exceptionable);
        })();
        const _au23 = (input, _path, _exceptionable = true) => (() => {
            if ("apiKey" === input.type) return _ao189(input, _path, _exceptionable); else if ("basic" === input.scheme) return _ao190(input, _path, _exceptionable); else if ("bearer" === input.scheme) return _ao191(input, _path, _exceptionable); else if ("oauth2" === input.type) return _ao192(input, _path, _exceptionable); else if ("openIdConnect" === input.type) return _ao197(input, _path, _exceptionable); else return __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path,
                expected: "(OpenApi.ISecurityScheme.IApiKey | OpenApi.ISecurityScheme.IHttpBasic | OpenApi.ISecurityScheme.IHttpBearer | OpenApi.ISecurityScheme.IOAuth2 | OpenApi.ISecurityScheme.IOpenId)",
                value: input
            }, _errorFactory);
        })();
        const _au24 = (input, _path, _exceptionable = true) => (() => {
            if (undefined !== input.swagger) return _ao0(input, _path, _exceptionable); else if (null !== input.openapi && undefined !== input.openapi && ("3.0" === input.openapi || "string" === typeof input.openapi && RegExp(/^3\.0\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(input.openapi))) return _ao48(input, _path, _exceptionable); else if ("string" === typeof input.openapi && RegExp(/^3\.1\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(input.openapi)) return _ao105(input, _path, _exceptionable); else if (undefined !== input["x-samchon-emended-v4"]) return _ao166(input, _path, _exceptionable); else return __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path,
                expected: "(SwaggerV2.IDocument | OpenApiV3.IDocument | OpenApiV3_1.IDocument | OpenApi.IDocument)",
                value: input
            }, _errorFactory);
        })();
        const __is = input => "object" === typeof input && null !== input && _iu24(input);
        let _errorFactory;
        return (input, errorFactory) => {
            if (false === __is(input)) {
                _errorFactory = errorFactory;
                ((input, _path, _exceptionable = true) => ("object" === typeof input && null !== input || __typia_transform__assertGuard._assertGuard(true, {
                    method: "typia.assert",
                    path: _path + "",
                    expected: "(OpenApi.IDocument | OpenApiV3.IDocument | OpenApiV3_1.IDocument | SwaggerV2.IDocument)",
                    value: input
                }, _errorFactory)) && _au24(input, _path + "", true) || __typia_transform__assertGuard._assertGuard(true, {
                    method: "typia.assert",
                    path: _path + "",
                    expected: "(OpenApi.IDocument | OpenApiV3.IDocument | OpenApiV3_1.IDocument | SwaggerV2.IDocument)",
                    value: input
                }, _errorFactory))(input, "$input", true);
            }
            return input;
        };
    })()(props.document));
    return {
        protocol: "http",
        name: props.name,
        application: HttpLlm.application({
            model: props.model,
            document,
            options: props.options
        }),
        execute: props.execute,
        connection: props.connection
    };
}

function assertHttpLlmApplication(props) {
    return HttpLlm.application({
        model: props.model,
        document: OpenApi.convert((() => {
            const _io0 = input => null !== input.swagger && undefined !== input.swagger && ("2.0" === input.swagger || "string" === typeof input.swagger && RegExp(/^2\.0\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(input.swagger)) && (undefined === input.info || "object" === typeof input.info && null !== input.info && _io1(input.info)) && (undefined === input.host || "string" === typeof input.host) && (undefined === input.basePath || "string" === typeof input.basePath) && (undefined === input.consumes || Array.isArray(input.consumes) && input.consumes.every((elem => "string" === typeof elem))) && (undefined === input.produces || Array.isArray(input.produces) && input.produces.every((elem => "string" === typeof elem))) && (undefined === input.definitions || "object" === typeof input.definitions && null !== input.definitions && false === Array.isArray(input.definitions) && _io4(input.definitions)) && (undefined === input.parameters || "object" === typeof input.parameters && null !== input.parameters && false === Array.isArray(input.parameters) && _io16(input.parameters)) && (undefined === input.responses || "object" === typeof input.responses && null !== input.responses && false === Array.isArray(input.responses) && _io29(input.responses)) && (undefined === input.securityDefinitions || "object" === typeof input.securityDefinitions && null !== input.securityDefinitions && false === Array.isArray(input.securityDefinitions) && _io31(input.securityDefinitions)) && (undefined === input.security || Array.isArray(input.security) && input.security.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io39(elem)))) && (undefined === input.paths || "object" === typeof input.paths && null !== input.paths && false === Array.isArray(input.paths) && _io40(input.paths)) && (undefined === input.tags || Array.isArray(input.tags) && input.tags.every((elem => "object" === typeof elem && null !== elem && _io47(elem))));
            const _io1 = input => "string" === typeof input.title && (undefined === input.description || "string" === typeof input.description) && (undefined === input.termsOfService || "string" === typeof input.termsOfService) && (undefined === input.contact || "object" === typeof input.contact && null !== input.contact && false === Array.isArray(input.contact) && _io2(input.contact)) && (undefined === input.license || "object" === typeof input.license && null !== input.license && _io3(input.license)) && "string" === typeof input.version;
            const _io2 = input => (undefined === input.name || "string" === typeof input.name) && (undefined === input.url || "string" === typeof input.url) && (undefined === input.email || "string" === typeof input.email);
            const _io3 = input => "string" === typeof input.name && (undefined === input.url || "string" === typeof input.url);
            const _io4 = input => Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return "object" === typeof value && null !== value && false === Array.isArray(value) && _iu0(value);
            }));
            const _io5 = input => (null === input["default"] || undefined === input["default"] || "boolean" === typeof input["default"]) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "boolean" === typeof elem))) && "boolean" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"]) && (undefined === input.examples || Array.isArray(input.examples));
            const _io6 = input => (null === input["default"] || undefined === input["default"] || "number" === typeof input["default"] && (Math.floor(input["default"]) === input["default"] && -0x8000000000000000 <= input["default"] && input["default"] <= 0x8000000000000000)) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "number" === typeof elem))) && (undefined === input.minimum || "number" === typeof input.minimum && (Math.floor(input.minimum) === input.minimum && -0x8000000000000000 <= input.minimum && input.minimum <= 0x8000000000000000)) && (undefined === input.maximum || "number" === typeof input.maximum && (Math.floor(input.maximum) === input.maximum && -0x8000000000000000 <= input.maximum && input.maximum <= 0x8000000000000000)) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && (Math.floor(input.multipleOf) === input.multipleOf && 0 <= input.multipleOf && input.multipleOf <= 0x10000000000000000 && 0 < input.multipleOf)) && "integer" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"]) && (undefined === input.examples || Array.isArray(input.examples));
            const _io7 = input => (null === input["default"] || undefined === input["default"] || "number" === typeof input["default"]) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "number" === typeof elem))) && (undefined === input.minimum || "number" === typeof input.minimum) && (undefined === input.maximum || "number" === typeof input.maximum) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && 0 < input.multipleOf) && "number" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"]) && (undefined === input.examples || Array.isArray(input.examples));
            const _io8 = input => (null === input["default"] || undefined === input["default"] || "string" === typeof input["default"]) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "string" === typeof elem))) && (undefined === input.format || "string" === typeof input.format) && (undefined === input.pattern || "string" === typeof input.pattern) && (undefined === input.minLength || "number" === typeof input.minLength && (Math.floor(input.minLength) === input.minLength && 0 <= input.minLength && input.minLength <= 0x10000000000000000)) && (undefined === input.maxLength || "number" === typeof input.maxLength && (Math.floor(input.maxLength) === input.maxLength && 0 <= input.maxLength && input.maxLength <= 0x10000000000000000)) && "string" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"]) && (undefined === input.examples || Array.isArray(input.examples));
            const _io9 = input => "object" === typeof input.items && null !== input.items && false === Array.isArray(input.items) && _iu0(input.items) && (undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems) && (undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000)) && (undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000)) && "array" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"]) && (undefined === input.examples || Array.isArray(input.examples));
            const _io10 = input => (undefined === input.properties || "object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) && _io4(input.properties)) && (undefined === input.required || Array.isArray(input.required) && input.required.every((elem => "string" === typeof elem))) && (null !== input.additionalProperties && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || "object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) && _iu0(input.additionalProperties))) && (undefined === input.maxProperties || "number" === typeof input.maxProperties) && (undefined === input.minProperties || "number" === typeof input.minProperties) && "object" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"]) && (undefined === input.examples || Array.isArray(input.examples));
            const _io11 = input => "string" === typeof input.$ref && (undefined === input.examples || Array.isArray(input.examples)) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
            const _io12 = input => Array.isArray(input["x-anyOf"]) && input["x-anyOf"].every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu0(elem))) && (undefined === input.examples || Array.isArray(input.examples)) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
            const _io13 = input => Array.isArray(input["x-oneOf"]) && input["x-oneOf"].every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu0(elem))) && (undefined === input.examples || Array.isArray(input.examples)) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
            const _io14 = input => "null" === input.type && (null === input["default"] || undefined === input["default"]) && (undefined === input.examples || Array.isArray(input.examples)) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
            const _io15 = input => null !== input.type && undefined === input.type && (undefined === input.examples || Array.isArray(input.examples)) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
            const _io16 = input => Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return "object" === typeof value && null !== value && _iu9(value);
            }));
            const _io17 = input => (null === input["default"] || undefined === input["default"] || "boolean" === typeof input["default"]) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "boolean" === typeof elem))) && "boolean" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"]) && (undefined === input.examples || Array.isArray(input.examples)) && "string" === typeof input.name && "string" === typeof input["in"];
            const _io18 = input => (null === input["default"] || undefined === input["default"] || "number" === typeof input["default"] && (Math.floor(input["default"]) === input["default"] && -0x8000000000000000 <= input["default"] && input["default"] <= 0x8000000000000000)) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "number" === typeof elem))) && (undefined === input.minimum || "number" === typeof input.minimum && (Math.floor(input.minimum) === input.minimum && -0x8000000000000000 <= input.minimum && input.minimum <= 0x8000000000000000)) && (undefined === input.maximum || "number" === typeof input.maximum && (Math.floor(input.maximum) === input.maximum && -0x8000000000000000 <= input.maximum && input.maximum <= 0x8000000000000000)) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && (Math.floor(input.multipleOf) === input.multipleOf && 0 <= input.multipleOf && input.multipleOf <= 0x10000000000000000 && 0 < input.multipleOf)) && "integer" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"]) && (undefined === input.examples || Array.isArray(input.examples)) && "string" === typeof input.name && "string" === typeof input["in"];
            const _io19 = input => (null === input["default"] || undefined === input["default"] || "number" === typeof input["default"]) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "number" === typeof elem))) && (undefined === input.minimum || "number" === typeof input.minimum) && (undefined === input.maximum || "number" === typeof input.maximum) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && 0 < input.multipleOf) && "number" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"]) && (undefined === input.examples || Array.isArray(input.examples)) && "string" === typeof input.name && "string" === typeof input["in"];
            const _io20 = input => (null === input["default"] || undefined === input["default"] || "string" === typeof input["default"]) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "string" === typeof elem))) && (undefined === input.format || "string" === typeof input.format) && (undefined === input.pattern || "string" === typeof input.pattern) && (undefined === input.minLength || "number" === typeof input.minLength && (Math.floor(input.minLength) === input.minLength && 0 <= input.minLength && input.minLength <= 0x10000000000000000)) && (undefined === input.maxLength || "number" === typeof input.maxLength && (Math.floor(input.maxLength) === input.maxLength && 0 <= input.maxLength && input.maxLength <= 0x10000000000000000)) && "string" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"]) && (undefined === input.examples || Array.isArray(input.examples)) && "string" === typeof input.name && "string" === typeof input["in"];
            const _io21 = input => "object" === typeof input.items && null !== input.items && false === Array.isArray(input.items) && _iu0(input.items) && (undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems) && (undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000)) && (undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000)) && "array" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"]) && (undefined === input.examples || Array.isArray(input.examples)) && "string" === typeof input.name && "string" === typeof input["in"];
            const _io22 = input => (undefined === input.properties || "object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) && _io4(input.properties)) && (undefined === input.required || Array.isArray(input.required) && input.required.every((elem => "string" === typeof elem))) && (null !== input.additionalProperties && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || "object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) && _iu0(input.additionalProperties))) && (undefined === input.maxProperties || "number" === typeof input.maxProperties) && (undefined === input.minProperties || "number" === typeof input.minProperties) && "object" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"]) && (undefined === input.examples || Array.isArray(input.examples)) && "string" === typeof input.name && "string" === typeof input["in"];
            const _io23 = input => "string" === typeof input.$ref && (undefined === input.examples || Array.isArray(input.examples)) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && "string" === typeof input.name && "string" === typeof input["in"];
            const _io24 = input => Array.isArray(input["x-anyOf"]) && input["x-anyOf"].every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu0(elem))) && (undefined === input.examples || Array.isArray(input.examples)) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && "string" === typeof input.name && "string" === typeof input["in"];
            const _io25 = input => Array.isArray(input["x-oneOf"]) && input["x-oneOf"].every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu0(elem))) && (undefined === input.examples || Array.isArray(input.examples)) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && "string" === typeof input.name && "string" === typeof input["in"];
            const _io26 = input => "null" === input.type && (null === input["default"] || undefined === input["default"]) && (undefined === input.examples || Array.isArray(input.examples)) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && "string" === typeof input.name && "string" === typeof input["in"];
            const _io27 = input => null !== input.type && undefined === input.type && (undefined === input.examples || Array.isArray(input.examples)) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && "string" === typeof input.name && "string" === typeof input["in"];
            const _io28 = input => "object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) && _iu0(input.schema) && "string" === typeof input.name && "string" === typeof input["in"] && (undefined === input.description || "string" === typeof input.description) && (undefined === input.required || "boolean" === typeof input.required);
            const _io29 = input => Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return "object" === typeof value && null !== value && false === Array.isArray(value) && _io30(value);
            }));
            const _io30 = input => (undefined === input.description || "string" === typeof input.description) && (undefined === input.headers || "object" === typeof input.headers && null !== input.headers && false === Array.isArray(input.headers) && _io4(input.headers)) && (undefined === input.schema || "object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) && _iu0(input.schema)) && true;
            const _io31 = input => Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return "object" === typeof value && null !== value && _iu10(value);
            }));
            const _io32 = input => "apiKey" === input.type && (undefined === input["in"] || "query" === input["in"] || "header" === input["in"] || "cookie" === input["in"]) && (undefined === input.name || "string" === typeof input.name) && (undefined === input.description || "string" === typeof input.description);
            const _io33 = input => "basic" === input.type && (undefined === input.name || "string" === typeof input.name) && (undefined === input.description || "string" === typeof input.description);
            const _io34 = input => "oauth2" === input.type && "implicit" === input.flow && (undefined === input.authorizationUrl || "string" === typeof input.authorizationUrl) && (undefined === input.scopes || "object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) && _io35(input.scopes)) && (undefined === input.description || "string" === typeof input.description);
            const _io35 = input => Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return "string" === typeof value;
            }));
            const _io36 = input => "oauth2" === input.type && "accessCode" === input.flow && (undefined === input.authorizationUrl || "string" === typeof input.authorizationUrl) && (undefined === input.tokenUrl || "string" === typeof input.tokenUrl) && (undefined === input.scopes || "object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) && _io35(input.scopes)) && (undefined === input.description || "string" === typeof input.description);
            const _io37 = input => "oauth2" === input.type && "password" === input.flow && (undefined === input.tokenUrl || "string" === typeof input.tokenUrl) && (undefined === input.scopes || "object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) && _io35(input.scopes)) && (undefined === input.description || "string" === typeof input.description);
            const _io38 = input => "oauth2" === input.type && "application" === input.flow && (undefined === input.tokenUrl || "string" === typeof input.tokenUrl) && (undefined === input.scopes || "object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) && _io35(input.scopes)) && (undefined === input.description || "string" === typeof input.description);
            const _io39 = input => Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return Array.isArray(value) && value.every((elem => "string" === typeof elem));
            }));
            const _io40 = input => Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return "object" === typeof value && null !== value && false === Array.isArray(value) && _io41(value);
            }));
            const _io41 = input => (undefined === input.parameters || Array.isArray(input.parameters) && input.parameters.every((elem => "object" === typeof elem && null !== elem && _iu1(elem)))) && (undefined === input.options || "object" === typeof input.options && null !== input.options && false === Array.isArray(input.options) && _io43(input.options)) && (undefined === input.get || "object" === typeof input.get && null !== input.get && false === Array.isArray(input.get) && _io43(input.get)) && (undefined === input.post || "object" === typeof input.post && null !== input.post && false === Array.isArray(input.post) && _io43(input.post)) && (undefined === input.patch || "object" === typeof input.patch && null !== input.patch && false === Array.isArray(input.patch) && _io43(input.patch)) && (undefined === input.put || "object" === typeof input.put && null !== input.put && false === Array.isArray(input.put) && _io43(input.put)) && (undefined === input["delete"] || "object" === typeof input["delete"] && null !== input["delete"] && false === Array.isArray(input["delete"]) && _io43(input["delete"])) && (undefined === input.head || "object" === typeof input.head && null !== input.head && false === Array.isArray(input.head) && _io43(input.head)) && (undefined === input.trace || "object" === typeof input.trace && null !== input.trace && false === Array.isArray(input.trace) && _io43(input.trace));
            const _io42 = input => "string" === typeof input.$ref && RegExp(/^#\/parameters\/(.*)/).test(input.$ref) && (undefined === input.examples || Array.isArray(input.examples)) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
            const _io43 = input => (undefined === input.operationId || "string" === typeof input.operationId) && (undefined === input.parameters || Array.isArray(input.parameters) && input.parameters.every((elem => "object" === typeof elem && null !== elem && _iu2(elem)))) && (undefined === input.responses || "object" === typeof input.responses && null !== input.responses && false === Array.isArray(input.responses) && _io45(input.responses)) && (undefined === input.summary || "string" === typeof input.summary) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.security || Array.isArray(input.security) && input.security.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io39(elem)))) && (undefined === input.tags || Array.isArray(input.tags) && input.tags.every((elem => "string" === typeof elem))) && (undefined === input.deprecated || "boolean" === typeof input.deprecated);
            const _io44 = input => "string" === typeof input.$ref && RegExp(/^#\/definitions\/parameters\/(.*)/).test(input.$ref) && (undefined === input.examples || Array.isArray(input.examples)) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
            const _io45 = input => Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return "object" === typeof value && null !== value && false === Array.isArray(value) && _iu11(value);
            }));
            const _io46 = input => "string" === typeof input.$ref && RegExp(/^#\/definitions\/responses\/(.*)/).test(input.$ref) && (undefined === input.examples || Array.isArray(input.examples)) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
            const _io47 = input => "string" === typeof input.name && (undefined === input.description || "string" === typeof input.description);
            const _io48 = input => null !== input.openapi && undefined !== input.openapi && ("3.0" === input.openapi || "string" === typeof input.openapi && RegExp(/^3\.0\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(input.openapi)) && (undefined === input.servers || Array.isArray(input.servers) && input.servers.every((elem => "object" === typeof elem && null !== elem && _io49(elem)))) && (undefined === input.info || "object" === typeof input.info && null !== input.info && _io52(input.info)) && (undefined === input.components || "object" === typeof input.components && null !== input.components && false === Array.isArray(input.components) && _io55(input.components)) && (undefined === input.paths || "object" === typeof input.paths && null !== input.paths && false === Array.isArray(input.paths) && _io97(input.paths)) && (undefined === input.security || Array.isArray(input.security) && input.security.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io39(elem)))) && (undefined === input.tags || Array.isArray(input.tags) && input.tags.every((elem => "object" === typeof elem && null !== elem && _io104(elem))));
            const _io49 = input => "string" === typeof input.url && (undefined === input.description || "string" === typeof input.description) && (undefined === input.variables || "object" === typeof input.variables && null !== input.variables && false === Array.isArray(input.variables) && _io50(input.variables));
            const _io50 = input => Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return "object" === typeof value && null !== value && _io51(value);
            }));
            const _io51 = input => "string" === typeof input["default"] && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => "string" === typeof elem))) && (undefined === input.description || "string" === typeof input.description);
            const _io52 = input => "string" === typeof input.title && (undefined === input.description || "string" === typeof input.description) && (undefined === input.termsOfService || "string" === typeof input.termsOfService) && (undefined === input.contact || "object" === typeof input.contact && null !== input.contact && false === Array.isArray(input.contact) && _io53(input.contact)) && (undefined === input.license || "object" === typeof input.license && null !== input.license && _io54(input.license)) && "string" === typeof input.version;
            const _io53 = input => (undefined === input.name || "string" === typeof input.name) && (undefined === input.url || "string" === typeof input.url) && (undefined === input.email || "string" === typeof input.email);
            const _io54 = input => "string" === typeof input.name && (undefined === input.url || "string" === typeof input.url);
            const _io55 = input => (undefined === input.schemas || "object" === typeof input.schemas && null !== input.schemas && false === Array.isArray(input.schemas) && _io56(input.schemas)) && (undefined === input.responses || "object" === typeof input.responses && null !== input.responses && false === Array.isArray(input.responses) && _io71(input.responses)) && (undefined === input.parameters || "object" === typeof input.parameters && null !== input.parameters && false === Array.isArray(input.parameters) && _io81(input.parameters)) && (undefined === input.requestBodies || "object" === typeof input.requestBodies && null !== input.requestBodies && false === Array.isArray(input.requestBodies) && _io83(input.requestBodies)) && (undefined === input.securitySchemes || "object" === typeof input.securitySchemes && null !== input.securitySchemes && false === Array.isArray(input.securitySchemes) && _io85(input.securitySchemes)) && (undefined === input.headers || "object" === typeof input.headers && null !== input.headers && false === Array.isArray(input.headers) && _io95(input.headers)) && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io96(input.examples));
            const _io56 = input => Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return "object" === typeof value && null !== value && false === Array.isArray(value) && _iu3(value);
            }));
            const _io57 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && (null === input["default"] || undefined === input["default"] || "boolean" === typeof input["default"]) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "boolean" === typeof elem))) && "boolean" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples))));
            const _io58 = input => Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return true;
            }));
            const _io59 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && (null === input["default"] || undefined === input["default"] || "number" === typeof input["default"] && (Math.floor(input["default"]) === input["default"] && -0x8000000000000000 <= input["default"] && input["default"] <= 0x8000000000000000)) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "number" === typeof elem))) && (undefined === input.minimum || "number" === typeof input.minimum && (Math.floor(input.minimum) === input.minimum && -0x8000000000000000 <= input.minimum && input.minimum <= 0x8000000000000000)) && (undefined === input.maximum || "number" === typeof input.maximum && (Math.floor(input.maximum) === input.maximum && -0x8000000000000000 <= input.maximum && input.maximum <= 0x8000000000000000)) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && (Math.floor(input.multipleOf) === input.multipleOf && 0 <= input.multipleOf && input.multipleOf <= 0x10000000000000000 && 0 < input.multipleOf)) && "integer" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples))));
            const _io60 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && (null === input["default"] || undefined === input["default"] || "number" === typeof input["default"]) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "number" === typeof elem))) && (undefined === input.minimum || "number" === typeof input.minimum) && (undefined === input.maximum || "number" === typeof input.maximum) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && 0 < input.multipleOf) && "number" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples))));
            const _io61 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && (null === input["default"] || undefined === input["default"] || "string" === typeof input["default"]) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "string" === typeof elem))) && (undefined === input.format || "string" === typeof input.format) && (undefined === input.pattern || "string" === typeof input.pattern) && (undefined === input.minLength || "number" === typeof input.minLength && (Math.floor(input.minLength) === input.minLength && 0 <= input.minLength && input.minLength <= 0x10000000000000000)) && (undefined === input.maxLength || "number" === typeof input.maxLength && (Math.floor(input.maxLength) === input.maxLength && 0 <= input.maxLength && input.maxLength <= 0x10000000000000000)) && "string" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples))));
            const _io62 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && ("object" === typeof input.items && null !== input.items && false === Array.isArray(input.items) && _iu3(input.items)) && (undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems) && (undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000)) && (undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000)) && "array" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples))));
            const _io63 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && (undefined === input.properties || "object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) && _io56(input.properties)) && (undefined === input.required || Array.isArray(input.required) && input.required.every((elem => "string" === typeof elem))) && (null !== input.additionalProperties && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || "object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) && _iu3(input.additionalProperties))) && (undefined === input.maxProperties || "number" === typeof input.maxProperties) && (undefined === input.minProperties || "number" === typeof input.minProperties) && "object" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples))));
            const _io64 = input => "string" === typeof input.$ref && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
            const _io65 = input => Array.isArray(input.allOf) && input.allOf.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu3(elem))) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
            const _io66 = input => Array.isArray(input.anyOf) && input.anyOf.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu3(elem))) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
            const _io67 = input => Array.isArray(input.oneOf) && input.oneOf.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu3(elem))) && (undefined === input.discriminator || "object" === typeof input.discriminator && null !== input.discriminator && _io68(input.discriminator)) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
            const _io68 = input => "string" === typeof input.propertyName && (undefined === input.mapping || "object" === typeof input.mapping && null !== input.mapping && false === Array.isArray(input.mapping) && _io35(input.mapping));
            const _io69 = input => (null === input["default"] || undefined === input["default"]) && "null" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples))));
            const _io70 = input => null !== input.type && undefined === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples))));
            const _io71 = input => Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return "object" === typeof value && null !== value && false === Array.isArray(value) && _io72(value);
            }));
            const _io72 = input => (undefined === input.content || "object" === typeof input.content && null !== input.content && false === Array.isArray(input.content) && _io73(input.content)) && (undefined === input.headers || "object" === typeof input.headers && null !== input.headers && false === Array.isArray(input.headers) && _io78(input.headers)) && (undefined === input.description || "string" === typeof input.description);
            const _io73 = input => Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return "object" === typeof value && null !== value && false === Array.isArray(value) && _io74(value);
            }));
            const _io74 = input => (undefined === input.schema || "object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) && _iu3(input.schema)) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io75(input.examples));
            const _io75 = input => Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return "object" === typeof value && null !== value && false === Array.isArray(value) && _iu12(value);
            }));
            const _io76 = input => (undefined === input.summary || "string" === typeof input.summary) && (undefined === input.description || "string" === typeof input.description) && true && (undefined === input.externalValue || "string" === typeof input.externalValue);
            const _io77 = input => "string" === typeof input.$ref && RegExp(/^#\/components\/examples\/(.*)/).test(input.$ref) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
            const _io78 = input => Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return "object" === typeof value && null !== value && _iu13(value);
            }));
            const _io79 = input => (undefined === input.name || "string" === typeof input.name) && (undefined === input.required || "boolean" === typeof input.required) && (undefined === input.description || "string" === typeof input.description) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io75(input.examples)) && ("object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) && _iu3(input.schema));
            const _io80 = input => "string" === typeof input.$ref && RegExp(/^#\/components\/headers\/(.*)/).test(input.$ref) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
            const _io81 = input => Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return "object" === typeof value && null !== value && _io82(value);
            }));
            const _io82 = input => (undefined === input.name || "string" === typeof input.name) && ("path" === input["in"] || "query" === input["in"] || "header" === input["in"] || "cookie" === input["in"]) && ("object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) && _iu3(input.schema)) && (undefined === input.required || "boolean" === typeof input.required) && (undefined === input.description || "string" === typeof input.description) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io75(input.examples));
            const _io83 = input => Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return "object" === typeof value && null !== value && false === Array.isArray(value) && _io84(value);
            }));
            const _io84 = input => (undefined === input.description || "string" === typeof input.description) && (undefined === input.required || "boolean" === typeof input.required) && (undefined === input.content || "object" === typeof input.content && null !== input.content && false === Array.isArray(input.content) && _io73(input.content));
            const _io85 = input => Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return "object" === typeof value && null !== value && _iu14(value);
            }));
            const _io86 = input => "apiKey" === input.type && (undefined === input["in"] || "query" === input["in"] || "header" === input["in"] || "cookie" === input["in"]) && (undefined === input.name || "string" === typeof input.name) && (undefined === input.description || "string" === typeof input.description);
            const _io87 = input => "http" === input.type && "basic" === input.scheme && (undefined === input.description || "string" === typeof input.description);
            const _io88 = input => "http" === input.type && "bearer" === input.scheme && (undefined === input.bearerFormat || "string" === typeof input.bearerFormat) && (undefined === input.description || "string" === typeof input.description);
            const _io89 = input => "oauth2" === input.type && ("object" === typeof input.flows && null !== input.flows && false === Array.isArray(input.flows) && _io90(input.flows)) && (undefined === input.description || "string" === typeof input.description);
            const _io90 = input => (undefined === input.authorizationCode || "object" === typeof input.authorizationCode && null !== input.authorizationCode && false === Array.isArray(input.authorizationCode) && _io91(input.authorizationCode)) && (undefined === input.implicit || "object" === typeof input.implicit && null !== input.implicit && false === Array.isArray(input.implicit) && _io92(input.implicit)) && (undefined === input.password || "object" === typeof input.password && null !== input.password && false === Array.isArray(input.password) && _io93(input.password)) && (undefined === input.clientCredentials || "object" === typeof input.clientCredentials && null !== input.clientCredentials && false === Array.isArray(input.clientCredentials) && _io93(input.clientCredentials));
            const _io91 = input => (undefined === input.authorizationUrl || "string" === typeof input.authorizationUrl) && (undefined === input.tokenUrl || "string" === typeof input.tokenUrl) && (undefined === input.refreshUrl || "string" === typeof input.refreshUrl) && (undefined === input.scopes || "object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) && _io35(input.scopes));
            const _io92 = input => (undefined === input.authorizationUrl || "string" === typeof input.authorizationUrl) && (undefined === input.refreshUrl || "string" === typeof input.refreshUrl) && (undefined === input.scopes || "object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) && _io35(input.scopes));
            const _io93 = input => (undefined === input.tokenUrl || "string" === typeof input.tokenUrl) && (undefined === input.refreshUrl || "string" === typeof input.refreshUrl) && (undefined === input.scopes || "object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) && _io35(input.scopes));
            const _io94 = input => "openIdConnect" === input.type && "string" === typeof input.openIdConnectUrl && (undefined === input.description || "string" === typeof input.description);
            const _io95 = input => Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return "object" === typeof value && null !== value && _io79(value);
            }));
            const _io96 = input => Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return "object" === typeof value && null !== value && false === Array.isArray(value) && _io76(value);
            }));
            const _io97 = input => Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return "object" === typeof value && null !== value && false === Array.isArray(value) && _io98(value);
            }));
            const _io98 = input => (undefined === input.parameters || Array.isArray(input.parameters) && input.parameters.every((elem => "object" === typeof elem && null !== elem && _iu4(elem)))) && (undefined === input.servers || Array.isArray(input.servers) && input.servers.every((elem => "object" === typeof elem && null !== elem && _io49(elem)))) && (undefined === input.summary || "string" === typeof input.summary) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.options || "object" === typeof input.options && null !== input.options && false === Array.isArray(input.options) && _io100(input.options)) && (undefined === input.get || "object" === typeof input.get && null !== input.get && false === Array.isArray(input.get) && _io100(input.get)) && (undefined === input.post || "object" === typeof input.post && null !== input.post && false === Array.isArray(input.post) && _io100(input.post)) && (undefined === input.patch || "object" === typeof input.patch && null !== input.patch && false === Array.isArray(input.patch) && _io100(input.patch)) && (undefined === input.put || "object" === typeof input.put && null !== input.put && false === Array.isArray(input.put) && _io100(input.put)) && (undefined === input["delete"] || "object" === typeof input["delete"] && null !== input["delete"] && false === Array.isArray(input["delete"]) && _io100(input["delete"])) && (undefined === input.head || "object" === typeof input.head && null !== input.head && false === Array.isArray(input.head) && _io100(input.head)) && (undefined === input.trace || "object" === typeof input.trace && null !== input.trace && false === Array.isArray(input.trace) && _io100(input.trace));
            const _io99 = input => "string" === typeof input.$ref && RegExp(/^#\/components\/parameters\/(.*)/).test(input.$ref) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
            const _io100 = input => (undefined === input.operationId || "string" === typeof input.operationId) && (undefined === input.parameters || Array.isArray(input.parameters) && input.parameters.every((elem => "object" === typeof elem && null !== elem && _iu4(elem)))) && (undefined === input.requestBody || "object" === typeof input.requestBody && null !== input.requestBody && false === Array.isArray(input.requestBody) && _iu15(input.requestBody)) && (undefined === input.responses || "object" === typeof input.responses && null !== input.responses && false === Array.isArray(input.responses) && _io102(input.responses)) && (undefined === input.servers || Array.isArray(input.servers) && input.servers.every((elem => "object" === typeof elem && null !== elem && _io49(elem)))) && (undefined === input.summary || "string" === typeof input.summary) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.security || Array.isArray(input.security) && input.security.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io39(elem)))) && (undefined === input.tags || Array.isArray(input.tags) && input.tags.every((elem => "string" === typeof elem))) && (undefined === input.deprecated || "boolean" === typeof input.deprecated);
            const _io101 = input => "string" === typeof input.$ref && RegExp(/^#\/components\/requestBodies\/(.*)/).test(input.$ref) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
            const _io102 = input => Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return "object" === typeof value && null !== value && false === Array.isArray(value) && _iu16(value);
            }));
            const _io103 = input => "string" === typeof input.$ref && RegExp(/^#\/components\/responses\/(.*)/).test(input.$ref) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
            const _io104 = input => "string" === typeof input.name && (undefined === input.description || "string" === typeof input.description);
            const _io105 = input => "string" === typeof input.openapi && RegExp(/^3\.1\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(input.openapi) && (undefined === input.servers || Array.isArray(input.servers) && input.servers.every((elem => "object" === typeof elem && null !== elem && _io106(elem)))) && (undefined === input.info || "object" === typeof input.info && null !== input.info && _io109(input.info)) && (undefined === input.components || "object" === typeof input.components && null !== input.components && false === Array.isArray(input.components) && _io112(input.components)) && (undefined === input.paths || "object" === typeof input.paths && null !== input.paths && false === Array.isArray(input.paths) && _io130(input.paths)) && (undefined === input.webhooks || "object" === typeof input.webhooks && null !== input.webhooks && false === Array.isArray(input.webhooks) && _io163(input.webhooks)) && (undefined === input.security || Array.isArray(input.security) && input.security.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io39(elem)))) && (undefined === input.tags || Array.isArray(input.tags) && input.tags.every((elem => "object" === typeof elem && null !== elem && _io165(elem))));
            const _io106 = input => "string" === typeof input.url && (undefined === input.description || "string" === typeof input.description) && (undefined === input.variables || "object" === typeof input.variables && null !== input.variables && false === Array.isArray(input.variables) && _io107(input.variables));
            const _io107 = input => Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return "object" === typeof value && null !== value && _io108(value);
            }));
            const _io108 = input => "string" === typeof input["default"] && (undefined === input["enum"] || Array.isArray(input["enum"]) && (1 <= input["enum"].length && input["enum"].every((elem => "string" === typeof elem)))) && (undefined === input.description || "string" === typeof input.description);
            const _io109 = input => "string" === typeof input.title && (undefined === input.summary || "string" === typeof input.summary) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.termsOfService || "string" === typeof input.termsOfService) && (undefined === input.contact || "object" === typeof input.contact && null !== input.contact && false === Array.isArray(input.contact) && _io110(input.contact)) && (undefined === input.license || "object" === typeof input.license && null !== input.license && _io111(input.license)) && "string" === typeof input.version;
            const _io110 = input => (undefined === input.name || "string" === typeof input.name) && (undefined === input.url || "string" === typeof input.url) && (undefined === input.email || "string" === typeof input.email);
            const _io111 = input => "string" === typeof input.name && (undefined === input.identifier || "string" === typeof input.identifier) && (undefined === input.url || "string" === typeof input.url);
            const _io112 = input => (undefined === input.schemas || "object" === typeof input.schemas && null !== input.schemas && false === Array.isArray(input.schemas) && _io113(input.schemas)) && (undefined === input.pathItems || "object" === typeof input.pathItems && null !== input.pathItems && false === Array.isArray(input.pathItems) && _io130(input.pathItems)) && (undefined === input.responses || "object" === typeof input.responses && null !== input.responses && false === Array.isArray(input.responses) && _io148(input.responses)) && (undefined === input.parameters || "object" === typeof input.parameters && null !== input.parameters && false === Array.isArray(input.parameters) && _io149(input.parameters)) && (undefined === input.requestBodies || "object" === typeof input.requestBodies && null !== input.requestBodies && false === Array.isArray(input.requestBodies) && _io150(input.requestBodies)) && (undefined === input.securitySchemes || "object" === typeof input.securitySchemes && null !== input.securitySchemes && false === Array.isArray(input.securitySchemes) && _io151(input.securitySchemes)) && (undefined === input.headers || "object" === typeof input.headers && null !== input.headers && false === Array.isArray(input.headers) && _io161(input.headers)) && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io162(input.examples));
            const _io113 = input => Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return "object" === typeof value && null !== value && false === Array.isArray(value) && _iu5(value);
            }));
            const _io114 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && (undefined === input.properties || "object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) && _io113(input.properties)) && (undefined === input.required || Array.isArray(input.required) && input.required.every((elem => "string" === typeof elem))) && (null !== input.additionalProperties && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || "object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) && _iu5(input.additionalProperties))) && (undefined === input.maxProperties || "number" === typeof input.maxProperties) && (undefined === input.minProperties || "number" === typeof input.minProperties) && "object" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples))));
            const _io115 = input => Array.isArray(input.type) && input.type.every((elem => "string" === elem || "number" === elem || "boolean" === elem || "object" === elem || "integer" === elem || "array" === elem || "null" === elem)) && (null === input["default"] || undefined === input["default"] || Array.isArray(input["default"])) && (undefined === input["enum"] || Array.isArray(input["enum"])) && ("string" === typeof input["const"] || "number" === typeof input["const"] || "boolean" === typeof input["const"]) && (undefined === input.nullable || "boolean" === typeof input.nullable) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input.minimum || "number" === typeof input.minimum) && (undefined === input.maximum || "number" === typeof input.maximum) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && 0 < input.multipleOf) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum) && (undefined === input.format || "string" === typeof input.format) && (undefined === input.maxLength || "number" === typeof input.maxLength && (Math.floor(input.maxLength) === input.maxLength && 0 <= input.maxLength && input.maxLength <= 0x10000000000000000)) && (undefined === input.pattern || "string" === typeof input.pattern) && (undefined === input.contentMediaType || "string" === typeof input.contentMediaType) && (undefined === input.minLength || "number" === typeof input.minLength && (Math.floor(input.minLength) === input.minLength && 0 <= input.minLength && input.minLength <= 0x10000000000000000)) && (null !== input.items && (undefined === input.items || (Array.isArray(input.items) && input.items.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu5(elem))) || "object" === typeof input.items && null !== input.items && false === Array.isArray(input.items) && _iu5(input.items)))) && (undefined === input.prefixItems || Array.isArray(input.prefixItems) && input.prefixItems.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu5(elem)))) && (undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems) && (null !== input.additionalItems && (undefined === input.additionalItems || "boolean" === typeof input.additionalItems || "object" === typeof input.additionalItems && null !== input.additionalItems && false === Array.isArray(input.additionalItems) && _iu5(input.additionalItems))) && (undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000)) && (undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000)) && (null !== input.additionalProperties && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || "object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) && _iu5(input.additionalProperties))) && (undefined === input.properties || "object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) && _io113(input.properties)) && (undefined === input.required || Array.isArray(input.required) && input.required.every((elem => "string" === typeof elem))) && (undefined === input.maxProperties || "number" === typeof input.maxProperties) && (undefined === input.minProperties || "number" === typeof input.minProperties) && (Array.isArray(input.oneOf) && input.oneOf.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu5(elem)))) && (undefined === input.discriminator || "object" === typeof input.discriminator && null !== input.discriminator && _io127(input.discriminator)) && (Array.isArray(input.anyOf) && input.anyOf.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu5(elem)))) && (Array.isArray(input.allOf) && input.allOf.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu5(elem)))) && "string" === typeof input.$ref;
            const _io116 = input => ("string" === typeof input["const"] || "number" === typeof input["const"] || "boolean" === typeof input["const"]) && (undefined === input.nullable || "boolean" === typeof input.nullable) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
            const _io117 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && (null === input["default"] || undefined === input["default"] || "boolean" === typeof input["default"]) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "boolean" === typeof elem))) && "boolean" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples))));
            const _io118 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && (null === input["default"] || undefined === input["default"] || "number" === typeof input["default"] && (Math.floor(input["default"]) === input["default"] && -0x8000000000000000 <= input["default"] && input["default"] <= 0x8000000000000000)) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "number" === typeof elem))) && (undefined === input.minimum || "number" === typeof input.minimum && (Math.floor(input.minimum) === input.minimum && -0x8000000000000000 <= input.minimum && input.minimum <= 0x8000000000000000)) && (undefined === input.maximum || "number" === typeof input.maximum && (Math.floor(input.maximum) === input.maximum && -0x8000000000000000 <= input.maximum && input.maximum <= 0x8000000000000000)) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum && (Math.floor(input.exclusiveMinimum) === input.exclusiveMinimum && -0x8000000000000000 <= input.exclusiveMinimum && input.exclusiveMinimum <= 0x8000000000000000) || "boolean" === typeof input.exclusiveMinimum) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum && (Math.floor(input.exclusiveMaximum) === input.exclusiveMaximum && -0x8000000000000000 <= input.exclusiveMaximum && input.exclusiveMaximum <= 0x8000000000000000) || "boolean" === typeof input.exclusiveMaximum) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && (Math.floor(input.multipleOf) === input.multipleOf && 0 <= input.multipleOf && input.multipleOf <= 0x10000000000000000 && 0 < input.multipleOf)) && "integer" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples))));
            const _io119 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && (null === input["default"] || undefined === input["default"] || "number" === typeof input["default"]) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "number" === typeof elem))) && (undefined === input.minimum || "number" === typeof input.minimum) && (undefined === input.maximum || "number" === typeof input.maximum) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && 0 < input.multipleOf) && "number" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples))));
            const _io120 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && (null === input["default"] || undefined === input["default"] || "string" === typeof input["default"]) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "string" === typeof elem))) && (undefined === input.format || "string" === typeof input.format) && (undefined === input.pattern || "string" === typeof input.pattern) && (undefined === input.contentMediaType || "string" === typeof input.contentMediaType) && (undefined === input.minLength || "number" === typeof input.minLength && (Math.floor(input.minLength) === input.minLength && 0 <= input.minLength && input.minLength <= 0x10000000000000000)) && (undefined === input.maxLength || "number" === typeof input.maxLength && (Math.floor(input.maxLength) === input.maxLength && 0 <= input.maxLength && input.maxLength <= 0x10000000000000000)) && "string" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples))));
            const _io121 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && (null !== input.items && (undefined === input.items || (Array.isArray(input.items) && input.items.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu5(elem))) || "object" === typeof input.items && null !== input.items && false === Array.isArray(input.items) && _iu5(input.items)))) && (undefined === input.prefixItems || Array.isArray(input.prefixItems) && input.prefixItems.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu5(elem)))) && (undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems) && (null !== input.additionalItems && (undefined === input.additionalItems || "boolean" === typeof input.additionalItems || "object" === typeof input.additionalItems && null !== input.additionalItems && false === Array.isArray(input.additionalItems) && _iu5(input.additionalItems))) && (undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000)) && (undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000)) && "array" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples))));
            const _io122 = input => "string" === typeof input.$ref && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
            const _io123 = input => "string" === typeof input.$recursiveRef && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
            const _io124 = input => Array.isArray(input.allOf) && input.allOf.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu5(elem))) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
            const _io125 = input => Array.isArray(input.anyOf) && input.anyOf.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu5(elem))) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
            const _io126 = input => Array.isArray(input.oneOf) && input.oneOf.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu5(elem))) && (undefined === input.discriminator || "object" === typeof input.discriminator && null !== input.discriminator && _io127(input.discriminator)) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
            const _io127 = input => "string" === typeof input.propertyName && (undefined === input.mapping || "object" === typeof input.mapping && null !== input.mapping && false === Array.isArray(input.mapping) && _io35(input.mapping));
            const _io128 = input => (null === input["default"] || undefined === input["default"]) && "null" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples))));
            const _io129 = input => null !== input.type && undefined === input.type && true && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples))));
            const _io130 = input => Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return "object" === typeof value && null !== value && false === Array.isArray(value) && _io131(value);
            }));
            const _io131 = input => (undefined === input.parameters || Array.isArray(input.parameters) && input.parameters.every((elem => "object" === typeof elem && null !== elem && _iu6(elem)))) && (undefined === input.servers || Array.isArray(input.servers) && input.servers.every((elem => "object" === typeof elem && null !== elem && _io106(elem)))) && (undefined === input.summary || "string" === typeof input.summary) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.options || "object" === typeof input.options && null !== input.options && false === Array.isArray(input.options) && _io138(input.options)) && (undefined === input.get || "object" === typeof input.get && null !== input.get && false === Array.isArray(input.get) && _io138(input.get)) && (undefined === input.post || "object" === typeof input.post && null !== input.post && false === Array.isArray(input.post) && _io138(input.post)) && (undefined === input.patch || "object" === typeof input.patch && null !== input.patch && false === Array.isArray(input.patch) && _io138(input.patch)) && (undefined === input.put || "object" === typeof input.put && null !== input.put && false === Array.isArray(input.put) && _io138(input.put)) && (undefined === input["delete"] || "object" === typeof input["delete"] && null !== input["delete"] && false === Array.isArray(input["delete"]) && _io138(input["delete"])) && (undefined === input.head || "object" === typeof input.head && null !== input.head && false === Array.isArray(input.head) && _io138(input.head)) && (undefined === input.trace || "object" === typeof input.trace && null !== input.trace && false === Array.isArray(input.trace) && _io138(input.trace));
            const _io132 = input => (undefined === input.name || "string" === typeof input.name) && ("path" === input["in"] || "query" === input["in"] || "header" === input["in"] || "cookie" === input["in"]) && ("object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) && _iu5(input.schema)) && (undefined === input.required || "boolean" === typeof input.required) && (undefined === input.description || "string" === typeof input.description) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io133(input.examples));
            const _io133 = input => Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return "object" === typeof value && null !== value && false === Array.isArray(value) && _iu17(value);
            }));
            const _io134 = input => (undefined === input.summary || "string" === typeof input.summary) && (undefined === input.description || "string" === typeof input.description) && true && (undefined === input.externalValue || "string" === typeof input.externalValue);
            const _io135 = input => "string" === typeof input.$ref && RegExp(/^#\/components\/examples\/(.*)/).test(input.$ref) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
            const _io136 = input => "string" === typeof input.$ref && RegExp(/^#\/components\/headers\/(.*)/).test(input.$ref) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
            const _io137 = input => "string" === typeof input.$ref && RegExp(/^#\/components\/parameters\/(.*)/).test(input.$ref) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
            const _io138 = input => (undefined === input.operationId || "string" === typeof input.operationId) && (undefined === input.parameters || Array.isArray(input.parameters) && input.parameters.every((elem => "object" === typeof elem && null !== elem && _iu6(elem)))) && (undefined === input.requestBody || "object" === typeof input.requestBody && null !== input.requestBody && false === Array.isArray(input.requestBody) && _iu18(input.requestBody)) && (undefined === input.responses || "object" === typeof input.responses && null !== input.responses && false === Array.isArray(input.responses) && _io143(input.responses)) && (undefined === input.servers || Array.isArray(input.servers) && input.servers.every((elem => "object" === typeof elem && null !== elem && _io106(elem)))) && (undefined === input.summary || "string" === typeof input.summary) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.security || Array.isArray(input.security) && input.security.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io39(elem)))) && (undefined === input.tags || Array.isArray(input.tags) && input.tags.every((elem => "string" === typeof elem))) && (undefined === input.deprecated || "boolean" === typeof input.deprecated);
            const _io139 = input => (undefined === input.description || "string" === typeof input.description) && (undefined === input.required || "boolean" === typeof input.required) && (undefined === input.content || "object" === typeof input.content && null !== input.content && false === Array.isArray(input.content) && _io140(input.content));
            const _io140 = input => Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return "object" === typeof value && null !== value && false === Array.isArray(value) && _io141(value);
            }));
            const _io141 = input => (undefined === input.schema || "object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) && _iu5(input.schema)) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io133(input.examples));
            const _io142 = input => "string" === typeof input.$ref && RegExp(/^#\/components\/requestBodies\/(.*)/).test(input.$ref) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
            const _io143 = input => Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return "object" === typeof value && null !== value && false === Array.isArray(value) && _iu19(value);
            }));
            const _io144 = input => (undefined === input.content || "object" === typeof input.content && null !== input.content && false === Array.isArray(input.content) && _io140(input.content)) && (undefined === input.headers || "object" === typeof input.headers && null !== input.headers && false === Array.isArray(input.headers) && _io145(input.headers)) && (undefined === input.description || "string" === typeof input.description);
            const _io145 = input => Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return "object" === typeof value && null !== value && _iu20(value);
            }));
            const _io146 = input => (undefined === input.name || "string" === typeof input.name) && (undefined === input.required || "boolean" === typeof input.required) && (undefined === input.description || "string" === typeof input.description) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io133(input.examples)) && ("object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) && _iu5(input.schema));
            const _io147 = input => "string" === typeof input.$ref && RegExp(/^#\/components\/responses\/(.*)/).test(input.$ref) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
            const _io148 = input => Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return "object" === typeof value && null !== value && false === Array.isArray(value) && _io144(value);
            }));
            const _io149 = input => Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return "object" === typeof value && null !== value && _io132(value);
            }));
            const _io150 = input => Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return "object" === typeof value && null !== value && false === Array.isArray(value) && _io139(value);
            }));
            const _io151 = input => Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return "object" === typeof value && null !== value && _iu21(value);
            }));
            const _io152 = input => "apiKey" === input.type && (undefined === input["in"] || "query" === input["in"] || "header" === input["in"] || "cookie" === input["in"]) && (undefined === input.name || "string" === typeof input.name) && (undefined === input.description || "string" === typeof input.description);
            const _io153 = input => "http" === input.type && "basic" === input.scheme && (undefined === input.description || "string" === typeof input.description);
            const _io154 = input => "http" === input.type && "bearer" === input.scheme && (undefined === input.bearerFormat || "string" === typeof input.bearerFormat) && (undefined === input.description || "string" === typeof input.description);
            const _io155 = input => "oauth2" === input.type && ("object" === typeof input.flows && null !== input.flows && false === Array.isArray(input.flows) && _io156(input.flows)) && (undefined === input.description || "string" === typeof input.description);
            const _io156 = input => (undefined === input.authorizationCode || "object" === typeof input.authorizationCode && null !== input.authorizationCode && false === Array.isArray(input.authorizationCode) && _io157(input.authorizationCode)) && (undefined === input.implicit || "object" === typeof input.implicit && null !== input.implicit && false === Array.isArray(input.implicit) && _io158(input.implicit)) && (undefined === input.password || "object" === typeof input.password && null !== input.password && false === Array.isArray(input.password) && _io159(input.password)) && (undefined === input.clientCredentials || "object" === typeof input.clientCredentials && null !== input.clientCredentials && false === Array.isArray(input.clientCredentials) && _io159(input.clientCredentials));
            const _io157 = input => (undefined === input.authorizationUrl || "string" === typeof input.authorizationUrl) && (undefined === input.tokenUrl || "string" === typeof input.tokenUrl) && (undefined === input.refreshUrl || "string" === typeof input.refreshUrl) && (undefined === input.scopes || "object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) && _io35(input.scopes));
            const _io158 = input => (undefined === input.authorizationUrl || "string" === typeof input.authorizationUrl) && (undefined === input.refreshUrl || "string" === typeof input.refreshUrl) && (undefined === input.scopes || "object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) && _io35(input.scopes));
            const _io159 = input => (undefined === input.tokenUrl || "string" === typeof input.tokenUrl) && (undefined === input.refreshUrl || "string" === typeof input.refreshUrl) && (undefined === input.scopes || "object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) && _io35(input.scopes));
            const _io160 = input => "openIdConnect" === input.type && "string" === typeof input.openIdConnectUrl && (undefined === input.description || "string" === typeof input.description);
            const _io161 = input => Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return "object" === typeof value && null !== value && _io146(value);
            }));
            const _io162 = input => Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return "object" === typeof value && null !== value && false === Array.isArray(value) && _io134(value);
            }));
            const _io163 = input => Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return "object" === typeof value && null !== value && false === Array.isArray(value) && _iu22(value);
            }));
            const _io164 = input => "string" === typeof input.$ref && RegExp(/^#\/components\/pathItems\/(.*)/).test(input.$ref) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
            const _io165 = input => "string" === typeof input.name && (undefined === input.description || "string" === typeof input.description);
            const _io166 = input => "string" === typeof input.openapi && RegExp(/^3\.1\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(input.openapi) && (undefined === input.servers || Array.isArray(input.servers) && input.servers.every((elem => "object" === typeof elem && null !== elem && _io167(elem)))) && (undefined === input.info || "object" === typeof input.info && null !== input.info && _io170(input.info)) && ("object" === typeof input.components && null !== input.components && false === Array.isArray(input.components) && _io173(input.components)) && (undefined === input.paths || "object" === typeof input.paths && null !== input.paths && false === Array.isArray(input.paths) && _io198(input.paths)) && (undefined === input.webhooks || "object" === typeof input.webhooks && null !== input.webhooks && false === Array.isArray(input.webhooks) && _io198(input.webhooks)) && (undefined === input.security || Array.isArray(input.security) && input.security.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io39(elem)))) && (undefined === input.tags || Array.isArray(input.tags) && input.tags.every((elem => "object" === typeof elem && null !== elem && _io210(elem)))) && true === input["x-samchon-emended-v4"];
            const _io167 = input => "string" === typeof input.url && (undefined === input.description || "string" === typeof input.description) && (undefined === input.variables || "object" === typeof input.variables && null !== input.variables && false === Array.isArray(input.variables) && _io168(input.variables));
            const _io168 = input => Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return "object" === typeof value && null !== value && _io169(value);
            }));
            const _io169 = input => "string" === typeof input["default"] && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => "string" === typeof elem))) && (undefined === input.description || "string" === typeof input.description);
            const _io170 = input => "string" === typeof input.title && (undefined === input.summary || "string" === typeof input.summary) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.termsOfService || "string" === typeof input.termsOfService) && (undefined === input.contact || "object" === typeof input.contact && null !== input.contact && false === Array.isArray(input.contact) && _io171(input.contact)) && (undefined === input.license || "object" === typeof input.license && null !== input.license && _io172(input.license)) && "string" === typeof input.version;
            const _io171 = input => (undefined === input.name || "string" === typeof input.name) && (undefined === input.url || "string" === typeof input.url) && (undefined === input.email || "string" === typeof input.email && /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i.test(input.email));
            const _io172 = input => "string" === typeof input.name && (undefined === input.identifier || "string" === typeof input.identifier) && (undefined === input.url || "string" === typeof input.url);
            const _io173 = input => (undefined === input.schemas || "object" === typeof input.schemas && null !== input.schemas && false === Array.isArray(input.schemas) && _io174(input.schemas)) && (undefined === input.securitySchemes || "object" === typeof input.securitySchemes && null !== input.securitySchemes && false === Array.isArray(input.securitySchemes) && _io188(input.securitySchemes));
            const _io174 = input => Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return "object" === typeof value && null !== value && false === Array.isArray(value) && _iu7(value);
            }));
            const _io175 = input => ("string" === typeof input["const"] || "number" === typeof input["const"] || "boolean" === typeof input["const"]) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples));
            const _io176 = input => (undefined === input["default"] || "boolean" === typeof input["default"]) && "boolean" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples));
            const _io177 = input => (undefined === input["default"] || "number" === typeof input["default"] && (Math.floor(input["default"]) === input["default"] && -0x8000000000000000 <= input["default"] && input["default"] <= 0x8000000000000000)) && (undefined === input.minimum || "number" === typeof input.minimum && (Math.floor(input.minimum) === input.minimum && -0x8000000000000000 <= input.minimum && input.minimum <= 0x8000000000000000)) && (undefined === input.maximum || "number" === typeof input.maximum && (Math.floor(input.maximum) === input.maximum && -0x8000000000000000 <= input.maximum && input.maximum <= 0x8000000000000000)) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && (Math.floor(input.multipleOf) === input.multipleOf && 0 <= input.multipleOf && input.multipleOf <= 0x10000000000000000 && 0 < input.multipleOf)) && "integer" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples));
            const _io178 = input => (undefined === input["default"] || "number" === typeof input["default"]) && (undefined === input.minimum || "number" === typeof input.minimum) && (undefined === input.maximum || "number" === typeof input.maximum) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && 0 < input.multipleOf) && "number" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples));
            const _io179 = input => (undefined === input["default"] || "string" === typeof input["default"]) && (undefined === input.format || "string" === typeof input.format) && (undefined === input.pattern || "string" === typeof input.pattern) && (undefined === input.contentMediaType || "string" === typeof input.contentMediaType) && (undefined === input.minLength || "number" === typeof input.minLength && (Math.floor(input.minLength) === input.minLength && 0 <= input.minLength && input.minLength <= 0x10000000000000000)) && (undefined === input.maxLength || "number" === typeof input.maxLength && (Math.floor(input.maxLength) === input.maxLength && 0 <= input.maxLength && input.maxLength <= 0x10000000000000000)) && "string" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples));
            const _io180 = input => "object" === typeof input.items && null !== input.items && false === Array.isArray(input.items) && _iu7(input.items) && (undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems) && (undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000)) && (undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000)) && "array" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples));
            const _io181 = input => "array" === input.type && (Array.isArray(input.prefixItems) && input.prefixItems.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu7(elem)))) && (null !== input.additionalItems && (undefined === input.additionalItems || "boolean" === typeof input.additionalItems || "object" === typeof input.additionalItems && null !== input.additionalItems && false === Array.isArray(input.additionalItems) && _iu7(input.additionalItems))) && (undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems) && (undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000)) && (undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000)) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples));
            const _io182 = input => (undefined === input.properties || "object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) && _io174(input.properties)) && (null !== input.additionalProperties && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || "object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) && _iu7(input.additionalProperties))) && (undefined === input.required || Array.isArray(input.required) && input.required.every((elem => "string" === typeof elem))) && "object" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples));
            const _io183 = input => "string" === typeof input.$ref && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples));
            const _io184 = input => Array.isArray(input.oneOf) && input.oneOf.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu8(elem))) && (undefined === input.discriminator || "object" === typeof input.discriminator && null !== input.discriminator && _io187(input.discriminator)) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples));
            const _io185 = input => (null === input["default"] || undefined === input["default"]) && "null" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples));
            const _io186 = input => null !== input.type && undefined === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples));
            const _io187 = input => "string" === typeof input.propertyName && (undefined === input.mapping || "object" === typeof input.mapping && null !== input.mapping && false === Array.isArray(input.mapping) && _io35(input.mapping));
            const _io188 = input => Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return "object" === typeof value && null !== value && _iu23(value);
            }));
            const _io189 = input => "apiKey" === input.type && (undefined === input["in"] || "query" === input["in"] || "header" === input["in"] || "cookie" === input["in"]) && (undefined === input.name || "string" === typeof input.name) && (undefined === input.description || "string" === typeof input.description);
            const _io190 = input => "http" === input.type && "basic" === input.scheme && (undefined === input.description || "string" === typeof input.description);
            const _io191 = input => "http" === input.type && "bearer" === input.scheme && (undefined === input.bearerFormat || "string" === typeof input.bearerFormat) && (undefined === input.description || "string" === typeof input.description);
            const _io192 = input => "oauth2" === input.type && ("object" === typeof input.flows && null !== input.flows && false === Array.isArray(input.flows) && _io193(input.flows)) && (undefined === input.description || "string" === typeof input.description);
            const _io193 = input => (undefined === input.authorizationCode || "object" === typeof input.authorizationCode && null !== input.authorizationCode && false === Array.isArray(input.authorizationCode) && _io194(input.authorizationCode)) && (undefined === input.implicit || "object" === typeof input.implicit && null !== input.implicit && false === Array.isArray(input.implicit) && _io195(input.implicit)) && (undefined === input.password || "object" === typeof input.password && null !== input.password && false === Array.isArray(input.password) && _io196(input.password)) && (undefined === input.clientCredentials || "object" === typeof input.clientCredentials && null !== input.clientCredentials && false === Array.isArray(input.clientCredentials) && _io196(input.clientCredentials));
            const _io194 = input => (undefined === input.authorizationUrl || "string" === typeof input.authorizationUrl) && (undefined === input.tokenUrl || "string" === typeof input.tokenUrl) && (undefined === input.refreshUrl || "string" === typeof input.refreshUrl) && (undefined === input.scopes || "object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) && _io35(input.scopes));
            const _io195 = input => (undefined === input.authorizationUrl || "string" === typeof input.authorizationUrl) && (undefined === input.refreshUrl || "string" === typeof input.refreshUrl) && (undefined === input.scopes || "object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) && _io35(input.scopes));
            const _io196 = input => (undefined === input.tokenUrl || "string" === typeof input.tokenUrl) && (undefined === input.refreshUrl || "string" === typeof input.refreshUrl) && (undefined === input.scopes || "object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) && _io35(input.scopes));
            const _io197 = input => "openIdConnect" === input.type && "string" === typeof input.openIdConnectUrl && (undefined === input.description || "string" === typeof input.description);
            const _io198 = input => Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return "object" === typeof value && null !== value && false === Array.isArray(value) && _io199(value);
            }));
            const _io199 = input => (undefined === input.servers || Array.isArray(input.servers) && input.servers.every((elem => "object" === typeof elem && null !== elem && _io167(elem)))) && (undefined === input.summary || "string" === typeof input.summary) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.options || "object" === typeof input.options && null !== input.options && false === Array.isArray(input.options) && _io200(input.options)) && (undefined === input.get || "object" === typeof input.get && null !== input.get && false === Array.isArray(input.get) && _io200(input.get)) && (undefined === input.post || "object" === typeof input.post && null !== input.post && false === Array.isArray(input.post) && _io200(input.post)) && (undefined === input.patch || "object" === typeof input.patch && null !== input.patch && false === Array.isArray(input.patch) && _io200(input.patch)) && (undefined === input.put || "object" === typeof input.put && null !== input.put && false === Array.isArray(input.put) && _io200(input.put)) && (undefined === input["delete"] || "object" === typeof input["delete"] && null !== input["delete"] && false === Array.isArray(input["delete"]) && _io200(input["delete"])) && (undefined === input.head || "object" === typeof input.head && null !== input.head && false === Array.isArray(input.head) && _io200(input.head)) && (undefined === input.trace || "object" === typeof input.trace && null !== input.trace && false === Array.isArray(input.trace) && _io200(input.trace));
            const _io200 = input => (undefined === input.operationId || "string" === typeof input.operationId) && (undefined === input.parameters || Array.isArray(input.parameters) && input.parameters.every((elem => "object" === typeof elem && null !== elem && _io201(elem)))) && (undefined === input.requestBody || "object" === typeof input.requestBody && null !== input.requestBody && false === Array.isArray(input.requestBody) && _io204(input.requestBody)) && (undefined === input.responses || "object" === typeof input.responses && null !== input.responses && false === Array.isArray(input.responses) && _io207(input.responses)) && (undefined === input.servers || Array.isArray(input.servers) && input.servers.every((elem => "object" === typeof elem && null !== elem && _io167(elem)))) && (undefined === input.summary || "string" === typeof input.summary) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.security || Array.isArray(input.security) && input.security.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io39(elem)))) && (undefined === input.tags || Array.isArray(input.tags) && input.tags.every((elem => "string" === typeof elem))) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && (undefined === input["x-samchon-human"] || "boolean" === typeof input["x-samchon-human"]) && (undefined === input["x-samchon-accessor"] || Array.isArray(input["x-samchon-accessor"]) && input["x-samchon-accessor"].every((elem => "string" === typeof elem))) && (undefined === input["x-samchon-controller"] || "string" === typeof input["x-samchon-controller"]);
            const _io201 = input => (undefined === input.name || "string" === typeof input.name) && ("path" === input["in"] || "query" === input["in"] || "header" === input["in"] || "cookie" === input["in"]) && ("object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) && _iu7(input.schema)) && (undefined === input.required || "boolean" === typeof input.required) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io202(input.examples));
            const _io202 = input => Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return "object" === typeof value && null !== value && false === Array.isArray(value) && _io203(value);
            }));
            const _io203 = input => (undefined === input.summary || "string" === typeof input.summary) && (undefined === input.description || "string" === typeof input.description) && true && (undefined === input.externalValue || "string" === typeof input.externalValue);
            const _io204 = input => (undefined === input.content || "object" === typeof input.content && null !== input.content && false === Array.isArray(input.content) && _io205(input.content)) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.required || "boolean" === typeof input.required) && (undefined === input["x-nestia-encrypted"] || "boolean" === typeof input["x-nestia-encrypted"]);
            const _io205 = input => (undefined === input["text/plain"] || "object" === typeof input["text/plain"] && null !== input["text/plain"] && false === Array.isArray(input["text/plain"]) && _io206(input["text/plain"])) && (undefined === input["application/json"] || "object" === typeof input["application/json"] && null !== input["application/json"] && false === Array.isArray(input["application/json"]) && _io206(input["application/json"])) && (undefined === input["application/x-www-form-url-encoded"] || "object" === typeof input["application/x-www-form-url-encoded"] && null !== input["application/x-www-form-url-encoded"] && false === Array.isArray(input["application/x-www-form-url-encoded"]) && _io206(input["application/x-www-form-url-encoded"])) && (undefined === input["multipart/form-data"] || "object" === typeof input["multipart/form-data"] && null !== input["multipart/form-data"] && false === Array.isArray(input["multipart/form-data"]) && _io206(input["multipart/form-data"])) && (undefined === input["*/*"] || "object" === typeof input["*/*"] && null !== input["*/*"] && false === Array.isArray(input["*/*"]) && _io206(input["*/*"])) && Object.keys(input).every((key => {
                if ([ "text/plain", "application/json", "application/x-www-form-url-encoded", "multipart/form-data", "*/*" ].some((prop => key === prop))) return true;
                const value = input[key];
                if (undefined === value) return true;
                return undefined === value || "object" === typeof value && null !== value && false === Array.isArray(value) && _io206(value);
            }));
            const _io206 = input => (undefined === input.schema || "object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) && _iu7(input.schema)) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io202(input.examples));
            const _io207 = input => Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return "object" === typeof value && null !== value && false === Array.isArray(value) && _io208(value);
            }));
            const _io208 = input => (undefined === input.headers || "object" === typeof input.headers && null !== input.headers && false === Array.isArray(input.headers) && _io209(input.headers)) && (undefined === input.content || "object" === typeof input.content && null !== input.content && false === Array.isArray(input.content) && _io205(input.content)) && (undefined === input.description || "string" === typeof input.description) && (undefined === input["x-nestia-encrypted"] || "boolean" === typeof input["x-nestia-encrypted"]);
            const _io209 = input => Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return "object" === typeof value && null !== value && _io201(value);
            }));
            const _io210 = input => "string" === typeof input.name && (undefined === input.description || "string" === typeof input.description);
            const _iu0 = input => (() => {
                if ("boolean" === input.type) return _io5(input); else if ("number" === input.type) return _io7(input); else if ("integer" === input.type) return _io6(input); else if ("string" === input.type) return _io8(input); else if ("array" === input.type) return _io9(input); else if ("object" === input.type) return _io10(input); else if (undefined !== input.$ref) return _io11(input); else if (undefined !== input["x-anyOf"]) return _io12(input); else if (undefined !== input["x-oneOf"]) return _io13(input); else if ("null" === input.type) return _io14(input); else return _io15(input);
            })();
            const _iu1 = input => (() => {
                if ("boolean" === input.type) return _io17(input); else if ("number" === input.type) return _io19(input); else if ("integer" === input.type) return _io18(input); else if ("string" === input.type) return _io20(input); else if ("array" === input.type) return _io21(input); else if ("object" === input.type) return _io22(input); else if (undefined !== input["x-anyOf"]) return _io24(input); else if (undefined !== input["x-oneOf"]) return _io25(input); else if ("null" === input.type) return _io26(input); else if (undefined !== input.schema) return _io28(input); else return (() => {
                    if (_io23(input)) return _io23(input);
                    if (_io27(input)) return _io27(input);
                    if (_io42(input)) return _io42(input);
                    return false;
                })();
            })();
            const _iu2 = input => (() => {
                if ("boolean" === input.type) return _io17(input); else if ("number" === input.type) return _io19(input); else if ("integer" === input.type) return _io18(input); else if ("string" === input.type) return _io20(input); else if ("array" === input.type) return _io21(input); else if ("object" === input.type) return _io22(input); else if (undefined !== input["x-anyOf"]) return _io24(input); else if (undefined !== input["x-oneOf"]) return _io25(input); else if ("null" === input.type) return _io26(input); else if (undefined !== input.schema) return _io28(input); else return (() => {
                    if (_io23(input)) return _io23(input);
                    if (_io27(input)) return _io27(input);
                    if (_io44(input)) return _io44(input);
                    return false;
                })();
            })();
            const _iu3 = input => (() => {
                if ("boolean" === input.type) return _io57(input); else if ("number" === input.type) return _io60(input); else if ("integer" === input.type) return _io59(input); else if ("string" === input.type) return _io61(input); else if ("array" === input.type) return _io62(input); else if ("object" === input.type) return _io63(input); else if (undefined !== input.$ref) return _io64(input); else if (undefined !== input.allOf) return _io65(input); else if (undefined !== input.anyOf) return _io66(input); else if (undefined !== input.oneOf) return _io67(input); else if ("null" === input.type) return _io69(input); else return _io70(input);
            })();
            const _iu4 = input => (() => {
                if (undefined !== input["in"]) return _io82(input); else if ("string" === typeof input.$ref && RegExp(/^#\/components\/parameters\/(.*)/).test(input.$ref)) return _io99(input); else if ("string" === typeof input.$ref && RegExp(/^#\/components\/headers\/(.*)/).test(input.$ref)) return _io80(input); else return false;
            })();
            const _iu5 = input => (() => {
                if ("object" === input.type) return _io114(input); else if (Array.isArray(input.type) && input.type.every((elem => "string" === elem || "number" === elem || "boolean" === elem || "object" === elem || "integer" === elem || "array" === elem || "null" === elem))) return _io115(input); else if ("boolean" === input.type) return _io117(input); else if ("number" === input.type) return _io119(input); else if ("integer" === input.type) return _io118(input); else if ("string" === input.type) return _io120(input); else if ("array" === input.type) return _io121(input); else if (undefined !== input.$recursiveRef) return _io123(input); else if ("null" === input.type) return _io128(input); else return (() => {
                    if (undefined !== input["const"]) return _io116(input); else if (undefined !== input.$ref) return _io122(input); else if (undefined !== input.allOf) return _io124(input); else if (undefined !== input.anyOf) return _io125(input); else if (undefined !== input.oneOf) return _io126(input); else return _io129(input);
                })();
            })();
            const _iu6 = input => (() => {
                if (undefined !== input["in"]) return _io132(input); else if ("string" === typeof input.$ref && RegExp(/^#\/components\/parameters\/(.*)/).test(input.$ref)) return _io137(input); else if ("string" === typeof input.$ref && RegExp(/^#\/components\/headers\/(.*)/).test(input.$ref)) return _io136(input); else return false;
            })();
            const _iu7 = input => (() => {
                if (undefined !== input["const"]) return _io175(input); else if ("boolean" === input.type) return _io176(input); else if ("number" === input.type) return _io178(input); else if ("integer" === input.type) return _io177(input); else if ("string" === input.type) return _io179(input); else if (undefined !== input.items) return _io180(input); else if (undefined !== input.prefixItems) return _io181(input); else if ("object" === input.type) return _io182(input); else if (undefined !== input.$ref) return _io183(input); else if (undefined !== input.oneOf) return _io184(input); else if ("null" === input.type) return _io185(input); else return _io186(input);
            })();
            const _iu8 = input => (() => {
                if (undefined !== input["const"]) return _io175(input); else if ("boolean" === input.type) return _io176(input); else if ("number" === input.type) return _io178(input); else if ("integer" === input.type) return _io177(input); else if ("string" === input.type) return _io179(input); else if (undefined !== input.items) return _io180(input); else if (undefined !== input.prefixItems) return _io181(input); else if ("object" === input.type) return _io182(input); else if (undefined !== input.$ref) return _io183(input); else if ("null" === input.type) return _io185(input); else return _io186(input);
            })();
            const _iu9 = input => (() => {
                if ("boolean" === input.type) return _io17(input); else if ("number" === input.type) return _io19(input); else if ("integer" === input.type) return _io18(input); else if ("string" === input.type) return _io20(input); else if ("array" === input.type) return _io21(input); else if ("object" === input.type) return _io22(input); else if (undefined !== input.$ref) return _io23(input); else if (undefined !== input["x-anyOf"]) return _io24(input); else if (undefined !== input["x-oneOf"]) return _io25(input); else if ("null" === input.type) return _io26(input); else if (undefined !== input.schema) return _io28(input); else return _io27(input);
            })();
            const _iu10 = input => (() => {
                if ("apiKey" === input.type) return _io32(input); else if ("basic" === input.type) return _io33(input); else if ("implicit" === input.flow) return _io34(input); else if ("accessCode" === input.flow) return _io36(input); else if ("application" === input.flow) return _io38(input); else if ("password" === input.flow) return _io37(input); else return false;
            })();
            const _iu11 = input => (() => {
                if (undefined !== input.$ref) return _io46(input); else return _io30(input);
            })();
            const _iu12 = input => (() => {
                if (undefined !== input.$ref) return _io77(input); else return _io76(input);
            })();
            const _iu13 = input => (() => {
                if (undefined !== input.schema) return _io79(input); else if (undefined !== input.$ref) return _io80(input); else return false;
            })();
            const _iu14 = input => (() => {
                if ("apiKey" === input.type) return _io86(input); else if ("basic" === input.scheme) return _io87(input); else if ("bearer" === input.scheme) return _io88(input); else if ("oauth2" === input.type) return _io89(input); else if ("openIdConnect" === input.type) return _io94(input); else return false;
            })();
            const _iu15 = input => (() => {
                if (undefined !== input.$ref) return _io101(input); else return _io84(input);
            })();
            const _iu16 = input => (() => {
                if (undefined !== input.$ref) return _io103(input); else return _io72(input);
            })();
            const _iu17 = input => (() => {
                if (undefined !== input.$ref) return _io135(input); else return _io134(input);
            })();
            const _iu18 = input => (() => {
                if (undefined !== input.$ref) return _io142(input); else return _io139(input);
            })();
            const _iu19 = input => (() => {
                if (undefined !== input.$ref) return _io147(input); else return _io144(input);
            })();
            const _iu20 = input => (() => {
                if (undefined !== input.$ref) return _io136(input); else if (undefined !== input.schema) return _io146(input); else return false;
            })();
            const _iu21 = input => (() => {
                if ("apiKey" === input.type) return _io152(input); else if ("basic" === input.scheme) return _io153(input); else if ("bearer" === input.scheme) return _io154(input); else if ("oauth2" === input.type) return _io155(input); else if ("openIdConnect" === input.type) return _io160(input); else return false;
            })();
            const _iu22 = input => (() => {
                if (undefined !== input.$ref) return _io164(input); else return _io131(input);
            })();
            const _iu23 = input => (() => {
                if ("apiKey" === input.type) return _io189(input); else if ("basic" === input.scheme) return _io190(input); else if ("bearer" === input.scheme) return _io191(input); else if ("oauth2" === input.type) return _io192(input); else if ("openIdConnect" === input.type) return _io197(input); else return false;
            })();
            const _iu24 = input => (() => {
                if (undefined !== input.swagger) return _io0(input); else if (null !== input.openapi && undefined !== input.openapi && ("3.0" === input.openapi || "string" === typeof input.openapi && RegExp(/^3\.0\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(input.openapi))) return _io48(input); else if ("string" === typeof input.openapi && RegExp(/^3\.1\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(input.openapi)) return _io105(input); else if (undefined !== input["x-samchon-emended-v4"]) return _io166(input); else return false;
            })();
            const _ao0 = (input, _path, _exceptionable = true) => (null !== input.swagger || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".swagger",
                expected: '("2.0" | `2.0.${number}`)',
                value: input.swagger
            }, _errorFactory)) && (undefined !== input.swagger || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".swagger",
                expected: '("2.0" | `2.0.${number}`)',
                value: input.swagger
            }, _errorFactory)) && ("2.0" === input.swagger || "string" === typeof input.swagger && RegExp(/^2\.0\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(input.swagger) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".swagger",
                expected: '("2.0" | `2.0.${number}`)',
                value: input.swagger
            }, _errorFactory)) && (undefined === input.info || ("object" === typeof input.info && null !== input.info || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".info",
                expected: "(SwaggerV2.IDocument.IInfo | undefined)",
                value: input.info
            }, _errorFactory)) && _ao1(input.info, _path + ".info", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".info",
                expected: "(SwaggerV2.IDocument.IInfo | undefined)",
                value: input.info
            }, _errorFactory)) && (undefined === input.host || "string" === typeof input.host || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".host",
                expected: "(string | undefined)",
                value: input.host
            }, _errorFactory)) && (undefined === input.basePath || "string" === typeof input.basePath || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".basePath",
                expected: "(string | undefined)",
                value: input.basePath
            }, _errorFactory)) && (undefined === input.consumes || (Array.isArray(input.consumes) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".consumes",
                expected: "(Array<string> | undefined)",
                value: input.consumes
            }, _errorFactory)) && input.consumes.every(((elem, _index83) => "string" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".consumes[" + _index83 + "]",
                expected: "string",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".consumes",
                expected: "(Array<string> | undefined)",
                value: input.consumes
            }, _errorFactory)) && (undefined === input.produces || (Array.isArray(input.produces) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".produces",
                expected: "(Array<string> | undefined)",
                value: input.produces
            }, _errorFactory)) && input.produces.every(((elem, _index84) => "string" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".produces[" + _index84 + "]",
                expected: "string",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".produces",
                expected: "(Array<string> | undefined)",
                value: input.produces
            }, _errorFactory)) && (undefined === input.definitions || ("object" === typeof input.definitions && null !== input.definitions && false === Array.isArray(input.definitions) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".definitions",
                expected: "(Record<string, SwaggerV2.IJsonSchema> | undefined)",
                value: input.definitions
            }, _errorFactory)) && _ao4(input.definitions, _path + ".definitions", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".definitions",
                expected: "(Record<string, SwaggerV2.IJsonSchema> | undefined)",
                value: input.definitions
            }, _errorFactory)) && (undefined === input.parameters || ("object" === typeof input.parameters && null !== input.parameters && false === Array.isArray(input.parameters) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".parameters",
                expected: "(Record<string, SwaggerV2.IOperation.IParameter> | undefined)",
                value: input.parameters
            }, _errorFactory)) && _ao16(input.parameters, _path + ".parameters", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".parameters",
                expected: "(Record<string, SwaggerV2.IOperation.IParameter> | undefined)",
                value: input.parameters
            }, _errorFactory)) && (undefined === input.responses || ("object" === typeof input.responses && null !== input.responses && false === Array.isArray(input.responses) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".responses",
                expected: "(Record<string, SwaggerV2.IOperation.IResponse> | undefined)",
                value: input.responses
            }, _errorFactory)) && _ao29(input.responses, _path + ".responses", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".responses",
                expected: "(Record<string, SwaggerV2.IOperation.IResponse> | undefined)",
                value: input.responses
            }, _errorFactory)) && (undefined === input.securityDefinitions || ("object" === typeof input.securityDefinitions && null !== input.securityDefinitions && false === Array.isArray(input.securityDefinitions) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".securityDefinitions",
                expected: "(Record<string, SwaggerV2.ISecurityDefinition> | undefined)",
                value: input.securityDefinitions
            }, _errorFactory)) && _ao31(input.securityDefinitions, _path + ".securityDefinitions", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".securityDefinitions",
                expected: "(Record<string, SwaggerV2.ISecurityDefinition> | undefined)",
                value: input.securityDefinitions
            }, _errorFactory)) && (undefined === input.security || (Array.isArray(input.security) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".security",
                expected: "(Array<Record<string, Array<string>>> | undefined)",
                value: input.security
            }, _errorFactory)) && input.security.every(((elem, _index85) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".security[" + _index85 + "]",
                expected: "Record<string, Array<string>>",
                value: elem
            }, _errorFactory)) && _ao39(elem, _path + ".security[" + _index85 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".security[" + _index85 + "]",
                expected: "Record<string, Array<string>>",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".security",
                expected: "(Array<Record<string, Array<string>>> | undefined)",
                value: input.security
            }, _errorFactory)) && (undefined === input.paths || ("object" === typeof input.paths && null !== input.paths && false === Array.isArray(input.paths) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".paths",
                expected: "(Record<string, SwaggerV2.IPath> | undefined)",
                value: input.paths
            }, _errorFactory)) && _ao40(input.paths, _path + ".paths", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".paths",
                expected: "(Record<string, SwaggerV2.IPath> | undefined)",
                value: input.paths
            }, _errorFactory)) && (undefined === input.tags || (Array.isArray(input.tags) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".tags",
                expected: "(Array<SwaggerV2.IDocument.ITag> | undefined)",
                value: input.tags
            }, _errorFactory)) && input.tags.every(((elem, _index86) => ("object" === typeof elem && null !== elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".tags[" + _index86 + "]",
                expected: "SwaggerV2.IDocument.ITag",
                value: elem
            }, _errorFactory)) && _ao47(elem, _path + ".tags[" + _index86 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".tags[" + _index86 + "]",
                expected: "SwaggerV2.IDocument.ITag",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".tags",
                expected: "(Array<SwaggerV2.IDocument.ITag> | undefined)",
                value: input.tags
            }, _errorFactory));
            const _ao1 = (input, _path, _exceptionable = true) => ("string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "string",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.termsOfService || "string" === typeof input.termsOfService || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".termsOfService",
                expected: "(string | undefined)",
                value: input.termsOfService
            }, _errorFactory)) && (undefined === input.contact || ("object" === typeof input.contact && null !== input.contact && false === Array.isArray(input.contact) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".contact",
                expected: "(SwaggerV2.IDocument.IContact | undefined)",
                value: input.contact
            }, _errorFactory)) && _ao2(input.contact, _path + ".contact", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".contact",
                expected: "(SwaggerV2.IDocument.IContact | undefined)",
                value: input.contact
            }, _errorFactory)) && (undefined === input.license || ("object" === typeof input.license && null !== input.license || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".license",
                expected: "(SwaggerV2.IDocument.ILicense | undefined)",
                value: input.license
            }, _errorFactory)) && _ao3(input.license, _path + ".license", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".license",
                expected: "(SwaggerV2.IDocument.ILicense | undefined)",
                value: input.license
            }, _errorFactory)) && ("string" === typeof input.version || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".version",
                expected: "string",
                value: input.version
            }, _errorFactory));
            const _ao2 = (input, _path, _exceptionable = true) => (undefined === input.name || "string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".name",
                expected: "(string | undefined)",
                value: input.name
            }, _errorFactory)) && (undefined === input.url || "string" === typeof input.url || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".url",
                expected: "(string | undefined)",
                value: input.url
            }, _errorFactory)) && (undefined === input.email || "string" === typeof input.email || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".email",
                expected: "(string | undefined)",
                value: input.email
            }, _errorFactory));
            const _ao3 = (input, _path, _exceptionable = true) => ("string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".name",
                expected: "string",
                value: input.name
            }, _errorFactory)) && (undefined === input.url || "string" === typeof input.url || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".url",
                expected: "(string | undefined)",
                value: input.url
            }, _errorFactory));
            const _ao4 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return ("object" === typeof value && null !== value && false === Array.isArray(value) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown)",
                    value
                }, _errorFactory)) && _au0(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown)",
                    value
                }, _errorFactory);
            }));
            const _ao5 = (input, _path, _exceptionable = true) => (null === input["default"] || undefined === input["default"] || "boolean" === typeof input["default"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["default"]',
                expected: "(boolean | null | undefined)",
                value: input["default"]
            }, _errorFactory)) && (undefined === input["enum"] || (Array.isArray(input["enum"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"]',
                expected: "(Array<boolean | null> | undefined)",
                value: input["enum"]
            }, _errorFactory)) && input["enum"].every(((elem, _index87) => null === elem || "boolean" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"][' + _index87 + "]",
                expected: "(boolean | null)",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"]',
                expected: "(Array<boolean | null> | undefined)",
                value: input["enum"]
            }, _errorFactory)) && ("boolean" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"boolean"',
                value: input.type
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["x-nullable"]',
                expected: "(boolean | undefined)",
                value: input["x-nullable"]
            }, _errorFactory)) && (undefined === input.examples || Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | undefined)",
                value: input.examples
            }, _errorFactory));
            const _ao6 = (input, _path, _exceptionable = true) => (null === input["default"] || undefined === input["default"] || "number" === typeof input["default"] && (Math.floor(input["default"]) === input["default"] && -0x8000000000000000 <= input["default"] && input["default"] <= 0x8000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["default"]',
                expected: 'number & Type<"int64">',
                value: input["default"]
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["default"]',
                expected: '((number & Type<"int64">) | null | undefined)',
                value: input["default"]
            }, _errorFactory)) && (undefined === input["enum"] || (Array.isArray(input["enum"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"]',
                expected: "(Array<number | null> | undefined)",
                value: input["enum"]
            }, _errorFactory)) && input["enum"].every(((elem, _index88) => null === elem || "number" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"][' + _index88 + "]",
                expected: "(null | number)",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"]',
                expected: "(Array<number | null> | undefined)",
                value: input["enum"]
            }, _errorFactory)) && (undefined === input.minimum || "number" === typeof input.minimum && (Math.floor(input.minimum) === input.minimum && -0x8000000000000000 <= input.minimum && input.minimum <= 0x8000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minimum",
                expected: 'number & Type<"int64">',
                value: input.minimum
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minimum",
                expected: '((number & Type<"int64">) | undefined)',
                value: input.minimum
            }, _errorFactory)) && (undefined === input.maximum || "number" === typeof input.maximum && (Math.floor(input.maximum) === input.maximum && -0x8000000000000000 <= input.maximum && input.maximum <= 0x8000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maximum",
                expected: 'number & Type<"int64">',
                value: input.maximum
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maximum",
                expected: '((number & Type<"int64">) | undefined)',
                value: input.maximum
            }, _errorFactory)) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".exclusiveMinimum",
                expected: "(boolean | number | undefined)",
                value: input.exclusiveMinimum
            }, _errorFactory)) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".exclusiveMaximum",
                expected: "(boolean | number | undefined)",
                value: input.exclusiveMaximum
            }, _errorFactory)) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && (Math.floor(input.multipleOf) === input.multipleOf && 0 <= input.multipleOf && input.multipleOf <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".multipleOf",
                expected: 'number & Type<"uint64">',
                value: input.multipleOf
            }, _errorFactory)) && (0 < input.multipleOf || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".multipleOf",
                expected: "number & ExclusiveMinimum<0>",
                value: input.multipleOf
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".multipleOf",
                expected: '((number & Type<"uint64"> & ExclusiveMinimum<0>) | undefined)',
                value: input.multipleOf
            }, _errorFactory)) && ("integer" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"integer"',
                value: input.type
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["x-nullable"]',
                expected: "(boolean | undefined)",
                value: input["x-nullable"]
            }, _errorFactory)) && (undefined === input.examples || Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | undefined)",
                value: input.examples
            }, _errorFactory));
            const _ao7 = (input, _path, _exceptionable = true) => (null === input["default"] || undefined === input["default"] || "number" === typeof input["default"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["default"]',
                expected: "(null | number | undefined)",
                value: input["default"]
            }, _errorFactory)) && (undefined === input["enum"] || (Array.isArray(input["enum"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"]',
                expected: "(Array<number | null> | undefined)",
                value: input["enum"]
            }, _errorFactory)) && input["enum"].every(((elem, _index89) => null === elem || "number" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"][' + _index89 + "]",
                expected: "(null | number)",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"]',
                expected: "(Array<number | null> | undefined)",
                value: input["enum"]
            }, _errorFactory)) && (undefined === input.minimum || "number" === typeof input.minimum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minimum",
                expected: "(number | undefined)",
                value: input.minimum
            }, _errorFactory)) && (undefined === input.maximum || "number" === typeof input.maximum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maximum",
                expected: "(number | undefined)",
                value: input.maximum
            }, _errorFactory)) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".exclusiveMinimum",
                expected: "(boolean | number | undefined)",
                value: input.exclusiveMinimum
            }, _errorFactory)) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".exclusiveMaximum",
                expected: "(boolean | number | undefined)",
                value: input.exclusiveMaximum
            }, _errorFactory)) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && (0 < input.multipleOf || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".multipleOf",
                expected: "number & ExclusiveMinimum<0>",
                value: input.multipleOf
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".multipleOf",
                expected: "((number & ExclusiveMinimum<0>) | undefined)",
                value: input.multipleOf
            }, _errorFactory)) && ("number" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"number"',
                value: input.type
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["x-nullable"]',
                expected: "(boolean | undefined)",
                value: input["x-nullable"]
            }, _errorFactory)) && (undefined === input.examples || Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | undefined)",
                value: input.examples
            }, _errorFactory));
            const _ao8 = (input, _path, _exceptionable = true) => (null === input["default"] || undefined === input["default"] || "string" === typeof input["default"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["default"]',
                expected: "(null | string | undefined)",
                value: input["default"]
            }, _errorFactory)) && (undefined === input["enum"] || (Array.isArray(input["enum"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"]',
                expected: "(Array<string | null> | undefined)",
                value: input["enum"]
            }, _errorFactory)) && input["enum"].every(((elem, _index90) => null === elem || "string" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"][' + _index90 + "]",
                expected: "(null | string)",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"]',
                expected: "(Array<string | null> | undefined)",
                value: input["enum"]
            }, _errorFactory)) && (undefined === input.format || "string" === typeof input.format || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".format",
                expected: "(string | undefined)",
                value: input.format
            }, _errorFactory)) && (undefined === input.pattern || "string" === typeof input.pattern || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".pattern",
                expected: "(string | undefined)",
                value: input.pattern
            }, _errorFactory)) && (undefined === input.minLength || "number" === typeof input.minLength && (Math.floor(input.minLength) === input.minLength && 0 <= input.minLength && input.minLength <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minLength",
                expected: 'number & Type<"uint64">',
                value: input.minLength
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minLength",
                expected: '((number & Type<"uint64">) | undefined)',
                value: input.minLength
            }, _errorFactory)) && (undefined === input.maxLength || "number" === typeof input.maxLength && (Math.floor(input.maxLength) === input.maxLength && 0 <= input.maxLength && input.maxLength <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maxLength",
                expected: 'number & Type<"uint64">',
                value: input.maxLength
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maxLength",
                expected: '((number & Type<"uint64">) | undefined)',
                value: input.maxLength
            }, _errorFactory)) && ("string" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"string"',
                value: input.type
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["x-nullable"]',
                expected: "(boolean | undefined)",
                value: input["x-nullable"]
            }, _errorFactory)) && (undefined === input.examples || Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | undefined)",
                value: input.examples
            }, _errorFactory));
            const _ao9 = (input, _path, _exceptionable = true) => (("object" === typeof input.items && null !== input.items && false === Array.isArray(input.items) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".items",
                expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown)",
                value: input.items
            }, _errorFactory)) && _au0(input.items, _path + ".items", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".items",
                expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown)",
                value: input.items
            }, _errorFactory)) && (undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".uniqueItems",
                expected: "(boolean | undefined)",
                value: input.uniqueItems
            }, _errorFactory)) && (undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minItems",
                expected: 'number & Type<"uint64">',
                value: input.minItems
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minItems",
                expected: '((number & Type<"uint64">) | undefined)',
                value: input.minItems
            }, _errorFactory)) && (undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maxItems",
                expected: 'number & Type<"uint64">',
                value: input.maxItems
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maxItems",
                expected: '((number & Type<"uint64">) | undefined)',
                value: input.maxItems
            }, _errorFactory)) && ("array" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"array"',
                value: input.type
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["x-nullable"]',
                expected: "(boolean | undefined)",
                value: input["x-nullable"]
            }, _errorFactory)) && (undefined === input.examples || Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | undefined)",
                value: input.examples
            }, _errorFactory));
            const _ao10 = (input, _path, _exceptionable = true) => (undefined === input.properties || ("object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".properties",
                expected: "(Record<string, SwaggerV2.IJsonSchema> | undefined)",
                value: input.properties
            }, _errorFactory)) && _ao4(input.properties, _path + ".properties", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".properties",
                expected: "(Record<string, SwaggerV2.IJsonSchema> | undefined)",
                value: input.properties
            }, _errorFactory)) && (undefined === input.required || (Array.isArray(input.required) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".required",
                expected: "(Array<string> | undefined)",
                value: input.required
            }, _errorFactory)) && input.required.every(((elem, _index91) => "string" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".required[" + _index91 + "]",
                expected: "string",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".required",
                expected: "(Array<string> | undefined)",
                value: input.required
            }, _errorFactory)) && ((null !== input.additionalProperties || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".additionalProperties",
                expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown | boolean | undefined)",
                value: input.additionalProperties
            }, _errorFactory)) && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || ("object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".additionalProperties",
                expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown | boolean | undefined)",
                value: input.additionalProperties
            }, _errorFactory)) && _au0(input.additionalProperties, _path + ".additionalProperties", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".additionalProperties",
                expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown | boolean | undefined)",
                value: input.additionalProperties
            }, _errorFactory))) && (undefined === input.maxProperties || "number" === typeof input.maxProperties || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maxProperties",
                expected: "(number | undefined)",
                value: input.maxProperties
            }, _errorFactory)) && (undefined === input.minProperties || "number" === typeof input.minProperties || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minProperties",
                expected: "(number | undefined)",
                value: input.minProperties
            }, _errorFactory)) && ("object" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"object"',
                value: input.type
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["x-nullable"]',
                expected: "(boolean | undefined)",
                value: input["x-nullable"]
            }, _errorFactory)) && (undefined === input.examples || Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | undefined)",
                value: input.examples
            }, _errorFactory));
            const _ao11 = (input, _path, _exceptionable = true) => ("string" === typeof input.$ref || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".$ref",
                expected: "string",
                value: input.$ref
            }, _errorFactory)) && (undefined === input.examples || Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true;
            const _ao12 = (input, _path, _exceptionable = true) => ((Array.isArray(input["x-anyOf"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["x-anyOf"]',
                expected: "Array<SwaggerV2.IJsonSchema>",
                value: input["x-anyOf"]
            }, _errorFactory)) && input["x-anyOf"].every(((elem, _index92) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["x-anyOf"][' + _index92 + "]",
                expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory)) && _au0(elem, _path + '["x-anyOf"][' + _index92 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["x-anyOf"][' + _index92 + "]",
                expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["x-anyOf"]',
                expected: "Array<SwaggerV2.IJsonSchema>",
                value: input["x-anyOf"]
            }, _errorFactory)) && (undefined === input.examples || Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true;
            const _ao13 = (input, _path, _exceptionable = true) => ((Array.isArray(input["x-oneOf"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["x-oneOf"]',
                expected: "Array<SwaggerV2.IJsonSchema>",
                value: input["x-oneOf"]
            }, _errorFactory)) && input["x-oneOf"].every(((elem, _index93) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["x-oneOf"][' + _index93 + "]",
                expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory)) && _au0(elem, _path + '["x-oneOf"][' + _index93 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["x-oneOf"][' + _index93 + "]",
                expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["x-oneOf"]',
                expected: "Array<SwaggerV2.IJsonSchema>",
                value: input["x-oneOf"]
            }, _errorFactory)) && (undefined === input.examples || Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true;
            const _ao14 = (input, _path, _exceptionable = true) => ("null" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"null"',
                value: input.type
            }, _errorFactory)) && (null === input["default"] || undefined === input["default"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["default"]',
                expected: "(null | undefined)",
                value: input["default"]
            }, _errorFactory)) && (undefined === input.examples || Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true;
            const _ao15 = (input, _path, _exceptionable = true) => (null !== input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: "undefined",
                value: input.type
            }, _errorFactory)) && (undefined === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: "undefined",
                value: input.type
            }, _errorFactory)) && (undefined === input.examples || Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true;
            const _ao16 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return ("object" === typeof value && null !== value || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "(IAnyOf & { name: string; in: string; description?: string | undefined; } | IArray & { name: string; in: string; description?: string | undefined; } | IBoolean & { name: string; in: string; description?: string | undefined; } | IInteger & { name: string; in: string; description?: string | undefined; } | INullOnly & { name: string; in: string; description?: string | undefined; } | INumber & { name: string; in: string; description?: string | undefined; } | IObject & { name: string; in: string; description?: string | undefined; } | IOneOf & { name: string; in: string; description?: string | undefined; } | IReference<string> & { name: string; in: string; description?: string | undefined; } | IString & { name: string; in: string; description?: string | undefined; } | IUnknown & { name: string; in: string; description?: string | undefined; } | SwaggerV2.IOperation.IBodyParameter)",
                    value
                }, _errorFactory)) && _au9(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "(IAnyOf & { name: string; in: string; description?: string | undefined; } | IArray & { name: string; in: string; description?: string | undefined; } | IBoolean & { name: string; in: string; description?: string | undefined; } | IInteger & { name: string; in: string; description?: string | undefined; } | INullOnly & { name: string; in: string; description?: string | undefined; } | INumber & { name: string; in: string; description?: string | undefined; } | IObject & { name: string; in: string; description?: string | undefined; } | IOneOf & { name: string; in: string; description?: string | undefined; } | IReference<string> & { name: string; in: string; description?: string | undefined; } | IString & { name: string; in: string; description?: string | undefined; } | IUnknown & { name: string; in: string; description?: string | undefined; } | SwaggerV2.IOperation.IBodyParameter)",
                    value
                }, _errorFactory);
            }));
            const _ao17 = (input, _path, _exceptionable = true) => (null === input["default"] || undefined === input["default"] || "boolean" === typeof input["default"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["default"]',
                expected: "(boolean | null | undefined)",
                value: input["default"]
            }, _errorFactory)) && (undefined === input["enum"] || (Array.isArray(input["enum"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"]',
                expected: "(Array<boolean | null> | undefined)",
                value: input["enum"]
            }, _errorFactory)) && input["enum"].every(((elem, _index94) => null === elem || "boolean" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"][' + _index94 + "]",
                expected: "(boolean | null)",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"]',
                expected: "(Array<boolean | null> | undefined)",
                value: input["enum"]
            }, _errorFactory)) && ("boolean" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"boolean"',
                value: input.type
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["x-nullable"]',
                expected: "(boolean | undefined)",
                value: input["x-nullable"]
            }, _errorFactory)) && (undefined === input.examples || Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | undefined)",
                value: input.examples
            }, _errorFactory)) && ("string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".name",
                expected: "string",
                value: input.name
            }, _errorFactory)) && ("string" === typeof input["in"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["in"]',
                expected: "string",
                value: input["in"]
            }, _errorFactory));
            const _ao18 = (input, _path, _exceptionable = true) => (null === input["default"] || undefined === input["default"] || "number" === typeof input["default"] && (Math.floor(input["default"]) === input["default"] && -0x8000000000000000 <= input["default"] && input["default"] <= 0x8000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["default"]',
                expected: 'number & Type<"int64">',
                value: input["default"]
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["default"]',
                expected: '((number & Type<"int64">) | null | undefined)',
                value: input["default"]
            }, _errorFactory)) && (undefined === input["enum"] || (Array.isArray(input["enum"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"]',
                expected: "(Array<number | null> | undefined)",
                value: input["enum"]
            }, _errorFactory)) && input["enum"].every(((elem, _index95) => null === elem || "number" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"][' + _index95 + "]",
                expected: "(null | number)",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"]',
                expected: "(Array<number | null> | undefined)",
                value: input["enum"]
            }, _errorFactory)) && (undefined === input.minimum || "number" === typeof input.minimum && (Math.floor(input.minimum) === input.minimum && -0x8000000000000000 <= input.minimum && input.minimum <= 0x8000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minimum",
                expected: 'number & Type<"int64">',
                value: input.minimum
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minimum",
                expected: '((number & Type<"int64">) | undefined)',
                value: input.minimum
            }, _errorFactory)) && (undefined === input.maximum || "number" === typeof input.maximum && (Math.floor(input.maximum) === input.maximum && -0x8000000000000000 <= input.maximum && input.maximum <= 0x8000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maximum",
                expected: 'number & Type<"int64">',
                value: input.maximum
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maximum",
                expected: '((number & Type<"int64">) | undefined)',
                value: input.maximum
            }, _errorFactory)) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".exclusiveMinimum",
                expected: "(boolean | number | undefined)",
                value: input.exclusiveMinimum
            }, _errorFactory)) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".exclusiveMaximum",
                expected: "(boolean | number | undefined)",
                value: input.exclusiveMaximum
            }, _errorFactory)) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && (Math.floor(input.multipleOf) === input.multipleOf && 0 <= input.multipleOf && input.multipleOf <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".multipleOf",
                expected: 'number & Type<"uint64">',
                value: input.multipleOf
            }, _errorFactory)) && (0 < input.multipleOf || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".multipleOf",
                expected: "number & ExclusiveMinimum<0>",
                value: input.multipleOf
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".multipleOf",
                expected: '((number & Type<"uint64"> & ExclusiveMinimum<0>) | undefined)',
                value: input.multipleOf
            }, _errorFactory)) && ("integer" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"integer"',
                value: input.type
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["x-nullable"]',
                expected: "(boolean | undefined)",
                value: input["x-nullable"]
            }, _errorFactory)) && (undefined === input.examples || Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | undefined)",
                value: input.examples
            }, _errorFactory)) && ("string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".name",
                expected: "string",
                value: input.name
            }, _errorFactory)) && ("string" === typeof input["in"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["in"]',
                expected: "string",
                value: input["in"]
            }, _errorFactory));
            const _ao19 = (input, _path, _exceptionable = true) => (null === input["default"] || undefined === input["default"] || "number" === typeof input["default"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["default"]',
                expected: "(null | number | undefined)",
                value: input["default"]
            }, _errorFactory)) && (undefined === input["enum"] || (Array.isArray(input["enum"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"]',
                expected: "(Array<number | null> | undefined)",
                value: input["enum"]
            }, _errorFactory)) && input["enum"].every(((elem, _index96) => null === elem || "number" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"][' + _index96 + "]",
                expected: "(null | number)",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"]',
                expected: "(Array<number | null> | undefined)",
                value: input["enum"]
            }, _errorFactory)) && (undefined === input.minimum || "number" === typeof input.minimum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minimum",
                expected: "(number | undefined)",
                value: input.minimum
            }, _errorFactory)) && (undefined === input.maximum || "number" === typeof input.maximum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maximum",
                expected: "(number | undefined)",
                value: input.maximum
            }, _errorFactory)) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".exclusiveMinimum",
                expected: "(boolean | number | undefined)",
                value: input.exclusiveMinimum
            }, _errorFactory)) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".exclusiveMaximum",
                expected: "(boolean | number | undefined)",
                value: input.exclusiveMaximum
            }, _errorFactory)) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && (0 < input.multipleOf || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".multipleOf",
                expected: "number & ExclusiveMinimum<0>",
                value: input.multipleOf
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".multipleOf",
                expected: "((number & ExclusiveMinimum<0>) | undefined)",
                value: input.multipleOf
            }, _errorFactory)) && ("number" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"number"',
                value: input.type
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["x-nullable"]',
                expected: "(boolean | undefined)",
                value: input["x-nullable"]
            }, _errorFactory)) && (undefined === input.examples || Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | undefined)",
                value: input.examples
            }, _errorFactory)) && ("string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".name",
                expected: "string",
                value: input.name
            }, _errorFactory)) && ("string" === typeof input["in"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["in"]',
                expected: "string",
                value: input["in"]
            }, _errorFactory));
            const _ao20 = (input, _path, _exceptionable = true) => (null === input["default"] || undefined === input["default"] || "string" === typeof input["default"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["default"]',
                expected: "(null | string | undefined)",
                value: input["default"]
            }, _errorFactory)) && (undefined === input["enum"] || (Array.isArray(input["enum"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"]',
                expected: "(Array<string | null> | undefined)",
                value: input["enum"]
            }, _errorFactory)) && input["enum"].every(((elem, _index97) => null === elem || "string" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"][' + _index97 + "]",
                expected: "(null | string)",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"]',
                expected: "(Array<string | null> | undefined)",
                value: input["enum"]
            }, _errorFactory)) && (undefined === input.format || "string" === typeof input.format || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".format",
                expected: "(string | undefined)",
                value: input.format
            }, _errorFactory)) && (undefined === input.pattern || "string" === typeof input.pattern || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".pattern",
                expected: "(string | undefined)",
                value: input.pattern
            }, _errorFactory)) && (undefined === input.minLength || "number" === typeof input.minLength && (Math.floor(input.minLength) === input.minLength && 0 <= input.minLength && input.minLength <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minLength",
                expected: 'number & Type<"uint64">',
                value: input.minLength
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minLength",
                expected: '((number & Type<"uint64">) | undefined)',
                value: input.minLength
            }, _errorFactory)) && (undefined === input.maxLength || "number" === typeof input.maxLength && (Math.floor(input.maxLength) === input.maxLength && 0 <= input.maxLength && input.maxLength <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maxLength",
                expected: 'number & Type<"uint64">',
                value: input.maxLength
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maxLength",
                expected: '((number & Type<"uint64">) | undefined)',
                value: input.maxLength
            }, _errorFactory)) && ("string" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"string"',
                value: input.type
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["x-nullable"]',
                expected: "(boolean | undefined)",
                value: input["x-nullable"]
            }, _errorFactory)) && (undefined === input.examples || Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | undefined)",
                value: input.examples
            }, _errorFactory)) && ("string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".name",
                expected: "string",
                value: input.name
            }, _errorFactory)) && ("string" === typeof input["in"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["in"]',
                expected: "string",
                value: input["in"]
            }, _errorFactory));
            const _ao21 = (input, _path, _exceptionable = true) => (("object" === typeof input.items && null !== input.items && false === Array.isArray(input.items) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".items",
                expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown)",
                value: input.items
            }, _errorFactory)) && _au0(input.items, _path + ".items", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".items",
                expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown)",
                value: input.items
            }, _errorFactory)) && (undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".uniqueItems",
                expected: "(boolean | undefined)",
                value: input.uniqueItems
            }, _errorFactory)) && (undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minItems",
                expected: 'number & Type<"uint64">',
                value: input.minItems
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minItems",
                expected: '((number & Type<"uint64">) | undefined)',
                value: input.minItems
            }, _errorFactory)) && (undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maxItems",
                expected: 'number & Type<"uint64">',
                value: input.maxItems
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maxItems",
                expected: '((number & Type<"uint64">) | undefined)',
                value: input.maxItems
            }, _errorFactory)) && ("array" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"array"',
                value: input.type
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["x-nullable"]',
                expected: "(boolean | undefined)",
                value: input["x-nullable"]
            }, _errorFactory)) && (undefined === input.examples || Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | undefined)",
                value: input.examples
            }, _errorFactory)) && ("string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".name",
                expected: "string",
                value: input.name
            }, _errorFactory)) && ("string" === typeof input["in"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["in"]',
                expected: "string",
                value: input["in"]
            }, _errorFactory));
            const _ao22 = (input, _path, _exceptionable = true) => (undefined === input.properties || ("object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".properties",
                expected: "(Record<string, SwaggerV2.IJsonSchema> | undefined)",
                value: input.properties
            }, _errorFactory)) && _ao4(input.properties, _path + ".properties", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".properties",
                expected: "(Record<string, SwaggerV2.IJsonSchema> | undefined)",
                value: input.properties
            }, _errorFactory)) && (undefined === input.required || (Array.isArray(input.required) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".required",
                expected: "(Array<string> | undefined)",
                value: input.required
            }, _errorFactory)) && input.required.every(((elem, _index98) => "string" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".required[" + _index98 + "]",
                expected: "string",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".required",
                expected: "(Array<string> | undefined)",
                value: input.required
            }, _errorFactory)) && ((null !== input.additionalProperties || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".additionalProperties",
                expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown | boolean | undefined)",
                value: input.additionalProperties
            }, _errorFactory)) && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || ("object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".additionalProperties",
                expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown | boolean | undefined)",
                value: input.additionalProperties
            }, _errorFactory)) && _au0(input.additionalProperties, _path + ".additionalProperties", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".additionalProperties",
                expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown | boolean | undefined)",
                value: input.additionalProperties
            }, _errorFactory))) && (undefined === input.maxProperties || "number" === typeof input.maxProperties || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maxProperties",
                expected: "(number | undefined)",
                value: input.maxProperties
            }, _errorFactory)) && (undefined === input.minProperties || "number" === typeof input.minProperties || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minProperties",
                expected: "(number | undefined)",
                value: input.minProperties
            }, _errorFactory)) && ("object" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"object"',
                value: input.type
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["x-nullable"]',
                expected: "(boolean | undefined)",
                value: input["x-nullable"]
            }, _errorFactory)) && (undefined === input.examples || Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | undefined)",
                value: input.examples
            }, _errorFactory)) && ("string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".name",
                expected: "string",
                value: input.name
            }, _errorFactory)) && ("string" === typeof input["in"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["in"]',
                expected: "string",
                value: input["in"]
            }, _errorFactory));
            const _ao23 = (input, _path, _exceptionable = true) => ("string" === typeof input.$ref || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".$ref",
                expected: "string",
                value: input.$ref
            }, _errorFactory)) && (undefined === input.examples || Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && ("string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".name",
                expected: "string",
                value: input.name
            }, _errorFactory)) && ("string" === typeof input["in"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["in"]',
                expected: "string",
                value: input["in"]
            }, _errorFactory));
            const _ao24 = (input, _path, _exceptionable = true) => ((Array.isArray(input["x-anyOf"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["x-anyOf"]',
                expected: "Array<SwaggerV2.IJsonSchema>",
                value: input["x-anyOf"]
            }, _errorFactory)) && input["x-anyOf"].every(((elem, _index99) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["x-anyOf"][' + _index99 + "]",
                expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory)) && _au0(elem, _path + '["x-anyOf"][' + _index99 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["x-anyOf"][' + _index99 + "]",
                expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["x-anyOf"]',
                expected: "Array<SwaggerV2.IJsonSchema>",
                value: input["x-anyOf"]
            }, _errorFactory)) && (undefined === input.examples || Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && ("string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".name",
                expected: "string",
                value: input.name
            }, _errorFactory)) && ("string" === typeof input["in"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["in"]',
                expected: "string",
                value: input["in"]
            }, _errorFactory));
            const _ao25 = (input, _path, _exceptionable = true) => ((Array.isArray(input["x-oneOf"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["x-oneOf"]',
                expected: "Array<SwaggerV2.IJsonSchema>",
                value: input["x-oneOf"]
            }, _errorFactory)) && input["x-oneOf"].every(((elem, _index100) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["x-oneOf"][' + _index100 + "]",
                expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory)) && _au0(elem, _path + '["x-oneOf"][' + _index100 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["x-oneOf"][' + _index100 + "]",
                expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["x-oneOf"]',
                expected: "Array<SwaggerV2.IJsonSchema>",
                value: input["x-oneOf"]
            }, _errorFactory)) && (undefined === input.examples || Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && ("string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".name",
                expected: "string",
                value: input.name
            }, _errorFactory)) && ("string" === typeof input["in"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["in"]',
                expected: "string",
                value: input["in"]
            }, _errorFactory));
            const _ao26 = (input, _path, _exceptionable = true) => ("null" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"null"',
                value: input.type
            }, _errorFactory)) && (null === input["default"] || undefined === input["default"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["default"]',
                expected: "(null | undefined)",
                value: input["default"]
            }, _errorFactory)) && (undefined === input.examples || Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && ("string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".name",
                expected: "string",
                value: input.name
            }, _errorFactory)) && ("string" === typeof input["in"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["in"]',
                expected: "string",
                value: input["in"]
            }, _errorFactory));
            const _ao27 = (input, _path, _exceptionable = true) => (null !== input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: "undefined",
                value: input.type
            }, _errorFactory)) && (undefined === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: "undefined",
                value: input.type
            }, _errorFactory)) && (undefined === input.examples || Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && ("string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".name",
                expected: "string",
                value: input.name
            }, _errorFactory)) && ("string" === typeof input["in"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["in"]',
                expected: "string",
                value: input["in"]
            }, _errorFactory));
            const _ao28 = (input, _path, _exceptionable = true) => (("object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".schema",
                expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown)",
                value: input.schema
            }, _errorFactory)) && _au0(input.schema, _path + ".schema", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".schema",
                expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown)",
                value: input.schema
            }, _errorFactory)) && ("string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".name",
                expected: "string",
                value: input.name
            }, _errorFactory)) && ("string" === typeof input["in"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["in"]',
                expected: "string",
                value: input["in"]
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.required || "boolean" === typeof input.required || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".required",
                expected: "(boolean | undefined)",
                value: input.required
            }, _errorFactory));
            const _ao29 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return ("object" === typeof value && null !== value && false === Array.isArray(value) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "SwaggerV2.IOperation.IResponse",
                    value
                }, _errorFactory)) && _ao30(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "SwaggerV2.IOperation.IResponse",
                    value
                }, _errorFactory);
            }));
            const _ao30 = (input, _path, _exceptionable = true) => (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.headers || ("object" === typeof input.headers && null !== input.headers && false === Array.isArray(input.headers) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".headers",
                expected: "(Record<string, SwaggerV2.IJsonSchema> | undefined)",
                value: input.headers
            }, _errorFactory)) && _ao4(input.headers, _path + ".headers", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".headers",
                expected: "(Record<string, SwaggerV2.IJsonSchema> | undefined)",
                value: input.headers
            }, _errorFactory)) && (undefined === input.schema || ("object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".schema",
                expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown | undefined)",
                value: input.schema
            }, _errorFactory)) && _au0(input.schema, _path + ".schema", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".schema",
                expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown | undefined)",
                value: input.schema
            }, _errorFactory)) && true;
            const _ao31 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return ("object" === typeof value && null !== value || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "(SwaggerV2.ISecurityDefinition.IApiKey | SwaggerV2.ISecurityDefinition.IBasic | SwaggerV2.ISecurityDefinition.IOauth2AccessCode | SwaggerV2.ISecurityDefinition.IOauth2Application | SwaggerV2.ISecurityDefinition.IOauth2Implicit | SwaggerV2.ISecurityDefinition.IOauth2Password)",
                    value
                }, _errorFactory)) && _au10(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "(SwaggerV2.ISecurityDefinition.IApiKey | SwaggerV2.ISecurityDefinition.IBasic | SwaggerV2.ISecurityDefinition.IOauth2AccessCode | SwaggerV2.ISecurityDefinition.IOauth2Application | SwaggerV2.ISecurityDefinition.IOauth2Implicit | SwaggerV2.ISecurityDefinition.IOauth2Password)",
                    value
                }, _errorFactory);
            }));
            const _ao32 = (input, _path, _exceptionable = true) => ("apiKey" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"apiKey"',
                value: input.type
            }, _errorFactory)) && (undefined === input["in"] || "query" === input["in"] || "header" === input["in"] || "cookie" === input["in"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["in"]',
                expected: '("cookie" | "header" | "query" | undefined)',
                value: input["in"]
            }, _errorFactory)) && (undefined === input.name || "string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".name",
                expected: "(string | undefined)",
                value: input.name
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory));
            const _ao33 = (input, _path, _exceptionable = true) => ("basic" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"basic"',
                value: input.type
            }, _errorFactory)) && (undefined === input.name || "string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".name",
                expected: "(string | undefined)",
                value: input.name
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory));
            const _ao34 = (input, _path, _exceptionable = true) => ("oauth2" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"oauth2"',
                value: input.type
            }, _errorFactory)) && ("implicit" === input.flow || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".flow",
                expected: '"implicit"',
                value: input.flow
            }, _errorFactory)) && (undefined === input.authorizationUrl || "string" === typeof input.authorizationUrl || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".authorizationUrl",
                expected: "(string | undefined)",
                value: input.authorizationUrl
            }, _errorFactory)) && (undefined === input.scopes || ("object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".scopes",
                expected: "(Record<string, string> | undefined)",
                value: input.scopes
            }, _errorFactory)) && _ao35(input.scopes, _path + ".scopes", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".scopes",
                expected: "(Record<string, string> | undefined)",
                value: input.scopes
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory));
            const _ao35 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return "string" === typeof value || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "string",
                    value
                }, _errorFactory);
            }));
            const _ao36 = (input, _path, _exceptionable = true) => ("oauth2" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"oauth2"',
                value: input.type
            }, _errorFactory)) && ("accessCode" === input.flow || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".flow",
                expected: '"accessCode"',
                value: input.flow
            }, _errorFactory)) && (undefined === input.authorizationUrl || "string" === typeof input.authorizationUrl || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".authorizationUrl",
                expected: "(string | undefined)",
                value: input.authorizationUrl
            }, _errorFactory)) && (undefined === input.tokenUrl || "string" === typeof input.tokenUrl || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".tokenUrl",
                expected: "(string | undefined)",
                value: input.tokenUrl
            }, _errorFactory)) && (undefined === input.scopes || ("object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".scopes",
                expected: "(Record<string, string> | undefined)",
                value: input.scopes
            }, _errorFactory)) && _ao35(input.scopes, _path + ".scopes", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".scopes",
                expected: "(Record<string, string> | undefined)",
                value: input.scopes
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory));
            const _ao37 = (input, _path, _exceptionable = true) => ("oauth2" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"oauth2"',
                value: input.type
            }, _errorFactory)) && ("password" === input.flow || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".flow",
                expected: '"password"',
                value: input.flow
            }, _errorFactory)) && (undefined === input.tokenUrl || "string" === typeof input.tokenUrl || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".tokenUrl",
                expected: "(string | undefined)",
                value: input.tokenUrl
            }, _errorFactory)) && (undefined === input.scopes || ("object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".scopes",
                expected: "(Record<string, string> | undefined)",
                value: input.scopes
            }, _errorFactory)) && _ao35(input.scopes, _path + ".scopes", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".scopes",
                expected: "(Record<string, string> | undefined)",
                value: input.scopes
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory));
            const _ao38 = (input, _path, _exceptionable = true) => ("oauth2" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"oauth2"',
                value: input.type
            }, _errorFactory)) && ("application" === input.flow || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".flow",
                expected: '"application"',
                value: input.flow
            }, _errorFactory)) && (undefined === input.tokenUrl || "string" === typeof input.tokenUrl || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".tokenUrl",
                expected: "(string | undefined)",
                value: input.tokenUrl
            }, _errorFactory)) && (undefined === input.scopes || ("object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".scopes",
                expected: "(Record<string, string> | undefined)",
                value: input.scopes
            }, _errorFactory)) && _ao35(input.scopes, _path + ".scopes", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".scopes",
                expected: "(Record<string, string> | undefined)",
                value: input.scopes
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory));
            const _ao39 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return (Array.isArray(value) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "Array<string>",
                    value
                }, _errorFactory)) && value.every(((elem, _index101) => "string" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key) + "[" + _index101 + "]",
                    expected: "string",
                    value: elem
                }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "Array<string>",
                    value
                }, _errorFactory);
            }));
            const _ao40 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return ("object" === typeof value && null !== value && false === Array.isArray(value) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "SwaggerV2.IPath",
                    value
                }, _errorFactory)) && _ao41(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "SwaggerV2.IPath",
                    value
                }, _errorFactory);
            }));
            const _ao41 = (input, _path, _exceptionable = true) => (undefined === input.parameters || (Array.isArray(input.parameters) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".parameters",
                expected: "(Array<IParameter | IReference<`#/parameters/${string}`>> | undefined)",
                value: input.parameters
            }, _errorFactory)) && input.parameters.every(((elem, _index102) => ("object" === typeof elem && null !== elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".parameters[" + _index102 + "]",
                expected: "(IAnyOf & { name: string; in: string; description?: string | undefined; } | IArray & { name: string; in: string; description?: string | undefined; } | IBoolean & { name: string; in: string; description?: string | undefined; } | IInteger & { name: string; in: string; description?: string | undefined; } | INullOnly & { name: string; in: string; description?: string | undefined; } | INumber & { name: string; in: string; description?: string | undefined; } | IObject & { name: string; in: string; description?: string | undefined; } | IOneOf & { name: string; in: string; description?: string | undefined; } | IReference<string> & { name: string; in: string; description?: string | undefined; } | IString & { name: string; in: string; description?: string | undefined; } | IUnknown & { name: string; in: string; description?: string | undefined; } | SwaggerV2.IJsonSchema.IReference<`#/parameters/${string}`> | SwaggerV2.IOperation.IBodyParameter)",
                value: elem
            }, _errorFactory)) && _au1(elem, _path + ".parameters[" + _index102 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".parameters[" + _index102 + "]",
                expected: "(IAnyOf & { name: string; in: string; description?: string | undefined; } | IArray & { name: string; in: string; description?: string | undefined; } | IBoolean & { name: string; in: string; description?: string | undefined; } | IInteger & { name: string; in: string; description?: string | undefined; } | INullOnly & { name: string; in: string; description?: string | undefined; } | INumber & { name: string; in: string; description?: string | undefined; } | IObject & { name: string; in: string; description?: string | undefined; } | IOneOf & { name: string; in: string; description?: string | undefined; } | IReference<string> & { name: string; in: string; description?: string | undefined; } | IString & { name: string; in: string; description?: string | undefined; } | IUnknown & { name: string; in: string; description?: string | undefined; } | SwaggerV2.IJsonSchema.IReference<`#/parameters/${string}`> | SwaggerV2.IOperation.IBodyParameter)",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".parameters",
                expected: "(Array<IParameter | IReference<`#/parameters/${string}`>> | undefined)",
                value: input.parameters
            }, _errorFactory)) && (undefined === input.options || ("object" === typeof input.options && null !== input.options && false === Array.isArray(input.options) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".options",
                expected: "(SwaggerV2.IOperation | undefined)",
                value: input.options
            }, _errorFactory)) && _ao43(input.options, _path + ".options", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".options",
                expected: "(SwaggerV2.IOperation | undefined)",
                value: input.options
            }, _errorFactory)) && (undefined === input.get || ("object" === typeof input.get && null !== input.get && false === Array.isArray(input.get) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".get",
                expected: "(SwaggerV2.IOperation | undefined)",
                value: input.get
            }, _errorFactory)) && _ao43(input.get, _path + ".get", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".get",
                expected: "(SwaggerV2.IOperation | undefined)",
                value: input.get
            }, _errorFactory)) && (undefined === input.post || ("object" === typeof input.post && null !== input.post && false === Array.isArray(input.post) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".post",
                expected: "(SwaggerV2.IOperation | undefined)",
                value: input.post
            }, _errorFactory)) && _ao43(input.post, _path + ".post", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".post",
                expected: "(SwaggerV2.IOperation | undefined)",
                value: input.post
            }, _errorFactory)) && (undefined === input.patch || ("object" === typeof input.patch && null !== input.patch && false === Array.isArray(input.patch) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".patch",
                expected: "(SwaggerV2.IOperation | undefined)",
                value: input.patch
            }, _errorFactory)) && _ao43(input.patch, _path + ".patch", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".patch",
                expected: "(SwaggerV2.IOperation | undefined)",
                value: input.patch
            }, _errorFactory)) && (undefined === input.put || ("object" === typeof input.put && null !== input.put && false === Array.isArray(input.put) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".put",
                expected: "(SwaggerV2.IOperation | undefined)",
                value: input.put
            }, _errorFactory)) && _ao43(input.put, _path + ".put", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".put",
                expected: "(SwaggerV2.IOperation | undefined)",
                value: input.put
            }, _errorFactory)) && (undefined === input["delete"] || ("object" === typeof input["delete"] && null !== input["delete"] && false === Array.isArray(input["delete"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["delete"]',
                expected: "(SwaggerV2.IOperation | undefined)",
                value: input["delete"]
            }, _errorFactory)) && _ao43(input["delete"], _path + '["delete"]', _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["delete"]',
                expected: "(SwaggerV2.IOperation | undefined)",
                value: input["delete"]
            }, _errorFactory)) && (undefined === input.head || ("object" === typeof input.head && null !== input.head && false === Array.isArray(input.head) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".head",
                expected: "(SwaggerV2.IOperation | undefined)",
                value: input.head
            }, _errorFactory)) && _ao43(input.head, _path + ".head", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".head",
                expected: "(SwaggerV2.IOperation | undefined)",
                value: input.head
            }, _errorFactory)) && (undefined === input.trace || ("object" === typeof input.trace && null !== input.trace && false === Array.isArray(input.trace) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".trace",
                expected: "(SwaggerV2.IOperation | undefined)",
                value: input.trace
            }, _errorFactory)) && _ao43(input.trace, _path + ".trace", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".trace",
                expected: "(SwaggerV2.IOperation | undefined)",
                value: input.trace
            }, _errorFactory));
            const _ao42 = (input, _path, _exceptionable = true) => ("string" === typeof input.$ref && RegExp(/^#\/parameters\/(.*)/).test(input.$ref) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".$ref",
                expected: "`#/parameters/${string}`",
                value: input.$ref
            }, _errorFactory)) && (undefined === input.examples || Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true;
            const _ao43 = (input, _path, _exceptionable = true) => (undefined === input.operationId || "string" === typeof input.operationId || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".operationId",
                expected: "(string | undefined)",
                value: input.operationId
            }, _errorFactory)) && (undefined === input.parameters || (Array.isArray(input.parameters) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".parameters",
                expected: "(Array<IParameter | IReference<`#/definitions/parameters/${string}`>> | undefined)",
                value: input.parameters
            }, _errorFactory)) && input.parameters.every(((elem, _index103) => ("object" === typeof elem && null !== elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".parameters[" + _index103 + "]",
                expected: "(IAnyOf & { name: string; in: string; description?: string | undefined; } | IArray & { name: string; in: string; description?: string | undefined; } | IBoolean & { name: string; in: string; description?: string | undefined; } | IInteger & { name: string; in: string; description?: string | undefined; } | INullOnly & { name: string; in: string; description?: string | undefined; } | INumber & { name: string; in: string; description?: string | undefined; } | IObject & { name: string; in: string; description?: string | undefined; } | IOneOf & { name: string; in: string; description?: string | undefined; } | IReference<string> & { name: string; in: string; description?: string | undefined; } | IString & { name: string; in: string; description?: string | undefined; } | IUnknown & { name: string; in: string; description?: string | undefined; } | SwaggerV2.IJsonSchema.IReference<`#/definitions/parameters/${string}`> | SwaggerV2.IOperation.IBodyParameter)",
                value: elem
            }, _errorFactory)) && _au2(elem, _path + ".parameters[" + _index103 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".parameters[" + _index103 + "]",
                expected: "(IAnyOf & { name: string; in: string; description?: string | undefined; } | IArray & { name: string; in: string; description?: string | undefined; } | IBoolean & { name: string; in: string; description?: string | undefined; } | IInteger & { name: string; in: string; description?: string | undefined; } | INullOnly & { name: string; in: string; description?: string | undefined; } | INumber & { name: string; in: string; description?: string | undefined; } | IObject & { name: string; in: string; description?: string | undefined; } | IOneOf & { name: string; in: string; description?: string | undefined; } | IReference<string> & { name: string; in: string; description?: string | undefined; } | IString & { name: string; in: string; description?: string | undefined; } | IUnknown & { name: string; in: string; description?: string | undefined; } | SwaggerV2.IJsonSchema.IReference<`#/definitions/parameters/${string}`> | SwaggerV2.IOperation.IBodyParameter)",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".parameters",
                expected: "(Array<IParameter | IReference<`#/definitions/parameters/${string}`>> | undefined)",
                value: input.parameters
            }, _errorFactory)) && (undefined === input.responses || ("object" === typeof input.responses && null !== input.responses && false === Array.isArray(input.responses) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".responses",
                expected: "(Record<string, IResponse | IReference<`#/definitions/responses/${string}`>> | undefined)",
                value: input.responses
            }, _errorFactory)) && _ao45(input.responses, _path + ".responses", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".responses",
                expected: "(Record<string, IResponse | IReference<`#/definitions/responses/${string}`>> | undefined)",
                value: input.responses
            }, _errorFactory)) && (undefined === input.summary || "string" === typeof input.summary || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".summary",
                expected: "(string | undefined)",
                value: input.summary
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.security || (Array.isArray(input.security) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".security",
                expected: "(Array<Record<string, Array<string>>> | undefined)",
                value: input.security
            }, _errorFactory)) && input.security.every(((elem, _index104) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".security[" + _index104 + "]",
                expected: "Record<string, Array<string>>",
                value: elem
            }, _errorFactory)) && _ao39(elem, _path + ".security[" + _index104 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".security[" + _index104 + "]",
                expected: "Record<string, Array<string>>",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".security",
                expected: "(Array<Record<string, Array<string>>> | undefined)",
                value: input.security
            }, _errorFactory)) && (undefined === input.tags || (Array.isArray(input.tags) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".tags",
                expected: "(Array<string> | undefined)",
                value: input.tags
            }, _errorFactory)) && input.tags.every(((elem, _index105) => "string" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".tags[" + _index105 + "]",
                expected: "string",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".tags",
                expected: "(Array<string> | undefined)",
                value: input.tags
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory));
            const _ao44 = (input, _path, _exceptionable = true) => ("string" === typeof input.$ref && RegExp(/^#\/definitions\/parameters\/(.*)/).test(input.$ref) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".$ref",
                expected: "`#/definitions/parameters/${string}`",
                value: input.$ref
            }, _errorFactory)) && (undefined === input.examples || Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true;
            const _ao45 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return ("object" === typeof value && null !== value && false === Array.isArray(value) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "(SwaggerV2.IJsonSchema.IReference<`#/definitions/responses/${string}`> | SwaggerV2.IOperation.IResponse)",
                    value
                }, _errorFactory)) && _au11(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "(SwaggerV2.IJsonSchema.IReference<`#/definitions/responses/${string}`> | SwaggerV2.IOperation.IResponse)",
                    value
                }, _errorFactory);
            }));
            const _ao46 = (input, _path, _exceptionable = true) => ("string" === typeof input.$ref && RegExp(/^#\/definitions\/responses\/(.*)/).test(input.$ref) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".$ref",
                expected: "`#/definitions/responses/${string}`",
                value: input.$ref
            }, _errorFactory)) && (undefined === input.examples || Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true;
            const _ao47 = (input, _path, _exceptionable = true) => ("string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".name",
                expected: "string",
                value: input.name
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory));
            const _ao48 = (input, _path, _exceptionable = true) => (null !== input.openapi || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".openapi",
                expected: '("3.0" | `3.0.${number}`)',
                value: input.openapi
            }, _errorFactory)) && (undefined !== input.openapi || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".openapi",
                expected: '("3.0" | `3.0.${number}`)',
                value: input.openapi
            }, _errorFactory)) && ("3.0" === input.openapi || "string" === typeof input.openapi && RegExp(/^3\.0\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(input.openapi) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".openapi",
                expected: '("3.0" | `3.0.${number}`)',
                value: input.openapi
            }, _errorFactory)) && (undefined === input.servers || (Array.isArray(input.servers) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".servers",
                expected: "(Array<OpenApiV3.IServer> | undefined)",
                value: input.servers
            }, _errorFactory)) && input.servers.every(((elem, _index106) => ("object" === typeof elem && null !== elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".servers[" + _index106 + "]",
                expected: "OpenApiV3.IServer",
                value: elem
            }, _errorFactory)) && _ao49(elem, _path + ".servers[" + _index106 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".servers[" + _index106 + "]",
                expected: "OpenApiV3.IServer",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".servers",
                expected: "(Array<OpenApiV3.IServer> | undefined)",
                value: input.servers
            }, _errorFactory)) && (undefined === input.info || ("object" === typeof input.info && null !== input.info || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".info",
                expected: "(OpenApiV3.IDocument.IInfo | undefined)",
                value: input.info
            }, _errorFactory)) && _ao52(input.info, _path + ".info", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".info",
                expected: "(OpenApiV3.IDocument.IInfo | undefined)",
                value: input.info
            }, _errorFactory)) && (undefined === input.components || ("object" === typeof input.components && null !== input.components && false === Array.isArray(input.components) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".components",
                expected: "(OpenApiV3.IComponents | undefined)",
                value: input.components
            }, _errorFactory)) && _ao55(input.components, _path + ".components", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".components",
                expected: "(OpenApiV3.IComponents | undefined)",
                value: input.components
            }, _errorFactory)) && (undefined === input.paths || ("object" === typeof input.paths && null !== input.paths && false === Array.isArray(input.paths) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".paths",
                expected: "(Record<string, OpenApiV3.IPath> | undefined)",
                value: input.paths
            }, _errorFactory)) && _ao97(input.paths, _path + ".paths", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".paths",
                expected: "(Record<string, OpenApiV3.IPath> | undefined)",
                value: input.paths
            }, _errorFactory)) && (undefined === input.security || (Array.isArray(input.security) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".security",
                expected: "(Array<Record<string, Array<string>>> | undefined)",
                value: input.security
            }, _errorFactory)) && input.security.every(((elem, _index107) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".security[" + _index107 + "]",
                expected: "Record<string, Array<string>>",
                value: elem
            }, _errorFactory)) && _ao39(elem, _path + ".security[" + _index107 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".security[" + _index107 + "]",
                expected: "Record<string, Array<string>>",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".security",
                expected: "(Array<Record<string, Array<string>>> | undefined)",
                value: input.security
            }, _errorFactory)) && (undefined === input.tags || (Array.isArray(input.tags) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".tags",
                expected: "(Array<OpenApiV3.IDocument.ITag> | undefined)",
                value: input.tags
            }, _errorFactory)) && input.tags.every(((elem, _index108) => ("object" === typeof elem && null !== elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".tags[" + _index108 + "]",
                expected: "OpenApiV3.IDocument.ITag",
                value: elem
            }, _errorFactory)) && _ao104(elem, _path + ".tags[" + _index108 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".tags[" + _index108 + "]",
                expected: "OpenApiV3.IDocument.ITag",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".tags",
                expected: "(Array<OpenApiV3.IDocument.ITag> | undefined)",
                value: input.tags
            }, _errorFactory));
            const _ao49 = (input, _path, _exceptionable = true) => ("string" === typeof input.url || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".url",
                expected: "string",
                value: input.url
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.variables || ("object" === typeof input.variables && null !== input.variables && false === Array.isArray(input.variables) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".variables",
                expected: "(Record<string, OpenApiV3.IServer.IVariable> | undefined)",
                value: input.variables
            }, _errorFactory)) && _ao50(input.variables, _path + ".variables", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".variables",
                expected: "(Record<string, OpenApiV3.IServer.IVariable> | undefined)",
                value: input.variables
            }, _errorFactory));
            const _ao50 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return ("object" === typeof value && null !== value || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "OpenApiV3.IServer.IVariable",
                    value
                }, _errorFactory)) && _ao51(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "OpenApiV3.IServer.IVariable",
                    value
                }, _errorFactory);
            }));
            const _ao51 = (input, _path, _exceptionable = true) => ("string" === typeof input["default"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["default"]',
                expected: "string",
                value: input["default"]
            }, _errorFactory)) && (undefined === input["enum"] || (Array.isArray(input["enum"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"]',
                expected: "(Array<string> | undefined)",
                value: input["enum"]
            }, _errorFactory)) && input["enum"].every(((elem, _index109) => "string" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"][' + _index109 + "]",
                expected: "string",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"]',
                expected: "(Array<string> | undefined)",
                value: input["enum"]
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory));
            const _ao52 = (input, _path, _exceptionable = true) => ("string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "string",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.termsOfService || "string" === typeof input.termsOfService || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".termsOfService",
                expected: "(string | undefined)",
                value: input.termsOfService
            }, _errorFactory)) && (undefined === input.contact || ("object" === typeof input.contact && null !== input.contact && false === Array.isArray(input.contact) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".contact",
                expected: "(OpenApiV3.IDocument.IContact | undefined)",
                value: input.contact
            }, _errorFactory)) && _ao53(input.contact, _path + ".contact", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".contact",
                expected: "(OpenApiV3.IDocument.IContact | undefined)",
                value: input.contact
            }, _errorFactory)) && (undefined === input.license || ("object" === typeof input.license && null !== input.license || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".license",
                expected: "(OpenApiV3.IDocument.ILicense | undefined)",
                value: input.license
            }, _errorFactory)) && _ao54(input.license, _path + ".license", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".license",
                expected: "(OpenApiV3.IDocument.ILicense | undefined)",
                value: input.license
            }, _errorFactory)) && ("string" === typeof input.version || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".version",
                expected: "string",
                value: input.version
            }, _errorFactory));
            const _ao53 = (input, _path, _exceptionable = true) => (undefined === input.name || "string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".name",
                expected: "(string | undefined)",
                value: input.name
            }, _errorFactory)) && (undefined === input.url || "string" === typeof input.url || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".url",
                expected: "(string | undefined)",
                value: input.url
            }, _errorFactory)) && (undefined === input.email || "string" === typeof input.email || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".email",
                expected: "(string | undefined)",
                value: input.email
            }, _errorFactory));
            const _ao54 = (input, _path, _exceptionable = true) => ("string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".name",
                expected: "string",
                value: input.name
            }, _errorFactory)) && (undefined === input.url || "string" === typeof input.url || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".url",
                expected: "(string | undefined)",
                value: input.url
            }, _errorFactory));
            const _ao55 = (input, _path, _exceptionable = true) => (undefined === input.schemas || ("object" === typeof input.schemas && null !== input.schemas && false === Array.isArray(input.schemas) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".schemas",
                expected: "(Record<string, OpenApiV3.IJsonSchema> | undefined)",
                value: input.schemas
            }, _errorFactory)) && _ao56(input.schemas, _path + ".schemas", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".schemas",
                expected: "(Record<string, OpenApiV3.IJsonSchema> | undefined)",
                value: input.schemas
            }, _errorFactory)) && (undefined === input.responses || ("object" === typeof input.responses && null !== input.responses && false === Array.isArray(input.responses) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".responses",
                expected: "(Record<string, OpenApiV3.IOperation.IResponse> | undefined)",
                value: input.responses
            }, _errorFactory)) && _ao71(input.responses, _path + ".responses", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".responses",
                expected: "(Record<string, OpenApiV3.IOperation.IResponse> | undefined)",
                value: input.responses
            }, _errorFactory)) && (undefined === input.parameters || ("object" === typeof input.parameters && null !== input.parameters && false === Array.isArray(input.parameters) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".parameters",
                expected: "(Record<string, OpenApiV3.IOperation.IParameter> | undefined)",
                value: input.parameters
            }, _errorFactory)) && _ao81(input.parameters, _path + ".parameters", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".parameters",
                expected: "(Record<string, OpenApiV3.IOperation.IParameter> | undefined)",
                value: input.parameters
            }, _errorFactory)) && (undefined === input.requestBodies || ("object" === typeof input.requestBodies && null !== input.requestBodies && false === Array.isArray(input.requestBodies) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".requestBodies",
                expected: "(Record<string, OpenApiV3.IOperation.IRequestBody> | undefined)",
                value: input.requestBodies
            }, _errorFactory)) && _ao83(input.requestBodies, _path + ".requestBodies", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".requestBodies",
                expected: "(Record<string, OpenApiV3.IOperation.IRequestBody> | undefined)",
                value: input.requestBodies
            }, _errorFactory)) && (undefined === input.securitySchemes || ("object" === typeof input.securitySchemes && null !== input.securitySchemes && false === Array.isArray(input.securitySchemes) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".securitySchemes",
                expected: "(Record<string, OpenApiV3.ISecurityScheme> | undefined)",
                value: input.securitySchemes
            }, _errorFactory)) && _ao85(input.securitySchemes, _path + ".securitySchemes", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".securitySchemes",
                expected: "(Record<string, OpenApiV3.ISecurityScheme> | undefined)",
                value: input.securitySchemes
            }, _errorFactory)) && (undefined === input.headers || ("object" === typeof input.headers && null !== input.headers && false === Array.isArray(input.headers) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".headers",
                expected: '(Record<string, Omit<OpenApiV3.IOperation.IParameter, "in">> | undefined)',
                value: input.headers
            }, _errorFactory)) && _ao95(input.headers, _path + ".headers", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".headers",
                expected: '(Record<string, Omit<OpenApiV3.IOperation.IParameter, "in">> | undefined)',
                value: input.headers
            }, _errorFactory)) && (undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Record<string, OpenApiV3.IExample> | undefined)",
                value: input.examples
            }, _errorFactory)) && _ao96(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Record<string, OpenApiV3.IExample> | undefined)",
                value: input.examples
            }, _errorFactory));
            const _ao56 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return ("object" === typeof value && null !== value && false === Array.isArray(value) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown)",
                    value
                }, _errorFactory)) && _au3(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown)",
                    value
                }, _errorFactory);
            }));
            const _ao57 = (input, _path, _exceptionable = true) => (undefined === input.nullable || "boolean" === typeof input.nullable || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".nullable",
                expected: "(boolean | undefined)",
                value: input.nullable
            }, _errorFactory)) && (null === input["default"] || undefined === input["default"] || "boolean" === typeof input["default"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["default"]',
                expected: "(boolean | null | undefined)",
                value: input["default"]
            }, _errorFactory)) && (undefined === input["enum"] || (Array.isArray(input["enum"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"]',
                expected: "(Array<boolean | null> | undefined)",
                value: input["enum"]
            }, _errorFactory)) && input["enum"].every(((elem, _index110) => null === elem || "boolean" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"][' + _index110 + "]",
                expected: "(boolean | null)",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"]',
                expected: "(Array<boolean | null> | undefined)",
                value: input["enum"]
            }, _errorFactory)) && ("boolean" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"boolean"',
                value: input.type
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)));
            const _ao58 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return true;
            }));
            const _ao59 = (input, _path, _exceptionable = true) => (undefined === input.nullable || "boolean" === typeof input.nullable || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".nullable",
                expected: "(boolean | undefined)",
                value: input.nullable
            }, _errorFactory)) && (null === input["default"] || undefined === input["default"] || "number" === typeof input["default"] && (Math.floor(input["default"]) === input["default"] && -0x8000000000000000 <= input["default"] && input["default"] <= 0x8000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["default"]',
                expected: 'number & Type<"int64">',
                value: input["default"]
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["default"]',
                expected: '((number & Type<"int64">) | null | undefined)',
                value: input["default"]
            }, _errorFactory)) && (undefined === input["enum"] || (Array.isArray(input["enum"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"]',
                expected: "(Array<number | null> | undefined)",
                value: input["enum"]
            }, _errorFactory)) && input["enum"].every(((elem, _index111) => null === elem || "number" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"][' + _index111 + "]",
                expected: "(null | number)",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"]',
                expected: "(Array<number | null> | undefined)",
                value: input["enum"]
            }, _errorFactory)) && (undefined === input.minimum || "number" === typeof input.minimum && (Math.floor(input.minimum) === input.minimum && -0x8000000000000000 <= input.minimum && input.minimum <= 0x8000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minimum",
                expected: 'number & Type<"int64">',
                value: input.minimum
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minimum",
                expected: '((number & Type<"int64">) | undefined)',
                value: input.minimum
            }, _errorFactory)) && (undefined === input.maximum || "number" === typeof input.maximum && (Math.floor(input.maximum) === input.maximum && -0x8000000000000000 <= input.maximum && input.maximum <= 0x8000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maximum",
                expected: 'number & Type<"int64">',
                value: input.maximum
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maximum",
                expected: '((number & Type<"int64">) | undefined)',
                value: input.maximum
            }, _errorFactory)) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".exclusiveMinimum",
                expected: "(boolean | number | undefined)",
                value: input.exclusiveMinimum
            }, _errorFactory)) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".exclusiveMaximum",
                expected: "(boolean | number | undefined)",
                value: input.exclusiveMaximum
            }, _errorFactory)) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && (Math.floor(input.multipleOf) === input.multipleOf && 0 <= input.multipleOf && input.multipleOf <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".multipleOf",
                expected: 'number & Type<"uint64">',
                value: input.multipleOf
            }, _errorFactory)) && (0 < input.multipleOf || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".multipleOf",
                expected: "number & ExclusiveMinimum<0>",
                value: input.multipleOf
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".multipleOf",
                expected: '((number & Type<"uint64"> & ExclusiveMinimum<0>) | undefined)',
                value: input.multipleOf
            }, _errorFactory)) && ("integer" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"integer"',
                value: input.type
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)));
            const _ao60 = (input, _path, _exceptionable = true) => (undefined === input.nullable || "boolean" === typeof input.nullable || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".nullable",
                expected: "(boolean | undefined)",
                value: input.nullable
            }, _errorFactory)) && (null === input["default"] || undefined === input["default"] || "number" === typeof input["default"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["default"]',
                expected: "(null | number | undefined)",
                value: input["default"]
            }, _errorFactory)) && (undefined === input["enum"] || (Array.isArray(input["enum"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"]',
                expected: "(Array<number | null> | undefined)",
                value: input["enum"]
            }, _errorFactory)) && input["enum"].every(((elem, _index112) => null === elem || "number" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"][' + _index112 + "]",
                expected: "(null | number)",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"]',
                expected: "(Array<number | null> | undefined)",
                value: input["enum"]
            }, _errorFactory)) && (undefined === input.minimum || "number" === typeof input.minimum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minimum",
                expected: "(number | undefined)",
                value: input.minimum
            }, _errorFactory)) && (undefined === input.maximum || "number" === typeof input.maximum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maximum",
                expected: "(number | undefined)",
                value: input.maximum
            }, _errorFactory)) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".exclusiveMinimum",
                expected: "(boolean | number | undefined)",
                value: input.exclusiveMinimum
            }, _errorFactory)) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".exclusiveMaximum",
                expected: "(boolean | number | undefined)",
                value: input.exclusiveMaximum
            }, _errorFactory)) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && (0 < input.multipleOf || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".multipleOf",
                expected: "number & ExclusiveMinimum<0>",
                value: input.multipleOf
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".multipleOf",
                expected: "((number & ExclusiveMinimum<0>) | undefined)",
                value: input.multipleOf
            }, _errorFactory)) && ("number" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"number"',
                value: input.type
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)));
            const _ao61 = (input, _path, _exceptionable = true) => (undefined === input.nullable || "boolean" === typeof input.nullable || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".nullable",
                expected: "(boolean | undefined)",
                value: input.nullable
            }, _errorFactory)) && (null === input["default"] || undefined === input["default"] || "string" === typeof input["default"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["default"]',
                expected: "(null | string | undefined)",
                value: input["default"]
            }, _errorFactory)) && (undefined === input["enum"] || (Array.isArray(input["enum"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"]',
                expected: "(Array<string | null> | undefined)",
                value: input["enum"]
            }, _errorFactory)) && input["enum"].every(((elem, _index113) => null === elem || "string" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"][' + _index113 + "]",
                expected: "(null | string)",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"]',
                expected: "(Array<string | null> | undefined)",
                value: input["enum"]
            }, _errorFactory)) && (undefined === input.format || "string" === typeof input.format || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".format",
                expected: "(string | undefined)",
                value: input.format
            }, _errorFactory)) && (undefined === input.pattern || "string" === typeof input.pattern || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".pattern",
                expected: "(string | undefined)",
                value: input.pattern
            }, _errorFactory)) && (undefined === input.minLength || "number" === typeof input.minLength && (Math.floor(input.minLength) === input.minLength && 0 <= input.minLength && input.minLength <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minLength",
                expected: 'number & Type<"uint64">',
                value: input.minLength
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minLength",
                expected: '((number & Type<"uint64">) | undefined)',
                value: input.minLength
            }, _errorFactory)) && (undefined === input.maxLength || "number" === typeof input.maxLength && (Math.floor(input.maxLength) === input.maxLength && 0 <= input.maxLength && input.maxLength <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maxLength",
                expected: 'number & Type<"uint64">',
                value: input.maxLength
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maxLength",
                expected: '((number & Type<"uint64">) | undefined)',
                value: input.maxLength
            }, _errorFactory)) && ("string" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"string"',
                value: input.type
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)));
            const _ao62 = (input, _path, _exceptionable = true) => (undefined === input.nullable || "boolean" === typeof input.nullable || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".nullable",
                expected: "(boolean | undefined)",
                value: input.nullable
            }, _errorFactory)) && (("object" === typeof input.items && null !== input.items && false === Array.isArray(input.items) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".items",
                expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown)",
                value: input.items
            }, _errorFactory)) && _au3(input.items, _path + ".items", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".items",
                expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown)",
                value: input.items
            }, _errorFactory)) && (undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".uniqueItems",
                expected: "(boolean | undefined)",
                value: input.uniqueItems
            }, _errorFactory)) && (undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minItems",
                expected: 'number & Type<"uint64">',
                value: input.minItems
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minItems",
                expected: '((number & Type<"uint64">) | undefined)',
                value: input.minItems
            }, _errorFactory)) && (undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maxItems",
                expected: 'number & Type<"uint64">',
                value: input.maxItems
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maxItems",
                expected: '((number & Type<"uint64">) | undefined)',
                value: input.maxItems
            }, _errorFactory)) && ("array" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"array"',
                value: input.type
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)));
            const _ao63 = (input, _path, _exceptionable = true) => (undefined === input.nullable || "boolean" === typeof input.nullable || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".nullable",
                expected: "(boolean | undefined)",
                value: input.nullable
            }, _errorFactory)) && (undefined === input.properties || ("object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".properties",
                expected: "(Record<string, OpenApiV3.IJsonSchema> | undefined)",
                value: input.properties
            }, _errorFactory)) && _ao56(input.properties, _path + ".properties", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".properties",
                expected: "(Record<string, OpenApiV3.IJsonSchema> | undefined)",
                value: input.properties
            }, _errorFactory)) && (undefined === input.required || (Array.isArray(input.required) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".required",
                expected: "(Array<string> | undefined)",
                value: input.required
            }, _errorFactory)) && input.required.every(((elem, _index114) => "string" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".required[" + _index114 + "]",
                expected: "string",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".required",
                expected: "(Array<string> | undefined)",
                value: input.required
            }, _errorFactory)) && ((null !== input.additionalProperties || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".additionalProperties",
                expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown | boolean | undefined)",
                value: input.additionalProperties
            }, _errorFactory)) && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || ("object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".additionalProperties",
                expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown | boolean | undefined)",
                value: input.additionalProperties
            }, _errorFactory)) && _au3(input.additionalProperties, _path + ".additionalProperties", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".additionalProperties",
                expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown | boolean | undefined)",
                value: input.additionalProperties
            }, _errorFactory))) && (undefined === input.maxProperties || "number" === typeof input.maxProperties || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maxProperties",
                expected: "(number | undefined)",
                value: input.maxProperties
            }, _errorFactory)) && (undefined === input.minProperties || "number" === typeof input.minProperties || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minProperties",
                expected: "(number | undefined)",
                value: input.minProperties
            }, _errorFactory)) && ("object" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"object"',
                value: input.type
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)));
            const _ao64 = (input, _path, _exceptionable = true) => ("string" === typeof input.$ref || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".$ref",
                expected: "string",
                value: input.$ref
            }, _errorFactory)) && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory))) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true;
            const _ao65 = (input, _path, _exceptionable = true) => ((Array.isArray(input.allOf) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".allOf",
                expected: "Array<OpenApiV3.IJsonSchema>",
                value: input.allOf
            }, _errorFactory)) && input.allOf.every(((elem, _index115) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".allOf[" + _index115 + "]",
                expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory)) && _au3(elem, _path + ".allOf[" + _index115 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".allOf[" + _index115 + "]",
                expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".allOf",
                expected: "Array<OpenApiV3.IJsonSchema>",
                value: input.allOf
            }, _errorFactory)) && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory))) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true;
            const _ao66 = (input, _path, _exceptionable = true) => ((Array.isArray(input.anyOf) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".anyOf",
                expected: "Array<OpenApiV3.IJsonSchema>",
                value: input.anyOf
            }, _errorFactory)) && input.anyOf.every(((elem, _index116) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".anyOf[" + _index116 + "]",
                expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory)) && _au3(elem, _path + ".anyOf[" + _index116 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".anyOf[" + _index116 + "]",
                expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".anyOf",
                expected: "Array<OpenApiV3.IJsonSchema>",
                value: input.anyOf
            }, _errorFactory)) && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory))) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true;
            const _ao67 = (input, _path, _exceptionable = true) => ((Array.isArray(input.oneOf) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".oneOf",
                expected: "Array<OpenApiV3.IJsonSchema>",
                value: input.oneOf
            }, _errorFactory)) && input.oneOf.every(((elem, _index117) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".oneOf[" + _index117 + "]",
                expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory)) && _au3(elem, _path + ".oneOf[" + _index117 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".oneOf[" + _index117 + "]",
                expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".oneOf",
                expected: "Array<OpenApiV3.IJsonSchema>",
                value: input.oneOf
            }, _errorFactory)) && (undefined === input.discriminator || ("object" === typeof input.discriminator && null !== input.discriminator || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".discriminator",
                expected: "(OpenApiV3.IJsonSchema.IOneOf.IDiscriminator | undefined)",
                value: input.discriminator
            }, _errorFactory)) && _ao68(input.discriminator, _path + ".discriminator", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".discriminator",
                expected: "(OpenApiV3.IJsonSchema.IOneOf.IDiscriminator | undefined)",
                value: input.discriminator
            }, _errorFactory)) && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory))) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true;
            const _ao68 = (input, _path, _exceptionable = true) => ("string" === typeof input.propertyName || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".propertyName",
                expected: "string",
                value: input.propertyName
            }, _errorFactory)) && (undefined === input.mapping || ("object" === typeof input.mapping && null !== input.mapping && false === Array.isArray(input.mapping) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".mapping",
                expected: "(Record<string, string> | undefined)",
                value: input.mapping
            }, _errorFactory)) && _ao35(input.mapping, _path + ".mapping", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".mapping",
                expected: "(Record<string, string> | undefined)",
                value: input.mapping
            }, _errorFactory));
            const _ao69 = (input, _path, _exceptionable = true) => (null === input["default"] || undefined === input["default"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["default"]',
                expected: "(null | undefined)",
                value: input["default"]
            }, _errorFactory)) && ("null" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"null"',
                value: input.type
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)));
            const _ao70 = (input, _path, _exceptionable = true) => (null !== input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: "undefined",
                value: input.type
            }, _errorFactory)) && (undefined === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: "undefined",
                value: input.type
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)));
            const _ao71 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return ("object" === typeof value && null !== value && false === Array.isArray(value) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "OpenApiV3.IOperation.IResponse",
                    value
                }, _errorFactory)) && _ao72(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "OpenApiV3.IOperation.IResponse",
                    value
                }, _errorFactory);
            }));
            const _ao72 = (input, _path, _exceptionable = true) => (undefined === input.content || ("object" === typeof input.content && null !== input.content && false === Array.isArray(input.content) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".content",
                expected: "(Record<string, OpenApiV3.IOperation.IMediaType> | undefined)",
                value: input.content
            }, _errorFactory)) && _ao73(input.content, _path + ".content", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".content",
                expected: "(Record<string, OpenApiV3.IOperation.IMediaType> | undefined)",
                value: input.content
            }, _errorFactory)) && (undefined === input.headers || ("object" === typeof input.headers && null !== input.headers && false === Array.isArray(input.headers) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".headers",
                expected: '(Record<string, Omit<IParameter, "in"> | IReference<`#/components/headers/${string}`>> | undefined)',
                value: input.headers
            }, _errorFactory)) && _ao78(input.headers, _path + ".headers", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".headers",
                expected: '(Record<string, Omit<IParameter, "in"> | IReference<`#/components/headers/${string}`>> | undefined)',
                value: input.headers
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory));
            const _ao73 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return ("object" === typeof value && null !== value && false === Array.isArray(value) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "OpenApiV3.IOperation.IMediaType",
                    value
                }, _errorFactory)) && _ao74(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "OpenApiV3.IOperation.IMediaType",
                    value
                }, _errorFactory);
            }));
            const _ao74 = (input, _path, _exceptionable = true) => (undefined === input.schema || ("object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".schema",
                expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown | undefined)",
                value: input.schema
            }, _errorFactory)) && _au3(input.schema, _path + ".schema", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".schema",
                expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown | undefined)",
                value: input.schema
            }, _errorFactory)) && true && (undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Record<string, IExample | IReference<`#/components/examples/${string}`>> | undefined)",
                value: input.examples
            }, _errorFactory)) && _ao75(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Record<string, IExample | IReference<`#/components/examples/${string}`>> | undefined)",
                value: input.examples
            }, _errorFactory));
            const _ao75 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return ("object" === typeof value && null !== value && false === Array.isArray(value) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "(OpenApiV3.IExample | OpenApiV3.IJsonSchema.IReference<`#/components/examples/${string}`>)",
                    value
                }, _errorFactory)) && _au12(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "(OpenApiV3.IExample | OpenApiV3.IJsonSchema.IReference<`#/components/examples/${string}`>)",
                    value
                }, _errorFactory);
            }));
            const _ao76 = (input, _path, _exceptionable = true) => (undefined === input.summary || "string" === typeof input.summary || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".summary",
                expected: "(string | undefined)",
                value: input.summary
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && true && (undefined === input.externalValue || "string" === typeof input.externalValue || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".externalValue",
                expected: "(string | undefined)",
                value: input.externalValue
            }, _errorFactory));
            const _ao77 = (input, _path, _exceptionable = true) => ("string" === typeof input.$ref && RegExp(/^#\/components\/examples\/(.*)/).test(input.$ref) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".$ref",
                expected: "`#/components/examples/${string}`",
                value: input.$ref
            }, _errorFactory)) && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory))) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true;
            const _ao78 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return ("object" === typeof value && null !== value || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: '(Omit<OpenApiV3.IOperation.IParameter, "in"> | OpenApiV3.IJsonSchema.IReference<`#/components/headers/${string}`>)',
                    value
                }, _errorFactory)) && _au13(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: '(Omit<OpenApiV3.IOperation.IParameter, "in"> | OpenApiV3.IJsonSchema.IReference<`#/components/headers/${string}`>)',
                    value
                }, _errorFactory);
            }));
            const _ao79 = (input, _path, _exceptionable = true) => (undefined === input.name || "string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".name",
                expected: "(string | undefined)",
                value: input.name
            }, _errorFactory)) && (undefined === input.required || "boolean" === typeof input.required || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".required",
                expected: "(boolean | undefined)",
                value: input.required
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && true && (undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Record<string, IExample | IReference<`#/components/examples/${string}`>> | undefined)",
                value: input.examples
            }, _errorFactory)) && _ao75(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Record<string, IExample | IReference<`#/components/examples/${string}`>> | undefined)",
                value: input.examples
            }, _errorFactory)) && (("object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".schema",
                expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown)",
                value: input.schema
            }, _errorFactory)) && _au3(input.schema, _path + ".schema", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".schema",
                expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown)",
                value: input.schema
            }, _errorFactory));
            const _ao80 = (input, _path, _exceptionable = true) => ("string" === typeof input.$ref && RegExp(/^#\/components\/headers\/(.*)/).test(input.$ref) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".$ref",
                expected: "`#/components/headers/${string}`",
                value: input.$ref
            }, _errorFactory)) && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory))) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true;
            const _ao81 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return ("object" === typeof value && null !== value || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "OpenApiV3.IOperation.IParameter",
                    value
                }, _errorFactory)) && _ao82(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "OpenApiV3.IOperation.IParameter",
                    value
                }, _errorFactory);
            }));
            const _ao82 = (input, _path, _exceptionable = true) => (undefined === input.name || "string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".name",
                expected: "(string | undefined)",
                value: input.name
            }, _errorFactory)) && ("path" === input["in"] || "query" === input["in"] || "header" === input["in"] || "cookie" === input["in"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["in"]',
                expected: '("cookie" | "header" | "path" | "query")',
                value: input["in"]
            }, _errorFactory)) && (("object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".schema",
                expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown)",
                value: input.schema
            }, _errorFactory)) && _au3(input.schema, _path + ".schema", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".schema",
                expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown)",
                value: input.schema
            }, _errorFactory)) && (undefined === input.required || "boolean" === typeof input.required || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".required",
                expected: "(boolean | undefined)",
                value: input.required
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && true && (undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Record<string, IExample | IReference<`#/components/examples/${string}`>> | undefined)",
                value: input.examples
            }, _errorFactory)) && _ao75(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Record<string, IExample | IReference<`#/components/examples/${string}`>> | undefined)",
                value: input.examples
            }, _errorFactory));
            const _ao83 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return ("object" === typeof value && null !== value && false === Array.isArray(value) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "OpenApiV3.IOperation.IRequestBody",
                    value
                }, _errorFactory)) && _ao84(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "OpenApiV3.IOperation.IRequestBody",
                    value
                }, _errorFactory);
            }));
            const _ao84 = (input, _path, _exceptionable = true) => (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.required || "boolean" === typeof input.required || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".required",
                expected: "(boolean | undefined)",
                value: input.required
            }, _errorFactory)) && (undefined === input.content || ("object" === typeof input.content && null !== input.content && false === Array.isArray(input.content) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".content",
                expected: "(Record<string, OpenApiV3.IOperation.IMediaType> | undefined)",
                value: input.content
            }, _errorFactory)) && _ao73(input.content, _path + ".content", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".content",
                expected: "(Record<string, OpenApiV3.IOperation.IMediaType> | undefined)",
                value: input.content
            }, _errorFactory));
            const _ao85 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return ("object" === typeof value && null !== value || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "(OpenApiV3.ISecurityScheme.IApiKey | OpenApiV3.ISecurityScheme.IHttpBasic | OpenApiV3.ISecurityScheme.IHttpBearer | OpenApiV3.ISecurityScheme.IOAuth2 | OpenApiV3.ISecurityScheme.IOpenId)",
                    value
                }, _errorFactory)) && _au14(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "(OpenApiV3.ISecurityScheme.IApiKey | OpenApiV3.ISecurityScheme.IHttpBasic | OpenApiV3.ISecurityScheme.IHttpBearer | OpenApiV3.ISecurityScheme.IOAuth2 | OpenApiV3.ISecurityScheme.IOpenId)",
                    value
                }, _errorFactory);
            }));
            const _ao86 = (input, _path, _exceptionable = true) => ("apiKey" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"apiKey"',
                value: input.type
            }, _errorFactory)) && (undefined === input["in"] || "query" === input["in"] || "header" === input["in"] || "cookie" === input["in"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["in"]',
                expected: '("cookie" | "header" | "query" | undefined)',
                value: input["in"]
            }, _errorFactory)) && (undefined === input.name || "string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".name",
                expected: "(string | undefined)",
                value: input.name
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory));
            const _ao87 = (input, _path, _exceptionable = true) => ("http" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"http"',
                value: input.type
            }, _errorFactory)) && ("basic" === input.scheme || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".scheme",
                expected: '"basic"',
                value: input.scheme
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory));
            const _ao88 = (input, _path, _exceptionable = true) => ("http" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"http"',
                value: input.type
            }, _errorFactory)) && ("bearer" === input.scheme || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".scheme",
                expected: '"bearer"',
                value: input.scheme
            }, _errorFactory)) && (undefined === input.bearerFormat || "string" === typeof input.bearerFormat || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".bearerFormat",
                expected: "(string | undefined)",
                value: input.bearerFormat
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory));
            const _ao89 = (input, _path, _exceptionable = true) => ("oauth2" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"oauth2"',
                value: input.type
            }, _errorFactory)) && (("object" === typeof input.flows && null !== input.flows && false === Array.isArray(input.flows) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".flows",
                expected: "OpenApiV3.ISecurityScheme.IOAuth2.IFlowSet",
                value: input.flows
            }, _errorFactory)) && _ao90(input.flows, _path + ".flows", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".flows",
                expected: "OpenApiV3.ISecurityScheme.IOAuth2.IFlowSet",
                value: input.flows
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory));
            const _ao90 = (input, _path, _exceptionable = true) => (undefined === input.authorizationCode || ("object" === typeof input.authorizationCode && null !== input.authorizationCode && false === Array.isArray(input.authorizationCode) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".authorizationCode",
                expected: "(OpenApiV3.ISecurityScheme.IOAuth2.IFlow | undefined)",
                value: input.authorizationCode
            }, _errorFactory)) && _ao91(input.authorizationCode, _path + ".authorizationCode", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".authorizationCode",
                expected: "(OpenApiV3.ISecurityScheme.IOAuth2.IFlow | undefined)",
                value: input.authorizationCode
            }, _errorFactory)) && (undefined === input.implicit || ("object" === typeof input.implicit && null !== input.implicit && false === Array.isArray(input.implicit) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".implicit",
                expected: '(Omit<OpenApiV3.ISecurityScheme.IOAuth2.IFlow, "tokenUrl"> | undefined)',
                value: input.implicit
            }, _errorFactory)) && _ao92(input.implicit, _path + ".implicit", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".implicit",
                expected: '(Omit<OpenApiV3.ISecurityScheme.IOAuth2.IFlow, "tokenUrl"> | undefined)',
                value: input.implicit
            }, _errorFactory)) && (undefined === input.password || ("object" === typeof input.password && null !== input.password && false === Array.isArray(input.password) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".password",
                expected: '(Omit<OpenApiV3.ISecurityScheme.IOAuth2.IFlow, "authorizationUrl"> | undefined)',
                value: input.password
            }, _errorFactory)) && _ao93(input.password, _path + ".password", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".password",
                expected: '(Omit<OpenApiV3.ISecurityScheme.IOAuth2.IFlow, "authorizationUrl"> | undefined)',
                value: input.password
            }, _errorFactory)) && (undefined === input.clientCredentials || ("object" === typeof input.clientCredentials && null !== input.clientCredentials && false === Array.isArray(input.clientCredentials) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".clientCredentials",
                expected: '(Omit<OpenApiV3.ISecurityScheme.IOAuth2.IFlow, "authorizationUrl"> | undefined)',
                value: input.clientCredentials
            }, _errorFactory)) && _ao93(input.clientCredentials, _path + ".clientCredentials", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".clientCredentials",
                expected: '(Omit<OpenApiV3.ISecurityScheme.IOAuth2.IFlow, "authorizationUrl"> | undefined)',
                value: input.clientCredentials
            }, _errorFactory));
            const _ao91 = (input, _path, _exceptionable = true) => (undefined === input.authorizationUrl || "string" === typeof input.authorizationUrl || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".authorizationUrl",
                expected: "(string | undefined)",
                value: input.authorizationUrl
            }, _errorFactory)) && (undefined === input.tokenUrl || "string" === typeof input.tokenUrl || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".tokenUrl",
                expected: "(string | undefined)",
                value: input.tokenUrl
            }, _errorFactory)) && (undefined === input.refreshUrl || "string" === typeof input.refreshUrl || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".refreshUrl",
                expected: "(string | undefined)",
                value: input.refreshUrl
            }, _errorFactory)) && (undefined === input.scopes || ("object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".scopes",
                expected: "(Record<string, string> | undefined)",
                value: input.scopes
            }, _errorFactory)) && _ao35(input.scopes, _path + ".scopes", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".scopes",
                expected: "(Record<string, string> | undefined)",
                value: input.scopes
            }, _errorFactory));
            const _ao92 = (input, _path, _exceptionable = true) => (undefined === input.authorizationUrl || "string" === typeof input.authorizationUrl || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".authorizationUrl",
                expected: "(string | undefined)",
                value: input.authorizationUrl
            }, _errorFactory)) && (undefined === input.refreshUrl || "string" === typeof input.refreshUrl || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".refreshUrl",
                expected: "(string | undefined)",
                value: input.refreshUrl
            }, _errorFactory)) && (undefined === input.scopes || ("object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".scopes",
                expected: "(Record<string, string> | undefined)",
                value: input.scopes
            }, _errorFactory)) && _ao35(input.scopes, _path + ".scopes", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".scopes",
                expected: "(Record<string, string> | undefined)",
                value: input.scopes
            }, _errorFactory));
            const _ao93 = (input, _path, _exceptionable = true) => (undefined === input.tokenUrl || "string" === typeof input.tokenUrl || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".tokenUrl",
                expected: "(string | undefined)",
                value: input.tokenUrl
            }, _errorFactory)) && (undefined === input.refreshUrl || "string" === typeof input.refreshUrl || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".refreshUrl",
                expected: "(string | undefined)",
                value: input.refreshUrl
            }, _errorFactory)) && (undefined === input.scopes || ("object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".scopes",
                expected: "(Record<string, string> | undefined)",
                value: input.scopes
            }, _errorFactory)) && _ao35(input.scopes, _path + ".scopes", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".scopes",
                expected: "(Record<string, string> | undefined)",
                value: input.scopes
            }, _errorFactory));
            const _ao94 = (input, _path, _exceptionable = true) => ("openIdConnect" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"openIdConnect"',
                value: input.type
            }, _errorFactory)) && ("string" === typeof input.openIdConnectUrl || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".openIdConnectUrl",
                expected: "string",
                value: input.openIdConnectUrl
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory));
            const _ao95 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return ("object" === typeof value && null !== value || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: 'Omit<OpenApiV3.IOperation.IParameter, "in">',
                    value
                }, _errorFactory)) && _ao79(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: 'Omit<OpenApiV3.IOperation.IParameter, "in">',
                    value
                }, _errorFactory);
            }));
            const _ao96 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return ("object" === typeof value && null !== value && false === Array.isArray(value) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "OpenApiV3.IExample",
                    value
                }, _errorFactory)) && _ao76(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "OpenApiV3.IExample",
                    value
                }, _errorFactory);
            }));
            const _ao97 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return ("object" === typeof value && null !== value && false === Array.isArray(value) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "OpenApiV3.IPath",
                    value
                }, _errorFactory)) && _ao98(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "OpenApiV3.IPath",
                    value
                }, _errorFactory);
            }));
            const _ao98 = (input, _path, _exceptionable = true) => (undefined === input.parameters || (Array.isArray(input.parameters) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".parameters",
                expected: "(Array<IParameter | IReference<`#/components/headers/${string}`> | IReference<`#/components/parameters/${string}`>> | undefined)",
                value: input.parameters
            }, _errorFactory)) && input.parameters.every(((elem, _index118) => ("object" === typeof elem && null !== elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".parameters[" + _index118 + "]",
                expected: "(OpenApiV3.IJsonSchema.IReference<`#/components/headers/${string}`> | OpenApiV3.IJsonSchema.IReference<`#/components/parameters/${string}`> | OpenApiV3.IOperation.IParameter)",
                value: elem
            }, _errorFactory)) && _au4(elem, _path + ".parameters[" + _index118 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".parameters[" + _index118 + "]",
                expected: "(OpenApiV3.IJsonSchema.IReference<`#/components/headers/${string}`> | OpenApiV3.IJsonSchema.IReference<`#/components/parameters/${string}`> | OpenApiV3.IOperation.IParameter)",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".parameters",
                expected: "(Array<IParameter | IReference<`#/components/headers/${string}`> | IReference<`#/components/parameters/${string}`>> | undefined)",
                value: input.parameters
            }, _errorFactory)) && (undefined === input.servers || (Array.isArray(input.servers) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".servers",
                expected: "(Array<OpenApiV3.IServer> | undefined)",
                value: input.servers
            }, _errorFactory)) && input.servers.every(((elem, _index119) => ("object" === typeof elem && null !== elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".servers[" + _index119 + "]",
                expected: "OpenApiV3.IServer",
                value: elem
            }, _errorFactory)) && _ao49(elem, _path + ".servers[" + _index119 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".servers[" + _index119 + "]",
                expected: "OpenApiV3.IServer",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".servers",
                expected: "(Array<OpenApiV3.IServer> | undefined)",
                value: input.servers
            }, _errorFactory)) && (undefined === input.summary || "string" === typeof input.summary || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".summary",
                expected: "(string | undefined)",
                value: input.summary
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.options || ("object" === typeof input.options && null !== input.options && false === Array.isArray(input.options) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".options",
                expected: "(OpenApiV3.IOperation | undefined)",
                value: input.options
            }, _errorFactory)) && _ao100(input.options, _path + ".options", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".options",
                expected: "(OpenApiV3.IOperation | undefined)",
                value: input.options
            }, _errorFactory)) && (undefined === input.get || ("object" === typeof input.get && null !== input.get && false === Array.isArray(input.get) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".get",
                expected: "(OpenApiV3.IOperation | undefined)",
                value: input.get
            }, _errorFactory)) && _ao100(input.get, _path + ".get", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".get",
                expected: "(OpenApiV3.IOperation | undefined)",
                value: input.get
            }, _errorFactory)) && (undefined === input.post || ("object" === typeof input.post && null !== input.post && false === Array.isArray(input.post) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".post",
                expected: "(OpenApiV3.IOperation | undefined)",
                value: input.post
            }, _errorFactory)) && _ao100(input.post, _path + ".post", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".post",
                expected: "(OpenApiV3.IOperation | undefined)",
                value: input.post
            }, _errorFactory)) && (undefined === input.patch || ("object" === typeof input.patch && null !== input.patch && false === Array.isArray(input.patch) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".patch",
                expected: "(OpenApiV3.IOperation | undefined)",
                value: input.patch
            }, _errorFactory)) && _ao100(input.patch, _path + ".patch", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".patch",
                expected: "(OpenApiV3.IOperation | undefined)",
                value: input.patch
            }, _errorFactory)) && (undefined === input.put || ("object" === typeof input.put && null !== input.put && false === Array.isArray(input.put) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".put",
                expected: "(OpenApiV3.IOperation | undefined)",
                value: input.put
            }, _errorFactory)) && _ao100(input.put, _path + ".put", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".put",
                expected: "(OpenApiV3.IOperation | undefined)",
                value: input.put
            }, _errorFactory)) && (undefined === input["delete"] || ("object" === typeof input["delete"] && null !== input["delete"] && false === Array.isArray(input["delete"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["delete"]',
                expected: "(OpenApiV3.IOperation | undefined)",
                value: input["delete"]
            }, _errorFactory)) && _ao100(input["delete"], _path + '["delete"]', _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["delete"]',
                expected: "(OpenApiV3.IOperation | undefined)",
                value: input["delete"]
            }, _errorFactory)) && (undefined === input.head || ("object" === typeof input.head && null !== input.head && false === Array.isArray(input.head) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".head",
                expected: "(OpenApiV3.IOperation | undefined)",
                value: input.head
            }, _errorFactory)) && _ao100(input.head, _path + ".head", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".head",
                expected: "(OpenApiV3.IOperation | undefined)",
                value: input.head
            }, _errorFactory)) && (undefined === input.trace || ("object" === typeof input.trace && null !== input.trace && false === Array.isArray(input.trace) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".trace",
                expected: "(OpenApiV3.IOperation | undefined)",
                value: input.trace
            }, _errorFactory)) && _ao100(input.trace, _path + ".trace", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".trace",
                expected: "(OpenApiV3.IOperation | undefined)",
                value: input.trace
            }, _errorFactory));
            const _ao99 = (input, _path, _exceptionable = true) => ("string" === typeof input.$ref && RegExp(/^#\/components\/parameters\/(.*)/).test(input.$ref) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".$ref",
                expected: "`#/components/parameters/${string}`",
                value: input.$ref
            }, _errorFactory)) && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory))) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true;
            const _ao100 = (input, _path, _exceptionable = true) => (undefined === input.operationId || "string" === typeof input.operationId || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".operationId",
                expected: "(string | undefined)",
                value: input.operationId
            }, _errorFactory)) && (undefined === input.parameters || (Array.isArray(input.parameters) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".parameters",
                expected: "(Array<IParameter | IReference<`#/components/headers/${string}`> | IReference<`#/components/parameters/${string}`>> | undefined)",
                value: input.parameters
            }, _errorFactory)) && input.parameters.every(((elem, _index120) => ("object" === typeof elem && null !== elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".parameters[" + _index120 + "]",
                expected: "(OpenApiV3.IJsonSchema.IReference<`#/components/headers/${string}`> | OpenApiV3.IJsonSchema.IReference<`#/components/parameters/${string}`> | OpenApiV3.IOperation.IParameter)",
                value: elem
            }, _errorFactory)) && _au4(elem, _path + ".parameters[" + _index120 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".parameters[" + _index120 + "]",
                expected: "(OpenApiV3.IJsonSchema.IReference<`#/components/headers/${string}`> | OpenApiV3.IJsonSchema.IReference<`#/components/parameters/${string}`> | OpenApiV3.IOperation.IParameter)",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".parameters",
                expected: "(Array<IParameter | IReference<`#/components/headers/${string}`> | IReference<`#/components/parameters/${string}`>> | undefined)",
                value: input.parameters
            }, _errorFactory)) && (undefined === input.requestBody || ("object" === typeof input.requestBody && null !== input.requestBody && false === Array.isArray(input.requestBody) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".requestBody",
                expected: "(OpenApiV3.IJsonSchema.IReference<`#/components/requestBodies/${string}`> | OpenApiV3.IOperation.IRequestBody | undefined)",
                value: input.requestBody
            }, _errorFactory)) && _au15(input.requestBody, _path + ".requestBody", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".requestBody",
                expected: "(OpenApiV3.IJsonSchema.IReference<`#/components/requestBodies/${string}`> | OpenApiV3.IOperation.IRequestBody | undefined)",
                value: input.requestBody
            }, _errorFactory)) && (undefined === input.responses || ("object" === typeof input.responses && null !== input.responses && false === Array.isArray(input.responses) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".responses",
                expected: "(Record<string, IResponse | IReference<`#/components/responses/${string}`>> | undefined)",
                value: input.responses
            }, _errorFactory)) && _ao102(input.responses, _path + ".responses", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".responses",
                expected: "(Record<string, IResponse | IReference<`#/components/responses/${string}`>> | undefined)",
                value: input.responses
            }, _errorFactory)) && (undefined === input.servers || (Array.isArray(input.servers) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".servers",
                expected: "(Array<OpenApiV3.IServer> | undefined)",
                value: input.servers
            }, _errorFactory)) && input.servers.every(((elem, _index121) => ("object" === typeof elem && null !== elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".servers[" + _index121 + "]",
                expected: "OpenApiV3.IServer",
                value: elem
            }, _errorFactory)) && _ao49(elem, _path + ".servers[" + _index121 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".servers[" + _index121 + "]",
                expected: "OpenApiV3.IServer",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".servers",
                expected: "(Array<OpenApiV3.IServer> | undefined)",
                value: input.servers
            }, _errorFactory)) && (undefined === input.summary || "string" === typeof input.summary || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".summary",
                expected: "(string | undefined)",
                value: input.summary
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.security || (Array.isArray(input.security) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".security",
                expected: "(Array<Record<string, Array<string>>> | undefined)",
                value: input.security
            }, _errorFactory)) && input.security.every(((elem, _index122) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".security[" + _index122 + "]",
                expected: "Record<string, Array<string>>",
                value: elem
            }, _errorFactory)) && _ao39(elem, _path + ".security[" + _index122 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".security[" + _index122 + "]",
                expected: "Record<string, Array<string>>",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".security",
                expected: "(Array<Record<string, Array<string>>> | undefined)",
                value: input.security
            }, _errorFactory)) && (undefined === input.tags || (Array.isArray(input.tags) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".tags",
                expected: "(Array<string> | undefined)",
                value: input.tags
            }, _errorFactory)) && input.tags.every(((elem, _index123) => "string" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".tags[" + _index123 + "]",
                expected: "string",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".tags",
                expected: "(Array<string> | undefined)",
                value: input.tags
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory));
            const _ao101 = (input, _path, _exceptionable = true) => ("string" === typeof input.$ref && RegExp(/^#\/components\/requestBodies\/(.*)/).test(input.$ref) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".$ref",
                expected: "`#/components/requestBodies/${string}`",
                value: input.$ref
            }, _errorFactory)) && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory))) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true;
            const _ao102 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return ("object" === typeof value && null !== value && false === Array.isArray(value) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "(OpenApiV3.IJsonSchema.IReference<`#/components/responses/${string}`> | OpenApiV3.IOperation.IResponse)",
                    value
                }, _errorFactory)) && _au16(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "(OpenApiV3.IJsonSchema.IReference<`#/components/responses/${string}`> | OpenApiV3.IOperation.IResponse)",
                    value
                }, _errorFactory);
            }));
            const _ao103 = (input, _path, _exceptionable = true) => ("string" === typeof input.$ref && RegExp(/^#\/components\/responses\/(.*)/).test(input.$ref) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".$ref",
                expected: "`#/components/responses/${string}`",
                value: input.$ref
            }, _errorFactory)) && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory))) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true;
            const _ao104 = (input, _path, _exceptionable = true) => ("string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".name",
                expected: "string",
                value: input.name
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory));
            const _ao105 = (input, _path, _exceptionable = true) => ("string" === typeof input.openapi && RegExp(/^3\.1\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(input.openapi) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".openapi",
                expected: "`3.1.${number}`",
                value: input.openapi
            }, _errorFactory)) && (undefined === input.servers || (Array.isArray(input.servers) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".servers",
                expected: "(Array<OpenApiV3_1.IServer> | undefined)",
                value: input.servers
            }, _errorFactory)) && input.servers.every(((elem, _index124) => ("object" === typeof elem && null !== elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".servers[" + _index124 + "]",
                expected: "OpenApiV3_1.IServer",
                value: elem
            }, _errorFactory)) && _ao106(elem, _path + ".servers[" + _index124 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".servers[" + _index124 + "]",
                expected: "OpenApiV3_1.IServer",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".servers",
                expected: "(Array<OpenApiV3_1.IServer> | undefined)",
                value: input.servers
            }, _errorFactory)) && (undefined === input.info || ("object" === typeof input.info && null !== input.info || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".info",
                expected: "(OpenApiV3_1.IDocument.IInfo | undefined)",
                value: input.info
            }, _errorFactory)) && _ao109(input.info, _path + ".info", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".info",
                expected: "(OpenApiV3_1.IDocument.IInfo | undefined)",
                value: input.info
            }, _errorFactory)) && (undefined === input.components || ("object" === typeof input.components && null !== input.components && false === Array.isArray(input.components) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".components",
                expected: "(OpenApiV3_1.IComponents | undefined)",
                value: input.components
            }, _errorFactory)) && _ao112(input.components, _path + ".components", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".components",
                expected: "(OpenApiV3_1.IComponents | undefined)",
                value: input.components
            }, _errorFactory)) && (undefined === input.paths || ("object" === typeof input.paths && null !== input.paths && false === Array.isArray(input.paths) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".paths",
                expected: "(Record<string, OpenApiV3_1.IPath> | undefined)",
                value: input.paths
            }, _errorFactory)) && _ao130(input.paths, _path + ".paths", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".paths",
                expected: "(Record<string, OpenApiV3_1.IPath> | undefined)",
                value: input.paths
            }, _errorFactory)) && (undefined === input.webhooks || ("object" === typeof input.webhooks && null !== input.webhooks && false === Array.isArray(input.webhooks) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".webhooks",
                expected: "(Record<string, IPath | IReference<`#/components/pathItems/${string}`>> | undefined)",
                value: input.webhooks
            }, _errorFactory)) && _ao163(input.webhooks, _path + ".webhooks", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".webhooks",
                expected: "(Record<string, IPath | IReference<`#/components/pathItems/${string}`>> | undefined)",
                value: input.webhooks
            }, _errorFactory)) && (undefined === input.security || (Array.isArray(input.security) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".security",
                expected: "(Array<Record<string, Array<string>>> | undefined)",
                value: input.security
            }, _errorFactory)) && input.security.every(((elem, _index125) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".security[" + _index125 + "]",
                expected: "Record<string, Array<string>>",
                value: elem
            }, _errorFactory)) && _ao39(elem, _path + ".security[" + _index125 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".security[" + _index125 + "]",
                expected: "Record<string, Array<string>>",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".security",
                expected: "(Array<Record<string, Array<string>>> | undefined)",
                value: input.security
            }, _errorFactory)) && (undefined === input.tags || (Array.isArray(input.tags) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".tags",
                expected: "(Array<OpenApiV3_1.IDocument.ITag> | undefined)",
                value: input.tags
            }, _errorFactory)) && input.tags.every(((elem, _index126) => ("object" === typeof elem && null !== elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".tags[" + _index126 + "]",
                expected: "OpenApiV3_1.IDocument.ITag",
                value: elem
            }, _errorFactory)) && _ao165(elem, _path + ".tags[" + _index126 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".tags[" + _index126 + "]",
                expected: "OpenApiV3_1.IDocument.ITag",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".tags",
                expected: "(Array<OpenApiV3_1.IDocument.ITag> | undefined)",
                value: input.tags
            }, _errorFactory));
            const _ao106 = (input, _path, _exceptionable = true) => ("string" === typeof input.url || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".url",
                expected: "string",
                value: input.url
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.variables || ("object" === typeof input.variables && null !== input.variables && false === Array.isArray(input.variables) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".variables",
                expected: "(Record<string, OpenApiV3_1.IServer.IVariable> | undefined)",
                value: input.variables
            }, _errorFactory)) && _ao107(input.variables, _path + ".variables", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".variables",
                expected: "(Record<string, OpenApiV3_1.IServer.IVariable> | undefined)",
                value: input.variables
            }, _errorFactory));
            const _ao107 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return ("object" === typeof value && null !== value || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "OpenApiV3_1.IServer.IVariable",
                    value
                }, _errorFactory)) && _ao108(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "OpenApiV3_1.IServer.IVariable",
                    value
                }, _errorFactory);
            }));
            const _ao108 = (input, _path, _exceptionable = true) => ("string" === typeof input["default"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["default"]',
                expected: "string",
                value: input["default"]
            }, _errorFactory)) && (undefined === input["enum"] || (Array.isArray(input["enum"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"]',
                expected: "((Array<string> & MinItems<1>) | undefined)",
                value: input["enum"]
            }, _errorFactory)) && ((1 <= input["enum"].length || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"]',
                expected: "Array<> & MinItems<1>",
                value: input["enum"]
            }, _errorFactory)) && input["enum"].every(((elem, _index127) => "string" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"][' + _index127 + "]",
                expected: "string",
                value: elem
            }, _errorFactory)))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"]',
                expected: "((Array<string> & MinItems<1>) | undefined)",
                value: input["enum"]
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory));
            const _ao109 = (input, _path, _exceptionable = true) => ("string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "string",
                value: input.title
            }, _errorFactory)) && (undefined === input.summary || "string" === typeof input.summary || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".summary",
                expected: "(string | undefined)",
                value: input.summary
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.termsOfService || "string" === typeof input.termsOfService || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".termsOfService",
                expected: "(string | undefined)",
                value: input.termsOfService
            }, _errorFactory)) && (undefined === input.contact || ("object" === typeof input.contact && null !== input.contact && false === Array.isArray(input.contact) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".contact",
                expected: "(OpenApiV3_1.IDocument.IContact | undefined)",
                value: input.contact
            }, _errorFactory)) && _ao110(input.contact, _path + ".contact", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".contact",
                expected: "(OpenApiV3_1.IDocument.IContact | undefined)",
                value: input.contact
            }, _errorFactory)) && (undefined === input.license || ("object" === typeof input.license && null !== input.license || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".license",
                expected: "(OpenApiV3_1.IDocument.ILicense | undefined)",
                value: input.license
            }, _errorFactory)) && _ao111(input.license, _path + ".license", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".license",
                expected: "(OpenApiV3_1.IDocument.ILicense | undefined)",
                value: input.license
            }, _errorFactory)) && ("string" === typeof input.version || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".version",
                expected: "string",
                value: input.version
            }, _errorFactory));
            const _ao110 = (input, _path, _exceptionable = true) => (undefined === input.name || "string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".name",
                expected: "(string | undefined)",
                value: input.name
            }, _errorFactory)) && (undefined === input.url || "string" === typeof input.url || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".url",
                expected: "(string | undefined)",
                value: input.url
            }, _errorFactory)) && (undefined === input.email || "string" === typeof input.email || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".email",
                expected: "(string | undefined)",
                value: input.email
            }, _errorFactory));
            const _ao111 = (input, _path, _exceptionable = true) => ("string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".name",
                expected: "string",
                value: input.name
            }, _errorFactory)) && (undefined === input.identifier || "string" === typeof input.identifier || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".identifier",
                expected: "(string | undefined)",
                value: input.identifier
            }, _errorFactory)) && (undefined === input.url || "string" === typeof input.url || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".url",
                expected: "(string | undefined)",
                value: input.url
            }, _errorFactory));
            const _ao112 = (input, _path, _exceptionable = true) => (undefined === input.schemas || ("object" === typeof input.schemas && null !== input.schemas && false === Array.isArray(input.schemas) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".schemas",
                expected: "(Record<string, OpenApiV3_1.IJsonSchema> | undefined)",
                value: input.schemas
            }, _errorFactory)) && _ao113(input.schemas, _path + ".schemas", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".schemas",
                expected: "(Record<string, OpenApiV3_1.IJsonSchema> | undefined)",
                value: input.schemas
            }, _errorFactory)) && (undefined === input.pathItems || ("object" === typeof input.pathItems && null !== input.pathItems && false === Array.isArray(input.pathItems) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".pathItems",
                expected: "(Record<string, OpenApiV3_1.IPath> | undefined)",
                value: input.pathItems
            }, _errorFactory)) && _ao130(input.pathItems, _path + ".pathItems", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".pathItems",
                expected: "(Record<string, OpenApiV3_1.IPath> | undefined)",
                value: input.pathItems
            }, _errorFactory)) && (undefined === input.responses || ("object" === typeof input.responses && null !== input.responses && false === Array.isArray(input.responses) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".responses",
                expected: "(Record<string, OpenApiV3_1.IOperation.IResponse> | undefined)",
                value: input.responses
            }, _errorFactory)) && _ao148(input.responses, _path + ".responses", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".responses",
                expected: "(Record<string, OpenApiV3_1.IOperation.IResponse> | undefined)",
                value: input.responses
            }, _errorFactory)) && (undefined === input.parameters || ("object" === typeof input.parameters && null !== input.parameters && false === Array.isArray(input.parameters) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".parameters",
                expected: "(Record<string, OpenApiV3_1.IOperation.IParameter> | undefined)",
                value: input.parameters
            }, _errorFactory)) && _ao149(input.parameters, _path + ".parameters", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".parameters",
                expected: "(Record<string, OpenApiV3_1.IOperation.IParameter> | undefined)",
                value: input.parameters
            }, _errorFactory)) && (undefined === input.requestBodies || ("object" === typeof input.requestBodies && null !== input.requestBodies && false === Array.isArray(input.requestBodies) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".requestBodies",
                expected: "(Record<string, OpenApiV3_1.IOperation.IRequestBody> | undefined)",
                value: input.requestBodies
            }, _errorFactory)) && _ao150(input.requestBodies, _path + ".requestBodies", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".requestBodies",
                expected: "(Record<string, OpenApiV3_1.IOperation.IRequestBody> | undefined)",
                value: input.requestBodies
            }, _errorFactory)) && (undefined === input.securitySchemes || ("object" === typeof input.securitySchemes && null !== input.securitySchemes && false === Array.isArray(input.securitySchemes) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".securitySchemes",
                expected: "(Record<string, OpenApiV3_1.ISecurityScheme> | undefined)",
                value: input.securitySchemes
            }, _errorFactory)) && _ao151(input.securitySchemes, _path + ".securitySchemes", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".securitySchemes",
                expected: "(Record<string, OpenApiV3_1.ISecurityScheme> | undefined)",
                value: input.securitySchemes
            }, _errorFactory)) && (undefined === input.headers || ("object" === typeof input.headers && null !== input.headers && false === Array.isArray(input.headers) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".headers",
                expected: '(Record<string, Omit<OpenApiV3_1.IOperation.IParameter, "in">> | undefined)',
                value: input.headers
            }, _errorFactory)) && _ao161(input.headers, _path + ".headers", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".headers",
                expected: '(Record<string, Omit<OpenApiV3_1.IOperation.IParameter, "in">> | undefined)',
                value: input.headers
            }, _errorFactory)) && (undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Record<string, OpenApiV3_1.IExample> | undefined)",
                value: input.examples
            }, _errorFactory)) && _ao162(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Record<string, OpenApiV3_1.IExample> | undefined)",
                value: input.examples
            }, _errorFactory));
            const _ao113 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return ("object" === typeof value && null !== value && false === Array.isArray(value) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                    value
                }, _errorFactory)) && _au5(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                    value
                }, _errorFactory);
            }));
            const _ao114 = (input, _path, _exceptionable = true) => (undefined === input.nullable || "boolean" === typeof input.nullable || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".nullable",
                expected: "(boolean | undefined)",
                value: input.nullable
            }, _errorFactory)) && (undefined === input.properties || ("object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".properties",
                expected: "(Record<string, OpenApiV3_1.IJsonSchema> | undefined)",
                value: input.properties
            }, _errorFactory)) && _ao113(input.properties, _path + ".properties", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".properties",
                expected: "(Record<string, OpenApiV3_1.IJsonSchema> | undefined)",
                value: input.properties
            }, _errorFactory)) && (undefined === input.required || (Array.isArray(input.required) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".required",
                expected: "(Array<string> | undefined)",
                value: input.required
            }, _errorFactory)) && input.required.every(((elem, _index128) => "string" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".required[" + _index128 + "]",
                expected: "string",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".required",
                expected: "(Array<string> | undefined)",
                value: input.required
            }, _errorFactory)) && ((null !== input.additionalProperties || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".additionalProperties",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
                value: input.additionalProperties
            }, _errorFactory)) && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || ("object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".additionalProperties",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
                value: input.additionalProperties
            }, _errorFactory)) && _au5(input.additionalProperties, _path + ".additionalProperties", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".additionalProperties",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
                value: input.additionalProperties
            }, _errorFactory))) && (undefined === input.maxProperties || "number" === typeof input.maxProperties || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maxProperties",
                expected: "(number | undefined)",
                value: input.maxProperties
            }, _errorFactory)) && (undefined === input.minProperties || "number" === typeof input.minProperties || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minProperties",
                expected: "(number | undefined)",
                value: input.minProperties
            }, _errorFactory)) && ("object" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"object"',
                value: input.type
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)));
            const _ao115 = (input, _path, _exceptionable = true) => ((Array.isArray(input.type) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: 'Array<"string" | "number" | "boolean" | "object" | "integer" | "array" | "null">',
                value: input.type
            }, _errorFactory)) && input.type.every(((elem, _index129) => "string" === elem || "number" === elem || "boolean" === elem || "object" === elem || "integer" === elem || "array" === elem || "null" === elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type[" + _index129 + "]",
                expected: '("array" | "boolean" | "integer" | "null" | "number" | "object" | "string")',
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: 'Array<"string" | "number" | "boolean" | "object" | "integer" | "array" | "null">',
                value: input.type
            }, _errorFactory)) && (null === input["default"] || undefined === input["default"] || Array.isArray(input["default"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["default"]',
                expected: "(Array<any> | null | undefined)",
                value: input["default"]
            }, _errorFactory)) && (undefined === input["enum"] || Array.isArray(input["enum"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"]',
                expected: "(Array<any> | undefined)",
                value: input["enum"]
            }, _errorFactory)) && ("string" === typeof input["const"] || "number" === typeof input["const"] || "boolean" === typeof input["const"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["const"]',
                expected: "(boolean | number | string)",
                value: input["const"]
            }, _errorFactory)) && (undefined === input.nullable || "boolean" === typeof input.nullable || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".nullable",
                expected: "(boolean | undefined)",
                value: input.nullable
            }, _errorFactory)) && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory))) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && (undefined === input.minimum || "number" === typeof input.minimum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minimum",
                expected: "(number | undefined)",
                value: input.minimum
            }, _errorFactory)) && (undefined === input.maximum || "number" === typeof input.maximum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maximum",
                expected: "(number | undefined)",
                value: input.maximum
            }, _errorFactory)) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && (0 < input.multipleOf || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".multipleOf",
                expected: "number & ExclusiveMinimum<0>",
                value: input.multipleOf
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".multipleOf",
                expected: "((number & ExclusiveMinimum<0>) | undefined)",
                value: input.multipleOf
            }, _errorFactory)) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".exclusiveMinimum",
                expected: "(boolean | number | undefined)",
                value: input.exclusiveMinimum
            }, _errorFactory)) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".exclusiveMaximum",
                expected: "(boolean | number | undefined)",
                value: input.exclusiveMaximum
            }, _errorFactory)) && (undefined === input.format || "string" === typeof input.format || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".format",
                expected: "(string | undefined)",
                value: input.format
            }, _errorFactory)) && (undefined === input.maxLength || "number" === typeof input.maxLength && (Math.floor(input.maxLength) === input.maxLength && 0 <= input.maxLength && input.maxLength <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maxLength",
                expected: 'number & Type<"uint64">',
                value: input.maxLength
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maxLength",
                expected: '((number & Type<"uint64">) | undefined)',
                value: input.maxLength
            }, _errorFactory)) && (undefined === input.pattern || "string" === typeof input.pattern || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".pattern",
                expected: "(string | undefined)",
                value: input.pattern
            }, _errorFactory)) && (undefined === input.contentMediaType || "string" === typeof input.contentMediaType || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".contentMediaType",
                expected: "(string | undefined)",
                value: input.contentMediaType
            }, _errorFactory)) && (undefined === input.minLength || "number" === typeof input.minLength && (Math.floor(input.minLength) === input.minLength && 0 <= input.minLength && input.minLength <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minLength",
                expected: 'number & Type<"uint64">',
                value: input.minLength
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minLength",
                expected: '((number & Type<"uint64">) | undefined)',
                value: input.minLength
            }, _errorFactory)) && ((null !== input.items || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".items",
                expected: "(Array<OpenApiV3_1.IJsonSchema> | OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | undefined)",
                value: input.items
            }, _errorFactory)) && (undefined === input.items || (Array.isArray(input.items) && input.items.every(((elem, _index130) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".items[" + _index130 + "]",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory)) && _au5(elem, _path + ".items[" + _index130 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".items[" + _index130 + "]",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory))) || "object" === typeof input.items && null !== input.items && false === Array.isArray(input.items) && _au5(input.items, _path + ".items", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".items",
                expected: "(Array<OpenApiV3_1.IJsonSchema> | OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | undefined)",
                value: input.items
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".items",
                expected: "(Array<OpenApiV3_1.IJsonSchema> | OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | undefined)",
                value: input.items
            }, _errorFactory))) && (undefined === input.prefixItems || (Array.isArray(input.prefixItems) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".prefixItems",
                expected: "(Array<OpenApiV3_1.IJsonSchema> | undefined)",
                value: input.prefixItems
            }, _errorFactory)) && input.prefixItems.every(((elem, _index131) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".prefixItems[" + _index131 + "]",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory)) && _au5(elem, _path + ".prefixItems[" + _index131 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".prefixItems[" + _index131 + "]",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".prefixItems",
                expected: "(Array<OpenApiV3_1.IJsonSchema> | undefined)",
                value: input.prefixItems
            }, _errorFactory)) && (undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".uniqueItems",
                expected: "(boolean | undefined)",
                value: input.uniqueItems
            }, _errorFactory)) && ((null !== input.additionalItems || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".additionalItems",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
                value: input.additionalItems
            }, _errorFactory)) && (undefined === input.additionalItems || "boolean" === typeof input.additionalItems || ("object" === typeof input.additionalItems && null !== input.additionalItems && false === Array.isArray(input.additionalItems) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".additionalItems",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
                value: input.additionalItems
            }, _errorFactory)) && _au5(input.additionalItems, _path + ".additionalItems", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".additionalItems",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
                value: input.additionalItems
            }, _errorFactory))) && (undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minItems",
                expected: 'number & Type<"uint64">',
                value: input.minItems
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minItems",
                expected: '((number & Type<"uint64">) | undefined)',
                value: input.minItems
            }, _errorFactory)) && (undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maxItems",
                expected: 'number & Type<"uint64">',
                value: input.maxItems
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maxItems",
                expected: '((number & Type<"uint64">) | undefined)',
                value: input.maxItems
            }, _errorFactory)) && ((null !== input.additionalProperties || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".additionalProperties",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
                value: input.additionalProperties
            }, _errorFactory)) && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || ("object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".additionalProperties",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
                value: input.additionalProperties
            }, _errorFactory)) && _au5(input.additionalProperties, _path + ".additionalProperties", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".additionalProperties",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
                value: input.additionalProperties
            }, _errorFactory))) && (undefined === input.properties || ("object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".properties",
                expected: "(Record<string, OpenApiV3_1.IJsonSchema> | undefined)",
                value: input.properties
            }, _errorFactory)) && _ao113(input.properties, _path + ".properties", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".properties",
                expected: "(Record<string, OpenApiV3_1.IJsonSchema> | undefined)",
                value: input.properties
            }, _errorFactory)) && (undefined === input.required || (Array.isArray(input.required) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".required",
                expected: "(Array<string> | undefined)",
                value: input.required
            }, _errorFactory)) && input.required.every(((elem, _index132) => "string" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".required[" + _index132 + "]",
                expected: "string",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".required",
                expected: "(Array<string> | undefined)",
                value: input.required
            }, _errorFactory)) && (undefined === input.maxProperties || "number" === typeof input.maxProperties || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maxProperties",
                expected: "(number | undefined)",
                value: input.maxProperties
            }, _errorFactory)) && (undefined === input.minProperties || "number" === typeof input.minProperties || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minProperties",
                expected: "(number | undefined)",
                value: input.minProperties
            }, _errorFactory)) && ((Array.isArray(input.oneOf) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".oneOf",
                expected: "Array<OpenApiV3_1.IJsonSchema>",
                value: input.oneOf
            }, _errorFactory)) && input.oneOf.every(((elem, _index133) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".oneOf[" + _index133 + "]",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory)) && _au5(elem, _path + ".oneOf[" + _index133 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".oneOf[" + _index133 + "]",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".oneOf",
                expected: "Array<OpenApiV3_1.IJsonSchema>",
                value: input.oneOf
            }, _errorFactory)) && (undefined === input.discriminator || ("object" === typeof input.discriminator && null !== input.discriminator || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".discriminator",
                expected: "(OpenApiV3_1.IJsonSchema.IOneOf.IDiscriminator | undefined)",
                value: input.discriminator
            }, _errorFactory)) && _ao127(input.discriminator, _path + ".discriminator", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".discriminator",
                expected: "(OpenApiV3_1.IJsonSchema.IOneOf.IDiscriminator | undefined)",
                value: input.discriminator
            }, _errorFactory)) && ((Array.isArray(input.anyOf) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".anyOf",
                expected: "Array<OpenApiV3_1.IJsonSchema>",
                value: input.anyOf
            }, _errorFactory)) && input.anyOf.every(((elem, _index134) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".anyOf[" + _index134 + "]",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory)) && _au5(elem, _path + ".anyOf[" + _index134 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".anyOf[" + _index134 + "]",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".anyOf",
                expected: "Array<OpenApiV3_1.IJsonSchema>",
                value: input.anyOf
            }, _errorFactory)) && ((Array.isArray(input.allOf) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".allOf",
                expected: "Array<OpenApiV3_1.IJsonSchema>",
                value: input.allOf
            }, _errorFactory)) && input.allOf.every(((elem, _index135) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".allOf[" + _index135 + "]",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory)) && _au5(elem, _path + ".allOf[" + _index135 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".allOf[" + _index135 + "]",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".allOf",
                expected: "Array<OpenApiV3_1.IJsonSchema>",
                value: input.allOf
            }, _errorFactory)) && ("string" === typeof input.$ref || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".$ref",
                expected: "string",
                value: input.$ref
            }, _errorFactory));
            const _ao116 = (input, _path, _exceptionable = true) => ("string" === typeof input["const"] || "number" === typeof input["const"] || "boolean" === typeof input["const"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["const"]',
                expected: "(boolean | number | string)",
                value: input["const"]
            }, _errorFactory)) && (undefined === input.nullable || "boolean" === typeof input.nullable || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".nullable",
                expected: "(boolean | undefined)",
                value: input.nullable
            }, _errorFactory)) && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory))) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true;
            const _ao117 = (input, _path, _exceptionable = true) => (undefined === input.nullable || "boolean" === typeof input.nullable || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".nullable",
                expected: "(boolean | undefined)",
                value: input.nullable
            }, _errorFactory)) && (null === input["default"] || undefined === input["default"] || "boolean" === typeof input["default"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["default"]',
                expected: "(boolean | null | undefined)",
                value: input["default"]
            }, _errorFactory)) && (undefined === input["enum"] || (Array.isArray(input["enum"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"]',
                expected: "(Array<boolean | null> | undefined)",
                value: input["enum"]
            }, _errorFactory)) && input["enum"].every(((elem, _index136) => null === elem || "boolean" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"][' + _index136 + "]",
                expected: "(boolean | null)",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"]',
                expected: "(Array<boolean | null> | undefined)",
                value: input["enum"]
            }, _errorFactory)) && ("boolean" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"boolean"',
                value: input.type
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)));
            const _ao118 = (input, _path, _exceptionable = true) => (undefined === input.nullable || "boolean" === typeof input.nullable || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".nullable",
                expected: "(boolean | undefined)",
                value: input.nullable
            }, _errorFactory)) && (null === input["default"] || undefined === input["default"] || "number" === typeof input["default"] && (Math.floor(input["default"]) === input["default"] && -0x8000000000000000 <= input["default"] && input["default"] <= 0x8000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["default"]',
                expected: 'number & Type<"int64">',
                value: input["default"]
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["default"]',
                expected: '((number & Type<"int64">) | null | undefined)',
                value: input["default"]
            }, _errorFactory)) && (undefined === input["enum"] || (Array.isArray(input["enum"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"]',
                expected: "(Array<number | null> | undefined)",
                value: input["enum"]
            }, _errorFactory)) && input["enum"].every(((elem, _index137) => null === elem || "number" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"][' + _index137 + "]",
                expected: "(null | number)",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"]',
                expected: "(Array<number | null> | undefined)",
                value: input["enum"]
            }, _errorFactory)) && (undefined === input.minimum || "number" === typeof input.minimum && (Math.floor(input.minimum) === input.minimum && -0x8000000000000000 <= input.minimum && input.minimum <= 0x8000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minimum",
                expected: 'number & Type<"int64">',
                value: input.minimum
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minimum",
                expected: '((number & Type<"int64">) | undefined)',
                value: input.minimum
            }, _errorFactory)) && (undefined === input.maximum || "number" === typeof input.maximum && (Math.floor(input.maximum) === input.maximum && -0x8000000000000000 <= input.maximum && input.maximum <= 0x8000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maximum",
                expected: 'number & Type<"int64">',
                value: input.maximum
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maximum",
                expected: '((number & Type<"int64">) | undefined)',
                value: input.maximum
            }, _errorFactory)) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum && (Math.floor(input.exclusiveMinimum) === input.exclusiveMinimum && -0x8000000000000000 <= input.exclusiveMinimum && input.exclusiveMinimum <= 0x8000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".exclusiveMinimum",
                expected: 'number & Type<"int64">',
                value: input.exclusiveMinimum
            }, _errorFactory)) || "boolean" === typeof input.exclusiveMinimum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".exclusiveMinimum",
                expected: '((number & Type<"int64">) | boolean | undefined)',
                value: input.exclusiveMinimum
            }, _errorFactory)) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum && (Math.floor(input.exclusiveMaximum) === input.exclusiveMaximum && -0x8000000000000000 <= input.exclusiveMaximum && input.exclusiveMaximum <= 0x8000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".exclusiveMaximum",
                expected: 'number & Type<"int64">',
                value: input.exclusiveMaximum
            }, _errorFactory)) || "boolean" === typeof input.exclusiveMaximum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".exclusiveMaximum",
                expected: '((number & Type<"int64">) | boolean | undefined)',
                value: input.exclusiveMaximum
            }, _errorFactory)) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && (Math.floor(input.multipleOf) === input.multipleOf && 0 <= input.multipleOf && input.multipleOf <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".multipleOf",
                expected: 'number & Type<"uint64">',
                value: input.multipleOf
            }, _errorFactory)) && (0 < input.multipleOf || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".multipleOf",
                expected: "number & ExclusiveMinimum<0>",
                value: input.multipleOf
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".multipleOf",
                expected: '((number & Type<"uint64"> & ExclusiveMinimum<0>) | undefined)',
                value: input.multipleOf
            }, _errorFactory)) && ("integer" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"integer"',
                value: input.type
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)));
            const _ao119 = (input, _path, _exceptionable = true) => (undefined === input.nullable || "boolean" === typeof input.nullable || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".nullable",
                expected: "(boolean | undefined)",
                value: input.nullable
            }, _errorFactory)) && (null === input["default"] || undefined === input["default"] || "number" === typeof input["default"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["default"]',
                expected: "(null | number | undefined)",
                value: input["default"]
            }, _errorFactory)) && (undefined === input["enum"] || (Array.isArray(input["enum"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"]',
                expected: "(Array<number | null> | undefined)",
                value: input["enum"]
            }, _errorFactory)) && input["enum"].every(((elem, _index138) => null === elem || "number" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"][' + _index138 + "]",
                expected: "(null | number)",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"]',
                expected: "(Array<number | null> | undefined)",
                value: input["enum"]
            }, _errorFactory)) && (undefined === input.minimum || "number" === typeof input.minimum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minimum",
                expected: "(number | undefined)",
                value: input.minimum
            }, _errorFactory)) && (undefined === input.maximum || "number" === typeof input.maximum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maximum",
                expected: "(number | undefined)",
                value: input.maximum
            }, _errorFactory)) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".exclusiveMinimum",
                expected: "(boolean | number | undefined)",
                value: input.exclusiveMinimum
            }, _errorFactory)) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".exclusiveMaximum",
                expected: "(boolean | number | undefined)",
                value: input.exclusiveMaximum
            }, _errorFactory)) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && (0 < input.multipleOf || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".multipleOf",
                expected: "number & ExclusiveMinimum<0>",
                value: input.multipleOf
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".multipleOf",
                expected: "((number & ExclusiveMinimum<0>) | undefined)",
                value: input.multipleOf
            }, _errorFactory)) && ("number" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"number"',
                value: input.type
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)));
            const _ao120 = (input, _path, _exceptionable = true) => (undefined === input.nullable || "boolean" === typeof input.nullable || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".nullable",
                expected: "(boolean | undefined)",
                value: input.nullable
            }, _errorFactory)) && (null === input["default"] || undefined === input["default"] || "string" === typeof input["default"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["default"]',
                expected: "(null | string | undefined)",
                value: input["default"]
            }, _errorFactory)) && (undefined === input["enum"] || (Array.isArray(input["enum"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"]',
                expected: "(Array<string | null> | undefined)",
                value: input["enum"]
            }, _errorFactory)) && input["enum"].every(((elem, _index139) => null === elem || "string" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"][' + _index139 + "]",
                expected: "(null | string)",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"]',
                expected: "(Array<string | null> | undefined)",
                value: input["enum"]
            }, _errorFactory)) && (undefined === input.format || "string" === typeof input.format || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".format",
                expected: "(string | undefined)",
                value: input.format
            }, _errorFactory)) && (undefined === input.pattern || "string" === typeof input.pattern || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".pattern",
                expected: "(string | undefined)",
                value: input.pattern
            }, _errorFactory)) && (undefined === input.contentMediaType || "string" === typeof input.contentMediaType || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".contentMediaType",
                expected: "(string | undefined)",
                value: input.contentMediaType
            }, _errorFactory)) && (undefined === input.minLength || "number" === typeof input.minLength && (Math.floor(input.minLength) === input.minLength && 0 <= input.minLength && input.minLength <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minLength",
                expected: 'number & Type<"uint64">',
                value: input.minLength
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minLength",
                expected: '((number & Type<"uint64">) | undefined)',
                value: input.minLength
            }, _errorFactory)) && (undefined === input.maxLength || "number" === typeof input.maxLength && (Math.floor(input.maxLength) === input.maxLength && 0 <= input.maxLength && input.maxLength <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maxLength",
                expected: 'number & Type<"uint64">',
                value: input.maxLength
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maxLength",
                expected: '((number & Type<"uint64">) | undefined)',
                value: input.maxLength
            }, _errorFactory)) && ("string" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"string"',
                value: input.type
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)));
            const _ao121 = (input, _path, _exceptionable = true) => (undefined === input.nullable || "boolean" === typeof input.nullable || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".nullable",
                expected: "(boolean | undefined)",
                value: input.nullable
            }, _errorFactory)) && ((null !== input.items || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".items",
                expected: "(Array<OpenApiV3_1.IJsonSchema> | OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | undefined)",
                value: input.items
            }, _errorFactory)) && (undefined === input.items || (Array.isArray(input.items) && input.items.every(((elem, _index140) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".items[" + _index140 + "]",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory)) && _au5(elem, _path + ".items[" + _index140 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".items[" + _index140 + "]",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory))) || "object" === typeof input.items && null !== input.items && false === Array.isArray(input.items) && _au5(input.items, _path + ".items", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".items",
                expected: "(Array<OpenApiV3_1.IJsonSchema> | OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | undefined)",
                value: input.items
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".items",
                expected: "(Array<OpenApiV3_1.IJsonSchema> | OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | undefined)",
                value: input.items
            }, _errorFactory))) && (undefined === input.prefixItems || (Array.isArray(input.prefixItems) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".prefixItems",
                expected: "(Array<OpenApiV3_1.IJsonSchema> | undefined)",
                value: input.prefixItems
            }, _errorFactory)) && input.prefixItems.every(((elem, _index141) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".prefixItems[" + _index141 + "]",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory)) && _au5(elem, _path + ".prefixItems[" + _index141 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".prefixItems[" + _index141 + "]",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".prefixItems",
                expected: "(Array<OpenApiV3_1.IJsonSchema> | undefined)",
                value: input.prefixItems
            }, _errorFactory)) && (undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".uniqueItems",
                expected: "(boolean | undefined)",
                value: input.uniqueItems
            }, _errorFactory)) && ((null !== input.additionalItems || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".additionalItems",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
                value: input.additionalItems
            }, _errorFactory)) && (undefined === input.additionalItems || "boolean" === typeof input.additionalItems || ("object" === typeof input.additionalItems && null !== input.additionalItems && false === Array.isArray(input.additionalItems) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".additionalItems",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
                value: input.additionalItems
            }, _errorFactory)) && _au5(input.additionalItems, _path + ".additionalItems", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".additionalItems",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
                value: input.additionalItems
            }, _errorFactory))) && (undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minItems",
                expected: 'number & Type<"uint64">',
                value: input.minItems
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minItems",
                expected: '((number & Type<"uint64">) | undefined)',
                value: input.minItems
            }, _errorFactory)) && (undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maxItems",
                expected: 'number & Type<"uint64">',
                value: input.maxItems
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maxItems",
                expected: '((number & Type<"uint64">) | undefined)',
                value: input.maxItems
            }, _errorFactory)) && ("array" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"array"',
                value: input.type
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)));
            const _ao122 = (input, _path, _exceptionable = true) => ("string" === typeof input.$ref || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".$ref",
                expected: "string",
                value: input.$ref
            }, _errorFactory)) && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory))) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true;
            const _ao123 = (input, _path, _exceptionable = true) => ("string" === typeof input.$recursiveRef || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".$recursiveRef",
                expected: "string",
                value: input.$recursiveRef
            }, _errorFactory)) && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory))) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true;
            const _ao124 = (input, _path, _exceptionable = true) => ((Array.isArray(input.allOf) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".allOf",
                expected: "Array<OpenApiV3_1.IJsonSchema>",
                value: input.allOf
            }, _errorFactory)) && input.allOf.every(((elem, _index142) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".allOf[" + _index142 + "]",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory)) && _au5(elem, _path + ".allOf[" + _index142 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".allOf[" + _index142 + "]",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".allOf",
                expected: "Array<OpenApiV3_1.IJsonSchema>",
                value: input.allOf
            }, _errorFactory)) && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory))) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true;
            const _ao125 = (input, _path, _exceptionable = true) => ((Array.isArray(input.anyOf) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".anyOf",
                expected: "Array<OpenApiV3_1.IJsonSchema>",
                value: input.anyOf
            }, _errorFactory)) && input.anyOf.every(((elem, _index143) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".anyOf[" + _index143 + "]",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory)) && _au5(elem, _path + ".anyOf[" + _index143 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".anyOf[" + _index143 + "]",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".anyOf",
                expected: "Array<OpenApiV3_1.IJsonSchema>",
                value: input.anyOf
            }, _errorFactory)) && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory))) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true;
            const _ao126 = (input, _path, _exceptionable = true) => ((Array.isArray(input.oneOf) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".oneOf",
                expected: "Array<OpenApiV3_1.IJsonSchema>",
                value: input.oneOf
            }, _errorFactory)) && input.oneOf.every(((elem, _index144) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".oneOf[" + _index144 + "]",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory)) && _au5(elem, _path + ".oneOf[" + _index144 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".oneOf[" + _index144 + "]",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".oneOf",
                expected: "Array<OpenApiV3_1.IJsonSchema>",
                value: input.oneOf
            }, _errorFactory)) && (undefined === input.discriminator || ("object" === typeof input.discriminator && null !== input.discriminator || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".discriminator",
                expected: "(OpenApiV3_1.IJsonSchema.IOneOf.IDiscriminator | undefined)",
                value: input.discriminator
            }, _errorFactory)) && _ao127(input.discriminator, _path + ".discriminator", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".discriminator",
                expected: "(OpenApiV3_1.IJsonSchema.IOneOf.IDiscriminator | undefined)",
                value: input.discriminator
            }, _errorFactory)) && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory))) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true;
            const _ao127 = (input, _path, _exceptionable = true) => ("string" === typeof input.propertyName || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".propertyName",
                expected: "string",
                value: input.propertyName
            }, _errorFactory)) && (undefined === input.mapping || ("object" === typeof input.mapping && null !== input.mapping && false === Array.isArray(input.mapping) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".mapping",
                expected: "(Record<string, string> | undefined)",
                value: input.mapping
            }, _errorFactory)) && _ao35(input.mapping, _path + ".mapping", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".mapping",
                expected: "(Record<string, string> | undefined)",
                value: input.mapping
            }, _errorFactory));
            const _ao128 = (input, _path, _exceptionable = true) => (null === input["default"] || undefined === input["default"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["default"]',
                expected: "(null | undefined)",
                value: input["default"]
            }, _errorFactory)) && ("null" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"null"',
                value: input.type
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)));
            const _ao129 = (input, _path, _exceptionable = true) => (null !== input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: "undefined",
                value: input.type
            }, _errorFactory)) && (undefined === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: "undefined",
                value: input.type
            }, _errorFactory)) && true && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)));
            const _ao130 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return ("object" === typeof value && null !== value && false === Array.isArray(value) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "OpenApiV3_1.IPath",
                    value
                }, _errorFactory)) && _ao131(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "OpenApiV3_1.IPath",
                    value
                }, _errorFactory);
            }));
            const _ao131 = (input, _path, _exceptionable = true) => (undefined === input.parameters || (Array.isArray(input.parameters) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".parameters",
                expected: "(Array<IParameter | IReference<`#/components/headers/${string}`> | IReference<`#/components/parameters/${string}`>>.o1 | undefined)",
                value: input.parameters
            }, _errorFactory)) && input.parameters.every(((elem, _index145) => ("object" === typeof elem && null !== elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".parameters[" + _index145 + "]",
                expected: "(OpenApiV3_1.IJsonSchema.IReference<`#/components/headers/${string}`> | OpenApiV3_1.IJsonSchema.IReference<`#/components/parameters/${string}`> | OpenApiV3_1.IOperation.IParameter)",
                value: elem
            }, _errorFactory)) && _au6(elem, _path + ".parameters[" + _index145 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".parameters[" + _index145 + "]",
                expected: "(OpenApiV3_1.IJsonSchema.IReference<`#/components/headers/${string}`> | OpenApiV3_1.IJsonSchema.IReference<`#/components/parameters/${string}`> | OpenApiV3_1.IOperation.IParameter)",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".parameters",
                expected: "(Array<IParameter | IReference<`#/components/headers/${string}`> | IReference<`#/components/parameters/${string}`>>.o1 | undefined)",
                value: input.parameters
            }, _errorFactory)) && (undefined === input.servers || (Array.isArray(input.servers) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".servers",
                expected: "(Array<OpenApiV3_1.IServer> | undefined)",
                value: input.servers
            }, _errorFactory)) && input.servers.every(((elem, _index146) => ("object" === typeof elem && null !== elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".servers[" + _index146 + "]",
                expected: "OpenApiV3_1.IServer",
                value: elem
            }, _errorFactory)) && _ao106(elem, _path + ".servers[" + _index146 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".servers[" + _index146 + "]",
                expected: "OpenApiV3_1.IServer",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".servers",
                expected: "(Array<OpenApiV3_1.IServer> | undefined)",
                value: input.servers
            }, _errorFactory)) && (undefined === input.summary || "string" === typeof input.summary || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".summary",
                expected: "(string | undefined)",
                value: input.summary
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.options || ("object" === typeof input.options && null !== input.options && false === Array.isArray(input.options) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".options",
                expected: "(OpenApiV3_1.IOperation | undefined)",
                value: input.options
            }, _errorFactory)) && _ao138(input.options, _path + ".options", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".options",
                expected: "(OpenApiV3_1.IOperation | undefined)",
                value: input.options
            }, _errorFactory)) && (undefined === input.get || ("object" === typeof input.get && null !== input.get && false === Array.isArray(input.get) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".get",
                expected: "(OpenApiV3_1.IOperation | undefined)",
                value: input.get
            }, _errorFactory)) && _ao138(input.get, _path + ".get", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".get",
                expected: "(OpenApiV3_1.IOperation | undefined)",
                value: input.get
            }, _errorFactory)) && (undefined === input.post || ("object" === typeof input.post && null !== input.post && false === Array.isArray(input.post) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".post",
                expected: "(OpenApiV3_1.IOperation | undefined)",
                value: input.post
            }, _errorFactory)) && _ao138(input.post, _path + ".post", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".post",
                expected: "(OpenApiV3_1.IOperation | undefined)",
                value: input.post
            }, _errorFactory)) && (undefined === input.patch || ("object" === typeof input.patch && null !== input.patch && false === Array.isArray(input.patch) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".patch",
                expected: "(OpenApiV3_1.IOperation | undefined)",
                value: input.patch
            }, _errorFactory)) && _ao138(input.patch, _path + ".patch", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".patch",
                expected: "(OpenApiV3_1.IOperation | undefined)",
                value: input.patch
            }, _errorFactory)) && (undefined === input.put || ("object" === typeof input.put && null !== input.put && false === Array.isArray(input.put) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".put",
                expected: "(OpenApiV3_1.IOperation | undefined)",
                value: input.put
            }, _errorFactory)) && _ao138(input.put, _path + ".put", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".put",
                expected: "(OpenApiV3_1.IOperation | undefined)",
                value: input.put
            }, _errorFactory)) && (undefined === input["delete"] || ("object" === typeof input["delete"] && null !== input["delete"] && false === Array.isArray(input["delete"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["delete"]',
                expected: "(OpenApiV3_1.IOperation | undefined)",
                value: input["delete"]
            }, _errorFactory)) && _ao138(input["delete"], _path + '["delete"]', _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["delete"]',
                expected: "(OpenApiV3_1.IOperation | undefined)",
                value: input["delete"]
            }, _errorFactory)) && (undefined === input.head || ("object" === typeof input.head && null !== input.head && false === Array.isArray(input.head) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".head",
                expected: "(OpenApiV3_1.IOperation | undefined)",
                value: input.head
            }, _errorFactory)) && _ao138(input.head, _path + ".head", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".head",
                expected: "(OpenApiV3_1.IOperation | undefined)",
                value: input.head
            }, _errorFactory)) && (undefined === input.trace || ("object" === typeof input.trace && null !== input.trace && false === Array.isArray(input.trace) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".trace",
                expected: "(OpenApiV3_1.IOperation | undefined)",
                value: input.trace
            }, _errorFactory)) && _ao138(input.trace, _path + ".trace", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".trace",
                expected: "(OpenApiV3_1.IOperation | undefined)",
                value: input.trace
            }, _errorFactory));
            const _ao132 = (input, _path, _exceptionable = true) => (undefined === input.name || "string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".name",
                expected: "(string | undefined)",
                value: input.name
            }, _errorFactory)) && ("path" === input["in"] || "query" === input["in"] || "header" === input["in"] || "cookie" === input["in"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["in"]',
                expected: '("cookie" | "header" | "path" | "query")',
                value: input["in"]
            }, _errorFactory)) && (("object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".schema",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value: input.schema
            }, _errorFactory)) && _au5(input.schema, _path + ".schema", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".schema",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value: input.schema
            }, _errorFactory)) && (undefined === input.required || "boolean" === typeof input.required || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".required",
                expected: "(boolean | undefined)",
                value: input.required
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && true && (undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Record<string, IExample | IReference<`#/components/examples/${string}`>>.o1 | undefined)",
                value: input.examples
            }, _errorFactory)) && _ao133(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Record<string, IExample | IReference<`#/components/examples/${string}`>>.o1 | undefined)",
                value: input.examples
            }, _errorFactory));
            const _ao133 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return ("object" === typeof value && null !== value && false === Array.isArray(value) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "(OpenApiV3_1.IExample | OpenApiV3_1.IJsonSchema.IReference<`#/components/examples/${string}`>)",
                    value
                }, _errorFactory)) && _au17(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "(OpenApiV3_1.IExample | OpenApiV3_1.IJsonSchema.IReference<`#/components/examples/${string}`>)",
                    value
                }, _errorFactory);
            }));
            const _ao134 = (input, _path, _exceptionable = true) => (undefined === input.summary || "string" === typeof input.summary || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".summary",
                expected: "(string | undefined)",
                value: input.summary
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && true && (undefined === input.externalValue || "string" === typeof input.externalValue || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".externalValue",
                expected: "(string | undefined)",
                value: input.externalValue
            }, _errorFactory));
            const _ao135 = (input, _path, _exceptionable = true) => ("string" === typeof input.$ref && RegExp(/^#\/components\/examples\/(.*)/).test(input.$ref) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".$ref",
                expected: "`#/components/examples/${string}`",
                value: input.$ref
            }, _errorFactory)) && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory))) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true;
            const _ao136 = (input, _path, _exceptionable = true) => ("string" === typeof input.$ref && RegExp(/^#\/components\/headers\/(.*)/).test(input.$ref) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".$ref",
                expected: "`#/components/headers/${string}`",
                value: input.$ref
            }, _errorFactory)) && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory))) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true;
            const _ao137 = (input, _path, _exceptionable = true) => ("string" === typeof input.$ref && RegExp(/^#\/components\/parameters\/(.*)/).test(input.$ref) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".$ref",
                expected: "`#/components/parameters/${string}`",
                value: input.$ref
            }, _errorFactory)) && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory))) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true;
            const _ao138 = (input, _path, _exceptionable = true) => (undefined === input.operationId || "string" === typeof input.operationId || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".operationId",
                expected: "(string | undefined)",
                value: input.operationId
            }, _errorFactory)) && (undefined === input.parameters || (Array.isArray(input.parameters) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".parameters",
                expected: "(Array<IParameter | IReference<`#/components/headers/${string}`> | IReference<`#/components/parameters/${string}`>>.o1 | undefined)",
                value: input.parameters
            }, _errorFactory)) && input.parameters.every(((elem, _index147) => ("object" === typeof elem && null !== elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".parameters[" + _index147 + "]",
                expected: "(OpenApiV3_1.IJsonSchema.IReference<`#/components/headers/${string}`> | OpenApiV3_1.IJsonSchema.IReference<`#/components/parameters/${string}`> | OpenApiV3_1.IOperation.IParameter)",
                value: elem
            }, _errorFactory)) && _au6(elem, _path + ".parameters[" + _index147 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".parameters[" + _index147 + "]",
                expected: "(OpenApiV3_1.IJsonSchema.IReference<`#/components/headers/${string}`> | OpenApiV3_1.IJsonSchema.IReference<`#/components/parameters/${string}`> | OpenApiV3_1.IOperation.IParameter)",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".parameters",
                expected: "(Array<IParameter | IReference<`#/components/headers/${string}`> | IReference<`#/components/parameters/${string}`>>.o1 | undefined)",
                value: input.parameters
            }, _errorFactory)) && (undefined === input.requestBody || ("object" === typeof input.requestBody && null !== input.requestBody && false === Array.isArray(input.requestBody) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".requestBody",
                expected: "(OpenApiV3_1.IJsonSchema.IReference<`#/components/requestBodies/${string}`> | OpenApiV3_1.IOperation.IRequestBody | undefined)",
                value: input.requestBody
            }, _errorFactory)) && _au18(input.requestBody, _path + ".requestBody", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".requestBody",
                expected: "(OpenApiV3_1.IJsonSchema.IReference<`#/components/requestBodies/${string}`> | OpenApiV3_1.IOperation.IRequestBody | undefined)",
                value: input.requestBody
            }, _errorFactory)) && (undefined === input.responses || ("object" === typeof input.responses && null !== input.responses && false === Array.isArray(input.responses) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".responses",
                expected: "(Record<string, IResponse | IReference<`#/components/responses/${string}`>>.o1 | undefined)",
                value: input.responses
            }, _errorFactory)) && _ao143(input.responses, _path + ".responses", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".responses",
                expected: "(Record<string, IResponse | IReference<`#/components/responses/${string}`>>.o1 | undefined)",
                value: input.responses
            }, _errorFactory)) && (undefined === input.servers || (Array.isArray(input.servers) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".servers",
                expected: "(Array<OpenApiV3_1.IServer> | undefined)",
                value: input.servers
            }, _errorFactory)) && input.servers.every(((elem, _index148) => ("object" === typeof elem && null !== elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".servers[" + _index148 + "]",
                expected: "OpenApiV3_1.IServer",
                value: elem
            }, _errorFactory)) && _ao106(elem, _path + ".servers[" + _index148 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".servers[" + _index148 + "]",
                expected: "OpenApiV3_1.IServer",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".servers",
                expected: "(Array<OpenApiV3_1.IServer> | undefined)",
                value: input.servers
            }, _errorFactory)) && (undefined === input.summary || "string" === typeof input.summary || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".summary",
                expected: "(string | undefined)",
                value: input.summary
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.security || (Array.isArray(input.security) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".security",
                expected: "(Array<Record<string, Array<string>>> | undefined)",
                value: input.security
            }, _errorFactory)) && input.security.every(((elem, _index149) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".security[" + _index149 + "]",
                expected: "Record<string, Array<string>>",
                value: elem
            }, _errorFactory)) && _ao39(elem, _path + ".security[" + _index149 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".security[" + _index149 + "]",
                expected: "Record<string, Array<string>>",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".security",
                expected: "(Array<Record<string, Array<string>>> | undefined)",
                value: input.security
            }, _errorFactory)) && (undefined === input.tags || (Array.isArray(input.tags) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".tags",
                expected: "(Array<string> | undefined)",
                value: input.tags
            }, _errorFactory)) && input.tags.every(((elem, _index150) => "string" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".tags[" + _index150 + "]",
                expected: "string",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".tags",
                expected: "(Array<string> | undefined)",
                value: input.tags
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory));
            const _ao139 = (input, _path, _exceptionable = true) => (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.required || "boolean" === typeof input.required || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".required",
                expected: "(boolean | undefined)",
                value: input.required
            }, _errorFactory)) && (undefined === input.content || ("object" === typeof input.content && null !== input.content && false === Array.isArray(input.content) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".content",
                expected: "(Record<string, OpenApiV3_1.IOperation.IMediaType> | undefined)",
                value: input.content
            }, _errorFactory)) && _ao140(input.content, _path + ".content", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".content",
                expected: "(Record<string, OpenApiV3_1.IOperation.IMediaType> | undefined)",
                value: input.content
            }, _errorFactory));
            const _ao140 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return ("object" === typeof value && null !== value && false === Array.isArray(value) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "OpenApiV3_1.IOperation.IMediaType",
                    value
                }, _errorFactory)) && _ao141(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "OpenApiV3_1.IOperation.IMediaType",
                    value
                }, _errorFactory);
            }));
            const _ao141 = (input, _path, _exceptionable = true) => (undefined === input.schema || ("object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".schema",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | undefined)",
                value: input.schema
            }, _errorFactory)) && _au5(input.schema, _path + ".schema", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".schema",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | undefined)",
                value: input.schema
            }, _errorFactory)) && true && (undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Record<string, IExample | IReference<`#/components/examples/${string}`>>.o1 | undefined)",
                value: input.examples
            }, _errorFactory)) && _ao133(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Record<string, IExample | IReference<`#/components/examples/${string}`>>.o1 | undefined)",
                value: input.examples
            }, _errorFactory));
            const _ao142 = (input, _path, _exceptionable = true) => ("string" === typeof input.$ref && RegExp(/^#\/components\/requestBodies\/(.*)/).test(input.$ref) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".$ref",
                expected: "`#/components/requestBodies/${string}`",
                value: input.$ref
            }, _errorFactory)) && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory))) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true;
            const _ao143 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return ("object" === typeof value && null !== value && false === Array.isArray(value) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "(OpenApiV3_1.IJsonSchema.IReference<`#/components/responses/${string}`> | OpenApiV3_1.IOperation.IResponse)",
                    value
                }, _errorFactory)) && _au19(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "(OpenApiV3_1.IJsonSchema.IReference<`#/components/responses/${string}`> | OpenApiV3_1.IOperation.IResponse)",
                    value
                }, _errorFactory);
            }));
            const _ao144 = (input, _path, _exceptionable = true) => (undefined === input.content || ("object" === typeof input.content && null !== input.content && false === Array.isArray(input.content) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".content",
                expected: "(Record<string, OpenApiV3_1.IOperation.IMediaType> | undefined)",
                value: input.content
            }, _errorFactory)) && _ao140(input.content, _path + ".content", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".content",
                expected: "(Record<string, OpenApiV3_1.IOperation.IMediaType> | undefined)",
                value: input.content
            }, _errorFactory)) && (undefined === input.headers || ("object" === typeof input.headers && null !== input.headers && false === Array.isArray(input.headers) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".headers",
                expected: '(Record<string, IReference<`#/components/headers/${string}`> | Omit<IParameter, "in">> | undefined)',
                value: input.headers
            }, _errorFactory)) && _ao145(input.headers, _path + ".headers", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".headers",
                expected: '(Record<string, IReference<`#/components/headers/${string}`> | Omit<IParameter, "in">> | undefined)',
                value: input.headers
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory));
            const _ao145 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return ("object" === typeof value && null !== value || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: '(Omit<OpenApiV3_1.IOperation.IParameter, "in"> | OpenApiV3_1.IJsonSchema.IReference<`#/components/headers/${string}`>)',
                    value
                }, _errorFactory)) && _au20(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: '(Omit<OpenApiV3_1.IOperation.IParameter, "in"> | OpenApiV3_1.IJsonSchema.IReference<`#/components/headers/${string}`>)',
                    value
                }, _errorFactory);
            }));
            const _ao146 = (input, _path, _exceptionable = true) => (undefined === input.name || "string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".name",
                expected: "(string | undefined)",
                value: input.name
            }, _errorFactory)) && (undefined === input.required || "boolean" === typeof input.required || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".required",
                expected: "(boolean | undefined)",
                value: input.required
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && true && (undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Record<string, IExample | IReference<`#/components/examples/${string}`>>.o1 | undefined)",
                value: input.examples
            }, _errorFactory)) && _ao133(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Record<string, IExample | IReference<`#/components/examples/${string}`>>.o1 | undefined)",
                value: input.examples
            }, _errorFactory)) && (("object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".schema",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value: input.schema
            }, _errorFactory)) && _au5(input.schema, _path + ".schema", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".schema",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value: input.schema
            }, _errorFactory));
            const _ao147 = (input, _path, _exceptionable = true) => ("string" === typeof input.$ref && RegExp(/^#\/components\/responses\/(.*)/).test(input.$ref) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".$ref",
                expected: "`#/components/responses/${string}`",
                value: input.$ref
            }, _errorFactory)) && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory))) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true;
            const _ao148 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return ("object" === typeof value && null !== value && false === Array.isArray(value) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "OpenApiV3_1.IOperation.IResponse",
                    value
                }, _errorFactory)) && _ao144(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "OpenApiV3_1.IOperation.IResponse",
                    value
                }, _errorFactory);
            }));
            const _ao149 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return ("object" === typeof value && null !== value || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "OpenApiV3_1.IOperation.IParameter",
                    value
                }, _errorFactory)) && _ao132(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "OpenApiV3_1.IOperation.IParameter",
                    value
                }, _errorFactory);
            }));
            const _ao150 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return ("object" === typeof value && null !== value && false === Array.isArray(value) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "OpenApiV3_1.IOperation.IRequestBody",
                    value
                }, _errorFactory)) && _ao139(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "OpenApiV3_1.IOperation.IRequestBody",
                    value
                }, _errorFactory);
            }));
            const _ao151 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return ("object" === typeof value && null !== value || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "(OpenApiV3_1.ISecurityScheme.IApiKey | OpenApiV3_1.ISecurityScheme.IHttpBasic | OpenApiV3_1.ISecurityScheme.IHttpBearer | OpenApiV3_1.ISecurityScheme.IOAuth2 | OpenApiV3_1.ISecurityScheme.IOpenId)",
                    value
                }, _errorFactory)) && _au21(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "(OpenApiV3_1.ISecurityScheme.IApiKey | OpenApiV3_1.ISecurityScheme.IHttpBasic | OpenApiV3_1.ISecurityScheme.IHttpBearer | OpenApiV3_1.ISecurityScheme.IOAuth2 | OpenApiV3_1.ISecurityScheme.IOpenId)",
                    value
                }, _errorFactory);
            }));
            const _ao152 = (input, _path, _exceptionable = true) => ("apiKey" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"apiKey"',
                value: input.type
            }, _errorFactory)) && (undefined === input["in"] || "query" === input["in"] || "header" === input["in"] || "cookie" === input["in"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["in"]',
                expected: '("cookie" | "header" | "query" | undefined)',
                value: input["in"]
            }, _errorFactory)) && (undefined === input.name || "string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".name",
                expected: "(string | undefined)",
                value: input.name
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory));
            const _ao153 = (input, _path, _exceptionable = true) => ("http" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"http"',
                value: input.type
            }, _errorFactory)) && ("basic" === input.scheme || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".scheme",
                expected: '"basic"',
                value: input.scheme
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory));
            const _ao154 = (input, _path, _exceptionable = true) => ("http" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"http"',
                value: input.type
            }, _errorFactory)) && ("bearer" === input.scheme || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".scheme",
                expected: '"bearer"',
                value: input.scheme
            }, _errorFactory)) && (undefined === input.bearerFormat || "string" === typeof input.bearerFormat || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".bearerFormat",
                expected: "(string | undefined)",
                value: input.bearerFormat
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory));
            const _ao155 = (input, _path, _exceptionable = true) => ("oauth2" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"oauth2"',
                value: input.type
            }, _errorFactory)) && (("object" === typeof input.flows && null !== input.flows && false === Array.isArray(input.flows) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".flows",
                expected: "OpenApiV3_1.ISecurityScheme.IOAuth2.IFlowSet",
                value: input.flows
            }, _errorFactory)) && _ao156(input.flows, _path + ".flows", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".flows",
                expected: "OpenApiV3_1.ISecurityScheme.IOAuth2.IFlowSet",
                value: input.flows
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory));
            const _ao156 = (input, _path, _exceptionable = true) => (undefined === input.authorizationCode || ("object" === typeof input.authorizationCode && null !== input.authorizationCode && false === Array.isArray(input.authorizationCode) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".authorizationCode",
                expected: "(OpenApiV3_1.ISecurityScheme.IOAuth2.IFlow | undefined)",
                value: input.authorizationCode
            }, _errorFactory)) && _ao157(input.authorizationCode, _path + ".authorizationCode", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".authorizationCode",
                expected: "(OpenApiV3_1.ISecurityScheme.IOAuth2.IFlow | undefined)",
                value: input.authorizationCode
            }, _errorFactory)) && (undefined === input.implicit || ("object" === typeof input.implicit && null !== input.implicit && false === Array.isArray(input.implicit) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".implicit",
                expected: '(Omit<OpenApiV3_1.ISecurityScheme.IOAuth2.IFlow, "tokenUrl"> | undefined)',
                value: input.implicit
            }, _errorFactory)) && _ao158(input.implicit, _path + ".implicit", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".implicit",
                expected: '(Omit<OpenApiV3_1.ISecurityScheme.IOAuth2.IFlow, "tokenUrl"> | undefined)',
                value: input.implicit
            }, _errorFactory)) && (undefined === input.password || ("object" === typeof input.password && null !== input.password && false === Array.isArray(input.password) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".password",
                expected: '(Omit<OpenApiV3_1.ISecurityScheme.IOAuth2.IFlow, "authorizationUrl"> | undefined)',
                value: input.password
            }, _errorFactory)) && _ao159(input.password, _path + ".password", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".password",
                expected: '(Omit<OpenApiV3_1.ISecurityScheme.IOAuth2.IFlow, "authorizationUrl"> | undefined)',
                value: input.password
            }, _errorFactory)) && (undefined === input.clientCredentials || ("object" === typeof input.clientCredentials && null !== input.clientCredentials && false === Array.isArray(input.clientCredentials) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".clientCredentials",
                expected: '(Omit<OpenApiV3_1.ISecurityScheme.IOAuth2.IFlow, "authorizationUrl"> | undefined)',
                value: input.clientCredentials
            }, _errorFactory)) && _ao159(input.clientCredentials, _path + ".clientCredentials", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".clientCredentials",
                expected: '(Omit<OpenApiV3_1.ISecurityScheme.IOAuth2.IFlow, "authorizationUrl"> | undefined)',
                value: input.clientCredentials
            }, _errorFactory));
            const _ao157 = (input, _path, _exceptionable = true) => (undefined === input.authorizationUrl || "string" === typeof input.authorizationUrl || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".authorizationUrl",
                expected: "(string | undefined)",
                value: input.authorizationUrl
            }, _errorFactory)) && (undefined === input.tokenUrl || "string" === typeof input.tokenUrl || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".tokenUrl",
                expected: "(string | undefined)",
                value: input.tokenUrl
            }, _errorFactory)) && (undefined === input.refreshUrl || "string" === typeof input.refreshUrl || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".refreshUrl",
                expected: "(string | undefined)",
                value: input.refreshUrl
            }, _errorFactory)) && (undefined === input.scopes || ("object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".scopes",
                expected: "(Record<string, string> | undefined)",
                value: input.scopes
            }, _errorFactory)) && _ao35(input.scopes, _path + ".scopes", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".scopes",
                expected: "(Record<string, string> | undefined)",
                value: input.scopes
            }, _errorFactory));
            const _ao158 = (input, _path, _exceptionable = true) => (undefined === input.authorizationUrl || "string" === typeof input.authorizationUrl || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".authorizationUrl",
                expected: "(string | undefined)",
                value: input.authorizationUrl
            }, _errorFactory)) && (undefined === input.refreshUrl || "string" === typeof input.refreshUrl || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".refreshUrl",
                expected: "(string | undefined)",
                value: input.refreshUrl
            }, _errorFactory)) && (undefined === input.scopes || ("object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".scopes",
                expected: "(Record<string, string> | undefined)",
                value: input.scopes
            }, _errorFactory)) && _ao35(input.scopes, _path + ".scopes", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".scopes",
                expected: "(Record<string, string> | undefined)",
                value: input.scopes
            }, _errorFactory));
            const _ao159 = (input, _path, _exceptionable = true) => (undefined === input.tokenUrl || "string" === typeof input.tokenUrl || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".tokenUrl",
                expected: "(string | undefined)",
                value: input.tokenUrl
            }, _errorFactory)) && (undefined === input.refreshUrl || "string" === typeof input.refreshUrl || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".refreshUrl",
                expected: "(string | undefined)",
                value: input.refreshUrl
            }, _errorFactory)) && (undefined === input.scopes || ("object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".scopes",
                expected: "(Record<string, string> | undefined)",
                value: input.scopes
            }, _errorFactory)) && _ao35(input.scopes, _path + ".scopes", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".scopes",
                expected: "(Record<string, string> | undefined)",
                value: input.scopes
            }, _errorFactory));
            const _ao160 = (input, _path, _exceptionable = true) => ("openIdConnect" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"openIdConnect"',
                value: input.type
            }, _errorFactory)) && ("string" === typeof input.openIdConnectUrl || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".openIdConnectUrl",
                expected: "string",
                value: input.openIdConnectUrl
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory));
            const _ao161 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return ("object" === typeof value && null !== value || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: 'Omit<OpenApiV3_1.IOperation.IParameter, "in">',
                    value
                }, _errorFactory)) && _ao146(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: 'Omit<OpenApiV3_1.IOperation.IParameter, "in">',
                    value
                }, _errorFactory);
            }));
            const _ao162 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return ("object" === typeof value && null !== value && false === Array.isArray(value) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "OpenApiV3_1.IExample",
                    value
                }, _errorFactory)) && _ao134(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "OpenApiV3_1.IExample",
                    value
                }, _errorFactory);
            }));
            const _ao163 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return ("object" === typeof value && null !== value && false === Array.isArray(value) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "(OpenApiV3_1.IJsonSchema.IReference<`#/components/pathItems/${string}`> | OpenApiV3_1.IPath)",
                    value
                }, _errorFactory)) && _au22(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "(OpenApiV3_1.IJsonSchema.IReference<`#/components/pathItems/${string}`> | OpenApiV3_1.IPath)",
                    value
                }, _errorFactory);
            }));
            const _ao164 = (input, _path, _exceptionable = true) => ("string" === typeof input.$ref && RegExp(/^#\/components\/pathItems\/(.*)/).test(input.$ref) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".$ref",
                expected: "`#/components/pathItems/${string}`",
                value: input.$ref
            }, _errorFactory)) && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory))) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true;
            const _ao165 = (input, _path, _exceptionable = true) => ("string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".name",
                expected: "string",
                value: input.name
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory));
            const _ao166 = (input, _path, _exceptionable = true) => ("string" === typeof input.openapi && RegExp(/^3\.1\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(input.openapi) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".openapi",
                expected: "`3.1.${number}`",
                value: input.openapi
            }, _errorFactory)) && (undefined === input.servers || (Array.isArray(input.servers) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".servers",
                expected: "(Array<OpenApi.IServer> | undefined)",
                value: input.servers
            }, _errorFactory)) && input.servers.every(((elem, _index151) => ("object" === typeof elem && null !== elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".servers[" + _index151 + "]",
                expected: "OpenApi.IServer",
                value: elem
            }, _errorFactory)) && _ao167(elem, _path + ".servers[" + _index151 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".servers[" + _index151 + "]",
                expected: "OpenApi.IServer",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".servers",
                expected: "(Array<OpenApi.IServer> | undefined)",
                value: input.servers
            }, _errorFactory)) && (undefined === input.info || ("object" === typeof input.info && null !== input.info || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".info",
                expected: "(OpenApi.IDocument.IInfo | undefined)",
                value: input.info
            }, _errorFactory)) && _ao170(input.info, _path + ".info", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".info",
                expected: "(OpenApi.IDocument.IInfo | undefined)",
                value: input.info
            }, _errorFactory)) && (("object" === typeof input.components && null !== input.components && false === Array.isArray(input.components) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".components",
                expected: "OpenApi.IComponents",
                value: input.components
            }, _errorFactory)) && _ao173(input.components, _path + ".components", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".components",
                expected: "OpenApi.IComponents",
                value: input.components
            }, _errorFactory)) && (undefined === input.paths || ("object" === typeof input.paths && null !== input.paths && false === Array.isArray(input.paths) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".paths",
                expected: "(Record<string, OpenApi.IPath> | undefined)",
                value: input.paths
            }, _errorFactory)) && _ao198(input.paths, _path + ".paths", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".paths",
                expected: "(Record<string, OpenApi.IPath> | undefined)",
                value: input.paths
            }, _errorFactory)) && (undefined === input.webhooks || ("object" === typeof input.webhooks && null !== input.webhooks && false === Array.isArray(input.webhooks) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".webhooks",
                expected: "(Record<string, OpenApi.IPath> | undefined)",
                value: input.webhooks
            }, _errorFactory)) && _ao198(input.webhooks, _path + ".webhooks", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".webhooks",
                expected: "(Record<string, OpenApi.IPath> | undefined)",
                value: input.webhooks
            }, _errorFactory)) && (undefined === input.security || (Array.isArray(input.security) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".security",
                expected: "(Array<Record<string, Array<string>>> | undefined)",
                value: input.security
            }, _errorFactory)) && input.security.every(((elem, _index152) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".security[" + _index152 + "]",
                expected: "Record<string, Array<string>>",
                value: elem
            }, _errorFactory)) && _ao39(elem, _path + ".security[" + _index152 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".security[" + _index152 + "]",
                expected: "Record<string, Array<string>>",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".security",
                expected: "(Array<Record<string, Array<string>>> | undefined)",
                value: input.security
            }, _errorFactory)) && (undefined === input.tags || (Array.isArray(input.tags) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".tags",
                expected: "(Array<OpenApi.IDocument.ITag> | undefined)",
                value: input.tags
            }, _errorFactory)) && input.tags.every(((elem, _index153) => ("object" === typeof elem && null !== elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".tags[" + _index153 + "]",
                expected: "OpenApi.IDocument.ITag",
                value: elem
            }, _errorFactory)) && _ao210(elem, _path + ".tags[" + _index153 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".tags[" + _index153 + "]",
                expected: "OpenApi.IDocument.ITag",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".tags",
                expected: "(Array<OpenApi.IDocument.ITag> | undefined)",
                value: input.tags
            }, _errorFactory)) && (true === input["x-samchon-emended-v4"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["x-samchon-emended-v4"]',
                expected: "true",
                value: input["x-samchon-emended-v4"]
            }, _errorFactory));
            const _ao167 = (input, _path, _exceptionable = true) => ("string" === typeof input.url || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".url",
                expected: "string",
                value: input.url
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.variables || ("object" === typeof input.variables && null !== input.variables && false === Array.isArray(input.variables) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".variables",
                expected: "(Record<string, OpenApi.IServer.IVariable> | undefined)",
                value: input.variables
            }, _errorFactory)) && _ao168(input.variables, _path + ".variables", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".variables",
                expected: "(Record<string, OpenApi.IServer.IVariable> | undefined)",
                value: input.variables
            }, _errorFactory));
            const _ao168 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return ("object" === typeof value && null !== value || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "OpenApi.IServer.IVariable",
                    value
                }, _errorFactory)) && _ao169(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "OpenApi.IServer.IVariable",
                    value
                }, _errorFactory);
            }));
            const _ao169 = (input, _path, _exceptionable = true) => ("string" === typeof input["default"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["default"]',
                expected: "string",
                value: input["default"]
            }, _errorFactory)) && (undefined === input["enum"] || (Array.isArray(input["enum"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"]',
                expected: "(Array<string> | undefined)",
                value: input["enum"]
            }, _errorFactory)) && input["enum"].every(((elem, _index154) => "string" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"][' + _index154 + "]",
                expected: "string",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"]',
                expected: "(Array<string> | undefined)",
                value: input["enum"]
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory));
            const _ao170 = (input, _path, _exceptionable = true) => ("string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "string",
                value: input.title
            }, _errorFactory)) && (undefined === input.summary || "string" === typeof input.summary || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".summary",
                expected: "(string | undefined)",
                value: input.summary
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.termsOfService || "string" === typeof input.termsOfService || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".termsOfService",
                expected: "(string | undefined)",
                value: input.termsOfService
            }, _errorFactory)) && (undefined === input.contact || ("object" === typeof input.contact && null !== input.contact && false === Array.isArray(input.contact) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".contact",
                expected: "(OpenApi.IDocument.IContact | undefined)",
                value: input.contact
            }, _errorFactory)) && _ao171(input.contact, _path + ".contact", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".contact",
                expected: "(OpenApi.IDocument.IContact | undefined)",
                value: input.contact
            }, _errorFactory)) && (undefined === input.license || ("object" === typeof input.license && null !== input.license || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".license",
                expected: "(OpenApi.IDocument.ILicense | undefined)",
                value: input.license
            }, _errorFactory)) && _ao172(input.license, _path + ".license", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".license",
                expected: "(OpenApi.IDocument.ILicense | undefined)",
                value: input.license
            }, _errorFactory)) && ("string" === typeof input.version || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".version",
                expected: "string",
                value: input.version
            }, _errorFactory));
            const _ao171 = (input, _path, _exceptionable = true) => (undefined === input.name || "string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".name",
                expected: "(string | undefined)",
                value: input.name
            }, _errorFactory)) && (undefined === input.url || "string" === typeof input.url || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".url",
                expected: "(string | undefined)",
                value: input.url
            }, _errorFactory)) && (undefined === input.email || "string" === typeof input.email && (/^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i.test(input.email) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".email",
                expected: 'string & Format<"email">',
                value: input.email
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".email",
                expected: '((string & Format<"email">) | undefined)',
                value: input.email
            }, _errorFactory));
            const _ao172 = (input, _path, _exceptionable = true) => ("string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".name",
                expected: "string",
                value: input.name
            }, _errorFactory)) && (undefined === input.identifier || "string" === typeof input.identifier || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".identifier",
                expected: "(string | undefined)",
                value: input.identifier
            }, _errorFactory)) && (undefined === input.url || "string" === typeof input.url || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".url",
                expected: "(string | undefined)",
                value: input.url
            }, _errorFactory));
            const _ao173 = (input, _path, _exceptionable = true) => (undefined === input.schemas || ("object" === typeof input.schemas && null !== input.schemas && false === Array.isArray(input.schemas) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".schemas",
                expected: "(Record<string, OpenApi.IJsonSchema> | undefined)",
                value: input.schemas
            }, _errorFactory)) && _ao174(input.schemas, _path + ".schemas", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".schemas",
                expected: "(Record<string, OpenApi.IJsonSchema> | undefined)",
                value: input.schemas
            }, _errorFactory)) && (undefined === input.securitySchemes || ("object" === typeof input.securitySchemes && null !== input.securitySchemes && false === Array.isArray(input.securitySchemes) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".securitySchemes",
                expected: "(Record<string, OpenApi.ISecurityScheme> | undefined)",
                value: input.securitySchemes
            }, _errorFactory)) && _ao188(input.securitySchemes, _path + ".securitySchemes", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".securitySchemes",
                expected: "(Record<string, OpenApi.ISecurityScheme> | undefined)",
                value: input.securitySchemes
            }, _errorFactory));
            const _ao174 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return ("object" === typeof value && null !== value && false === Array.isArray(value) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IOneOf | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown)",
                    value
                }, _errorFactory)) && _au7(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IOneOf | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown)",
                    value
                }, _errorFactory);
            }));
            const _ao175 = (input, _path, _exceptionable = true) => ("string" === typeof input["const"] || "number" === typeof input["const"] || "boolean" === typeof input["const"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["const"]',
                expected: "(boolean | number | string)",
                value: input["const"]
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && (undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory));
            const _ao176 = (input, _path, _exceptionable = true) => (undefined === input["default"] || "boolean" === typeof input["default"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["default"]',
                expected: "(boolean | undefined)",
                value: input["default"]
            }, _errorFactory)) && ("boolean" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"boolean"',
                value: input.type
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && (undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory));
            const _ao177 = (input, _path, _exceptionable = true) => (undefined === input["default"] || "number" === typeof input["default"] && (Math.floor(input["default"]) === input["default"] && -0x8000000000000000 <= input["default"] && input["default"] <= 0x8000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["default"]',
                expected: 'number & Type<"int64">',
                value: input["default"]
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["default"]',
                expected: '((number & Type<"int64">) | undefined)',
                value: input["default"]
            }, _errorFactory)) && (undefined === input.minimum || "number" === typeof input.minimum && (Math.floor(input.minimum) === input.minimum && -0x8000000000000000 <= input.minimum && input.minimum <= 0x8000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minimum",
                expected: 'number & Type<"int64">',
                value: input.minimum
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minimum",
                expected: '((number & Type<"int64">) | undefined)',
                value: input.minimum
            }, _errorFactory)) && (undefined === input.maximum || "number" === typeof input.maximum && (Math.floor(input.maximum) === input.maximum && -0x8000000000000000 <= input.maximum && input.maximum <= 0x8000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maximum",
                expected: 'number & Type<"int64">',
                value: input.maximum
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maximum",
                expected: '((number & Type<"int64">) | undefined)',
                value: input.maximum
            }, _errorFactory)) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".exclusiveMinimum",
                expected: "(number | undefined)",
                value: input.exclusiveMinimum
            }, _errorFactory)) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".exclusiveMaximum",
                expected: "(number | undefined)",
                value: input.exclusiveMaximum
            }, _errorFactory)) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && (Math.floor(input.multipleOf) === input.multipleOf && 0 <= input.multipleOf && input.multipleOf <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".multipleOf",
                expected: 'number & Type<"uint64">',
                value: input.multipleOf
            }, _errorFactory)) && (0 < input.multipleOf || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".multipleOf",
                expected: "number & ExclusiveMinimum<0>",
                value: input.multipleOf
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".multipleOf",
                expected: '((number & Type<"uint64"> & ExclusiveMinimum<0>) | undefined)',
                value: input.multipleOf
            }, _errorFactory)) && ("integer" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"integer"',
                value: input.type
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && (undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory));
            const _ao178 = (input, _path, _exceptionable = true) => (undefined === input["default"] || "number" === typeof input["default"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["default"]',
                expected: "(number | undefined)",
                value: input["default"]
            }, _errorFactory)) && (undefined === input.minimum || "number" === typeof input.minimum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minimum",
                expected: "(number | undefined)",
                value: input.minimum
            }, _errorFactory)) && (undefined === input.maximum || "number" === typeof input.maximum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maximum",
                expected: "(number | undefined)",
                value: input.maximum
            }, _errorFactory)) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".exclusiveMinimum",
                expected: "(number | undefined)",
                value: input.exclusiveMinimum
            }, _errorFactory)) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".exclusiveMaximum",
                expected: "(number | undefined)",
                value: input.exclusiveMaximum
            }, _errorFactory)) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && (0 < input.multipleOf || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".multipleOf",
                expected: "number & ExclusiveMinimum<0>",
                value: input.multipleOf
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".multipleOf",
                expected: "((number & ExclusiveMinimum<0>) | undefined)",
                value: input.multipleOf
            }, _errorFactory)) && ("number" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"number"',
                value: input.type
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && (undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory));
            const _ao179 = (input, _path, _exceptionable = true) => (undefined === input["default"] || "string" === typeof input["default"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["default"]',
                expected: "(string | undefined)",
                value: input["default"]
            }, _errorFactory)) && (undefined === input.format || "string" === typeof input.format || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".format",
                expected: "(string | undefined)",
                value: input.format
            }, _errorFactory)) && (undefined === input.pattern || "string" === typeof input.pattern || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".pattern",
                expected: "(string | undefined)",
                value: input.pattern
            }, _errorFactory)) && (undefined === input.contentMediaType || "string" === typeof input.contentMediaType || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".contentMediaType",
                expected: "(string | undefined)",
                value: input.contentMediaType
            }, _errorFactory)) && (undefined === input.minLength || "number" === typeof input.minLength && (Math.floor(input.minLength) === input.minLength && 0 <= input.minLength && input.minLength <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minLength",
                expected: 'number & Type<"uint64">',
                value: input.minLength
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minLength",
                expected: '((number & Type<"uint64">) | undefined)',
                value: input.minLength
            }, _errorFactory)) && (undefined === input.maxLength || "number" === typeof input.maxLength && (Math.floor(input.maxLength) === input.maxLength && 0 <= input.maxLength && input.maxLength <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maxLength",
                expected: 'number & Type<"uint64">',
                value: input.maxLength
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maxLength",
                expected: '((number & Type<"uint64">) | undefined)',
                value: input.maxLength
            }, _errorFactory)) && ("string" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"string"',
                value: input.type
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && (undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory));
            const _ao180 = (input, _path, _exceptionable = true) => (("object" === typeof input.items && null !== input.items && false === Array.isArray(input.items) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".items",
                expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IOneOf | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown)",
                value: input.items
            }, _errorFactory)) && _au7(input.items, _path + ".items", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".items",
                expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IOneOf | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown)",
                value: input.items
            }, _errorFactory)) && (undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".uniqueItems",
                expected: "(boolean | undefined)",
                value: input.uniqueItems
            }, _errorFactory)) && (undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minItems",
                expected: 'number & Type<"uint64">',
                value: input.minItems
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minItems",
                expected: '((number & Type<"uint64">) | undefined)',
                value: input.minItems
            }, _errorFactory)) && (undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maxItems",
                expected: 'number & Type<"uint64">',
                value: input.maxItems
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maxItems",
                expected: '((number & Type<"uint64">) | undefined)',
                value: input.maxItems
            }, _errorFactory)) && ("array" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"array"',
                value: input.type
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && (undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory));
            const _ao181 = (input, _path, _exceptionable = true) => ("array" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"array"',
                value: input.type
            }, _errorFactory)) && ((Array.isArray(input.prefixItems) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".prefixItems",
                expected: "Array<OpenApi.IJsonSchema>",
                value: input.prefixItems
            }, _errorFactory)) && input.prefixItems.every(((elem, _index155) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".prefixItems[" + _index155 + "]",
                expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IOneOf | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory)) && _au7(elem, _path + ".prefixItems[" + _index155 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".prefixItems[" + _index155 + "]",
                expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IOneOf | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".prefixItems",
                expected: "Array<OpenApi.IJsonSchema>",
                value: input.prefixItems
            }, _errorFactory)) && ((null !== input.additionalItems || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".additionalItems",
                expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IOneOf | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown | boolean | undefined)",
                value: input.additionalItems
            }, _errorFactory)) && (undefined === input.additionalItems || "boolean" === typeof input.additionalItems || ("object" === typeof input.additionalItems && null !== input.additionalItems && false === Array.isArray(input.additionalItems) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".additionalItems",
                expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IOneOf | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown | boolean | undefined)",
                value: input.additionalItems
            }, _errorFactory)) && _au7(input.additionalItems, _path + ".additionalItems", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".additionalItems",
                expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IOneOf | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown | boolean | undefined)",
                value: input.additionalItems
            }, _errorFactory))) && (undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".uniqueItems",
                expected: "(boolean | undefined)",
                value: input.uniqueItems
            }, _errorFactory)) && (undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minItems",
                expected: 'number & Type<"uint64">',
                value: input.minItems
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minItems",
                expected: '((number & Type<"uint64">) | undefined)',
                value: input.minItems
            }, _errorFactory)) && (undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maxItems",
                expected: 'number & Type<"uint64">',
                value: input.maxItems
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maxItems",
                expected: '((number & Type<"uint64">) | undefined)',
                value: input.maxItems
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && (undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory));
            const _ao182 = (input, _path, _exceptionable = true) => (undefined === input.properties || ("object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".properties",
                expected: "(Record<string, OpenApi.IJsonSchema> | undefined)",
                value: input.properties
            }, _errorFactory)) && _ao174(input.properties, _path + ".properties", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".properties",
                expected: "(Record<string, OpenApi.IJsonSchema> | undefined)",
                value: input.properties
            }, _errorFactory)) && ((null !== input.additionalProperties || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".additionalProperties",
                expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IOneOf | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown | boolean | undefined)",
                value: input.additionalProperties
            }, _errorFactory)) && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || ("object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".additionalProperties",
                expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IOneOf | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown | boolean | undefined)",
                value: input.additionalProperties
            }, _errorFactory)) && _au7(input.additionalProperties, _path + ".additionalProperties", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".additionalProperties",
                expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IOneOf | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown | boolean | undefined)",
                value: input.additionalProperties
            }, _errorFactory))) && (undefined === input.required || (Array.isArray(input.required) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".required",
                expected: "(Array<string> | undefined)",
                value: input.required
            }, _errorFactory)) && input.required.every(((elem, _index156) => "string" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".required[" + _index156 + "]",
                expected: "string",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".required",
                expected: "(Array<string> | undefined)",
                value: input.required
            }, _errorFactory)) && ("object" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"object"',
                value: input.type
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && (undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory));
            const _ao183 = (input, _path, _exceptionable = true) => ("string" === typeof input.$ref || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".$ref",
                expected: "string",
                value: input.$ref
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && (undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory));
            const _ao184 = (input, _path, _exceptionable = true) => ((Array.isArray(input.oneOf) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".oneOf",
                expected: "Array<IConstant | IBoolean | IInteger | INumber | IString | IArray | ITuple | IObject | IReference<string> | INull | IUnknown>",
                value: input.oneOf
            }, _errorFactory)) && input.oneOf.every(((elem, _index157) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".oneOf[" + _index157 + "]",
                expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory)) && _au8(elem, _path + ".oneOf[" + _index157 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".oneOf[" + _index157 + "]",
                expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".oneOf",
                expected: "Array<IConstant | IBoolean | IInteger | INumber | IString | IArray | ITuple | IObject | IReference<string> | INull | IUnknown>",
                value: input.oneOf
            }, _errorFactory)) && (undefined === input.discriminator || ("object" === typeof input.discriminator && null !== input.discriminator || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".discriminator",
                expected: "(OpenApi.IJsonSchema.IOneOf.IDiscriminator | undefined)",
                value: input.discriminator
            }, _errorFactory)) && _ao187(input.discriminator, _path + ".discriminator", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".discriminator",
                expected: "(OpenApi.IJsonSchema.IOneOf.IDiscriminator | undefined)",
                value: input.discriminator
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && (undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory));
            const _ao185 = (input, _path, _exceptionable = true) => (null === input["default"] || undefined === input["default"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["default"]',
                expected: "(null | undefined)",
                value: input["default"]
            }, _errorFactory)) && ("null" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"null"',
                value: input.type
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && (undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory));
            const _ao186 = (input, _path, _exceptionable = true) => (null !== input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: "undefined",
                value: input.type
            }, _errorFactory)) && (undefined === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: "undefined",
                value: input.type
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && (undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && _ao58(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory));
            const _ao187 = (input, _path, _exceptionable = true) => ("string" === typeof input.propertyName || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".propertyName",
                expected: "string",
                value: input.propertyName
            }, _errorFactory)) && (undefined === input.mapping || ("object" === typeof input.mapping && null !== input.mapping && false === Array.isArray(input.mapping) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".mapping",
                expected: "(Record<string, string> | undefined)",
                value: input.mapping
            }, _errorFactory)) && _ao35(input.mapping, _path + ".mapping", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".mapping",
                expected: "(Record<string, string> | undefined)",
                value: input.mapping
            }, _errorFactory));
            const _ao188 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return ("object" === typeof value && null !== value || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "(OpenApi.ISecurityScheme.IApiKey | OpenApi.ISecurityScheme.IHttpBasic | OpenApi.ISecurityScheme.IHttpBearer | OpenApi.ISecurityScheme.IOAuth2 | OpenApi.ISecurityScheme.IOpenId)",
                    value
                }, _errorFactory)) && _au23(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "(OpenApi.ISecurityScheme.IApiKey | OpenApi.ISecurityScheme.IHttpBasic | OpenApi.ISecurityScheme.IHttpBearer | OpenApi.ISecurityScheme.IOAuth2 | OpenApi.ISecurityScheme.IOpenId)",
                    value
                }, _errorFactory);
            }));
            const _ao189 = (input, _path, _exceptionable = true) => ("apiKey" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"apiKey"',
                value: input.type
            }, _errorFactory)) && (undefined === input["in"] || "query" === input["in"] || "header" === input["in"] || "cookie" === input["in"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["in"]',
                expected: '("cookie" | "header" | "query" | undefined)',
                value: input["in"]
            }, _errorFactory)) && (undefined === input.name || "string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".name",
                expected: "(string | undefined)",
                value: input.name
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory));
            const _ao190 = (input, _path, _exceptionable = true) => ("http" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"http"',
                value: input.type
            }, _errorFactory)) && ("basic" === input.scheme || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".scheme",
                expected: '"basic"',
                value: input.scheme
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory));
            const _ao191 = (input, _path, _exceptionable = true) => ("http" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"http"',
                value: input.type
            }, _errorFactory)) && ("bearer" === input.scheme || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".scheme",
                expected: '"bearer"',
                value: input.scheme
            }, _errorFactory)) && (undefined === input.bearerFormat || "string" === typeof input.bearerFormat || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".bearerFormat",
                expected: "(string | undefined)",
                value: input.bearerFormat
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory));
            const _ao192 = (input, _path, _exceptionable = true) => ("oauth2" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"oauth2"',
                value: input.type
            }, _errorFactory)) && (("object" === typeof input.flows && null !== input.flows && false === Array.isArray(input.flows) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".flows",
                expected: "OpenApi.ISecurityScheme.IOAuth2.IFlowSet",
                value: input.flows
            }, _errorFactory)) && _ao193(input.flows, _path + ".flows", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".flows",
                expected: "OpenApi.ISecurityScheme.IOAuth2.IFlowSet",
                value: input.flows
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory));
            const _ao193 = (input, _path, _exceptionable = true) => (undefined === input.authorizationCode || ("object" === typeof input.authorizationCode && null !== input.authorizationCode && false === Array.isArray(input.authorizationCode) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".authorizationCode",
                expected: "(OpenApi.ISecurityScheme.IOAuth2.IFlow | undefined)",
                value: input.authorizationCode
            }, _errorFactory)) && _ao194(input.authorizationCode, _path + ".authorizationCode", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".authorizationCode",
                expected: "(OpenApi.ISecurityScheme.IOAuth2.IFlow | undefined)",
                value: input.authorizationCode
            }, _errorFactory)) && (undefined === input.implicit || ("object" === typeof input.implicit && null !== input.implicit && false === Array.isArray(input.implicit) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".implicit",
                expected: '(Omit<OpenApi.ISecurityScheme.IOAuth2.IFlow, "tokenUrl"> | undefined)',
                value: input.implicit
            }, _errorFactory)) && _ao195(input.implicit, _path + ".implicit", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".implicit",
                expected: '(Omit<OpenApi.ISecurityScheme.IOAuth2.IFlow, "tokenUrl"> | undefined)',
                value: input.implicit
            }, _errorFactory)) && (undefined === input.password || ("object" === typeof input.password && null !== input.password && false === Array.isArray(input.password) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".password",
                expected: '(Omit<OpenApi.ISecurityScheme.IOAuth2.IFlow, "authorizationUrl"> | undefined)',
                value: input.password
            }, _errorFactory)) && _ao196(input.password, _path + ".password", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".password",
                expected: '(Omit<OpenApi.ISecurityScheme.IOAuth2.IFlow, "authorizationUrl"> | undefined)',
                value: input.password
            }, _errorFactory)) && (undefined === input.clientCredentials || ("object" === typeof input.clientCredentials && null !== input.clientCredentials && false === Array.isArray(input.clientCredentials) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".clientCredentials",
                expected: '(Omit<OpenApi.ISecurityScheme.IOAuth2.IFlow, "authorizationUrl"> | undefined)',
                value: input.clientCredentials
            }, _errorFactory)) && _ao196(input.clientCredentials, _path + ".clientCredentials", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".clientCredentials",
                expected: '(Omit<OpenApi.ISecurityScheme.IOAuth2.IFlow, "authorizationUrl"> | undefined)',
                value: input.clientCredentials
            }, _errorFactory));
            const _ao194 = (input, _path, _exceptionable = true) => (undefined === input.authorizationUrl || "string" === typeof input.authorizationUrl || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".authorizationUrl",
                expected: "(string | undefined)",
                value: input.authorizationUrl
            }, _errorFactory)) && (undefined === input.tokenUrl || "string" === typeof input.tokenUrl || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".tokenUrl",
                expected: "(string | undefined)",
                value: input.tokenUrl
            }, _errorFactory)) && (undefined === input.refreshUrl || "string" === typeof input.refreshUrl || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".refreshUrl",
                expected: "(string | undefined)",
                value: input.refreshUrl
            }, _errorFactory)) && (undefined === input.scopes || ("object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".scopes",
                expected: "(Record<string, string> | undefined)",
                value: input.scopes
            }, _errorFactory)) && _ao35(input.scopes, _path + ".scopes", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".scopes",
                expected: "(Record<string, string> | undefined)",
                value: input.scopes
            }, _errorFactory));
            const _ao195 = (input, _path, _exceptionable = true) => (undefined === input.authorizationUrl || "string" === typeof input.authorizationUrl || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".authorizationUrl",
                expected: "(string | undefined)",
                value: input.authorizationUrl
            }, _errorFactory)) && (undefined === input.refreshUrl || "string" === typeof input.refreshUrl || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".refreshUrl",
                expected: "(string | undefined)",
                value: input.refreshUrl
            }, _errorFactory)) && (undefined === input.scopes || ("object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".scopes",
                expected: "(Record<string, string> | undefined)",
                value: input.scopes
            }, _errorFactory)) && _ao35(input.scopes, _path + ".scopes", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".scopes",
                expected: "(Record<string, string> | undefined)",
                value: input.scopes
            }, _errorFactory));
            const _ao196 = (input, _path, _exceptionable = true) => (undefined === input.tokenUrl || "string" === typeof input.tokenUrl || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".tokenUrl",
                expected: "(string | undefined)",
                value: input.tokenUrl
            }, _errorFactory)) && (undefined === input.refreshUrl || "string" === typeof input.refreshUrl || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".refreshUrl",
                expected: "(string | undefined)",
                value: input.refreshUrl
            }, _errorFactory)) && (undefined === input.scopes || ("object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".scopes",
                expected: "(Record<string, string> | undefined)",
                value: input.scopes
            }, _errorFactory)) && _ao35(input.scopes, _path + ".scopes", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".scopes",
                expected: "(Record<string, string> | undefined)",
                value: input.scopes
            }, _errorFactory));
            const _ao197 = (input, _path, _exceptionable = true) => ("openIdConnect" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"openIdConnect"',
                value: input.type
            }, _errorFactory)) && ("string" === typeof input.openIdConnectUrl || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".openIdConnectUrl",
                expected: "string",
                value: input.openIdConnectUrl
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory));
            const _ao198 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return ("object" === typeof value && null !== value && false === Array.isArray(value) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "OpenApi.IPath",
                    value
                }, _errorFactory)) && _ao199(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "OpenApi.IPath",
                    value
                }, _errorFactory);
            }));
            const _ao199 = (input, _path, _exceptionable = true) => (undefined === input.servers || (Array.isArray(input.servers) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".servers",
                expected: "(Array<OpenApi.IServer> | undefined)",
                value: input.servers
            }, _errorFactory)) && input.servers.every(((elem, _index158) => ("object" === typeof elem && null !== elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".servers[" + _index158 + "]",
                expected: "OpenApi.IServer",
                value: elem
            }, _errorFactory)) && _ao167(elem, _path + ".servers[" + _index158 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".servers[" + _index158 + "]",
                expected: "OpenApi.IServer",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".servers",
                expected: "(Array<OpenApi.IServer> | undefined)",
                value: input.servers
            }, _errorFactory)) && (undefined === input.summary || "string" === typeof input.summary || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".summary",
                expected: "(string | undefined)",
                value: input.summary
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.options || ("object" === typeof input.options && null !== input.options && false === Array.isArray(input.options) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".options",
                expected: "(OpenApi.IOperation | undefined)",
                value: input.options
            }, _errorFactory)) && _ao200(input.options, _path + ".options", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".options",
                expected: "(OpenApi.IOperation | undefined)",
                value: input.options
            }, _errorFactory)) && (undefined === input.get || ("object" === typeof input.get && null !== input.get && false === Array.isArray(input.get) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".get",
                expected: "(OpenApi.IOperation | undefined)",
                value: input.get
            }, _errorFactory)) && _ao200(input.get, _path + ".get", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".get",
                expected: "(OpenApi.IOperation | undefined)",
                value: input.get
            }, _errorFactory)) && (undefined === input.post || ("object" === typeof input.post && null !== input.post && false === Array.isArray(input.post) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".post",
                expected: "(OpenApi.IOperation | undefined)",
                value: input.post
            }, _errorFactory)) && _ao200(input.post, _path + ".post", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".post",
                expected: "(OpenApi.IOperation | undefined)",
                value: input.post
            }, _errorFactory)) && (undefined === input.patch || ("object" === typeof input.patch && null !== input.patch && false === Array.isArray(input.patch) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".patch",
                expected: "(OpenApi.IOperation | undefined)",
                value: input.patch
            }, _errorFactory)) && _ao200(input.patch, _path + ".patch", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".patch",
                expected: "(OpenApi.IOperation | undefined)",
                value: input.patch
            }, _errorFactory)) && (undefined === input.put || ("object" === typeof input.put && null !== input.put && false === Array.isArray(input.put) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".put",
                expected: "(OpenApi.IOperation | undefined)",
                value: input.put
            }, _errorFactory)) && _ao200(input.put, _path + ".put", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".put",
                expected: "(OpenApi.IOperation | undefined)",
                value: input.put
            }, _errorFactory)) && (undefined === input["delete"] || ("object" === typeof input["delete"] && null !== input["delete"] && false === Array.isArray(input["delete"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["delete"]',
                expected: "(OpenApi.IOperation | undefined)",
                value: input["delete"]
            }, _errorFactory)) && _ao200(input["delete"], _path + '["delete"]', _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["delete"]',
                expected: "(OpenApi.IOperation | undefined)",
                value: input["delete"]
            }, _errorFactory)) && (undefined === input.head || ("object" === typeof input.head && null !== input.head && false === Array.isArray(input.head) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".head",
                expected: "(OpenApi.IOperation | undefined)",
                value: input.head
            }, _errorFactory)) && _ao200(input.head, _path + ".head", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".head",
                expected: "(OpenApi.IOperation | undefined)",
                value: input.head
            }, _errorFactory)) && (undefined === input.trace || ("object" === typeof input.trace && null !== input.trace && false === Array.isArray(input.trace) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".trace",
                expected: "(OpenApi.IOperation | undefined)",
                value: input.trace
            }, _errorFactory)) && _ao200(input.trace, _path + ".trace", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".trace",
                expected: "(OpenApi.IOperation | undefined)",
                value: input.trace
            }, _errorFactory));
            const _ao200 = (input, _path, _exceptionable = true) => (undefined === input.operationId || "string" === typeof input.operationId || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".operationId",
                expected: "(string | undefined)",
                value: input.operationId
            }, _errorFactory)) && (undefined === input.parameters || (Array.isArray(input.parameters) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".parameters",
                expected: "(Array<OpenApi.IOperation.IParameter> | undefined)",
                value: input.parameters
            }, _errorFactory)) && input.parameters.every(((elem, _index159) => ("object" === typeof elem && null !== elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".parameters[" + _index159 + "]",
                expected: "OpenApi.IOperation.IParameter",
                value: elem
            }, _errorFactory)) && _ao201(elem, _path + ".parameters[" + _index159 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".parameters[" + _index159 + "]",
                expected: "OpenApi.IOperation.IParameter",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".parameters",
                expected: "(Array<OpenApi.IOperation.IParameter> | undefined)",
                value: input.parameters
            }, _errorFactory)) && (undefined === input.requestBody || ("object" === typeof input.requestBody && null !== input.requestBody && false === Array.isArray(input.requestBody) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".requestBody",
                expected: "(OpenApi.IOperation.IRequestBody | undefined)",
                value: input.requestBody
            }, _errorFactory)) && _ao204(input.requestBody, _path + ".requestBody", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".requestBody",
                expected: "(OpenApi.IOperation.IRequestBody | undefined)",
                value: input.requestBody
            }, _errorFactory)) && (undefined === input.responses || ("object" === typeof input.responses && null !== input.responses && false === Array.isArray(input.responses) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".responses",
                expected: "(Record<string, OpenApi.IOperation.IResponse> | undefined)",
                value: input.responses
            }, _errorFactory)) && _ao207(input.responses, _path + ".responses", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".responses",
                expected: "(Record<string, OpenApi.IOperation.IResponse> | undefined)",
                value: input.responses
            }, _errorFactory)) && (undefined === input.servers || (Array.isArray(input.servers) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".servers",
                expected: "(Array<OpenApi.IServer> | undefined)",
                value: input.servers
            }, _errorFactory)) && input.servers.every(((elem, _index160) => ("object" === typeof elem && null !== elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".servers[" + _index160 + "]",
                expected: "OpenApi.IServer",
                value: elem
            }, _errorFactory)) && _ao167(elem, _path + ".servers[" + _index160 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".servers[" + _index160 + "]",
                expected: "OpenApi.IServer",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".servers",
                expected: "(Array<OpenApi.IServer> | undefined)",
                value: input.servers
            }, _errorFactory)) && (undefined === input.summary || "string" === typeof input.summary || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".summary",
                expected: "(string | undefined)",
                value: input.summary
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.security || (Array.isArray(input.security) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".security",
                expected: "(Array<Record<string, Array<string>>> | undefined)",
                value: input.security
            }, _errorFactory)) && input.security.every(((elem, _index161) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".security[" + _index161 + "]",
                expected: "Record<string, Array<string>>",
                value: elem
            }, _errorFactory)) && _ao39(elem, _path + ".security[" + _index161 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".security[" + _index161 + "]",
                expected: "Record<string, Array<string>>",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".security",
                expected: "(Array<Record<string, Array<string>>> | undefined)",
                value: input.security
            }, _errorFactory)) && (undefined === input.tags || (Array.isArray(input.tags) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".tags",
                expected: "(Array<string> | undefined)",
                value: input.tags
            }, _errorFactory)) && input.tags.every(((elem, _index162) => "string" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".tags[" + _index162 + "]",
                expected: "string",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".tags",
                expected: "(Array<string> | undefined)",
                value: input.tags
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && (undefined === input["x-samchon-human"] || "boolean" === typeof input["x-samchon-human"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["x-samchon-human"]',
                expected: "(boolean | undefined)",
                value: input["x-samchon-human"]
            }, _errorFactory)) && (undefined === input["x-samchon-accessor"] || (Array.isArray(input["x-samchon-accessor"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["x-samchon-accessor"]',
                expected: "(Array<string> | undefined)",
                value: input["x-samchon-accessor"]
            }, _errorFactory)) && input["x-samchon-accessor"].every(((elem, _index163) => "string" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["x-samchon-accessor"][' + _index163 + "]",
                expected: "string",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["x-samchon-accessor"]',
                expected: "(Array<string> | undefined)",
                value: input["x-samchon-accessor"]
            }, _errorFactory)) && (undefined === input["x-samchon-controller"] || "string" === typeof input["x-samchon-controller"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["x-samchon-controller"]',
                expected: "(string | undefined)",
                value: input["x-samchon-controller"]
            }, _errorFactory));
            const _ao201 = (input, _path, _exceptionable = true) => (undefined === input.name || "string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".name",
                expected: "(string | undefined)",
                value: input.name
            }, _errorFactory)) && ("path" === input["in"] || "query" === input["in"] || "header" === input["in"] || "cookie" === input["in"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["in"]',
                expected: '("cookie" | "header" | "path" | "query")',
                value: input["in"]
            }, _errorFactory)) && (("object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".schema",
                expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IOneOf | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown)",
                value: input.schema
            }, _errorFactory)) && _au7(input.schema, _path + ".schema", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".schema",
                expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IOneOf | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown)",
                value: input.schema
            }, _errorFactory)) && (undefined === input.required || "boolean" === typeof input.required || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".required",
                expected: "(boolean | undefined)",
                value: input.required
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && true && (undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Record<string, OpenApi.IExample> | undefined)",
                value: input.examples
            }, _errorFactory)) && _ao202(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Record<string, OpenApi.IExample> | undefined)",
                value: input.examples
            }, _errorFactory));
            const _ao202 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return ("object" === typeof value && null !== value && false === Array.isArray(value) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "OpenApi.IExample",
                    value
                }, _errorFactory)) && _ao203(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "OpenApi.IExample",
                    value
                }, _errorFactory);
            }));
            const _ao203 = (input, _path, _exceptionable = true) => (undefined === input.summary || "string" === typeof input.summary || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".summary",
                expected: "(string | undefined)",
                value: input.summary
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && true && (undefined === input.externalValue || "string" === typeof input.externalValue || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".externalValue",
                expected: "(string | undefined)",
                value: input.externalValue
            }, _errorFactory));
            const _ao204 = (input, _path, _exceptionable = true) => (undefined === input.content || ("object" === typeof input.content && null !== input.content && false === Array.isArray(input.content) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".content",
                expected: "(OpenApi.IOperation.IContent | undefined)",
                value: input.content
            }, _errorFactory)) && _ao205(input.content, _path + ".content", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".content",
                expected: "(OpenApi.IOperation.IContent | undefined)",
                value: input.content
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.required || "boolean" === typeof input.required || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".required",
                expected: "(boolean | undefined)",
                value: input.required
            }, _errorFactory)) && (undefined === input["x-nestia-encrypted"] || "boolean" === typeof input["x-nestia-encrypted"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["x-nestia-encrypted"]',
                expected: "(boolean | undefined)",
                value: input["x-nestia-encrypted"]
            }, _errorFactory));
            const _ao205 = (input, _path, _exceptionable = true) => (undefined === input["text/plain"] || ("object" === typeof input["text/plain"] && null !== input["text/plain"] && false === Array.isArray(input["text/plain"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["text/plain"]',
                expected: "(OpenApi.IOperation.IMediaType | undefined)",
                value: input["text/plain"]
            }, _errorFactory)) && _ao206(input["text/plain"], _path + '["text/plain"]', _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["text/plain"]',
                expected: "(OpenApi.IOperation.IMediaType | undefined)",
                value: input["text/plain"]
            }, _errorFactory)) && (undefined === input["application/json"] || ("object" === typeof input["application/json"] && null !== input["application/json"] && false === Array.isArray(input["application/json"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["application/json"]',
                expected: "(OpenApi.IOperation.IMediaType | undefined)",
                value: input["application/json"]
            }, _errorFactory)) && _ao206(input["application/json"], _path + '["application/json"]', _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["application/json"]',
                expected: "(OpenApi.IOperation.IMediaType | undefined)",
                value: input["application/json"]
            }, _errorFactory)) && (undefined === input["application/x-www-form-url-encoded"] || ("object" === typeof input["application/x-www-form-url-encoded"] && null !== input["application/x-www-form-url-encoded"] && false === Array.isArray(input["application/x-www-form-url-encoded"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["application/x-www-form-url-encoded"]',
                expected: "(OpenApi.IOperation.IMediaType | undefined)",
                value: input["application/x-www-form-url-encoded"]
            }, _errorFactory)) && _ao206(input["application/x-www-form-url-encoded"], _path + '["application/x-www-form-url-encoded"]', _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["application/x-www-form-url-encoded"]',
                expected: "(OpenApi.IOperation.IMediaType | undefined)",
                value: input["application/x-www-form-url-encoded"]
            }, _errorFactory)) && (undefined === input["multipart/form-data"] || ("object" === typeof input["multipart/form-data"] && null !== input["multipart/form-data"] && false === Array.isArray(input["multipart/form-data"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["multipart/form-data"]',
                expected: "(OpenApi.IOperation.IMediaType | undefined)",
                value: input["multipart/form-data"]
            }, _errorFactory)) && _ao206(input["multipart/form-data"], _path + '["multipart/form-data"]', _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["multipart/form-data"]',
                expected: "(OpenApi.IOperation.IMediaType | undefined)",
                value: input["multipart/form-data"]
            }, _errorFactory)) && (undefined === input["*/*"] || ("object" === typeof input["*/*"] && null !== input["*/*"] && false === Array.isArray(input["*/*"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["*/*"]',
                expected: "(OpenApi.IOperation.IMediaType | undefined)",
                value: input["*/*"]
            }, _errorFactory)) && _ao206(input["*/*"], _path + '["*/*"]', _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["*/*"]',
                expected: "(OpenApi.IOperation.IMediaType | undefined)",
                value: input["*/*"]
            }, _errorFactory)) && (false === _exceptionable || Object.keys(input).every((key => {
                if ([ "text/plain", "application/json", "application/x-www-form-url-encoded", "multipart/form-data", "*/*" ].some((prop => key === prop))) return true;
                const value = input[key];
                if (undefined === value) return true;
                return undefined === value || ("object" === typeof value && null !== value && false === Array.isArray(value) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "(OpenApi.IOperation.IMediaType | undefined)",
                    value
                }, _errorFactory)) && _ao206(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "(OpenApi.IOperation.IMediaType | undefined)",
                    value
                }, _errorFactory);
            })));
            const _ao206 = (input, _path, _exceptionable = true) => (undefined === input.schema || ("object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".schema",
                expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IOneOf | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown | undefined)",
                value: input.schema
            }, _errorFactory)) && _au7(input.schema, _path + ".schema", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".schema",
                expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IOneOf | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown | undefined)",
                value: input.schema
            }, _errorFactory)) && true && (undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Record<string, OpenApi.IExample> | undefined)",
                value: input.examples
            }, _errorFactory)) && _ao202(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Record<string, OpenApi.IExample> | undefined)",
                value: input.examples
            }, _errorFactory));
            const _ao207 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return ("object" === typeof value && null !== value && false === Array.isArray(value) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "OpenApi.IOperation.IResponse",
                    value
                }, _errorFactory)) && _ao208(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "OpenApi.IOperation.IResponse",
                    value
                }, _errorFactory);
            }));
            const _ao208 = (input, _path, _exceptionable = true) => (undefined === input.headers || ("object" === typeof input.headers && null !== input.headers && false === Array.isArray(input.headers) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".headers",
                expected: "(Record<string, OpenApi.IOperation.IParameter> | undefined)",
                value: input.headers
            }, _errorFactory)) && _ao209(input.headers, _path + ".headers", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".headers",
                expected: "(Record<string, OpenApi.IOperation.IParameter> | undefined)",
                value: input.headers
            }, _errorFactory)) && (undefined === input.content || ("object" === typeof input.content && null !== input.content && false === Array.isArray(input.content) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".content",
                expected: "(OpenApi.IOperation.IContent | undefined)",
                value: input.content
            }, _errorFactory)) && _ao205(input.content, _path + ".content", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".content",
                expected: "(OpenApi.IOperation.IContent | undefined)",
                value: input.content
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input["x-nestia-encrypted"] || "boolean" === typeof input["x-nestia-encrypted"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["x-nestia-encrypted"]',
                expected: "(boolean | undefined)",
                value: input["x-nestia-encrypted"]
            }, _errorFactory));
            const _ao209 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return ("object" === typeof value && null !== value || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "OpenApi.IOperation.IParameter",
                    value
                }, _errorFactory)) && _ao201(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "OpenApi.IOperation.IParameter",
                    value
                }, _errorFactory);
            }));
            const _ao210 = (input, _path, _exceptionable = true) => ("string" === typeof input.name || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".name",
                expected: "string",
                value: input.name
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory));
            const _au0 = (input, _path, _exceptionable = true) => (() => {
                if ("boolean" === input.type) return _ao5(input, _path, _exceptionable); else if ("number" === input.type) return _ao7(input, _path, _exceptionable); else if ("integer" === input.type) return _ao6(input, _path, _exceptionable); else if ("string" === input.type) return _ao8(input, _path, _exceptionable); else if ("array" === input.type) return _ao9(input, _path, _exceptionable); else if ("object" === input.type) return _ao10(input, _path, _exceptionable); else if (undefined !== input.$ref) return _ao11(input, _path, _exceptionable); else if (undefined !== input["x-anyOf"]) return _ao12(input, _path, _exceptionable); else if (undefined !== input["x-oneOf"]) return _ao13(input, _path, _exceptionable); else if ("null" === input.type) return _ao14(input, _path, _exceptionable); else return _ao15(input, _path, _exceptionable);
            })();
            const _au1 = (input, _path, _exceptionable = true) => (() => {
                if ("boolean" === input.type) return _ao17(input, _path, _exceptionable); else if ("number" === input.type) return _ao19(input, _path, _exceptionable); else if ("integer" === input.type) return _ao18(input, _path, _exceptionable); else if ("string" === input.type) return _ao20(input, _path, _exceptionable); else if ("array" === input.type) return _ao21(input, _path, _exceptionable); else if ("object" === input.type) return _ao22(input, _path, _exceptionable); else if (undefined !== input["x-anyOf"]) return _ao24(input, _path, _exceptionable); else if (undefined !== input["x-oneOf"]) return _ao25(input, _path, _exceptionable); else if ("null" === input.type) return _ao26(input, _path, _exceptionable); else if (undefined !== input.schema) return _ao28(input, _path, _exceptionable); else return _ao23(input, _path, false) || _ao27(input, _path, false) || _ao42(input, _path, false) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path,
                    expected: "(IReference<string> & { name: string; in: string; description?: string | undefined; } | IUnknown & { name: string; in: string; description?: string | undefined; } | SwaggerV2.IJsonSchema.IReference<`#/parameters/${string}`>)",
                    value: input
                }, _errorFactory);
            })();
            const _au2 = (input, _path, _exceptionable = true) => (() => {
                if ("boolean" === input.type) return _ao17(input, _path, _exceptionable); else if ("number" === input.type) return _ao19(input, _path, _exceptionable); else if ("integer" === input.type) return _ao18(input, _path, _exceptionable); else if ("string" === input.type) return _ao20(input, _path, _exceptionable); else if ("array" === input.type) return _ao21(input, _path, _exceptionable); else if ("object" === input.type) return _ao22(input, _path, _exceptionable); else if (undefined !== input["x-anyOf"]) return _ao24(input, _path, _exceptionable); else if (undefined !== input["x-oneOf"]) return _ao25(input, _path, _exceptionable); else if ("null" === input.type) return _ao26(input, _path, _exceptionable); else if (undefined !== input.schema) return _ao28(input, _path, _exceptionable); else return _ao23(input, _path, false) || _ao27(input, _path, false) || _ao44(input, _path, false) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path,
                    expected: "(IReference<string> & { name: string; in: string; description?: string | undefined; } | IUnknown & { name: string; in: string; description?: string | undefined; } | SwaggerV2.IJsonSchema.IReference<`#/definitions/parameters/${string}`>)",
                    value: input
                }, _errorFactory);
            })();
            const _au3 = (input, _path, _exceptionable = true) => (() => {
                if ("boolean" === input.type) return _ao57(input, _path, _exceptionable); else if ("number" === input.type) return _ao60(input, _path, _exceptionable); else if ("integer" === input.type) return _ao59(input, _path, _exceptionable); else if ("string" === input.type) return _ao61(input, _path, _exceptionable); else if ("array" === input.type) return _ao62(input, _path, _exceptionable); else if ("object" === input.type) return _ao63(input, _path, _exceptionable); else if (undefined !== input.$ref) return _ao64(input, _path, _exceptionable); else if (undefined !== input.allOf) return _ao65(input, _path, _exceptionable); else if (undefined !== input.anyOf) return _ao66(input, _path, _exceptionable); else if (undefined !== input.oneOf) return _ao67(input, _path, _exceptionable); else if ("null" === input.type) return _ao69(input, _path, _exceptionable); else return _ao70(input, _path, _exceptionable);
            })();
            const _au4 = (input, _path, _exceptionable = true) => (() => {
                if (undefined !== input["in"]) return _ao82(input, _path, _exceptionable); else if ("string" === typeof input.$ref && RegExp(/^#\/components\/parameters\/(.*)/).test(input.$ref)) return _ao99(input, _path, _exceptionable); else if ("string" === typeof input.$ref && RegExp(/^#\/components\/headers\/(.*)/).test(input.$ref)) return _ao80(input, _path, _exceptionable); else return __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path,
                    expected: "(OpenApiV3.IOperation.IParameter | OpenApiV3.IJsonSchema.IReference<`#/components/parameters/${string}`> | OpenApiV3.IJsonSchema.IReference<`#/components/headers/${string}`>)",
                    value: input
                }, _errorFactory);
            })();
            const _au5 = (input, _path, _exceptionable = true) => (() => {
                if ("object" === input.type) return _ao114(input, _path, _exceptionable); else if (Array.isArray(input.type) && input.type.every(((elem, _index164) => "string" === elem || "number" === elem || "boolean" === elem || "object" === elem || "integer" === elem || "array" === elem || "null" === elem))) return _ao115(input, _path, _exceptionable); else if ("boolean" === input.type) return _ao117(input, _path, _exceptionable); else if ("number" === input.type) return _ao119(input, _path, _exceptionable); else if ("integer" === input.type) return _ao118(input, _path, _exceptionable); else if ("string" === input.type) return _ao120(input, _path, _exceptionable); else if ("array" === input.type) return _ao121(input, _path, _exceptionable); else if (undefined !== input.$recursiveRef) return _ao123(input, _path, _exceptionable); else if ("null" === input.type) return _ao128(input, _path, _exceptionable); else return (() => {
                    if (undefined !== input["const"]) return _ao116(input, _path, _exceptionable); else if (undefined !== input.$ref) return _ao122(input, _path, _exceptionable); else if (undefined !== input.allOf) return _ao124(input, _path, _exceptionable); else if (undefined !== input.anyOf) return _ao125(input, _path, _exceptionable); else if (undefined !== input.oneOf) return _ao126(input, _path, _exceptionable); else return _ao129(input, _path, _exceptionable);
                })();
            })();
            const _au6 = (input, _path, _exceptionable = true) => (() => {
                if (undefined !== input["in"]) return _ao132(input, _path, _exceptionable); else if ("string" === typeof input.$ref && RegExp(/^#\/components\/parameters\/(.*)/).test(input.$ref)) return _ao137(input, _path, _exceptionable); else if ("string" === typeof input.$ref && RegExp(/^#\/components\/headers\/(.*)/).test(input.$ref)) return _ao136(input, _path, _exceptionable); else return __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path,
                    expected: "(OpenApiV3_1.IOperation.IParameter | OpenApiV3_1.IJsonSchema.IReference<`#/components/parameters/${string}`> | OpenApiV3_1.IJsonSchema.IReference<`#/components/headers/${string}`>)",
                    value: input
                }, _errorFactory);
            })();
            const _au7 = (input, _path, _exceptionable = true) => (() => {
                if (undefined !== input["const"]) return _ao175(input, _path, _exceptionable); else if ("boolean" === input.type) return _ao176(input, _path, _exceptionable); else if ("number" === input.type) return _ao178(input, _path, _exceptionable); else if ("integer" === input.type) return _ao177(input, _path, _exceptionable); else if ("string" === input.type) return _ao179(input, _path, _exceptionable); else if (undefined !== input.items) return _ao180(input, _path, _exceptionable); else if (undefined !== input.prefixItems) return _ao181(input, _path, _exceptionable); else if ("object" === input.type) return _ao182(input, _path, _exceptionable); else if (undefined !== input.$ref) return _ao183(input, _path, _exceptionable); else if (undefined !== input.oneOf) return _ao184(input, _path, _exceptionable); else if ("null" === input.type) return _ao185(input, _path, _exceptionable); else return _ao186(input, _path, _exceptionable);
            })();
            const _au8 = (input, _path, _exceptionable = true) => (() => {
                if (undefined !== input["const"]) return _ao175(input, _path, _exceptionable); else if ("boolean" === input.type) return _ao176(input, _path, _exceptionable); else if ("number" === input.type) return _ao178(input, _path, _exceptionable); else if ("integer" === input.type) return _ao177(input, _path, _exceptionable); else if ("string" === input.type) return _ao179(input, _path, _exceptionable); else if (undefined !== input.items) return _ao180(input, _path, _exceptionable); else if (undefined !== input.prefixItems) return _ao181(input, _path, _exceptionable); else if ("object" === input.type) return _ao182(input, _path, _exceptionable); else if (undefined !== input.$ref) return _ao183(input, _path, _exceptionable); else if ("null" === input.type) return _ao185(input, _path, _exceptionable); else return _ao186(input, _path, _exceptionable);
            })();
            const _au9 = (input, _path, _exceptionable = true) => (() => {
                if ("boolean" === input.type) return _ao17(input, _path, _exceptionable); else if ("number" === input.type) return _ao19(input, _path, _exceptionable); else if ("integer" === input.type) return _ao18(input, _path, _exceptionable); else if ("string" === input.type) return _ao20(input, _path, _exceptionable); else if ("array" === input.type) return _ao21(input, _path, _exceptionable); else if ("object" === input.type) return _ao22(input, _path, _exceptionable); else if (undefined !== input.$ref) return _ao23(input, _path, _exceptionable); else if (undefined !== input["x-anyOf"]) return _ao24(input, _path, _exceptionable); else if (undefined !== input["x-oneOf"]) return _ao25(input, _path, _exceptionable); else if ("null" === input.type) return _ao26(input, _path, _exceptionable); else if (undefined !== input.schema) return _ao28(input, _path, _exceptionable); else return _ao27(input, _path, _exceptionable);
            })();
            const _au10 = (input, _path, _exceptionable = true) => (() => {
                if ("apiKey" === input.type) return _ao32(input, _path, _exceptionable); else if ("basic" === input.type) return _ao33(input, _path, _exceptionable); else if ("implicit" === input.flow) return _ao34(input, _path, _exceptionable); else if ("accessCode" === input.flow) return _ao36(input, _path, _exceptionable); else if ("application" === input.flow) return _ao38(input, _path, _exceptionable); else if ("password" === input.flow) return _ao37(input, _path, _exceptionable); else return __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path,
                    expected: "(SwaggerV2.ISecurityDefinition.IApiKey | SwaggerV2.ISecurityDefinition.IBasic | SwaggerV2.ISecurityDefinition.IOauth2Implicit | SwaggerV2.ISecurityDefinition.IOauth2AccessCode | SwaggerV2.ISecurityDefinition.IOauth2Application | SwaggerV2.ISecurityDefinition.IOauth2Password)",
                    value: input
                }, _errorFactory);
            })();
            const _au11 = (input, _path, _exceptionable = true) => (() => {
                if (undefined !== input.$ref) return _ao46(input, _path, _exceptionable); else return _ao30(input, _path, _exceptionable);
            })();
            const _au12 = (input, _path, _exceptionable = true) => (() => {
                if (undefined !== input.$ref) return _ao77(input, _path, _exceptionable); else return _ao76(input, _path, _exceptionable);
            })();
            const _au13 = (input, _path, _exceptionable = true) => (() => {
                if (undefined !== input.schema) return _ao79(input, _path, _exceptionable); else if (undefined !== input.$ref) return _ao80(input, _path, _exceptionable); else return __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path,
                    expected: '(Omit<OpenApiV3.IOperation.IParameter, "in"> | OpenApiV3.IJsonSchema.IReference<`#/components/headers/${string}`>)',
                    value: input
                }, _errorFactory);
            })();
            const _au14 = (input, _path, _exceptionable = true) => (() => {
                if ("apiKey" === input.type) return _ao86(input, _path, _exceptionable); else if ("basic" === input.scheme) return _ao87(input, _path, _exceptionable); else if ("bearer" === input.scheme) return _ao88(input, _path, _exceptionable); else if ("oauth2" === input.type) return _ao89(input, _path, _exceptionable); else if ("openIdConnect" === input.type) return _ao94(input, _path, _exceptionable); else return __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path,
                    expected: "(OpenApiV3.ISecurityScheme.IApiKey | OpenApiV3.ISecurityScheme.IHttpBasic | OpenApiV3.ISecurityScheme.IHttpBearer | OpenApiV3.ISecurityScheme.IOAuth2 | OpenApiV3.ISecurityScheme.IOpenId)",
                    value: input
                }, _errorFactory);
            })();
            const _au15 = (input, _path, _exceptionable = true) => (() => {
                if (undefined !== input.$ref) return _ao101(input, _path, _exceptionable); else return _ao84(input, _path, _exceptionable);
            })();
            const _au16 = (input, _path, _exceptionable = true) => (() => {
                if (undefined !== input.$ref) return _ao103(input, _path, _exceptionable); else return _ao72(input, _path, _exceptionable);
            })();
            const _au17 = (input, _path, _exceptionable = true) => (() => {
                if (undefined !== input.$ref) return _ao135(input, _path, _exceptionable); else return _ao134(input, _path, _exceptionable);
            })();
            const _au18 = (input, _path, _exceptionable = true) => (() => {
                if (undefined !== input.$ref) return _ao142(input, _path, _exceptionable); else return _ao139(input, _path, _exceptionable);
            })();
            const _au19 = (input, _path, _exceptionable = true) => (() => {
                if (undefined !== input.$ref) return _ao147(input, _path, _exceptionable); else return _ao144(input, _path, _exceptionable);
            })();
            const _au20 = (input, _path, _exceptionable = true) => (() => {
                if (undefined !== input.$ref) return _ao136(input, _path, _exceptionable); else if (undefined !== input.schema) return _ao146(input, _path, _exceptionable); else return __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path,
                    expected: '(OpenApiV3_1.IJsonSchema.IReference<`#/components/headers/${string}`> | Omit<OpenApiV3_1.IOperation.IParameter, "in">)',
                    value: input
                }, _errorFactory);
            })();
            const _au21 = (input, _path, _exceptionable = true) => (() => {
                if ("apiKey" === input.type) return _ao152(input, _path, _exceptionable); else if ("basic" === input.scheme) return _ao153(input, _path, _exceptionable); else if ("bearer" === input.scheme) return _ao154(input, _path, _exceptionable); else if ("oauth2" === input.type) return _ao155(input, _path, _exceptionable); else if ("openIdConnect" === input.type) return _ao160(input, _path, _exceptionable); else return __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path,
                    expected: "(OpenApiV3_1.ISecurityScheme.IApiKey | OpenApiV3_1.ISecurityScheme.IHttpBasic | OpenApiV3_1.ISecurityScheme.IHttpBearer | OpenApiV3_1.ISecurityScheme.IOAuth2 | OpenApiV3_1.ISecurityScheme.IOpenId)",
                    value: input
                }, _errorFactory);
            })();
            const _au22 = (input, _path, _exceptionable = true) => (() => {
                if (undefined !== input.$ref) return _ao164(input, _path, _exceptionable); else return _ao131(input, _path, _exceptionable);
            })();
            const _au23 = (input, _path, _exceptionable = true) => (() => {
                if ("apiKey" === input.type) return _ao189(input, _path, _exceptionable); else if ("basic" === input.scheme) return _ao190(input, _path, _exceptionable); else if ("bearer" === input.scheme) return _ao191(input, _path, _exceptionable); else if ("oauth2" === input.type) return _ao192(input, _path, _exceptionable); else if ("openIdConnect" === input.type) return _ao197(input, _path, _exceptionable); else return __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path,
                    expected: "(OpenApi.ISecurityScheme.IApiKey | OpenApi.ISecurityScheme.IHttpBasic | OpenApi.ISecurityScheme.IHttpBearer | OpenApi.ISecurityScheme.IOAuth2 | OpenApi.ISecurityScheme.IOpenId)",
                    value: input
                }, _errorFactory);
            })();
            const _au24 = (input, _path, _exceptionable = true) => (() => {
                if (undefined !== input.swagger) return _ao0(input, _path, _exceptionable); else if (null !== input.openapi && undefined !== input.openapi && ("3.0" === input.openapi || "string" === typeof input.openapi && RegExp(/^3\.0\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(input.openapi))) return _ao48(input, _path, _exceptionable); else if ("string" === typeof input.openapi && RegExp(/^3\.1\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(input.openapi)) return _ao105(input, _path, _exceptionable); else if (undefined !== input["x-samchon-emended-v4"]) return _ao166(input, _path, _exceptionable); else return __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path,
                    expected: "(SwaggerV2.IDocument | OpenApiV3.IDocument | OpenApiV3_1.IDocument | OpenApi.IDocument)",
                    value: input
                }, _errorFactory);
            })();
            const __is = input => "object" === typeof input && null !== input && _iu24(input);
            let _errorFactory;
            return (input, errorFactory) => {
                if (false === __is(input)) {
                    _errorFactory = errorFactory;
                    ((input, _path, _exceptionable = true) => ("object" === typeof input && null !== input || __typia_transform__assertGuard._assertGuard(true, {
                        method: "typia.assert",
                        path: _path + "",
                        expected: "(OpenApi.IDocument | OpenApiV3.IDocument | OpenApiV3_1.IDocument | SwaggerV2.IDocument)",
                        value: input
                    }, _errorFactory)) && _au24(input, _path + "", true) || __typia_transform__assertGuard._assertGuard(true, {
                        method: "typia.assert",
                        path: _path + "",
                        expected: "(OpenApi.IDocument | OpenApiV3.IDocument | OpenApiV3_1.IDocument | SwaggerV2.IDocument)",
                        value: input
                    }, _errorFactory))(input, "$input", true);
                }
                return input;
            };
        })()(props.document)),
        options: props.options
    });
}

async function assertMcpController(props) {
    const {ListToolsResultSchema} = await import("@modelcontextprotocol/sdk/types.js");
    const {tools} = await props.client.request({
        method: "tools/list"
    }, ListToolsResultSchema);
    const application = McpLlm.application({
        model: props.model,
        tools: (() => {
            const _io0 = input => "string" === typeof input.name && input.name.length <= 64 && (undefined === input.description || "string" === typeof input.description) && ("object" === typeof input.inputSchema && null !== input.inputSchema && _iu1(input.inputSchema));
            const _io1 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && (undefined === input.properties || "object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) && _io2(input.properties)) && (undefined === input.required || Array.isArray(input.required) && input.required.every((elem => "string" === typeof elem))) && (null !== input.additionalProperties && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || "object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) && _iu0(input.additionalProperties))) && (undefined === input.maxProperties || "number" === typeof input.maxProperties) && (undefined === input.minProperties || "number" === typeof input.minProperties) && "object" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io5(input.examples)))) && (undefined === input.$defs || "object" === typeof input.$defs && null !== input.$defs && false === Array.isArray(input.$defs) && _io2(input.$defs));
            const _io2 = input => Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return "object" === typeof value && null !== value && false === Array.isArray(value) && _iu0(value);
            }));
            const _io3 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && (undefined === input.properties || "object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) && _io2(input.properties)) && (undefined === input.required || Array.isArray(input.required) && input.required.every((elem => "string" === typeof elem))) && (null !== input.additionalProperties && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || "object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) && _iu0(input.additionalProperties))) && (undefined === input.maxProperties || "number" === typeof input.maxProperties) && (undefined === input.minProperties || "number" === typeof input.minProperties) && "object" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io5(input.examples))));
            const _io4 = input => Array.isArray(input.type) && input.type.every((elem => "string" === elem || "number" === elem || "boolean" === elem || "object" === elem || "integer" === elem || "array" === elem || "null" === elem)) && (null === input["default"] || undefined === input["default"] || Array.isArray(input["default"])) && (undefined === input["enum"] || Array.isArray(input["enum"])) && ("string" === typeof input["const"] || "number" === typeof input["const"] || "boolean" === typeof input["const"]) && (undefined === input.nullable || "boolean" === typeof input.nullable) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io5(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input.minimum || "number" === typeof input.minimum) && (undefined === input.maximum || "number" === typeof input.maximum) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && 0 < input.multipleOf) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum) && (undefined === input.format || "string" === typeof input.format) && (undefined === input.maxLength || "number" === typeof input.maxLength && (Math.floor(input.maxLength) === input.maxLength && 0 <= input.maxLength && input.maxLength <= 0x10000000000000000)) && (undefined === input.pattern || "string" === typeof input.pattern) && (undefined === input.contentMediaType || "string" === typeof input.contentMediaType) && (undefined === input.minLength || "number" === typeof input.minLength && (Math.floor(input.minLength) === input.minLength && 0 <= input.minLength && input.minLength <= 0x10000000000000000)) && (null !== input.items && (undefined === input.items || (Array.isArray(input.items) && input.items.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu0(elem))) || "object" === typeof input.items && null !== input.items && false === Array.isArray(input.items) && _iu0(input.items)))) && (undefined === input.prefixItems || Array.isArray(input.prefixItems) && input.prefixItems.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu0(elem)))) && (undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems) && (null !== input.additionalItems && (undefined === input.additionalItems || "boolean" === typeof input.additionalItems || "object" === typeof input.additionalItems && null !== input.additionalItems && false === Array.isArray(input.additionalItems) && _iu0(input.additionalItems))) && (undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000)) && (undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000)) && (null !== input.additionalProperties && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || "object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) && _iu0(input.additionalProperties))) && (undefined === input.properties || "object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) && _io2(input.properties)) && (undefined === input.required || Array.isArray(input.required) && input.required.every((elem => "string" === typeof elem))) && (undefined === input.maxProperties || "number" === typeof input.maxProperties) && (undefined === input.minProperties || "number" === typeof input.minProperties) && (Array.isArray(input.oneOf) && input.oneOf.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu0(elem)))) && (undefined === input.discriminator || "object" === typeof input.discriminator && null !== input.discriminator && _io17(input.discriminator)) && (Array.isArray(input.anyOf) && input.anyOf.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu0(elem)))) && (Array.isArray(input.allOf) && input.allOf.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu0(elem)))) && "string" === typeof input.$ref;
            const _io5 = input => Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return true;
            }));
            const _io6 = input => ("string" === typeof input["const"] || "number" === typeof input["const"] || "boolean" === typeof input["const"]) && (undefined === input.nullable || "boolean" === typeof input.nullable) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io5(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
            const _io7 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && (null === input["default"] || undefined === input["default"] || "boolean" === typeof input["default"]) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "boolean" === typeof elem))) && "boolean" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io5(input.examples))));
            const _io8 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && (null === input["default"] || undefined === input["default"] || "number" === typeof input["default"] && (Math.floor(input["default"]) === input["default"] && -0x8000000000000000 <= input["default"] && input["default"] <= 0x8000000000000000)) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "number" === typeof elem))) && (undefined === input.minimum || "number" === typeof input.minimum && (Math.floor(input.minimum) === input.minimum && -0x8000000000000000 <= input.minimum && input.minimum <= 0x8000000000000000)) && (undefined === input.maximum || "number" === typeof input.maximum && (Math.floor(input.maximum) === input.maximum && -0x8000000000000000 <= input.maximum && input.maximum <= 0x8000000000000000)) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum && (Math.floor(input.exclusiveMinimum) === input.exclusiveMinimum && -0x8000000000000000 <= input.exclusiveMinimum && input.exclusiveMinimum <= 0x8000000000000000) || "boolean" === typeof input.exclusiveMinimum) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum && (Math.floor(input.exclusiveMaximum) === input.exclusiveMaximum && -0x8000000000000000 <= input.exclusiveMaximum && input.exclusiveMaximum <= 0x8000000000000000) || "boolean" === typeof input.exclusiveMaximum) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && (Math.floor(input.multipleOf) === input.multipleOf && 0 <= input.multipleOf && input.multipleOf <= 0x10000000000000000 && 0 < input.multipleOf)) && "integer" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io5(input.examples))));
            const _io9 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && (null === input["default"] || undefined === input["default"] || "number" === typeof input["default"]) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "number" === typeof elem))) && (undefined === input.minimum || "number" === typeof input.minimum) && (undefined === input.maximum || "number" === typeof input.maximum) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && 0 < input.multipleOf) && "number" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io5(input.examples))));
            const _io10 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && (null === input["default"] || undefined === input["default"] || "string" === typeof input["default"]) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "string" === typeof elem))) && (undefined === input.format || "string" === typeof input.format) && (undefined === input.pattern || "string" === typeof input.pattern) && (undefined === input.contentMediaType || "string" === typeof input.contentMediaType) && (undefined === input.minLength || "number" === typeof input.minLength && (Math.floor(input.minLength) === input.minLength && 0 <= input.minLength && input.minLength <= 0x10000000000000000)) && (undefined === input.maxLength || "number" === typeof input.maxLength && (Math.floor(input.maxLength) === input.maxLength && 0 <= input.maxLength && input.maxLength <= 0x10000000000000000)) && "string" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io5(input.examples))));
            const _io11 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && (null !== input.items && (undefined === input.items || (Array.isArray(input.items) && input.items.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu0(elem))) || "object" === typeof input.items && null !== input.items && false === Array.isArray(input.items) && _iu0(input.items)))) && (undefined === input.prefixItems || Array.isArray(input.prefixItems) && input.prefixItems.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu0(elem)))) && (undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems) && (null !== input.additionalItems && (undefined === input.additionalItems || "boolean" === typeof input.additionalItems || "object" === typeof input.additionalItems && null !== input.additionalItems && false === Array.isArray(input.additionalItems) && _iu0(input.additionalItems))) && (undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000)) && (undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000)) && "array" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io5(input.examples))));
            const _io12 = input => "string" === typeof input.$ref && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io5(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
            const _io13 = input => "string" === typeof input.$recursiveRef && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io5(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
            const _io14 = input => Array.isArray(input.allOf) && input.allOf.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu0(elem))) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io5(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
            const _io15 = input => Array.isArray(input.anyOf) && input.anyOf.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu0(elem))) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io5(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
            const _io16 = input => Array.isArray(input.oneOf) && input.oneOf.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu0(elem))) && (undefined === input.discriminator || "object" === typeof input.discriminator && null !== input.discriminator && _io17(input.discriminator)) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io5(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
            const _io17 = input => "string" === typeof input.propertyName && (undefined === input.mapping || "object" === typeof input.mapping && null !== input.mapping && false === Array.isArray(input.mapping) && _io18(input.mapping));
            const _io18 = input => Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return "string" === typeof value;
            }));
            const _io19 = input => (null === input["default"] || undefined === input["default"]) && "null" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io5(input.examples))));
            const _io20 = input => null !== input.type && undefined === input.type && true && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io5(input.examples))));
            const _io21 = input => "string" === typeof input.$ref && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io5(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input.$defs || "object" === typeof input.$defs && null !== input.$defs && false === Array.isArray(input.$defs) && _io2(input.$defs));
            const _iu0 = input => (() => {
                if ("object" === input.type) return _io3(input); else if (Array.isArray(input.type) && input.type.every((elem => "string" === elem || "number" === elem || "boolean" === elem || "object" === elem || "integer" === elem || "array" === elem || "null" === elem))) return _io4(input); else if ("boolean" === input.type) return _io7(input); else if ("number" === input.type) return _io9(input); else if ("integer" === input.type) return _io8(input); else if ("string" === input.type) return _io10(input); else if ("array" === input.type) return _io11(input); else if (undefined !== input.$recursiveRef) return _io13(input); else if ("null" === input.type) return _io19(input); else return (() => {
                    if (undefined !== input["const"]) return _io6(input); else if (undefined !== input.$ref) return _io12(input); else if (undefined !== input.allOf) return _io14(input); else if (undefined !== input.anyOf) return _io15(input); else if (undefined !== input.oneOf) return _io16(input); else return _io20(input);
                })();
            })();
            const _iu1 = input => (() => {
                if (undefined !== input.type) return _io1(input); else if (undefined !== input.$ref) return _io21(input); else return false;
            })();
            const _ao0 = (input, _path, _exceptionable = true) => ("string" === typeof input.name && (input.name.length <= 64 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".name",
                expected: "string & MaxLength<64>",
                value: input.name
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".name",
                expected: "(string & MaxLength<64>)",
                value: input.name
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (("object" === typeof input.inputSchema && null !== input.inputSchema || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".inputSchema",
                expected: "(IObject & { $defs?: Record<string, IJsonSchema> | undefined; } | IReference<string> & { $defs?: Record<string, IJsonSchema> | undefined; })",
                value: input.inputSchema
            }, _errorFactory)) && _au1(input.inputSchema, _path + ".inputSchema", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".inputSchema",
                expected: "(IObject & { $defs?: Record<string, IJsonSchema> | undefined; } | IReference<string> & { $defs?: Record<string, IJsonSchema> | undefined; })",
                value: input.inputSchema
            }, _errorFactory));
            const _ao1 = (input, _path, _exceptionable = true) => (undefined === input.nullable || "boolean" === typeof input.nullable || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".nullable",
                expected: "(boolean | undefined)",
                value: input.nullable
            }, _errorFactory)) && (undefined === input.properties || ("object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".properties",
                expected: "(Record<string, OpenApiV3_1.IJsonSchema> | undefined)",
                value: input.properties
            }, _errorFactory)) && _ao2(input.properties, _path + ".properties", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".properties",
                expected: "(Record<string, OpenApiV3_1.IJsonSchema> | undefined)",
                value: input.properties
            }, _errorFactory)) && (undefined === input.required || (Array.isArray(input.required) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".required",
                expected: "(Array<string> | undefined)",
                value: input.required
            }, _errorFactory)) && input.required.every(((elem, _index22) => "string" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".required[" + _index22 + "]",
                expected: "string",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".required",
                expected: "(Array<string> | undefined)",
                value: input.required
            }, _errorFactory)) && ((null !== input.additionalProperties || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".additionalProperties",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
                value: input.additionalProperties
            }, _errorFactory)) && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || ("object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".additionalProperties",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
                value: input.additionalProperties
            }, _errorFactory)) && _au0(input.additionalProperties, _path + ".additionalProperties", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".additionalProperties",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
                value: input.additionalProperties
            }, _errorFactory))) && (undefined === input.maxProperties || "number" === typeof input.maxProperties || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maxProperties",
                expected: "(number | undefined)",
                value: input.maxProperties
            }, _errorFactory)) && (undefined === input.minProperties || "number" === typeof input.minProperties || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minProperties",
                expected: "(number | undefined)",
                value: input.minProperties
            }, _errorFactory)) && ("object" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"object"',
                value: input.type
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao5(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory))) && (undefined === input.$defs || ("object" === typeof input.$defs && null !== input.$defs && false === Array.isArray(input.$defs) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".$defs",
                expected: "(Record<string, OpenApiV3_1.IJsonSchema> | undefined)",
                value: input.$defs
            }, _errorFactory)) && _ao2(input.$defs, _path + ".$defs", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".$defs",
                expected: "(Record<string, OpenApiV3_1.IJsonSchema> | undefined)",
                value: input.$defs
            }, _errorFactory));
            const _ao2 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return ("object" === typeof value && null !== value && false === Array.isArray(value) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                    value
                }, _errorFactory)) && _au0(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                    value
                }, _errorFactory);
            }));
            const _ao3 = (input, _path, _exceptionable = true) => (undefined === input.nullable || "boolean" === typeof input.nullable || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".nullable",
                expected: "(boolean | undefined)",
                value: input.nullable
            }, _errorFactory)) && (undefined === input.properties || ("object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".properties",
                expected: "(Record<string, OpenApiV3_1.IJsonSchema> | undefined)",
                value: input.properties
            }, _errorFactory)) && _ao2(input.properties, _path + ".properties", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".properties",
                expected: "(Record<string, OpenApiV3_1.IJsonSchema> | undefined)",
                value: input.properties
            }, _errorFactory)) && (undefined === input.required || (Array.isArray(input.required) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".required",
                expected: "(Array<string> | undefined)",
                value: input.required
            }, _errorFactory)) && input.required.every(((elem, _index23) => "string" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".required[" + _index23 + "]",
                expected: "string",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".required",
                expected: "(Array<string> | undefined)",
                value: input.required
            }, _errorFactory)) && ((null !== input.additionalProperties || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".additionalProperties",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
                value: input.additionalProperties
            }, _errorFactory)) && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || ("object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".additionalProperties",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
                value: input.additionalProperties
            }, _errorFactory)) && _au0(input.additionalProperties, _path + ".additionalProperties", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".additionalProperties",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
                value: input.additionalProperties
            }, _errorFactory))) && (undefined === input.maxProperties || "number" === typeof input.maxProperties || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maxProperties",
                expected: "(number | undefined)",
                value: input.maxProperties
            }, _errorFactory)) && (undefined === input.minProperties || "number" === typeof input.minProperties || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minProperties",
                expected: "(number | undefined)",
                value: input.minProperties
            }, _errorFactory)) && ("object" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"object"',
                value: input.type
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao5(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)));
            const _ao4 = (input, _path, _exceptionable = true) => ((Array.isArray(input.type) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: 'Array<"string" | "number" | "boolean" | "object" | "integer" | "array" | "null">',
                value: input.type
            }, _errorFactory)) && input.type.every(((elem, _index24) => "string" === elem || "number" === elem || "boolean" === elem || "object" === elem || "integer" === elem || "array" === elem || "null" === elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type[" + _index24 + "]",
                expected: '("array" | "boolean" | "integer" | "null" | "number" | "object" | "string")',
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: 'Array<"string" | "number" | "boolean" | "object" | "integer" | "array" | "null">',
                value: input.type
            }, _errorFactory)) && (null === input["default"] || undefined === input["default"] || Array.isArray(input["default"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["default"]',
                expected: "(Array<any> | null | undefined)",
                value: input["default"]
            }, _errorFactory)) && (undefined === input["enum"] || Array.isArray(input["enum"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"]',
                expected: "(Array<any> | undefined)",
                value: input["enum"]
            }, _errorFactory)) && ("string" === typeof input["const"] || "number" === typeof input["const"] || "boolean" === typeof input["const"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["const"]',
                expected: "(boolean | number | string)",
                value: input["const"]
            }, _errorFactory)) && (undefined === input.nullable || "boolean" === typeof input.nullable || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".nullable",
                expected: "(boolean | undefined)",
                value: input.nullable
            }, _errorFactory)) && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao5(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory))) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && (undefined === input.minimum || "number" === typeof input.minimum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minimum",
                expected: "(number | undefined)",
                value: input.minimum
            }, _errorFactory)) && (undefined === input.maximum || "number" === typeof input.maximum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maximum",
                expected: "(number | undefined)",
                value: input.maximum
            }, _errorFactory)) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && (0 < input.multipleOf || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".multipleOf",
                expected: "number & ExclusiveMinimum<0>",
                value: input.multipleOf
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".multipleOf",
                expected: "((number & ExclusiveMinimum<0>) | undefined)",
                value: input.multipleOf
            }, _errorFactory)) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".exclusiveMinimum",
                expected: "(boolean | number | undefined)",
                value: input.exclusiveMinimum
            }, _errorFactory)) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".exclusiveMaximum",
                expected: "(boolean | number | undefined)",
                value: input.exclusiveMaximum
            }, _errorFactory)) && (undefined === input.format || "string" === typeof input.format || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".format",
                expected: "(string | undefined)",
                value: input.format
            }, _errorFactory)) && (undefined === input.maxLength || "number" === typeof input.maxLength && (Math.floor(input.maxLength) === input.maxLength && 0 <= input.maxLength && input.maxLength <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maxLength",
                expected: 'number & Type<"uint64">',
                value: input.maxLength
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maxLength",
                expected: '((number & Type<"uint64">) | undefined)',
                value: input.maxLength
            }, _errorFactory)) && (undefined === input.pattern || "string" === typeof input.pattern || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".pattern",
                expected: "(string | undefined)",
                value: input.pattern
            }, _errorFactory)) && (undefined === input.contentMediaType || "string" === typeof input.contentMediaType || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".contentMediaType",
                expected: "(string | undefined)",
                value: input.contentMediaType
            }, _errorFactory)) && (undefined === input.minLength || "number" === typeof input.minLength && (Math.floor(input.minLength) === input.minLength && 0 <= input.minLength && input.minLength <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minLength",
                expected: 'number & Type<"uint64">',
                value: input.minLength
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minLength",
                expected: '((number & Type<"uint64">) | undefined)',
                value: input.minLength
            }, _errorFactory)) && ((null !== input.items || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".items",
                expected: "(Array<OpenApiV3_1.IJsonSchema> | OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | undefined)",
                value: input.items
            }, _errorFactory)) && (undefined === input.items || (Array.isArray(input.items) && input.items.every(((elem, _index25) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".items[" + _index25 + "]",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory)) && _au0(elem, _path + ".items[" + _index25 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".items[" + _index25 + "]",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory))) || "object" === typeof input.items && null !== input.items && false === Array.isArray(input.items) && _au0(input.items, _path + ".items", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".items",
                expected: "(Array<OpenApiV3_1.IJsonSchema> | OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | undefined)",
                value: input.items
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".items",
                expected: "(Array<OpenApiV3_1.IJsonSchema> | OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | undefined)",
                value: input.items
            }, _errorFactory))) && (undefined === input.prefixItems || (Array.isArray(input.prefixItems) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".prefixItems",
                expected: "(Array<OpenApiV3_1.IJsonSchema> | undefined)",
                value: input.prefixItems
            }, _errorFactory)) && input.prefixItems.every(((elem, _index26) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".prefixItems[" + _index26 + "]",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory)) && _au0(elem, _path + ".prefixItems[" + _index26 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".prefixItems[" + _index26 + "]",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".prefixItems",
                expected: "(Array<OpenApiV3_1.IJsonSchema> | undefined)",
                value: input.prefixItems
            }, _errorFactory)) && (undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".uniqueItems",
                expected: "(boolean | undefined)",
                value: input.uniqueItems
            }, _errorFactory)) && ((null !== input.additionalItems || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".additionalItems",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
                value: input.additionalItems
            }, _errorFactory)) && (undefined === input.additionalItems || "boolean" === typeof input.additionalItems || ("object" === typeof input.additionalItems && null !== input.additionalItems && false === Array.isArray(input.additionalItems) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".additionalItems",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
                value: input.additionalItems
            }, _errorFactory)) && _au0(input.additionalItems, _path + ".additionalItems", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".additionalItems",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
                value: input.additionalItems
            }, _errorFactory))) && (undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minItems",
                expected: 'number & Type<"uint64">',
                value: input.minItems
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minItems",
                expected: '((number & Type<"uint64">) | undefined)',
                value: input.minItems
            }, _errorFactory)) && (undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maxItems",
                expected: 'number & Type<"uint64">',
                value: input.maxItems
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maxItems",
                expected: '((number & Type<"uint64">) | undefined)',
                value: input.maxItems
            }, _errorFactory)) && ((null !== input.additionalProperties || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".additionalProperties",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
                value: input.additionalProperties
            }, _errorFactory)) && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || ("object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".additionalProperties",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
                value: input.additionalProperties
            }, _errorFactory)) && _au0(input.additionalProperties, _path + ".additionalProperties", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".additionalProperties",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
                value: input.additionalProperties
            }, _errorFactory))) && (undefined === input.properties || ("object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".properties",
                expected: "(Record<string, OpenApiV3_1.IJsonSchema> | undefined)",
                value: input.properties
            }, _errorFactory)) && _ao2(input.properties, _path + ".properties", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".properties",
                expected: "(Record<string, OpenApiV3_1.IJsonSchema> | undefined)",
                value: input.properties
            }, _errorFactory)) && (undefined === input.required || (Array.isArray(input.required) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".required",
                expected: "(Array<string> | undefined)",
                value: input.required
            }, _errorFactory)) && input.required.every(((elem, _index27) => "string" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".required[" + _index27 + "]",
                expected: "string",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".required",
                expected: "(Array<string> | undefined)",
                value: input.required
            }, _errorFactory)) && (undefined === input.maxProperties || "number" === typeof input.maxProperties || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maxProperties",
                expected: "(number | undefined)",
                value: input.maxProperties
            }, _errorFactory)) && (undefined === input.minProperties || "number" === typeof input.minProperties || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minProperties",
                expected: "(number | undefined)",
                value: input.minProperties
            }, _errorFactory)) && ((Array.isArray(input.oneOf) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".oneOf",
                expected: "Array<OpenApiV3_1.IJsonSchema>",
                value: input.oneOf
            }, _errorFactory)) && input.oneOf.every(((elem, _index28) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".oneOf[" + _index28 + "]",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory)) && _au0(elem, _path + ".oneOf[" + _index28 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".oneOf[" + _index28 + "]",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".oneOf",
                expected: "Array<OpenApiV3_1.IJsonSchema>",
                value: input.oneOf
            }, _errorFactory)) && (undefined === input.discriminator || ("object" === typeof input.discriminator && null !== input.discriminator || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".discriminator",
                expected: "(OpenApiV3_1.IJsonSchema.IOneOf.IDiscriminator | undefined)",
                value: input.discriminator
            }, _errorFactory)) && _ao17(input.discriminator, _path + ".discriminator", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".discriminator",
                expected: "(OpenApiV3_1.IJsonSchema.IOneOf.IDiscriminator | undefined)",
                value: input.discriminator
            }, _errorFactory)) && ((Array.isArray(input.anyOf) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".anyOf",
                expected: "Array<OpenApiV3_1.IJsonSchema>",
                value: input.anyOf
            }, _errorFactory)) && input.anyOf.every(((elem, _index29) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".anyOf[" + _index29 + "]",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory)) && _au0(elem, _path + ".anyOf[" + _index29 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".anyOf[" + _index29 + "]",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".anyOf",
                expected: "Array<OpenApiV3_1.IJsonSchema>",
                value: input.anyOf
            }, _errorFactory)) && ((Array.isArray(input.allOf) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".allOf",
                expected: "Array<OpenApiV3_1.IJsonSchema>",
                value: input.allOf
            }, _errorFactory)) && input.allOf.every(((elem, _index30) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".allOf[" + _index30 + "]",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory)) && _au0(elem, _path + ".allOf[" + _index30 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".allOf[" + _index30 + "]",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".allOf",
                expected: "Array<OpenApiV3_1.IJsonSchema>",
                value: input.allOf
            }, _errorFactory)) && ("string" === typeof input.$ref || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".$ref",
                expected: "string",
                value: input.$ref
            }, _errorFactory));
            const _ao5 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return true;
            }));
            const _ao6 = (input, _path, _exceptionable = true) => ("string" === typeof input["const"] || "number" === typeof input["const"] || "boolean" === typeof input["const"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["const"]',
                expected: "(boolean | number | string)",
                value: input["const"]
            }, _errorFactory)) && (undefined === input.nullable || "boolean" === typeof input.nullable || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".nullable",
                expected: "(boolean | undefined)",
                value: input.nullable
            }, _errorFactory)) && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao5(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory))) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true;
            const _ao7 = (input, _path, _exceptionable = true) => (undefined === input.nullable || "boolean" === typeof input.nullable || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".nullable",
                expected: "(boolean | undefined)",
                value: input.nullable
            }, _errorFactory)) && (null === input["default"] || undefined === input["default"] || "boolean" === typeof input["default"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["default"]',
                expected: "(boolean | null | undefined)",
                value: input["default"]
            }, _errorFactory)) && (undefined === input["enum"] || (Array.isArray(input["enum"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"]',
                expected: "(Array<boolean | null> | undefined)",
                value: input["enum"]
            }, _errorFactory)) && input["enum"].every(((elem, _index31) => null === elem || "boolean" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"][' + _index31 + "]",
                expected: "(boolean | null)",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"]',
                expected: "(Array<boolean | null> | undefined)",
                value: input["enum"]
            }, _errorFactory)) && ("boolean" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"boolean"',
                value: input.type
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao5(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)));
            const _ao8 = (input, _path, _exceptionable = true) => (undefined === input.nullable || "boolean" === typeof input.nullable || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".nullable",
                expected: "(boolean | undefined)",
                value: input.nullable
            }, _errorFactory)) && (null === input["default"] || undefined === input["default"] || "number" === typeof input["default"] && (Math.floor(input["default"]) === input["default"] && -0x8000000000000000 <= input["default"] && input["default"] <= 0x8000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["default"]',
                expected: 'number & Type<"int64">',
                value: input["default"]
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["default"]',
                expected: '((number & Type<"int64">) | null | undefined)',
                value: input["default"]
            }, _errorFactory)) && (undefined === input["enum"] || (Array.isArray(input["enum"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"]',
                expected: "(Array<number | null> | undefined)",
                value: input["enum"]
            }, _errorFactory)) && input["enum"].every(((elem, _index32) => null === elem || "number" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"][' + _index32 + "]",
                expected: "(null | number)",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"]',
                expected: "(Array<number | null> | undefined)",
                value: input["enum"]
            }, _errorFactory)) && (undefined === input.minimum || "number" === typeof input.minimum && (Math.floor(input.minimum) === input.minimum && -0x8000000000000000 <= input.minimum && input.minimum <= 0x8000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minimum",
                expected: 'number & Type<"int64">',
                value: input.minimum
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minimum",
                expected: '((number & Type<"int64">) | undefined)',
                value: input.minimum
            }, _errorFactory)) && (undefined === input.maximum || "number" === typeof input.maximum && (Math.floor(input.maximum) === input.maximum && -0x8000000000000000 <= input.maximum && input.maximum <= 0x8000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maximum",
                expected: 'number & Type<"int64">',
                value: input.maximum
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maximum",
                expected: '((number & Type<"int64">) | undefined)',
                value: input.maximum
            }, _errorFactory)) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum && (Math.floor(input.exclusiveMinimum) === input.exclusiveMinimum && -0x8000000000000000 <= input.exclusiveMinimum && input.exclusiveMinimum <= 0x8000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".exclusiveMinimum",
                expected: 'number & Type<"int64">',
                value: input.exclusiveMinimum
            }, _errorFactory)) || "boolean" === typeof input.exclusiveMinimum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".exclusiveMinimum",
                expected: '((number & Type<"int64">) | boolean | undefined)',
                value: input.exclusiveMinimum
            }, _errorFactory)) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum && (Math.floor(input.exclusiveMaximum) === input.exclusiveMaximum && -0x8000000000000000 <= input.exclusiveMaximum && input.exclusiveMaximum <= 0x8000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".exclusiveMaximum",
                expected: 'number & Type<"int64">',
                value: input.exclusiveMaximum
            }, _errorFactory)) || "boolean" === typeof input.exclusiveMaximum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".exclusiveMaximum",
                expected: '((number & Type<"int64">) | boolean | undefined)',
                value: input.exclusiveMaximum
            }, _errorFactory)) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && (Math.floor(input.multipleOf) === input.multipleOf && 0 <= input.multipleOf && input.multipleOf <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".multipleOf",
                expected: 'number & Type<"uint64">',
                value: input.multipleOf
            }, _errorFactory)) && (0 < input.multipleOf || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".multipleOf",
                expected: "number & ExclusiveMinimum<0>",
                value: input.multipleOf
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".multipleOf",
                expected: '((number & Type<"uint64"> & ExclusiveMinimum<0>) | undefined)',
                value: input.multipleOf
            }, _errorFactory)) && ("integer" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"integer"',
                value: input.type
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao5(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)));
            const _ao9 = (input, _path, _exceptionable = true) => (undefined === input.nullable || "boolean" === typeof input.nullable || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".nullable",
                expected: "(boolean | undefined)",
                value: input.nullable
            }, _errorFactory)) && (null === input["default"] || undefined === input["default"] || "number" === typeof input["default"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["default"]',
                expected: "(null | number | undefined)",
                value: input["default"]
            }, _errorFactory)) && (undefined === input["enum"] || (Array.isArray(input["enum"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"]',
                expected: "(Array<number | null> | undefined)",
                value: input["enum"]
            }, _errorFactory)) && input["enum"].every(((elem, _index33) => null === elem || "number" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"][' + _index33 + "]",
                expected: "(null | number)",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"]',
                expected: "(Array<number | null> | undefined)",
                value: input["enum"]
            }, _errorFactory)) && (undefined === input.minimum || "number" === typeof input.minimum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minimum",
                expected: "(number | undefined)",
                value: input.minimum
            }, _errorFactory)) && (undefined === input.maximum || "number" === typeof input.maximum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maximum",
                expected: "(number | undefined)",
                value: input.maximum
            }, _errorFactory)) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".exclusiveMinimum",
                expected: "(boolean | number | undefined)",
                value: input.exclusiveMinimum
            }, _errorFactory)) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".exclusiveMaximum",
                expected: "(boolean | number | undefined)",
                value: input.exclusiveMaximum
            }, _errorFactory)) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && (0 < input.multipleOf || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".multipleOf",
                expected: "number & ExclusiveMinimum<0>",
                value: input.multipleOf
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".multipleOf",
                expected: "((number & ExclusiveMinimum<0>) | undefined)",
                value: input.multipleOf
            }, _errorFactory)) && ("number" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"number"',
                value: input.type
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao5(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)));
            const _ao10 = (input, _path, _exceptionable = true) => (undefined === input.nullable || "boolean" === typeof input.nullable || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".nullable",
                expected: "(boolean | undefined)",
                value: input.nullable
            }, _errorFactory)) && (null === input["default"] || undefined === input["default"] || "string" === typeof input["default"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["default"]',
                expected: "(null | string | undefined)",
                value: input["default"]
            }, _errorFactory)) && (undefined === input["enum"] || (Array.isArray(input["enum"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"]',
                expected: "(Array<string | null> | undefined)",
                value: input["enum"]
            }, _errorFactory)) && input["enum"].every(((elem, _index34) => null === elem || "string" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"][' + _index34 + "]",
                expected: "(null | string)",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"]',
                expected: "(Array<string | null> | undefined)",
                value: input["enum"]
            }, _errorFactory)) && (undefined === input.format || "string" === typeof input.format || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".format",
                expected: "(string | undefined)",
                value: input.format
            }, _errorFactory)) && (undefined === input.pattern || "string" === typeof input.pattern || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".pattern",
                expected: "(string | undefined)",
                value: input.pattern
            }, _errorFactory)) && (undefined === input.contentMediaType || "string" === typeof input.contentMediaType || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".contentMediaType",
                expected: "(string | undefined)",
                value: input.contentMediaType
            }, _errorFactory)) && (undefined === input.minLength || "number" === typeof input.minLength && (Math.floor(input.minLength) === input.minLength && 0 <= input.minLength && input.minLength <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minLength",
                expected: 'number & Type<"uint64">',
                value: input.minLength
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minLength",
                expected: '((number & Type<"uint64">) | undefined)',
                value: input.minLength
            }, _errorFactory)) && (undefined === input.maxLength || "number" === typeof input.maxLength && (Math.floor(input.maxLength) === input.maxLength && 0 <= input.maxLength && input.maxLength <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maxLength",
                expected: 'number & Type<"uint64">',
                value: input.maxLength
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maxLength",
                expected: '((number & Type<"uint64">) | undefined)',
                value: input.maxLength
            }, _errorFactory)) && ("string" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"string"',
                value: input.type
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao5(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)));
            const _ao11 = (input, _path, _exceptionable = true) => (undefined === input.nullable || "boolean" === typeof input.nullable || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".nullable",
                expected: "(boolean | undefined)",
                value: input.nullable
            }, _errorFactory)) && ((null !== input.items || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".items",
                expected: "(Array<OpenApiV3_1.IJsonSchema> | OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | undefined)",
                value: input.items
            }, _errorFactory)) && (undefined === input.items || (Array.isArray(input.items) && input.items.every(((elem, _index35) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".items[" + _index35 + "]",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory)) && _au0(elem, _path + ".items[" + _index35 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".items[" + _index35 + "]",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory))) || "object" === typeof input.items && null !== input.items && false === Array.isArray(input.items) && _au0(input.items, _path + ".items", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".items",
                expected: "(Array<OpenApiV3_1.IJsonSchema> | OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | undefined)",
                value: input.items
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".items",
                expected: "(Array<OpenApiV3_1.IJsonSchema> | OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | undefined)",
                value: input.items
            }, _errorFactory))) && (undefined === input.prefixItems || (Array.isArray(input.prefixItems) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".prefixItems",
                expected: "(Array<OpenApiV3_1.IJsonSchema> | undefined)",
                value: input.prefixItems
            }, _errorFactory)) && input.prefixItems.every(((elem, _index36) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".prefixItems[" + _index36 + "]",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory)) && _au0(elem, _path + ".prefixItems[" + _index36 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".prefixItems[" + _index36 + "]",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".prefixItems",
                expected: "(Array<OpenApiV3_1.IJsonSchema> | undefined)",
                value: input.prefixItems
            }, _errorFactory)) && (undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".uniqueItems",
                expected: "(boolean | undefined)",
                value: input.uniqueItems
            }, _errorFactory)) && ((null !== input.additionalItems || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".additionalItems",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
                value: input.additionalItems
            }, _errorFactory)) && (undefined === input.additionalItems || "boolean" === typeof input.additionalItems || ("object" === typeof input.additionalItems && null !== input.additionalItems && false === Array.isArray(input.additionalItems) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".additionalItems",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
                value: input.additionalItems
            }, _errorFactory)) && _au0(input.additionalItems, _path + ".additionalItems", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".additionalItems",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
                value: input.additionalItems
            }, _errorFactory))) && (undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minItems",
                expected: 'number & Type<"uint64">',
                value: input.minItems
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minItems",
                expected: '((number & Type<"uint64">) | undefined)',
                value: input.minItems
            }, _errorFactory)) && (undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maxItems",
                expected: 'number & Type<"uint64">',
                value: input.maxItems
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maxItems",
                expected: '((number & Type<"uint64">) | undefined)',
                value: input.maxItems
            }, _errorFactory)) && ("array" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"array"',
                value: input.type
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao5(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)));
            const _ao12 = (input, _path, _exceptionable = true) => ("string" === typeof input.$ref || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".$ref",
                expected: "string",
                value: input.$ref
            }, _errorFactory)) && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao5(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory))) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true;
            const _ao13 = (input, _path, _exceptionable = true) => ("string" === typeof input.$recursiveRef || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".$recursiveRef",
                expected: "string",
                value: input.$recursiveRef
            }, _errorFactory)) && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao5(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory))) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true;
            const _ao14 = (input, _path, _exceptionable = true) => ((Array.isArray(input.allOf) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".allOf",
                expected: "Array<OpenApiV3_1.IJsonSchema>",
                value: input.allOf
            }, _errorFactory)) && input.allOf.every(((elem, _index37) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".allOf[" + _index37 + "]",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory)) && _au0(elem, _path + ".allOf[" + _index37 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".allOf[" + _index37 + "]",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".allOf",
                expected: "Array<OpenApiV3_1.IJsonSchema>",
                value: input.allOf
            }, _errorFactory)) && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao5(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory))) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true;
            const _ao15 = (input, _path, _exceptionable = true) => ((Array.isArray(input.anyOf) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".anyOf",
                expected: "Array<OpenApiV3_1.IJsonSchema>",
                value: input.anyOf
            }, _errorFactory)) && input.anyOf.every(((elem, _index38) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".anyOf[" + _index38 + "]",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory)) && _au0(elem, _path + ".anyOf[" + _index38 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".anyOf[" + _index38 + "]",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".anyOf",
                expected: "Array<OpenApiV3_1.IJsonSchema>",
                value: input.anyOf
            }, _errorFactory)) && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao5(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory))) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true;
            const _ao16 = (input, _path, _exceptionable = true) => ((Array.isArray(input.oneOf) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".oneOf",
                expected: "Array<OpenApiV3_1.IJsonSchema>",
                value: input.oneOf
            }, _errorFactory)) && input.oneOf.every(((elem, _index39) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".oneOf[" + _index39 + "]",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory)) && _au0(elem, _path + ".oneOf[" + _index39 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".oneOf[" + _index39 + "]",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".oneOf",
                expected: "Array<OpenApiV3_1.IJsonSchema>",
                value: input.oneOf
            }, _errorFactory)) && (undefined === input.discriminator || ("object" === typeof input.discriminator && null !== input.discriminator || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".discriminator",
                expected: "(OpenApiV3_1.IJsonSchema.IOneOf.IDiscriminator | undefined)",
                value: input.discriminator
            }, _errorFactory)) && _ao17(input.discriminator, _path + ".discriminator", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".discriminator",
                expected: "(OpenApiV3_1.IJsonSchema.IOneOf.IDiscriminator | undefined)",
                value: input.discriminator
            }, _errorFactory)) && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao5(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory))) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true;
            const _ao17 = (input, _path, _exceptionable = true) => ("string" === typeof input.propertyName || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".propertyName",
                expected: "string",
                value: input.propertyName
            }, _errorFactory)) && (undefined === input.mapping || ("object" === typeof input.mapping && null !== input.mapping && false === Array.isArray(input.mapping) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".mapping",
                expected: "(Record<string, string> | undefined)",
                value: input.mapping
            }, _errorFactory)) && _ao18(input.mapping, _path + ".mapping", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".mapping",
                expected: "(Record<string, string> | undefined)",
                value: input.mapping
            }, _errorFactory));
            const _ao18 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return "string" === typeof value || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "string",
                    value
                }, _errorFactory);
            }));
            const _ao19 = (input, _path, _exceptionable = true) => (null === input["default"] || undefined === input["default"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["default"]',
                expected: "(null | undefined)",
                value: input["default"]
            }, _errorFactory)) && ("null" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"null"',
                value: input.type
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao5(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)));
            const _ao20 = (input, _path, _exceptionable = true) => (null !== input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: "undefined",
                value: input.type
            }, _errorFactory)) && (undefined === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: "undefined",
                value: input.type
            }, _errorFactory)) && true && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao5(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)));
            const _ao21 = (input, _path, _exceptionable = true) => ("string" === typeof input.$ref || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".$ref",
                expected: "string",
                value: input.$ref
            }, _errorFactory)) && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao5(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory))) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && (undefined === input.$defs || ("object" === typeof input.$defs && null !== input.$defs && false === Array.isArray(input.$defs) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".$defs",
                expected: "(Record<string, OpenApiV3_1.IJsonSchema> | undefined)",
                value: input.$defs
            }, _errorFactory)) && _ao2(input.$defs, _path + ".$defs", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".$defs",
                expected: "(Record<string, OpenApiV3_1.IJsonSchema> | undefined)",
                value: input.$defs
            }, _errorFactory));
            const _au0 = (input, _path, _exceptionable = true) => (() => {
                if ("object" === input.type) return _ao3(input, _path, _exceptionable); else if (Array.isArray(input.type) && input.type.every(((elem, _index40) => "string" === elem || "number" === elem || "boolean" === elem || "object" === elem || "integer" === elem || "array" === elem || "null" === elem))) return _ao4(input, _path, _exceptionable); else if ("boolean" === input.type) return _ao7(input, _path, _exceptionable); else if ("number" === input.type) return _ao9(input, _path, _exceptionable); else if ("integer" === input.type) return _ao8(input, _path, _exceptionable); else if ("string" === input.type) return _ao10(input, _path, _exceptionable); else if ("array" === input.type) return _ao11(input, _path, _exceptionable); else if (undefined !== input.$recursiveRef) return _ao13(input, _path, _exceptionable); else if ("null" === input.type) return _ao19(input, _path, _exceptionable); else return (() => {
                    if (undefined !== input["const"]) return _ao6(input, _path, _exceptionable); else if (undefined !== input.$ref) return _ao12(input, _path, _exceptionable); else if (undefined !== input.allOf) return _ao14(input, _path, _exceptionable); else if (undefined !== input.anyOf) return _ao15(input, _path, _exceptionable); else if (undefined !== input.oneOf) return _ao16(input, _path, _exceptionable); else return _ao20(input, _path, _exceptionable);
                })();
            })();
            const _au1 = (input, _path, _exceptionable = true) => (() => {
                if (undefined !== input.type) return _ao1(input, _path, _exceptionable); else if (undefined !== input.$ref) return _ao21(input, _path, _exceptionable); else return __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path,
                    expected: "(IObject & { $defs?: Record<string, IJsonSchema> | undefined; } | IReference<string> & { $defs?: Record<string, IJsonSchema> | undefined; })",
                    value: input
                }, _errorFactory);
            })();
            const __is = input => Array.isArray(input) && input.every((elem => "object" === typeof elem && null !== elem && _io0(elem)));
            let _errorFactory;
            return (input, errorFactory) => {
                if (false === __is(input)) {
                    _errorFactory = errorFactory;
                    ((input, _path, _exceptionable = true) => (Array.isArray(input) || __typia_transform__assertGuard._assertGuard(true, {
                        method: "typia.assert",
                        path: _path + "",
                        expected: "Array<IMcpTool>",
                        value: input
                    }, _errorFactory)) && input.every(((elem, _index21) => ("object" === typeof elem && null !== elem || __typia_transform__assertGuard._assertGuard(true, {
                        method: "typia.assert",
                        path: _path + "[" + _index21 + "]",
                        expected: "IMcpTool",
                        value: elem
                    }, _errorFactory)) && _ao0(elem, _path + "[" + _index21 + "]", true) || __typia_transform__assertGuard._assertGuard(true, {
                        method: "typia.assert",
                        path: _path + "[" + _index21 + "]",
                        expected: "IMcpTool",
                        value: elem
                    }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(true, {
                        method: "typia.assert",
                        path: _path + "",
                        expected: "Array<IMcpTool>",
                        value: input
                    }, _errorFactory))(input, "$input", true);
                }
                return input;
            };
        })()(tools)
    });
    return {
        protocol: "mcp",
        name: props.name,
        client: props.client,
        application
    };
}

function validateHttpController(props) {
    const inspect = (() => {
        const _io0 = input => null !== input.swagger && undefined !== input.swagger && ("2.0" === input.swagger || "string" === typeof input.swagger && RegExp(/^2\.0\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(input.swagger)) && (undefined === input.info || "object" === typeof input.info && null !== input.info && _io1(input.info)) && (undefined === input.host || "string" === typeof input.host) && (undefined === input.basePath || "string" === typeof input.basePath) && (undefined === input.consumes || Array.isArray(input.consumes) && input.consumes.every((elem => "string" === typeof elem))) && (undefined === input.produces || Array.isArray(input.produces) && input.produces.every((elem => "string" === typeof elem))) && (undefined === input.definitions || "object" === typeof input.definitions && null !== input.definitions && false === Array.isArray(input.definitions) && _io4(input.definitions)) && (undefined === input.parameters || "object" === typeof input.parameters && null !== input.parameters && false === Array.isArray(input.parameters) && _io16(input.parameters)) && (undefined === input.responses || "object" === typeof input.responses && null !== input.responses && false === Array.isArray(input.responses) && _io29(input.responses)) && (undefined === input.securityDefinitions || "object" === typeof input.securityDefinitions && null !== input.securityDefinitions && false === Array.isArray(input.securityDefinitions) && _io31(input.securityDefinitions)) && (undefined === input.security || Array.isArray(input.security) && input.security.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io39(elem)))) && (undefined === input.paths || "object" === typeof input.paths && null !== input.paths && false === Array.isArray(input.paths) && _io40(input.paths)) && (undefined === input.tags || Array.isArray(input.tags) && input.tags.every((elem => "object" === typeof elem && null !== elem && _io47(elem))));
        const _io1 = input => "string" === typeof input.title && (undefined === input.description || "string" === typeof input.description) && (undefined === input.termsOfService || "string" === typeof input.termsOfService) && (undefined === input.contact || "object" === typeof input.contact && null !== input.contact && false === Array.isArray(input.contact) && _io2(input.contact)) && (undefined === input.license || "object" === typeof input.license && null !== input.license && _io3(input.license)) && "string" === typeof input.version;
        const _io2 = input => (undefined === input.name || "string" === typeof input.name) && (undefined === input.url || "string" === typeof input.url) && (undefined === input.email || "string" === typeof input.email);
        const _io3 = input => "string" === typeof input.name && (undefined === input.url || "string" === typeof input.url);
        const _io4 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _iu0(value);
        }));
        const _io5 = input => (null === input["default"] || undefined === input["default"] || "boolean" === typeof input["default"]) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "boolean" === typeof elem))) && "boolean" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"]) && (undefined === input.examples || Array.isArray(input.examples));
        const _io6 = input => (null === input["default"] || undefined === input["default"] || "number" === typeof input["default"] && (Math.floor(input["default"]) === input["default"] && -0x8000000000000000 <= input["default"] && input["default"] <= 0x8000000000000000)) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "number" === typeof elem))) && (undefined === input.minimum || "number" === typeof input.minimum && (Math.floor(input.minimum) === input.minimum && -0x8000000000000000 <= input.minimum && input.minimum <= 0x8000000000000000)) && (undefined === input.maximum || "number" === typeof input.maximum && (Math.floor(input.maximum) === input.maximum && -0x8000000000000000 <= input.maximum && input.maximum <= 0x8000000000000000)) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && (Math.floor(input.multipleOf) === input.multipleOf && 0 <= input.multipleOf && input.multipleOf <= 0x10000000000000000 && 0 < input.multipleOf)) && "integer" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"]) && (undefined === input.examples || Array.isArray(input.examples));
        const _io7 = input => (null === input["default"] || undefined === input["default"] || "number" === typeof input["default"]) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "number" === typeof elem))) && (undefined === input.minimum || "number" === typeof input.minimum) && (undefined === input.maximum || "number" === typeof input.maximum) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && 0 < input.multipleOf) && "number" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"]) && (undefined === input.examples || Array.isArray(input.examples));
        const _io8 = input => (null === input["default"] || undefined === input["default"] || "string" === typeof input["default"]) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "string" === typeof elem))) && (undefined === input.format || "string" === typeof input.format) && (undefined === input.pattern || "string" === typeof input.pattern) && (undefined === input.minLength || "number" === typeof input.minLength && (Math.floor(input.minLength) === input.minLength && 0 <= input.minLength && input.minLength <= 0x10000000000000000)) && (undefined === input.maxLength || "number" === typeof input.maxLength && (Math.floor(input.maxLength) === input.maxLength && 0 <= input.maxLength && input.maxLength <= 0x10000000000000000)) && "string" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"]) && (undefined === input.examples || Array.isArray(input.examples));
        const _io9 = input => "object" === typeof input.items && null !== input.items && false === Array.isArray(input.items) && _iu0(input.items) && (undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems) && (undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000)) && (undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000)) && "array" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"]) && (undefined === input.examples || Array.isArray(input.examples));
        const _io10 = input => (undefined === input.properties || "object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) && _io4(input.properties)) && (undefined === input.required || Array.isArray(input.required) && input.required.every((elem => "string" === typeof elem))) && (null !== input.additionalProperties && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || "object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) && _iu0(input.additionalProperties))) && (undefined === input.maxProperties || "number" === typeof input.maxProperties) && (undefined === input.minProperties || "number" === typeof input.minProperties) && "object" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"]) && (undefined === input.examples || Array.isArray(input.examples));
        const _io11 = input => "string" === typeof input.$ref && (undefined === input.examples || Array.isArray(input.examples)) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io12 = input => Array.isArray(input["x-anyOf"]) && input["x-anyOf"].every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu0(elem))) && (undefined === input.examples || Array.isArray(input.examples)) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io13 = input => Array.isArray(input["x-oneOf"]) && input["x-oneOf"].every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu0(elem))) && (undefined === input.examples || Array.isArray(input.examples)) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io14 = input => "null" === input.type && (null === input["default"] || undefined === input["default"]) && (undefined === input.examples || Array.isArray(input.examples)) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io15 = input => null !== input.type && undefined === input.type && (undefined === input.examples || Array.isArray(input.examples)) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io16 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && _iu9(value);
        }));
        const _io17 = input => (null === input["default"] || undefined === input["default"] || "boolean" === typeof input["default"]) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "boolean" === typeof elem))) && "boolean" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"]) && (undefined === input.examples || Array.isArray(input.examples)) && "string" === typeof input.name && "string" === typeof input["in"];
        const _io18 = input => (null === input["default"] || undefined === input["default"] || "number" === typeof input["default"] && (Math.floor(input["default"]) === input["default"] && -0x8000000000000000 <= input["default"] && input["default"] <= 0x8000000000000000)) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "number" === typeof elem))) && (undefined === input.minimum || "number" === typeof input.minimum && (Math.floor(input.minimum) === input.minimum && -0x8000000000000000 <= input.minimum && input.minimum <= 0x8000000000000000)) && (undefined === input.maximum || "number" === typeof input.maximum && (Math.floor(input.maximum) === input.maximum && -0x8000000000000000 <= input.maximum && input.maximum <= 0x8000000000000000)) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && (Math.floor(input.multipleOf) === input.multipleOf && 0 <= input.multipleOf && input.multipleOf <= 0x10000000000000000 && 0 < input.multipleOf)) && "integer" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"]) && (undefined === input.examples || Array.isArray(input.examples)) && "string" === typeof input.name && "string" === typeof input["in"];
        const _io19 = input => (null === input["default"] || undefined === input["default"] || "number" === typeof input["default"]) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "number" === typeof elem))) && (undefined === input.minimum || "number" === typeof input.minimum) && (undefined === input.maximum || "number" === typeof input.maximum) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && 0 < input.multipleOf) && "number" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"]) && (undefined === input.examples || Array.isArray(input.examples)) && "string" === typeof input.name && "string" === typeof input["in"];
        const _io20 = input => (null === input["default"] || undefined === input["default"] || "string" === typeof input["default"]) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "string" === typeof elem))) && (undefined === input.format || "string" === typeof input.format) && (undefined === input.pattern || "string" === typeof input.pattern) && (undefined === input.minLength || "number" === typeof input.minLength && (Math.floor(input.minLength) === input.minLength && 0 <= input.minLength && input.minLength <= 0x10000000000000000)) && (undefined === input.maxLength || "number" === typeof input.maxLength && (Math.floor(input.maxLength) === input.maxLength && 0 <= input.maxLength && input.maxLength <= 0x10000000000000000)) && "string" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"]) && (undefined === input.examples || Array.isArray(input.examples)) && "string" === typeof input.name && "string" === typeof input["in"];
        const _io21 = input => "object" === typeof input.items && null !== input.items && false === Array.isArray(input.items) && _iu0(input.items) && (undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems) && (undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000)) && (undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000)) && "array" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"]) && (undefined === input.examples || Array.isArray(input.examples)) && "string" === typeof input.name && "string" === typeof input["in"];
        const _io22 = input => (undefined === input.properties || "object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) && _io4(input.properties)) && (undefined === input.required || Array.isArray(input.required) && input.required.every((elem => "string" === typeof elem))) && (null !== input.additionalProperties && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || "object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) && _iu0(input.additionalProperties))) && (undefined === input.maxProperties || "number" === typeof input.maxProperties) && (undefined === input.minProperties || "number" === typeof input.minProperties) && "object" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"]) && (undefined === input.examples || Array.isArray(input.examples)) && "string" === typeof input.name && "string" === typeof input["in"];
        const _io23 = input => "string" === typeof input.$ref && (undefined === input.examples || Array.isArray(input.examples)) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && "string" === typeof input.name && "string" === typeof input["in"];
        const _io24 = input => Array.isArray(input["x-anyOf"]) && input["x-anyOf"].every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu0(elem))) && (undefined === input.examples || Array.isArray(input.examples)) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && "string" === typeof input.name && "string" === typeof input["in"];
        const _io25 = input => Array.isArray(input["x-oneOf"]) && input["x-oneOf"].every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu0(elem))) && (undefined === input.examples || Array.isArray(input.examples)) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && "string" === typeof input.name && "string" === typeof input["in"];
        const _io26 = input => "null" === input.type && (null === input["default"] || undefined === input["default"]) && (undefined === input.examples || Array.isArray(input.examples)) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && "string" === typeof input.name && "string" === typeof input["in"];
        const _io27 = input => null !== input.type && undefined === input.type && (undefined === input.examples || Array.isArray(input.examples)) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && "string" === typeof input.name && "string" === typeof input["in"];
        const _io28 = input => "object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) && _iu0(input.schema) && "string" === typeof input.name && "string" === typeof input["in"] && (undefined === input.description || "string" === typeof input.description) && (undefined === input.required || "boolean" === typeof input.required);
        const _io29 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _io30(value);
        }));
        const _io30 = input => (undefined === input.description || "string" === typeof input.description) && (undefined === input.headers || "object" === typeof input.headers && null !== input.headers && false === Array.isArray(input.headers) && _io4(input.headers)) && (undefined === input.schema || "object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) && _iu0(input.schema)) && true;
        const _io31 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && _iu10(value);
        }));
        const _io32 = input => "apiKey" === input.type && (undefined === input["in"] || "query" === input["in"] || "header" === input["in"] || "cookie" === input["in"]) && (undefined === input.name || "string" === typeof input.name) && (undefined === input.description || "string" === typeof input.description);
        const _io33 = input => "basic" === input.type && (undefined === input.name || "string" === typeof input.name) && (undefined === input.description || "string" === typeof input.description);
        const _io34 = input => "oauth2" === input.type && "implicit" === input.flow && (undefined === input.authorizationUrl || "string" === typeof input.authorizationUrl) && (undefined === input.scopes || "object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) && _io35(input.scopes)) && (undefined === input.description || "string" === typeof input.description);
        const _io35 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "string" === typeof value;
        }));
        const _io36 = input => "oauth2" === input.type && "accessCode" === input.flow && (undefined === input.authorizationUrl || "string" === typeof input.authorizationUrl) && (undefined === input.tokenUrl || "string" === typeof input.tokenUrl) && (undefined === input.scopes || "object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) && _io35(input.scopes)) && (undefined === input.description || "string" === typeof input.description);
        const _io37 = input => "oauth2" === input.type && "password" === input.flow && (undefined === input.tokenUrl || "string" === typeof input.tokenUrl) && (undefined === input.scopes || "object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) && _io35(input.scopes)) && (undefined === input.description || "string" === typeof input.description);
        const _io38 = input => "oauth2" === input.type && "application" === input.flow && (undefined === input.tokenUrl || "string" === typeof input.tokenUrl) && (undefined === input.scopes || "object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) && _io35(input.scopes)) && (undefined === input.description || "string" === typeof input.description);
        const _io39 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return Array.isArray(value) && value.every((elem => "string" === typeof elem));
        }));
        const _io40 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _io41(value);
        }));
        const _io41 = input => (undefined === input.parameters || Array.isArray(input.parameters) && input.parameters.every((elem => "object" === typeof elem && null !== elem && _iu1(elem)))) && (undefined === input.options || "object" === typeof input.options && null !== input.options && false === Array.isArray(input.options) && _io43(input.options)) && (undefined === input.get || "object" === typeof input.get && null !== input.get && false === Array.isArray(input.get) && _io43(input.get)) && (undefined === input.post || "object" === typeof input.post && null !== input.post && false === Array.isArray(input.post) && _io43(input.post)) && (undefined === input.patch || "object" === typeof input.patch && null !== input.patch && false === Array.isArray(input.patch) && _io43(input.patch)) && (undefined === input.put || "object" === typeof input.put && null !== input.put && false === Array.isArray(input.put) && _io43(input.put)) && (undefined === input["delete"] || "object" === typeof input["delete"] && null !== input["delete"] && false === Array.isArray(input["delete"]) && _io43(input["delete"])) && (undefined === input.head || "object" === typeof input.head && null !== input.head && false === Array.isArray(input.head) && _io43(input.head)) && (undefined === input.trace || "object" === typeof input.trace && null !== input.trace && false === Array.isArray(input.trace) && _io43(input.trace));
        const _io42 = input => "string" === typeof input.$ref && RegExp(/^#\/parameters\/(.*)/).test(input.$ref) && (undefined === input.examples || Array.isArray(input.examples)) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io43 = input => (undefined === input.operationId || "string" === typeof input.operationId) && (undefined === input.parameters || Array.isArray(input.parameters) && input.parameters.every((elem => "object" === typeof elem && null !== elem && _iu2(elem)))) && (undefined === input.responses || "object" === typeof input.responses && null !== input.responses && false === Array.isArray(input.responses) && _io45(input.responses)) && (undefined === input.summary || "string" === typeof input.summary) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.security || Array.isArray(input.security) && input.security.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io39(elem)))) && (undefined === input.tags || Array.isArray(input.tags) && input.tags.every((elem => "string" === typeof elem))) && (undefined === input.deprecated || "boolean" === typeof input.deprecated);
        const _io44 = input => "string" === typeof input.$ref && RegExp(/^#\/definitions\/parameters\/(.*)/).test(input.$ref) && (undefined === input.examples || Array.isArray(input.examples)) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io45 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _iu11(value);
        }));
        const _io46 = input => "string" === typeof input.$ref && RegExp(/^#\/definitions\/responses\/(.*)/).test(input.$ref) && (undefined === input.examples || Array.isArray(input.examples)) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io47 = input => "string" === typeof input.name && (undefined === input.description || "string" === typeof input.description);
        const _io48 = input => null !== input.openapi && undefined !== input.openapi && ("3.0" === input.openapi || "string" === typeof input.openapi && RegExp(/^3\.0\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(input.openapi)) && (undefined === input.servers || Array.isArray(input.servers) && input.servers.every((elem => "object" === typeof elem && null !== elem && _io49(elem)))) && (undefined === input.info || "object" === typeof input.info && null !== input.info && _io52(input.info)) && (undefined === input.components || "object" === typeof input.components && null !== input.components && false === Array.isArray(input.components) && _io55(input.components)) && (undefined === input.paths || "object" === typeof input.paths && null !== input.paths && false === Array.isArray(input.paths) && _io97(input.paths)) && (undefined === input.security || Array.isArray(input.security) && input.security.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io39(elem)))) && (undefined === input.tags || Array.isArray(input.tags) && input.tags.every((elem => "object" === typeof elem && null !== elem && _io104(elem))));
        const _io49 = input => "string" === typeof input.url && (undefined === input.description || "string" === typeof input.description) && (undefined === input.variables || "object" === typeof input.variables && null !== input.variables && false === Array.isArray(input.variables) && _io50(input.variables));
        const _io50 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && _io51(value);
        }));
        const _io51 = input => "string" === typeof input["default"] && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => "string" === typeof elem))) && (undefined === input.description || "string" === typeof input.description);
        const _io52 = input => "string" === typeof input.title && (undefined === input.description || "string" === typeof input.description) && (undefined === input.termsOfService || "string" === typeof input.termsOfService) && (undefined === input.contact || "object" === typeof input.contact && null !== input.contact && false === Array.isArray(input.contact) && _io53(input.contact)) && (undefined === input.license || "object" === typeof input.license && null !== input.license && _io54(input.license)) && "string" === typeof input.version;
        const _io53 = input => (undefined === input.name || "string" === typeof input.name) && (undefined === input.url || "string" === typeof input.url) && (undefined === input.email || "string" === typeof input.email);
        const _io54 = input => "string" === typeof input.name && (undefined === input.url || "string" === typeof input.url);
        const _io55 = input => (undefined === input.schemas || "object" === typeof input.schemas && null !== input.schemas && false === Array.isArray(input.schemas) && _io56(input.schemas)) && (undefined === input.responses || "object" === typeof input.responses && null !== input.responses && false === Array.isArray(input.responses) && _io71(input.responses)) && (undefined === input.parameters || "object" === typeof input.parameters && null !== input.parameters && false === Array.isArray(input.parameters) && _io81(input.parameters)) && (undefined === input.requestBodies || "object" === typeof input.requestBodies && null !== input.requestBodies && false === Array.isArray(input.requestBodies) && _io83(input.requestBodies)) && (undefined === input.securitySchemes || "object" === typeof input.securitySchemes && null !== input.securitySchemes && false === Array.isArray(input.securitySchemes) && _io85(input.securitySchemes)) && (undefined === input.headers || "object" === typeof input.headers && null !== input.headers && false === Array.isArray(input.headers) && _io95(input.headers)) && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io96(input.examples));
        const _io56 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _iu3(value);
        }));
        const _io57 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && (null === input["default"] || undefined === input["default"] || "boolean" === typeof input["default"]) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "boolean" === typeof elem))) && "boolean" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples))));
        const _io58 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return true;
        }));
        const _io59 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && (null === input["default"] || undefined === input["default"] || "number" === typeof input["default"] && (Math.floor(input["default"]) === input["default"] && -0x8000000000000000 <= input["default"] && input["default"] <= 0x8000000000000000)) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "number" === typeof elem))) && (undefined === input.minimum || "number" === typeof input.minimum && (Math.floor(input.minimum) === input.minimum && -0x8000000000000000 <= input.minimum && input.minimum <= 0x8000000000000000)) && (undefined === input.maximum || "number" === typeof input.maximum && (Math.floor(input.maximum) === input.maximum && -0x8000000000000000 <= input.maximum && input.maximum <= 0x8000000000000000)) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && (Math.floor(input.multipleOf) === input.multipleOf && 0 <= input.multipleOf && input.multipleOf <= 0x10000000000000000 && 0 < input.multipleOf)) && "integer" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples))));
        const _io60 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && (null === input["default"] || undefined === input["default"] || "number" === typeof input["default"]) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "number" === typeof elem))) && (undefined === input.minimum || "number" === typeof input.minimum) && (undefined === input.maximum || "number" === typeof input.maximum) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && 0 < input.multipleOf) && "number" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples))));
        const _io61 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && (null === input["default"] || undefined === input["default"] || "string" === typeof input["default"]) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "string" === typeof elem))) && (undefined === input.format || "string" === typeof input.format) && (undefined === input.pattern || "string" === typeof input.pattern) && (undefined === input.minLength || "number" === typeof input.minLength && (Math.floor(input.minLength) === input.minLength && 0 <= input.minLength && input.minLength <= 0x10000000000000000)) && (undefined === input.maxLength || "number" === typeof input.maxLength && (Math.floor(input.maxLength) === input.maxLength && 0 <= input.maxLength && input.maxLength <= 0x10000000000000000)) && "string" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples))));
        const _io62 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && ("object" === typeof input.items && null !== input.items && false === Array.isArray(input.items) && _iu3(input.items)) && (undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems) && (undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000)) && (undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000)) && "array" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples))));
        const _io63 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && (undefined === input.properties || "object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) && _io56(input.properties)) && (undefined === input.required || Array.isArray(input.required) && input.required.every((elem => "string" === typeof elem))) && (null !== input.additionalProperties && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || "object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) && _iu3(input.additionalProperties))) && (undefined === input.maxProperties || "number" === typeof input.maxProperties) && (undefined === input.minProperties || "number" === typeof input.minProperties) && "object" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples))));
        const _io64 = input => "string" === typeof input.$ref && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io65 = input => Array.isArray(input.allOf) && input.allOf.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu3(elem))) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io66 = input => Array.isArray(input.anyOf) && input.anyOf.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu3(elem))) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io67 = input => Array.isArray(input.oneOf) && input.oneOf.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu3(elem))) && (undefined === input.discriminator || "object" === typeof input.discriminator && null !== input.discriminator && _io68(input.discriminator)) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io68 = input => "string" === typeof input.propertyName && (undefined === input.mapping || "object" === typeof input.mapping && null !== input.mapping && false === Array.isArray(input.mapping) && _io35(input.mapping));
        const _io69 = input => (null === input["default"] || undefined === input["default"]) && "null" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples))));
        const _io70 = input => null !== input.type && undefined === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples))));
        const _io71 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _io72(value);
        }));
        const _io72 = input => (undefined === input.content || "object" === typeof input.content && null !== input.content && false === Array.isArray(input.content) && _io73(input.content)) && (undefined === input.headers || "object" === typeof input.headers && null !== input.headers && false === Array.isArray(input.headers) && _io78(input.headers)) && (undefined === input.description || "string" === typeof input.description);
        const _io73 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _io74(value);
        }));
        const _io74 = input => (undefined === input.schema || "object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) && _iu3(input.schema)) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io75(input.examples));
        const _io75 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _iu12(value);
        }));
        const _io76 = input => (undefined === input.summary || "string" === typeof input.summary) && (undefined === input.description || "string" === typeof input.description) && true && (undefined === input.externalValue || "string" === typeof input.externalValue);
        const _io77 = input => "string" === typeof input.$ref && RegExp(/^#\/components\/examples\/(.*)/).test(input.$ref) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io78 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && _iu13(value);
        }));
        const _io79 = input => (undefined === input.name || "string" === typeof input.name) && (undefined === input.required || "boolean" === typeof input.required) && (undefined === input.description || "string" === typeof input.description) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io75(input.examples)) && ("object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) && _iu3(input.schema));
        const _io80 = input => "string" === typeof input.$ref && RegExp(/^#\/components\/headers\/(.*)/).test(input.$ref) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io81 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && _io82(value);
        }));
        const _io82 = input => (undefined === input.name || "string" === typeof input.name) && ("path" === input["in"] || "query" === input["in"] || "header" === input["in"] || "cookie" === input["in"]) && ("object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) && _iu3(input.schema)) && (undefined === input.required || "boolean" === typeof input.required) && (undefined === input.description || "string" === typeof input.description) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io75(input.examples));
        const _io83 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _io84(value);
        }));
        const _io84 = input => (undefined === input.description || "string" === typeof input.description) && (undefined === input.required || "boolean" === typeof input.required) && (undefined === input.content || "object" === typeof input.content && null !== input.content && false === Array.isArray(input.content) && _io73(input.content));
        const _io85 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && _iu14(value);
        }));
        const _io86 = input => "apiKey" === input.type && (undefined === input["in"] || "query" === input["in"] || "header" === input["in"] || "cookie" === input["in"]) && (undefined === input.name || "string" === typeof input.name) && (undefined === input.description || "string" === typeof input.description);
        const _io87 = input => "http" === input.type && "basic" === input.scheme && (undefined === input.description || "string" === typeof input.description);
        const _io88 = input => "http" === input.type && "bearer" === input.scheme && (undefined === input.bearerFormat || "string" === typeof input.bearerFormat) && (undefined === input.description || "string" === typeof input.description);
        const _io89 = input => "oauth2" === input.type && ("object" === typeof input.flows && null !== input.flows && false === Array.isArray(input.flows) && _io90(input.flows)) && (undefined === input.description || "string" === typeof input.description);
        const _io90 = input => (undefined === input.authorizationCode || "object" === typeof input.authorizationCode && null !== input.authorizationCode && false === Array.isArray(input.authorizationCode) && _io91(input.authorizationCode)) && (undefined === input.implicit || "object" === typeof input.implicit && null !== input.implicit && false === Array.isArray(input.implicit) && _io92(input.implicit)) && (undefined === input.password || "object" === typeof input.password && null !== input.password && false === Array.isArray(input.password) && _io93(input.password)) && (undefined === input.clientCredentials || "object" === typeof input.clientCredentials && null !== input.clientCredentials && false === Array.isArray(input.clientCredentials) && _io93(input.clientCredentials));
        const _io91 = input => (undefined === input.authorizationUrl || "string" === typeof input.authorizationUrl) && (undefined === input.tokenUrl || "string" === typeof input.tokenUrl) && (undefined === input.refreshUrl || "string" === typeof input.refreshUrl) && (undefined === input.scopes || "object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) && _io35(input.scopes));
        const _io92 = input => (undefined === input.authorizationUrl || "string" === typeof input.authorizationUrl) && (undefined === input.refreshUrl || "string" === typeof input.refreshUrl) && (undefined === input.scopes || "object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) && _io35(input.scopes));
        const _io93 = input => (undefined === input.tokenUrl || "string" === typeof input.tokenUrl) && (undefined === input.refreshUrl || "string" === typeof input.refreshUrl) && (undefined === input.scopes || "object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) && _io35(input.scopes));
        const _io94 = input => "openIdConnect" === input.type && "string" === typeof input.openIdConnectUrl && (undefined === input.description || "string" === typeof input.description);
        const _io95 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && _io79(value);
        }));
        const _io96 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _io76(value);
        }));
        const _io97 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _io98(value);
        }));
        const _io98 = input => (undefined === input.parameters || Array.isArray(input.parameters) && input.parameters.every((elem => "object" === typeof elem && null !== elem && _iu4(elem)))) && (undefined === input.servers || Array.isArray(input.servers) && input.servers.every((elem => "object" === typeof elem && null !== elem && _io49(elem)))) && (undefined === input.summary || "string" === typeof input.summary) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.options || "object" === typeof input.options && null !== input.options && false === Array.isArray(input.options) && _io100(input.options)) && (undefined === input.get || "object" === typeof input.get && null !== input.get && false === Array.isArray(input.get) && _io100(input.get)) && (undefined === input.post || "object" === typeof input.post && null !== input.post && false === Array.isArray(input.post) && _io100(input.post)) && (undefined === input.patch || "object" === typeof input.patch && null !== input.patch && false === Array.isArray(input.patch) && _io100(input.patch)) && (undefined === input.put || "object" === typeof input.put && null !== input.put && false === Array.isArray(input.put) && _io100(input.put)) && (undefined === input["delete"] || "object" === typeof input["delete"] && null !== input["delete"] && false === Array.isArray(input["delete"]) && _io100(input["delete"])) && (undefined === input.head || "object" === typeof input.head && null !== input.head && false === Array.isArray(input.head) && _io100(input.head)) && (undefined === input.trace || "object" === typeof input.trace && null !== input.trace && false === Array.isArray(input.trace) && _io100(input.trace));
        const _io99 = input => "string" === typeof input.$ref && RegExp(/^#\/components\/parameters\/(.*)/).test(input.$ref) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io100 = input => (undefined === input.operationId || "string" === typeof input.operationId) && (undefined === input.parameters || Array.isArray(input.parameters) && input.parameters.every((elem => "object" === typeof elem && null !== elem && _iu4(elem)))) && (undefined === input.requestBody || "object" === typeof input.requestBody && null !== input.requestBody && false === Array.isArray(input.requestBody) && _iu15(input.requestBody)) && (undefined === input.responses || "object" === typeof input.responses && null !== input.responses && false === Array.isArray(input.responses) && _io102(input.responses)) && (undefined === input.servers || Array.isArray(input.servers) && input.servers.every((elem => "object" === typeof elem && null !== elem && _io49(elem)))) && (undefined === input.summary || "string" === typeof input.summary) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.security || Array.isArray(input.security) && input.security.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io39(elem)))) && (undefined === input.tags || Array.isArray(input.tags) && input.tags.every((elem => "string" === typeof elem))) && (undefined === input.deprecated || "boolean" === typeof input.deprecated);
        const _io101 = input => "string" === typeof input.$ref && RegExp(/^#\/components\/requestBodies\/(.*)/).test(input.$ref) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io102 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _iu16(value);
        }));
        const _io103 = input => "string" === typeof input.$ref && RegExp(/^#\/components\/responses\/(.*)/).test(input.$ref) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io104 = input => "string" === typeof input.name && (undefined === input.description || "string" === typeof input.description);
        const _io105 = input => "string" === typeof input.openapi && RegExp(/^3\.1\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(input.openapi) && (undefined === input.servers || Array.isArray(input.servers) && input.servers.every((elem => "object" === typeof elem && null !== elem && _io106(elem)))) && (undefined === input.info || "object" === typeof input.info && null !== input.info && _io109(input.info)) && (undefined === input.components || "object" === typeof input.components && null !== input.components && false === Array.isArray(input.components) && _io112(input.components)) && (undefined === input.paths || "object" === typeof input.paths && null !== input.paths && false === Array.isArray(input.paths) && _io130(input.paths)) && (undefined === input.webhooks || "object" === typeof input.webhooks && null !== input.webhooks && false === Array.isArray(input.webhooks) && _io163(input.webhooks)) && (undefined === input.security || Array.isArray(input.security) && input.security.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io39(elem)))) && (undefined === input.tags || Array.isArray(input.tags) && input.tags.every((elem => "object" === typeof elem && null !== elem && _io165(elem))));
        const _io106 = input => "string" === typeof input.url && (undefined === input.description || "string" === typeof input.description) && (undefined === input.variables || "object" === typeof input.variables && null !== input.variables && false === Array.isArray(input.variables) && _io107(input.variables));
        const _io107 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && _io108(value);
        }));
        const _io108 = input => "string" === typeof input["default"] && (undefined === input["enum"] || Array.isArray(input["enum"]) && (1 <= input["enum"].length && input["enum"].every((elem => "string" === typeof elem)))) && (undefined === input.description || "string" === typeof input.description);
        const _io109 = input => "string" === typeof input.title && (undefined === input.summary || "string" === typeof input.summary) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.termsOfService || "string" === typeof input.termsOfService) && (undefined === input.contact || "object" === typeof input.contact && null !== input.contact && false === Array.isArray(input.contact) && _io110(input.contact)) && (undefined === input.license || "object" === typeof input.license && null !== input.license && _io111(input.license)) && "string" === typeof input.version;
        const _io110 = input => (undefined === input.name || "string" === typeof input.name) && (undefined === input.url || "string" === typeof input.url) && (undefined === input.email || "string" === typeof input.email);
        const _io111 = input => "string" === typeof input.name && (undefined === input.identifier || "string" === typeof input.identifier) && (undefined === input.url || "string" === typeof input.url);
        const _io112 = input => (undefined === input.schemas || "object" === typeof input.schemas && null !== input.schemas && false === Array.isArray(input.schemas) && _io113(input.schemas)) && (undefined === input.pathItems || "object" === typeof input.pathItems && null !== input.pathItems && false === Array.isArray(input.pathItems) && _io130(input.pathItems)) && (undefined === input.responses || "object" === typeof input.responses && null !== input.responses && false === Array.isArray(input.responses) && _io148(input.responses)) && (undefined === input.parameters || "object" === typeof input.parameters && null !== input.parameters && false === Array.isArray(input.parameters) && _io149(input.parameters)) && (undefined === input.requestBodies || "object" === typeof input.requestBodies && null !== input.requestBodies && false === Array.isArray(input.requestBodies) && _io150(input.requestBodies)) && (undefined === input.securitySchemes || "object" === typeof input.securitySchemes && null !== input.securitySchemes && false === Array.isArray(input.securitySchemes) && _io151(input.securitySchemes)) && (undefined === input.headers || "object" === typeof input.headers && null !== input.headers && false === Array.isArray(input.headers) && _io161(input.headers)) && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io162(input.examples));
        const _io113 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _iu5(value);
        }));
        const _io114 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && (undefined === input.properties || "object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) && _io113(input.properties)) && (undefined === input.required || Array.isArray(input.required) && input.required.every((elem => "string" === typeof elem))) && (null !== input.additionalProperties && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || "object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) && _iu5(input.additionalProperties))) && (undefined === input.maxProperties || "number" === typeof input.maxProperties) && (undefined === input.minProperties || "number" === typeof input.minProperties) && "object" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples))));
        const _io115 = input => Array.isArray(input.type) && input.type.every((elem => "string" === elem || "number" === elem || "boolean" === elem || "object" === elem || "integer" === elem || "array" === elem || "null" === elem)) && (null === input["default"] || undefined === input["default"] || Array.isArray(input["default"])) && (undefined === input["enum"] || Array.isArray(input["enum"])) && ("string" === typeof input["const"] || "number" === typeof input["const"] || "boolean" === typeof input["const"]) && (undefined === input.nullable || "boolean" === typeof input.nullable) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input.minimum || "number" === typeof input.minimum) && (undefined === input.maximum || "number" === typeof input.maximum) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && 0 < input.multipleOf) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum) && (undefined === input.format || "string" === typeof input.format) && (undefined === input.maxLength || "number" === typeof input.maxLength && (Math.floor(input.maxLength) === input.maxLength && 0 <= input.maxLength && input.maxLength <= 0x10000000000000000)) && (undefined === input.pattern || "string" === typeof input.pattern) && (undefined === input.contentMediaType || "string" === typeof input.contentMediaType) && (undefined === input.minLength || "number" === typeof input.minLength && (Math.floor(input.minLength) === input.minLength && 0 <= input.minLength && input.minLength <= 0x10000000000000000)) && (null !== input.items && (undefined === input.items || (Array.isArray(input.items) && input.items.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu5(elem))) || "object" === typeof input.items && null !== input.items && false === Array.isArray(input.items) && _iu5(input.items)))) && (undefined === input.prefixItems || Array.isArray(input.prefixItems) && input.prefixItems.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu5(elem)))) && (undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems) && (null !== input.additionalItems && (undefined === input.additionalItems || "boolean" === typeof input.additionalItems || "object" === typeof input.additionalItems && null !== input.additionalItems && false === Array.isArray(input.additionalItems) && _iu5(input.additionalItems))) && (undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000)) && (undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000)) && (null !== input.additionalProperties && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || "object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) && _iu5(input.additionalProperties))) && (undefined === input.properties || "object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) && _io113(input.properties)) && (undefined === input.required || Array.isArray(input.required) && input.required.every((elem => "string" === typeof elem))) && (undefined === input.maxProperties || "number" === typeof input.maxProperties) && (undefined === input.minProperties || "number" === typeof input.minProperties) && (Array.isArray(input.oneOf) && input.oneOf.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu5(elem)))) && (undefined === input.discriminator || "object" === typeof input.discriminator && null !== input.discriminator && _io127(input.discriminator)) && (Array.isArray(input.anyOf) && input.anyOf.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu5(elem)))) && (Array.isArray(input.allOf) && input.allOf.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu5(elem)))) && "string" === typeof input.$ref;
        const _io116 = input => ("string" === typeof input["const"] || "number" === typeof input["const"] || "boolean" === typeof input["const"]) && (undefined === input.nullable || "boolean" === typeof input.nullable) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io117 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && (null === input["default"] || undefined === input["default"] || "boolean" === typeof input["default"]) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "boolean" === typeof elem))) && "boolean" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples))));
        const _io118 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && (null === input["default"] || undefined === input["default"] || "number" === typeof input["default"] && (Math.floor(input["default"]) === input["default"] && -0x8000000000000000 <= input["default"] && input["default"] <= 0x8000000000000000)) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "number" === typeof elem))) && (undefined === input.minimum || "number" === typeof input.minimum && (Math.floor(input.minimum) === input.minimum && -0x8000000000000000 <= input.minimum && input.minimum <= 0x8000000000000000)) && (undefined === input.maximum || "number" === typeof input.maximum && (Math.floor(input.maximum) === input.maximum && -0x8000000000000000 <= input.maximum && input.maximum <= 0x8000000000000000)) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum && (Math.floor(input.exclusiveMinimum) === input.exclusiveMinimum && -0x8000000000000000 <= input.exclusiveMinimum && input.exclusiveMinimum <= 0x8000000000000000) || "boolean" === typeof input.exclusiveMinimum) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum && (Math.floor(input.exclusiveMaximum) === input.exclusiveMaximum && -0x8000000000000000 <= input.exclusiveMaximum && input.exclusiveMaximum <= 0x8000000000000000) || "boolean" === typeof input.exclusiveMaximum) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && (Math.floor(input.multipleOf) === input.multipleOf && 0 <= input.multipleOf && input.multipleOf <= 0x10000000000000000 && 0 < input.multipleOf)) && "integer" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples))));
        const _io119 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && (null === input["default"] || undefined === input["default"] || "number" === typeof input["default"]) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "number" === typeof elem))) && (undefined === input.minimum || "number" === typeof input.minimum) && (undefined === input.maximum || "number" === typeof input.maximum) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && 0 < input.multipleOf) && "number" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples))));
        const _io120 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && (null === input["default"] || undefined === input["default"] || "string" === typeof input["default"]) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "string" === typeof elem))) && (undefined === input.format || "string" === typeof input.format) && (undefined === input.pattern || "string" === typeof input.pattern) && (undefined === input.contentMediaType || "string" === typeof input.contentMediaType) && (undefined === input.minLength || "number" === typeof input.minLength && (Math.floor(input.minLength) === input.minLength && 0 <= input.minLength && input.minLength <= 0x10000000000000000)) && (undefined === input.maxLength || "number" === typeof input.maxLength && (Math.floor(input.maxLength) === input.maxLength && 0 <= input.maxLength && input.maxLength <= 0x10000000000000000)) && "string" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples))));
        const _io121 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && (null !== input.items && (undefined === input.items || (Array.isArray(input.items) && input.items.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu5(elem))) || "object" === typeof input.items && null !== input.items && false === Array.isArray(input.items) && _iu5(input.items)))) && (undefined === input.prefixItems || Array.isArray(input.prefixItems) && input.prefixItems.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu5(elem)))) && (undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems) && (null !== input.additionalItems && (undefined === input.additionalItems || "boolean" === typeof input.additionalItems || "object" === typeof input.additionalItems && null !== input.additionalItems && false === Array.isArray(input.additionalItems) && _iu5(input.additionalItems))) && (undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000)) && (undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000)) && "array" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples))));
        const _io122 = input => "string" === typeof input.$ref && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io123 = input => "string" === typeof input.$recursiveRef && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io124 = input => Array.isArray(input.allOf) && input.allOf.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu5(elem))) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io125 = input => Array.isArray(input.anyOf) && input.anyOf.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu5(elem))) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io126 = input => Array.isArray(input.oneOf) && input.oneOf.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu5(elem))) && (undefined === input.discriminator || "object" === typeof input.discriminator && null !== input.discriminator && _io127(input.discriminator)) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io127 = input => "string" === typeof input.propertyName && (undefined === input.mapping || "object" === typeof input.mapping && null !== input.mapping && false === Array.isArray(input.mapping) && _io35(input.mapping));
        const _io128 = input => (null === input["default"] || undefined === input["default"]) && "null" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples))));
        const _io129 = input => null !== input.type && undefined === input.type && true && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples))));
        const _io130 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _io131(value);
        }));
        const _io131 = input => (undefined === input.parameters || Array.isArray(input.parameters) && input.parameters.every((elem => "object" === typeof elem && null !== elem && _iu6(elem)))) && (undefined === input.servers || Array.isArray(input.servers) && input.servers.every((elem => "object" === typeof elem && null !== elem && _io106(elem)))) && (undefined === input.summary || "string" === typeof input.summary) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.options || "object" === typeof input.options && null !== input.options && false === Array.isArray(input.options) && _io138(input.options)) && (undefined === input.get || "object" === typeof input.get && null !== input.get && false === Array.isArray(input.get) && _io138(input.get)) && (undefined === input.post || "object" === typeof input.post && null !== input.post && false === Array.isArray(input.post) && _io138(input.post)) && (undefined === input.patch || "object" === typeof input.patch && null !== input.patch && false === Array.isArray(input.patch) && _io138(input.patch)) && (undefined === input.put || "object" === typeof input.put && null !== input.put && false === Array.isArray(input.put) && _io138(input.put)) && (undefined === input["delete"] || "object" === typeof input["delete"] && null !== input["delete"] && false === Array.isArray(input["delete"]) && _io138(input["delete"])) && (undefined === input.head || "object" === typeof input.head && null !== input.head && false === Array.isArray(input.head) && _io138(input.head)) && (undefined === input.trace || "object" === typeof input.trace && null !== input.trace && false === Array.isArray(input.trace) && _io138(input.trace));
        const _io132 = input => (undefined === input.name || "string" === typeof input.name) && ("path" === input["in"] || "query" === input["in"] || "header" === input["in"] || "cookie" === input["in"]) && ("object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) && _iu5(input.schema)) && (undefined === input.required || "boolean" === typeof input.required) && (undefined === input.description || "string" === typeof input.description) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io133(input.examples));
        const _io133 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _iu17(value);
        }));
        const _io134 = input => (undefined === input.summary || "string" === typeof input.summary) && (undefined === input.description || "string" === typeof input.description) && true && (undefined === input.externalValue || "string" === typeof input.externalValue);
        const _io135 = input => "string" === typeof input.$ref && RegExp(/^#\/components\/examples\/(.*)/).test(input.$ref) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io136 = input => "string" === typeof input.$ref && RegExp(/^#\/components\/headers\/(.*)/).test(input.$ref) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io137 = input => "string" === typeof input.$ref && RegExp(/^#\/components\/parameters\/(.*)/).test(input.$ref) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io138 = input => (undefined === input.operationId || "string" === typeof input.operationId) && (undefined === input.parameters || Array.isArray(input.parameters) && input.parameters.every((elem => "object" === typeof elem && null !== elem && _iu6(elem)))) && (undefined === input.requestBody || "object" === typeof input.requestBody && null !== input.requestBody && false === Array.isArray(input.requestBody) && _iu18(input.requestBody)) && (undefined === input.responses || "object" === typeof input.responses && null !== input.responses && false === Array.isArray(input.responses) && _io143(input.responses)) && (undefined === input.servers || Array.isArray(input.servers) && input.servers.every((elem => "object" === typeof elem && null !== elem && _io106(elem)))) && (undefined === input.summary || "string" === typeof input.summary) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.security || Array.isArray(input.security) && input.security.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io39(elem)))) && (undefined === input.tags || Array.isArray(input.tags) && input.tags.every((elem => "string" === typeof elem))) && (undefined === input.deprecated || "boolean" === typeof input.deprecated);
        const _io139 = input => (undefined === input.description || "string" === typeof input.description) && (undefined === input.required || "boolean" === typeof input.required) && (undefined === input.content || "object" === typeof input.content && null !== input.content && false === Array.isArray(input.content) && _io140(input.content));
        const _io140 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _io141(value);
        }));
        const _io141 = input => (undefined === input.schema || "object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) && _iu5(input.schema)) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io133(input.examples));
        const _io142 = input => "string" === typeof input.$ref && RegExp(/^#\/components\/requestBodies\/(.*)/).test(input.$ref) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io143 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _iu19(value);
        }));
        const _io144 = input => (undefined === input.content || "object" === typeof input.content && null !== input.content && false === Array.isArray(input.content) && _io140(input.content)) && (undefined === input.headers || "object" === typeof input.headers && null !== input.headers && false === Array.isArray(input.headers) && _io145(input.headers)) && (undefined === input.description || "string" === typeof input.description);
        const _io145 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && _iu20(value);
        }));
        const _io146 = input => (undefined === input.name || "string" === typeof input.name) && (undefined === input.required || "boolean" === typeof input.required) && (undefined === input.description || "string" === typeof input.description) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io133(input.examples)) && ("object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) && _iu5(input.schema));
        const _io147 = input => "string" === typeof input.$ref && RegExp(/^#\/components\/responses\/(.*)/).test(input.$ref) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io148 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _io144(value);
        }));
        const _io149 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && _io132(value);
        }));
        const _io150 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _io139(value);
        }));
        const _io151 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && _iu21(value);
        }));
        const _io152 = input => "apiKey" === input.type && (undefined === input["in"] || "query" === input["in"] || "header" === input["in"] || "cookie" === input["in"]) && (undefined === input.name || "string" === typeof input.name) && (undefined === input.description || "string" === typeof input.description);
        const _io153 = input => "http" === input.type && "basic" === input.scheme && (undefined === input.description || "string" === typeof input.description);
        const _io154 = input => "http" === input.type && "bearer" === input.scheme && (undefined === input.bearerFormat || "string" === typeof input.bearerFormat) && (undefined === input.description || "string" === typeof input.description);
        const _io155 = input => "oauth2" === input.type && ("object" === typeof input.flows && null !== input.flows && false === Array.isArray(input.flows) && _io156(input.flows)) && (undefined === input.description || "string" === typeof input.description);
        const _io156 = input => (undefined === input.authorizationCode || "object" === typeof input.authorizationCode && null !== input.authorizationCode && false === Array.isArray(input.authorizationCode) && _io157(input.authorizationCode)) && (undefined === input.implicit || "object" === typeof input.implicit && null !== input.implicit && false === Array.isArray(input.implicit) && _io158(input.implicit)) && (undefined === input.password || "object" === typeof input.password && null !== input.password && false === Array.isArray(input.password) && _io159(input.password)) && (undefined === input.clientCredentials || "object" === typeof input.clientCredentials && null !== input.clientCredentials && false === Array.isArray(input.clientCredentials) && _io159(input.clientCredentials));
        const _io157 = input => (undefined === input.authorizationUrl || "string" === typeof input.authorizationUrl) && (undefined === input.tokenUrl || "string" === typeof input.tokenUrl) && (undefined === input.refreshUrl || "string" === typeof input.refreshUrl) && (undefined === input.scopes || "object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) && _io35(input.scopes));
        const _io158 = input => (undefined === input.authorizationUrl || "string" === typeof input.authorizationUrl) && (undefined === input.refreshUrl || "string" === typeof input.refreshUrl) && (undefined === input.scopes || "object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) && _io35(input.scopes));
        const _io159 = input => (undefined === input.tokenUrl || "string" === typeof input.tokenUrl) && (undefined === input.refreshUrl || "string" === typeof input.refreshUrl) && (undefined === input.scopes || "object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) && _io35(input.scopes));
        const _io160 = input => "openIdConnect" === input.type && "string" === typeof input.openIdConnectUrl && (undefined === input.description || "string" === typeof input.description);
        const _io161 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && _io146(value);
        }));
        const _io162 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _io134(value);
        }));
        const _io163 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _iu22(value);
        }));
        const _io164 = input => "string" === typeof input.$ref && RegExp(/^#\/components\/pathItems\/(.*)/).test(input.$ref) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io165 = input => "string" === typeof input.name && (undefined === input.description || "string" === typeof input.description);
        const _io166 = input => "string" === typeof input.openapi && RegExp(/^3\.1\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(input.openapi) && (undefined === input.servers || Array.isArray(input.servers) && input.servers.every((elem => "object" === typeof elem && null !== elem && _io167(elem)))) && (undefined === input.info || "object" === typeof input.info && null !== input.info && _io170(input.info)) && ("object" === typeof input.components && null !== input.components && false === Array.isArray(input.components) && _io173(input.components)) && (undefined === input.paths || "object" === typeof input.paths && null !== input.paths && false === Array.isArray(input.paths) && _io198(input.paths)) && (undefined === input.webhooks || "object" === typeof input.webhooks && null !== input.webhooks && false === Array.isArray(input.webhooks) && _io198(input.webhooks)) && (undefined === input.security || Array.isArray(input.security) && input.security.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io39(elem)))) && (undefined === input.tags || Array.isArray(input.tags) && input.tags.every((elem => "object" === typeof elem && null !== elem && _io210(elem)))) && true === input["x-samchon-emended-v4"];
        const _io167 = input => "string" === typeof input.url && (undefined === input.description || "string" === typeof input.description) && (undefined === input.variables || "object" === typeof input.variables && null !== input.variables && false === Array.isArray(input.variables) && _io168(input.variables));
        const _io168 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && _io169(value);
        }));
        const _io169 = input => "string" === typeof input["default"] && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => "string" === typeof elem))) && (undefined === input.description || "string" === typeof input.description);
        const _io170 = input => "string" === typeof input.title && (undefined === input.summary || "string" === typeof input.summary) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.termsOfService || "string" === typeof input.termsOfService) && (undefined === input.contact || "object" === typeof input.contact && null !== input.contact && false === Array.isArray(input.contact) && _io171(input.contact)) && (undefined === input.license || "object" === typeof input.license && null !== input.license && _io172(input.license)) && "string" === typeof input.version;
        const _io171 = input => (undefined === input.name || "string" === typeof input.name) && (undefined === input.url || "string" === typeof input.url) && (undefined === input.email || "string" === typeof input.email && /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i.test(input.email));
        const _io172 = input => "string" === typeof input.name && (undefined === input.identifier || "string" === typeof input.identifier) && (undefined === input.url || "string" === typeof input.url);
        const _io173 = input => (undefined === input.schemas || "object" === typeof input.schemas && null !== input.schemas && false === Array.isArray(input.schemas) && _io174(input.schemas)) && (undefined === input.securitySchemes || "object" === typeof input.securitySchemes && null !== input.securitySchemes && false === Array.isArray(input.securitySchemes) && _io188(input.securitySchemes));
        const _io174 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _iu7(value);
        }));
        const _io175 = input => ("string" === typeof input["const"] || "number" === typeof input["const"] || "boolean" === typeof input["const"]) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples));
        const _io176 = input => (undefined === input["default"] || "boolean" === typeof input["default"]) && "boolean" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples));
        const _io177 = input => (undefined === input["default"] || "number" === typeof input["default"] && (Math.floor(input["default"]) === input["default"] && -0x8000000000000000 <= input["default"] && input["default"] <= 0x8000000000000000)) && (undefined === input.minimum || "number" === typeof input.minimum && (Math.floor(input.minimum) === input.minimum && -0x8000000000000000 <= input.minimum && input.minimum <= 0x8000000000000000)) && (undefined === input.maximum || "number" === typeof input.maximum && (Math.floor(input.maximum) === input.maximum && -0x8000000000000000 <= input.maximum && input.maximum <= 0x8000000000000000)) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && (Math.floor(input.multipleOf) === input.multipleOf && 0 <= input.multipleOf && input.multipleOf <= 0x10000000000000000 && 0 < input.multipleOf)) && "integer" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples));
        const _io178 = input => (undefined === input["default"] || "number" === typeof input["default"]) && (undefined === input.minimum || "number" === typeof input.minimum) && (undefined === input.maximum || "number" === typeof input.maximum) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && 0 < input.multipleOf) && "number" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples));
        const _io179 = input => (undefined === input["default"] || "string" === typeof input["default"]) && (undefined === input.format || "string" === typeof input.format) && (undefined === input.pattern || "string" === typeof input.pattern) && (undefined === input.contentMediaType || "string" === typeof input.contentMediaType) && (undefined === input.minLength || "number" === typeof input.minLength && (Math.floor(input.minLength) === input.minLength && 0 <= input.minLength && input.minLength <= 0x10000000000000000)) && (undefined === input.maxLength || "number" === typeof input.maxLength && (Math.floor(input.maxLength) === input.maxLength && 0 <= input.maxLength && input.maxLength <= 0x10000000000000000)) && "string" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples));
        const _io180 = input => "object" === typeof input.items && null !== input.items && false === Array.isArray(input.items) && _iu7(input.items) && (undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems) && (undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000)) && (undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000)) && "array" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples));
        const _io181 = input => "array" === input.type && (Array.isArray(input.prefixItems) && input.prefixItems.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu7(elem)))) && (null !== input.additionalItems && (undefined === input.additionalItems || "boolean" === typeof input.additionalItems || "object" === typeof input.additionalItems && null !== input.additionalItems && false === Array.isArray(input.additionalItems) && _iu7(input.additionalItems))) && (undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems) && (undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000)) && (undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000)) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples));
        const _io182 = input => (undefined === input.properties || "object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) && _io174(input.properties)) && (null !== input.additionalProperties && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || "object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) && _iu7(input.additionalProperties))) && (undefined === input.required || Array.isArray(input.required) && input.required.every((elem => "string" === typeof elem))) && "object" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples));
        const _io183 = input => "string" === typeof input.$ref && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples));
        const _io184 = input => Array.isArray(input.oneOf) && input.oneOf.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu8(elem))) && (undefined === input.discriminator || "object" === typeof input.discriminator && null !== input.discriminator && _io187(input.discriminator)) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples));
        const _io185 = input => (null === input["default"] || undefined === input["default"]) && "null" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples));
        const _io186 = input => null !== input.type && undefined === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples));
        const _io187 = input => "string" === typeof input.propertyName && (undefined === input.mapping || "object" === typeof input.mapping && null !== input.mapping && false === Array.isArray(input.mapping) && _io35(input.mapping));
        const _io188 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && _iu23(value);
        }));
        const _io189 = input => "apiKey" === input.type && (undefined === input["in"] || "query" === input["in"] || "header" === input["in"] || "cookie" === input["in"]) && (undefined === input.name || "string" === typeof input.name) && (undefined === input.description || "string" === typeof input.description);
        const _io190 = input => "http" === input.type && "basic" === input.scheme && (undefined === input.description || "string" === typeof input.description);
        const _io191 = input => "http" === input.type && "bearer" === input.scheme && (undefined === input.bearerFormat || "string" === typeof input.bearerFormat) && (undefined === input.description || "string" === typeof input.description);
        const _io192 = input => "oauth2" === input.type && ("object" === typeof input.flows && null !== input.flows && false === Array.isArray(input.flows) && _io193(input.flows)) && (undefined === input.description || "string" === typeof input.description);
        const _io193 = input => (undefined === input.authorizationCode || "object" === typeof input.authorizationCode && null !== input.authorizationCode && false === Array.isArray(input.authorizationCode) && _io194(input.authorizationCode)) && (undefined === input.implicit || "object" === typeof input.implicit && null !== input.implicit && false === Array.isArray(input.implicit) && _io195(input.implicit)) && (undefined === input.password || "object" === typeof input.password && null !== input.password && false === Array.isArray(input.password) && _io196(input.password)) && (undefined === input.clientCredentials || "object" === typeof input.clientCredentials && null !== input.clientCredentials && false === Array.isArray(input.clientCredentials) && _io196(input.clientCredentials));
        const _io194 = input => (undefined === input.authorizationUrl || "string" === typeof input.authorizationUrl) && (undefined === input.tokenUrl || "string" === typeof input.tokenUrl) && (undefined === input.refreshUrl || "string" === typeof input.refreshUrl) && (undefined === input.scopes || "object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) && _io35(input.scopes));
        const _io195 = input => (undefined === input.authorizationUrl || "string" === typeof input.authorizationUrl) && (undefined === input.refreshUrl || "string" === typeof input.refreshUrl) && (undefined === input.scopes || "object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) && _io35(input.scopes));
        const _io196 = input => (undefined === input.tokenUrl || "string" === typeof input.tokenUrl) && (undefined === input.refreshUrl || "string" === typeof input.refreshUrl) && (undefined === input.scopes || "object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) && _io35(input.scopes));
        const _io197 = input => "openIdConnect" === input.type && "string" === typeof input.openIdConnectUrl && (undefined === input.description || "string" === typeof input.description);
        const _io198 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _io199(value);
        }));
        const _io199 = input => (undefined === input.servers || Array.isArray(input.servers) && input.servers.every((elem => "object" === typeof elem && null !== elem && _io167(elem)))) && (undefined === input.summary || "string" === typeof input.summary) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.options || "object" === typeof input.options && null !== input.options && false === Array.isArray(input.options) && _io200(input.options)) && (undefined === input.get || "object" === typeof input.get && null !== input.get && false === Array.isArray(input.get) && _io200(input.get)) && (undefined === input.post || "object" === typeof input.post && null !== input.post && false === Array.isArray(input.post) && _io200(input.post)) && (undefined === input.patch || "object" === typeof input.patch && null !== input.patch && false === Array.isArray(input.patch) && _io200(input.patch)) && (undefined === input.put || "object" === typeof input.put && null !== input.put && false === Array.isArray(input.put) && _io200(input.put)) && (undefined === input["delete"] || "object" === typeof input["delete"] && null !== input["delete"] && false === Array.isArray(input["delete"]) && _io200(input["delete"])) && (undefined === input.head || "object" === typeof input.head && null !== input.head && false === Array.isArray(input.head) && _io200(input.head)) && (undefined === input.trace || "object" === typeof input.trace && null !== input.trace && false === Array.isArray(input.trace) && _io200(input.trace));
        const _io200 = input => (undefined === input.operationId || "string" === typeof input.operationId) && (undefined === input.parameters || Array.isArray(input.parameters) && input.parameters.every((elem => "object" === typeof elem && null !== elem && _io201(elem)))) && (undefined === input.requestBody || "object" === typeof input.requestBody && null !== input.requestBody && false === Array.isArray(input.requestBody) && _io204(input.requestBody)) && (undefined === input.responses || "object" === typeof input.responses && null !== input.responses && false === Array.isArray(input.responses) && _io207(input.responses)) && (undefined === input.servers || Array.isArray(input.servers) && input.servers.every((elem => "object" === typeof elem && null !== elem && _io167(elem)))) && (undefined === input.summary || "string" === typeof input.summary) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.security || Array.isArray(input.security) && input.security.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io39(elem)))) && (undefined === input.tags || Array.isArray(input.tags) && input.tags.every((elem => "string" === typeof elem))) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && (undefined === input["x-samchon-human"] || "boolean" === typeof input["x-samchon-human"]) && (undefined === input["x-samchon-accessor"] || Array.isArray(input["x-samchon-accessor"]) && input["x-samchon-accessor"].every((elem => "string" === typeof elem))) && (undefined === input["x-samchon-controller"] || "string" === typeof input["x-samchon-controller"]);
        const _io201 = input => (undefined === input.name || "string" === typeof input.name) && ("path" === input["in"] || "query" === input["in"] || "header" === input["in"] || "cookie" === input["in"]) && ("object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) && _iu7(input.schema)) && (undefined === input.required || "boolean" === typeof input.required) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io202(input.examples));
        const _io202 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _io203(value);
        }));
        const _io203 = input => (undefined === input.summary || "string" === typeof input.summary) && (undefined === input.description || "string" === typeof input.description) && true && (undefined === input.externalValue || "string" === typeof input.externalValue);
        const _io204 = input => (undefined === input.content || "object" === typeof input.content && null !== input.content && false === Array.isArray(input.content) && _io205(input.content)) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.required || "boolean" === typeof input.required) && (undefined === input["x-nestia-encrypted"] || "boolean" === typeof input["x-nestia-encrypted"]);
        const _io205 = input => (undefined === input["text/plain"] || "object" === typeof input["text/plain"] && null !== input["text/plain"] && false === Array.isArray(input["text/plain"]) && _io206(input["text/plain"])) && (undefined === input["application/json"] || "object" === typeof input["application/json"] && null !== input["application/json"] && false === Array.isArray(input["application/json"]) && _io206(input["application/json"])) && (undefined === input["application/x-www-form-url-encoded"] || "object" === typeof input["application/x-www-form-url-encoded"] && null !== input["application/x-www-form-url-encoded"] && false === Array.isArray(input["application/x-www-form-url-encoded"]) && _io206(input["application/x-www-form-url-encoded"])) && (undefined === input["multipart/form-data"] || "object" === typeof input["multipart/form-data"] && null !== input["multipart/form-data"] && false === Array.isArray(input["multipart/form-data"]) && _io206(input["multipart/form-data"])) && (undefined === input["*/*"] || "object" === typeof input["*/*"] && null !== input["*/*"] && false === Array.isArray(input["*/*"]) && _io206(input["*/*"])) && Object.keys(input).every((key => {
            if ([ "text/plain", "application/json", "application/x-www-form-url-encoded", "multipart/form-data", "*/*" ].some((prop => key === prop))) return true;
            const value = input[key];
            if (undefined === value) return true;
            return undefined === value || "object" === typeof value && null !== value && false === Array.isArray(value) && _io206(value);
        }));
        const _io206 = input => (undefined === input.schema || "object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) && _iu7(input.schema)) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io202(input.examples));
        const _io207 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _io208(value);
        }));
        const _io208 = input => (undefined === input.headers || "object" === typeof input.headers && null !== input.headers && false === Array.isArray(input.headers) && _io209(input.headers)) && (undefined === input.content || "object" === typeof input.content && null !== input.content && false === Array.isArray(input.content) && _io205(input.content)) && (undefined === input.description || "string" === typeof input.description) && (undefined === input["x-nestia-encrypted"] || "boolean" === typeof input["x-nestia-encrypted"]);
        const _io209 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && _io201(value);
        }));
        const _io210 = input => "string" === typeof input.name && (undefined === input.description || "string" === typeof input.description);
        const _iu0 = input => (() => {
            if ("boolean" === input.type) return _io5(input); else if ("number" === input.type) return _io7(input); else if ("integer" === input.type) return _io6(input); else if ("string" === input.type) return _io8(input); else if ("array" === input.type) return _io9(input); else if ("object" === input.type) return _io10(input); else if (undefined !== input.$ref) return _io11(input); else if (undefined !== input["x-anyOf"]) return _io12(input); else if (undefined !== input["x-oneOf"]) return _io13(input); else if ("null" === input.type) return _io14(input); else return _io15(input);
        })();
        const _iu1 = input => (() => {
            if ("boolean" === input.type) return _io17(input); else if ("number" === input.type) return _io19(input); else if ("integer" === input.type) return _io18(input); else if ("string" === input.type) return _io20(input); else if ("array" === input.type) return _io21(input); else if ("object" === input.type) return _io22(input); else if (undefined !== input["x-anyOf"]) return _io24(input); else if (undefined !== input["x-oneOf"]) return _io25(input); else if ("null" === input.type) return _io26(input); else if (undefined !== input.schema) return _io28(input); else return (() => {
                if (_io23(input)) return _io23(input);
                if (_io27(input)) return _io27(input);
                if (_io42(input)) return _io42(input);
                return false;
            })();
        })();
        const _iu2 = input => (() => {
            if ("boolean" === input.type) return _io17(input); else if ("number" === input.type) return _io19(input); else if ("integer" === input.type) return _io18(input); else if ("string" === input.type) return _io20(input); else if ("array" === input.type) return _io21(input); else if ("object" === input.type) return _io22(input); else if (undefined !== input["x-anyOf"]) return _io24(input); else if (undefined !== input["x-oneOf"]) return _io25(input); else if ("null" === input.type) return _io26(input); else if (undefined !== input.schema) return _io28(input); else return (() => {
                if (_io23(input)) return _io23(input);
                if (_io27(input)) return _io27(input);
                if (_io44(input)) return _io44(input);
                return false;
            })();
        })();
        const _iu3 = input => (() => {
            if ("boolean" === input.type) return _io57(input); else if ("number" === input.type) return _io60(input); else if ("integer" === input.type) return _io59(input); else if ("string" === input.type) return _io61(input); else if ("array" === input.type) return _io62(input); else if ("object" === input.type) return _io63(input); else if (undefined !== input.$ref) return _io64(input); else if (undefined !== input.allOf) return _io65(input); else if (undefined !== input.anyOf) return _io66(input); else if (undefined !== input.oneOf) return _io67(input); else if ("null" === input.type) return _io69(input); else return _io70(input);
        })();
        const _iu4 = input => (() => {
            if (undefined !== input["in"]) return _io82(input); else if ("string" === typeof input.$ref && RegExp(/^#\/components\/parameters\/(.*)/).test(input.$ref)) return _io99(input); else if ("string" === typeof input.$ref && RegExp(/^#\/components\/headers\/(.*)/).test(input.$ref)) return _io80(input); else return false;
        })();
        const _iu5 = input => (() => {
            if ("object" === input.type) return _io114(input); else if (Array.isArray(input.type) && input.type.every((elem => "string" === elem || "number" === elem || "boolean" === elem || "object" === elem || "integer" === elem || "array" === elem || "null" === elem))) return _io115(input); else if ("boolean" === input.type) return _io117(input); else if ("number" === input.type) return _io119(input); else if ("integer" === input.type) return _io118(input); else if ("string" === input.type) return _io120(input); else if ("array" === input.type) return _io121(input); else if (undefined !== input.$recursiveRef) return _io123(input); else if ("null" === input.type) return _io128(input); else return (() => {
                if (undefined !== input["const"]) return _io116(input); else if (undefined !== input.$ref) return _io122(input); else if (undefined !== input.allOf) return _io124(input); else if (undefined !== input.anyOf) return _io125(input); else if (undefined !== input.oneOf) return _io126(input); else return _io129(input);
            })();
        })();
        const _iu6 = input => (() => {
            if (undefined !== input["in"]) return _io132(input); else if ("string" === typeof input.$ref && RegExp(/^#\/components\/parameters\/(.*)/).test(input.$ref)) return _io137(input); else if ("string" === typeof input.$ref && RegExp(/^#\/components\/headers\/(.*)/).test(input.$ref)) return _io136(input); else return false;
        })();
        const _iu7 = input => (() => {
            if (undefined !== input["const"]) return _io175(input); else if ("boolean" === input.type) return _io176(input); else if ("number" === input.type) return _io178(input); else if ("integer" === input.type) return _io177(input); else if ("string" === input.type) return _io179(input); else if (undefined !== input.items) return _io180(input); else if (undefined !== input.prefixItems) return _io181(input); else if ("object" === input.type) return _io182(input); else if (undefined !== input.$ref) return _io183(input); else if (undefined !== input.oneOf) return _io184(input); else if ("null" === input.type) return _io185(input); else return _io186(input);
        })();
        const _iu8 = input => (() => {
            if (undefined !== input["const"]) return _io175(input); else if ("boolean" === input.type) return _io176(input); else if ("number" === input.type) return _io178(input); else if ("integer" === input.type) return _io177(input); else if ("string" === input.type) return _io179(input); else if (undefined !== input.items) return _io180(input); else if (undefined !== input.prefixItems) return _io181(input); else if ("object" === input.type) return _io182(input); else if (undefined !== input.$ref) return _io183(input); else if ("null" === input.type) return _io185(input); else return _io186(input);
        })();
        const _iu9 = input => (() => {
            if ("boolean" === input.type) return _io17(input); else if ("number" === input.type) return _io19(input); else if ("integer" === input.type) return _io18(input); else if ("string" === input.type) return _io20(input); else if ("array" === input.type) return _io21(input); else if ("object" === input.type) return _io22(input); else if (undefined !== input.$ref) return _io23(input); else if (undefined !== input["x-anyOf"]) return _io24(input); else if (undefined !== input["x-oneOf"]) return _io25(input); else if ("null" === input.type) return _io26(input); else if (undefined !== input.schema) return _io28(input); else return _io27(input);
        })();
        const _iu10 = input => (() => {
            if ("apiKey" === input.type) return _io32(input); else if ("basic" === input.type) return _io33(input); else if ("implicit" === input.flow) return _io34(input); else if ("accessCode" === input.flow) return _io36(input); else if ("application" === input.flow) return _io38(input); else if ("password" === input.flow) return _io37(input); else return false;
        })();
        const _iu11 = input => (() => {
            if (undefined !== input.$ref) return _io46(input); else return _io30(input);
        })();
        const _iu12 = input => (() => {
            if (undefined !== input.$ref) return _io77(input); else return _io76(input);
        })();
        const _iu13 = input => (() => {
            if (undefined !== input.schema) return _io79(input); else if (undefined !== input.$ref) return _io80(input); else return false;
        })();
        const _iu14 = input => (() => {
            if ("apiKey" === input.type) return _io86(input); else if ("basic" === input.scheme) return _io87(input); else if ("bearer" === input.scheme) return _io88(input); else if ("oauth2" === input.type) return _io89(input); else if ("openIdConnect" === input.type) return _io94(input); else return false;
        })();
        const _iu15 = input => (() => {
            if (undefined !== input.$ref) return _io101(input); else return _io84(input);
        })();
        const _iu16 = input => (() => {
            if (undefined !== input.$ref) return _io103(input); else return _io72(input);
        })();
        const _iu17 = input => (() => {
            if (undefined !== input.$ref) return _io135(input); else return _io134(input);
        })();
        const _iu18 = input => (() => {
            if (undefined !== input.$ref) return _io142(input); else return _io139(input);
        })();
        const _iu19 = input => (() => {
            if (undefined !== input.$ref) return _io147(input); else return _io144(input);
        })();
        const _iu20 = input => (() => {
            if (undefined !== input.$ref) return _io136(input); else if (undefined !== input.schema) return _io146(input); else return false;
        })();
        const _iu21 = input => (() => {
            if ("apiKey" === input.type) return _io152(input); else if ("basic" === input.scheme) return _io153(input); else if ("bearer" === input.scheme) return _io154(input); else if ("oauth2" === input.type) return _io155(input); else if ("openIdConnect" === input.type) return _io160(input); else return false;
        })();
        const _iu22 = input => (() => {
            if (undefined !== input.$ref) return _io164(input); else return _io131(input);
        })();
        const _iu23 = input => (() => {
            if ("apiKey" === input.type) return _io189(input); else if ("basic" === input.scheme) return _io190(input); else if ("bearer" === input.scheme) return _io191(input); else if ("oauth2" === input.type) return _io192(input); else if ("openIdConnect" === input.type) return _io197(input); else return false;
        })();
        const _iu24 = input => (() => {
            if (undefined !== input.swagger) return _io0(input); else if (null !== input.openapi && undefined !== input.openapi && ("3.0" === input.openapi || "string" === typeof input.openapi && RegExp(/^3\.0\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(input.openapi))) return _io48(input); else if ("string" === typeof input.openapi && RegExp(/^3\.1\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(input.openapi)) return _io105(input); else if (undefined !== input["x-samchon-emended-v4"]) return _io166(input); else return false;
        })();
        const _vo0 = (input, _path, _exceptionable = true) => [ (null !== input.swagger || _report(_exceptionable, {
            path: _path + ".swagger",
            expected: '("2.0" | `2.0.${number}`)',
            value: input.swagger
        })) && (undefined !== input.swagger || _report(_exceptionable, {
            path: _path + ".swagger",
            expected: '("2.0" | `2.0.${number}`)',
            value: input.swagger
        })) && ("2.0" === input.swagger || "string" === typeof input.swagger && RegExp(/^2\.0\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(input.swagger) || _report(_exceptionable, {
            path: _path + ".swagger",
            expected: '("2.0" | `2.0.${number}`)',
            value: input.swagger
        })), undefined === input.info || ("object" === typeof input.info && null !== input.info || _report(_exceptionable, {
            path: _path + ".info",
            expected: "(SwaggerV2.IDocument.IInfo | undefined)",
            value: input.info
        })) && _vo1(input.info, _path + ".info", _exceptionable) || _report(_exceptionable, {
            path: _path + ".info",
            expected: "(SwaggerV2.IDocument.IInfo | undefined)",
            value: input.info
        }), undefined === input.host || "string" === typeof input.host || _report(_exceptionable, {
            path: _path + ".host",
            expected: "(string | undefined)",
            value: input.host
        }), undefined === input.basePath || "string" === typeof input.basePath || _report(_exceptionable, {
            path: _path + ".basePath",
            expected: "(string | undefined)",
            value: input.basePath
        }), undefined === input.consumes || (Array.isArray(input.consumes) || _report(_exceptionable, {
            path: _path + ".consumes",
            expected: "(Array<string> | undefined)",
            value: input.consumes
        })) && input.consumes.map(((elem, _index83) => "string" === typeof elem || _report(_exceptionable, {
            path: _path + ".consumes[" + _index83 + "]",
            expected: "string",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".consumes",
            expected: "(Array<string> | undefined)",
            value: input.consumes
        }), undefined === input.produces || (Array.isArray(input.produces) || _report(_exceptionable, {
            path: _path + ".produces",
            expected: "(Array<string> | undefined)",
            value: input.produces
        })) && input.produces.map(((elem, _index84) => "string" === typeof elem || _report(_exceptionable, {
            path: _path + ".produces[" + _index84 + "]",
            expected: "string",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".produces",
            expected: "(Array<string> | undefined)",
            value: input.produces
        }), undefined === input.definitions || ("object" === typeof input.definitions && null !== input.definitions && false === Array.isArray(input.definitions) || _report(_exceptionable, {
            path: _path + ".definitions",
            expected: "(Record<string, SwaggerV2.IJsonSchema> | undefined)",
            value: input.definitions
        })) && _vo4(input.definitions, _path + ".definitions", _exceptionable) || _report(_exceptionable, {
            path: _path + ".definitions",
            expected: "(Record<string, SwaggerV2.IJsonSchema> | undefined)",
            value: input.definitions
        }), undefined === input.parameters || ("object" === typeof input.parameters && null !== input.parameters && false === Array.isArray(input.parameters) || _report(_exceptionable, {
            path: _path + ".parameters",
            expected: "(Record<string, SwaggerV2.IOperation.IParameter> | undefined)",
            value: input.parameters
        })) && _vo16(input.parameters, _path + ".parameters", _exceptionable) || _report(_exceptionable, {
            path: _path + ".parameters",
            expected: "(Record<string, SwaggerV2.IOperation.IParameter> | undefined)",
            value: input.parameters
        }), undefined === input.responses || ("object" === typeof input.responses && null !== input.responses && false === Array.isArray(input.responses) || _report(_exceptionable, {
            path: _path + ".responses",
            expected: "(Record<string, SwaggerV2.IOperation.IResponse> | undefined)",
            value: input.responses
        })) && _vo29(input.responses, _path + ".responses", _exceptionable) || _report(_exceptionable, {
            path: _path + ".responses",
            expected: "(Record<string, SwaggerV2.IOperation.IResponse> | undefined)",
            value: input.responses
        }), undefined === input.securityDefinitions || ("object" === typeof input.securityDefinitions && null !== input.securityDefinitions && false === Array.isArray(input.securityDefinitions) || _report(_exceptionable, {
            path: _path + ".securityDefinitions",
            expected: "(Record<string, SwaggerV2.ISecurityDefinition> | undefined)",
            value: input.securityDefinitions
        })) && _vo31(input.securityDefinitions, _path + ".securityDefinitions", _exceptionable) || _report(_exceptionable, {
            path: _path + ".securityDefinitions",
            expected: "(Record<string, SwaggerV2.ISecurityDefinition> | undefined)",
            value: input.securityDefinitions
        }), undefined === input.security || (Array.isArray(input.security) || _report(_exceptionable, {
            path: _path + ".security",
            expected: "(Array<Record<string, Array<string>>> | undefined)",
            value: input.security
        })) && input.security.map(((elem, _index85) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
            path: _path + ".security[" + _index85 + "]",
            expected: "Record<string, Array<string>>",
            value: elem
        })) && _vo39(elem, _path + ".security[" + _index85 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".security[" + _index85 + "]",
            expected: "Record<string, Array<string>>",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".security",
            expected: "(Array<Record<string, Array<string>>> | undefined)",
            value: input.security
        }), undefined === input.paths || ("object" === typeof input.paths && null !== input.paths && false === Array.isArray(input.paths) || _report(_exceptionable, {
            path: _path + ".paths",
            expected: "(Record<string, SwaggerV2.IPath> | undefined)",
            value: input.paths
        })) && _vo40(input.paths, _path + ".paths", _exceptionable) || _report(_exceptionable, {
            path: _path + ".paths",
            expected: "(Record<string, SwaggerV2.IPath> | undefined)",
            value: input.paths
        }), undefined === input.tags || (Array.isArray(input.tags) || _report(_exceptionable, {
            path: _path + ".tags",
            expected: "(Array<SwaggerV2.IDocument.ITag> | undefined)",
            value: input.tags
        })) && input.tags.map(((elem, _index86) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
            path: _path + ".tags[" + _index86 + "]",
            expected: "SwaggerV2.IDocument.ITag",
            value: elem
        })) && _vo47(elem, _path + ".tags[" + _index86 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".tags[" + _index86 + "]",
            expected: "SwaggerV2.IDocument.ITag",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".tags",
            expected: "(Array<SwaggerV2.IDocument.ITag> | undefined)",
            value: input.tags
        }) ].every((flag => flag));
        const _vo1 = (input, _path, _exceptionable = true) => [ "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "string",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.termsOfService || "string" === typeof input.termsOfService || _report(_exceptionable, {
            path: _path + ".termsOfService",
            expected: "(string | undefined)",
            value: input.termsOfService
        }), undefined === input.contact || ("object" === typeof input.contact && null !== input.contact && false === Array.isArray(input.contact) || _report(_exceptionable, {
            path: _path + ".contact",
            expected: "(SwaggerV2.IDocument.IContact | undefined)",
            value: input.contact
        })) && _vo2(input.contact, _path + ".contact", _exceptionable) || _report(_exceptionable, {
            path: _path + ".contact",
            expected: "(SwaggerV2.IDocument.IContact | undefined)",
            value: input.contact
        }), undefined === input.license || ("object" === typeof input.license && null !== input.license || _report(_exceptionable, {
            path: _path + ".license",
            expected: "(SwaggerV2.IDocument.ILicense | undefined)",
            value: input.license
        })) && _vo3(input.license, _path + ".license", _exceptionable) || _report(_exceptionable, {
            path: _path + ".license",
            expected: "(SwaggerV2.IDocument.ILicense | undefined)",
            value: input.license
        }), "string" === typeof input.version || _report(_exceptionable, {
            path: _path + ".version",
            expected: "string",
            value: input.version
        }) ].every((flag => flag));
        const _vo2 = (input, _path, _exceptionable = true) => [ undefined === input.name || "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "(string | undefined)",
            value: input.name
        }), undefined === input.url || "string" === typeof input.url || _report(_exceptionable, {
            path: _path + ".url",
            expected: "(string | undefined)",
            value: input.url
        }), undefined === input.email || "string" === typeof input.email || _report(_exceptionable, {
            path: _path + ".email",
            expected: "(string | undefined)",
            value: input.email
        }) ].every((flag => flag));
        const _vo3 = (input, _path, _exceptionable = true) => [ "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "string",
            value: input.name
        }), undefined === input.url || "string" === typeof input.url || _report(_exceptionable, {
            path: _path + ".url",
            expected: "(string | undefined)",
            value: input.url
        }) ].every((flag => flag));
        const _vo4 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown)",
                value
            })) && _vu0(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown)",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo5 = (input, _path, _exceptionable = true) => [ null === input["default"] || undefined === input["default"] || "boolean" === typeof input["default"] || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: "(boolean | null | undefined)",
            value: input["default"]
        }), undefined === input["enum"] || (Array.isArray(input["enum"]) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<boolean | null> | undefined)",
            value: input["enum"]
        })) && input["enum"].map(((elem, _index87) => null === elem || "boolean" === typeof elem || _report(_exceptionable, {
            path: _path + '["enum"][' + _index87 + "]",
            expected: "(boolean | null)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<boolean | null> | undefined)",
            value: input["enum"]
        }), "boolean" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"boolean"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"] || _report(_exceptionable, {
            path: _path + '["x-nullable"]',
            expected: "(boolean | undefined)",
            value: input["x-nullable"]
        }), undefined === input.examples || Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }) ].every((flag => flag));
        const _vo6 = (input, _path, _exceptionable = true) => [ null === input["default"] || undefined === input["default"] || "number" === typeof input["default"] && (Math.floor(input["default"]) === input["default"] && -0x8000000000000000 <= input["default"] && input["default"] <= 0x8000000000000000 || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: 'number & Type<"int64">',
            value: input["default"]
        })) || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: '((number & Type<"int64">) | null | undefined)',
            value: input["default"]
        }), undefined === input["enum"] || (Array.isArray(input["enum"]) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<number | null> | undefined)",
            value: input["enum"]
        })) && input["enum"].map(((elem, _index88) => null === elem || "number" === typeof elem || _report(_exceptionable, {
            path: _path + '["enum"][' + _index88 + "]",
            expected: "(null | number)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<number | null> | undefined)",
            value: input["enum"]
        }), undefined === input.minimum || "number" === typeof input.minimum && (Math.floor(input.minimum) === input.minimum && -0x8000000000000000 <= input.minimum && input.minimum <= 0x8000000000000000 || _report(_exceptionable, {
            path: _path + ".minimum",
            expected: 'number & Type<"int64">',
            value: input.minimum
        })) || _report(_exceptionable, {
            path: _path + ".minimum",
            expected: '((number & Type<"int64">) | undefined)',
            value: input.minimum
        }), undefined === input.maximum || "number" === typeof input.maximum && (Math.floor(input.maximum) === input.maximum && -0x8000000000000000 <= input.maximum && input.maximum <= 0x8000000000000000 || _report(_exceptionable, {
            path: _path + ".maximum",
            expected: 'number & Type<"int64">',
            value: input.maximum
        })) || _report(_exceptionable, {
            path: _path + ".maximum",
            expected: '((number & Type<"int64">) | undefined)',
            value: input.maximum
        }), undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum || _report(_exceptionable, {
            path: _path + ".exclusiveMinimum",
            expected: "(boolean | number | undefined)",
            value: input.exclusiveMinimum
        }), undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum || _report(_exceptionable, {
            path: _path + ".exclusiveMaximum",
            expected: "(boolean | number | undefined)",
            value: input.exclusiveMaximum
        }), undefined === input.multipleOf || "number" === typeof input.multipleOf && (Math.floor(input.multipleOf) === input.multipleOf && 0 <= input.multipleOf && input.multipleOf <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".multipleOf",
            expected: 'number & Type<"uint64">',
            value: input.multipleOf
        })) && (0 < input.multipleOf || _report(_exceptionable, {
            path: _path + ".multipleOf",
            expected: "number & ExclusiveMinimum<0>",
            value: input.multipleOf
        })) || _report(_exceptionable, {
            path: _path + ".multipleOf",
            expected: '((number & Type<"uint64"> & ExclusiveMinimum<0>) | undefined)',
            value: input.multipleOf
        }), "integer" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"integer"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"] || _report(_exceptionable, {
            path: _path + '["x-nullable"]',
            expected: "(boolean | undefined)",
            value: input["x-nullable"]
        }), undefined === input.examples || Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }) ].every((flag => flag));
        const _vo7 = (input, _path, _exceptionable = true) => [ null === input["default"] || undefined === input["default"] || "number" === typeof input["default"] || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: "(null | number | undefined)",
            value: input["default"]
        }), undefined === input["enum"] || (Array.isArray(input["enum"]) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<number | null> | undefined)",
            value: input["enum"]
        })) && input["enum"].map(((elem, _index89) => null === elem || "number" === typeof elem || _report(_exceptionable, {
            path: _path + '["enum"][' + _index89 + "]",
            expected: "(null | number)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<number | null> | undefined)",
            value: input["enum"]
        }), undefined === input.minimum || "number" === typeof input.minimum || _report(_exceptionable, {
            path: _path + ".minimum",
            expected: "(number | undefined)",
            value: input.minimum
        }), undefined === input.maximum || "number" === typeof input.maximum || _report(_exceptionable, {
            path: _path + ".maximum",
            expected: "(number | undefined)",
            value: input.maximum
        }), undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum || _report(_exceptionable, {
            path: _path + ".exclusiveMinimum",
            expected: "(boolean | number | undefined)",
            value: input.exclusiveMinimum
        }), undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum || _report(_exceptionable, {
            path: _path + ".exclusiveMaximum",
            expected: "(boolean | number | undefined)",
            value: input.exclusiveMaximum
        }), undefined === input.multipleOf || "number" === typeof input.multipleOf && (0 < input.multipleOf || _report(_exceptionable, {
            path: _path + ".multipleOf",
            expected: "number & ExclusiveMinimum<0>",
            value: input.multipleOf
        })) || _report(_exceptionable, {
            path: _path + ".multipleOf",
            expected: "((number & ExclusiveMinimum<0>) | undefined)",
            value: input.multipleOf
        }), "number" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"number"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"] || _report(_exceptionable, {
            path: _path + '["x-nullable"]',
            expected: "(boolean | undefined)",
            value: input["x-nullable"]
        }), undefined === input.examples || Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }) ].every((flag => flag));
        const _vo8 = (input, _path, _exceptionable = true) => [ null === input["default"] || undefined === input["default"] || "string" === typeof input["default"] || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: "(null | string | undefined)",
            value: input["default"]
        }), undefined === input["enum"] || (Array.isArray(input["enum"]) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<string | null> | undefined)",
            value: input["enum"]
        })) && input["enum"].map(((elem, _index90) => null === elem || "string" === typeof elem || _report(_exceptionable, {
            path: _path + '["enum"][' + _index90 + "]",
            expected: "(null | string)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<string | null> | undefined)",
            value: input["enum"]
        }), undefined === input.format || "string" === typeof input.format || _report(_exceptionable, {
            path: _path + ".format",
            expected: "(string | undefined)",
            value: input.format
        }), undefined === input.pattern || "string" === typeof input.pattern || _report(_exceptionable, {
            path: _path + ".pattern",
            expected: "(string | undefined)",
            value: input.pattern
        }), undefined === input.minLength || "number" === typeof input.minLength && (Math.floor(input.minLength) === input.minLength && 0 <= input.minLength && input.minLength <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".minLength",
            expected: 'number & Type<"uint64">',
            value: input.minLength
        })) || _report(_exceptionable, {
            path: _path + ".minLength",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.minLength
        }), undefined === input.maxLength || "number" === typeof input.maxLength && (Math.floor(input.maxLength) === input.maxLength && 0 <= input.maxLength && input.maxLength <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".maxLength",
            expected: 'number & Type<"uint64">',
            value: input.maxLength
        })) || _report(_exceptionable, {
            path: _path + ".maxLength",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.maxLength
        }), "string" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"string"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"] || _report(_exceptionable, {
            path: _path + '["x-nullable"]',
            expected: "(boolean | undefined)",
            value: input["x-nullable"]
        }), undefined === input.examples || Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }) ].every((flag => flag));
        const _vo9 = (input, _path, _exceptionable = true) => [ ("object" === typeof input.items && null !== input.items && false === Array.isArray(input.items) || _report(_exceptionable, {
            path: _path + ".items",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown)",
            value: input.items
        })) && _vu0(input.items, _path + ".items", _exceptionable) || _report(_exceptionable, {
            path: _path + ".items",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown)",
            value: input.items
        }), undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems || _report(_exceptionable, {
            path: _path + ".uniqueItems",
            expected: "(boolean | undefined)",
            value: input.uniqueItems
        }), undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".minItems",
            expected: 'number & Type<"uint64">',
            value: input.minItems
        })) || _report(_exceptionable, {
            path: _path + ".minItems",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.minItems
        }), undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".maxItems",
            expected: 'number & Type<"uint64">',
            value: input.maxItems
        })) || _report(_exceptionable, {
            path: _path + ".maxItems",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.maxItems
        }), "array" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"array"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"] || _report(_exceptionable, {
            path: _path + '["x-nullable"]',
            expected: "(boolean | undefined)",
            value: input["x-nullable"]
        }), undefined === input.examples || Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }) ].every((flag => flag));
        const _vo10 = (input, _path, _exceptionable = true) => [ undefined === input.properties || ("object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) || _report(_exceptionable, {
            path: _path + ".properties",
            expected: "(Record<string, SwaggerV2.IJsonSchema> | undefined)",
            value: input.properties
        })) && _vo4(input.properties, _path + ".properties", _exceptionable) || _report(_exceptionable, {
            path: _path + ".properties",
            expected: "(Record<string, SwaggerV2.IJsonSchema> | undefined)",
            value: input.properties
        }), undefined === input.required || (Array.isArray(input.required) || _report(_exceptionable, {
            path: _path + ".required",
            expected: "(Array<string> | undefined)",
            value: input.required
        })) && input.required.map(((elem, _index91) => "string" === typeof elem || _report(_exceptionable, {
            path: _path + ".required[" + _index91 + "]",
            expected: "string",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".required",
            expected: "(Array<string> | undefined)",
            value: input.required
        }), (null !== input.additionalProperties || _report(_exceptionable, {
            path: _path + ".additionalProperties",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalProperties
        })) && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || ("object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) || _report(_exceptionable, {
            path: _path + ".additionalProperties",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalProperties
        })) && _vu0(input.additionalProperties, _path + ".additionalProperties", _exceptionable) || _report(_exceptionable, {
            path: _path + ".additionalProperties",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalProperties
        })), undefined === input.maxProperties || "number" === typeof input.maxProperties || _report(_exceptionable, {
            path: _path + ".maxProperties",
            expected: "(number | undefined)",
            value: input.maxProperties
        }), undefined === input.minProperties || "number" === typeof input.minProperties || _report(_exceptionable, {
            path: _path + ".minProperties",
            expected: "(number | undefined)",
            value: input.minProperties
        }), "object" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"object"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"] || _report(_exceptionable, {
            path: _path + '["x-nullable"]',
            expected: "(boolean | undefined)",
            value: input["x-nullable"]
        }), undefined === input.examples || Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }) ].every((flag => flag));
        const _vo11 = (input, _path, _exceptionable = true) => [ "string" === typeof input.$ref || _report(_exceptionable, {
            path: _path + ".$ref",
            expected: "string",
            value: input.$ref
        }), undefined === input.examples || Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true ].every((flag => flag));
        const _vo12 = (input, _path, _exceptionable = true) => [ (Array.isArray(input["x-anyOf"]) || _report(_exceptionable, {
            path: _path + '["x-anyOf"]',
            expected: "Array<SwaggerV2.IJsonSchema>",
            value: input["x-anyOf"]
        })) && input["x-anyOf"].map(((elem, _index92) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
            path: _path + '["x-anyOf"][' + _index92 + "]",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown)",
            value: elem
        })) && _vu0(elem, _path + '["x-anyOf"][' + _index92 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + '["x-anyOf"][' + _index92 + "]",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + '["x-anyOf"]',
            expected: "Array<SwaggerV2.IJsonSchema>",
            value: input["x-anyOf"]
        }), undefined === input.examples || Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true ].every((flag => flag));
        const _vo13 = (input, _path, _exceptionable = true) => [ (Array.isArray(input["x-oneOf"]) || _report(_exceptionable, {
            path: _path + '["x-oneOf"]',
            expected: "Array<SwaggerV2.IJsonSchema>",
            value: input["x-oneOf"]
        })) && input["x-oneOf"].map(((elem, _index93) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
            path: _path + '["x-oneOf"][' + _index93 + "]",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown)",
            value: elem
        })) && _vu0(elem, _path + '["x-oneOf"][' + _index93 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + '["x-oneOf"][' + _index93 + "]",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + '["x-oneOf"]',
            expected: "Array<SwaggerV2.IJsonSchema>",
            value: input["x-oneOf"]
        }), undefined === input.examples || Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true ].every((flag => flag));
        const _vo14 = (input, _path, _exceptionable = true) => [ "null" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"null"',
            value: input.type
        }), null === input["default"] || undefined === input["default"] || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: "(null | undefined)",
            value: input["default"]
        }), undefined === input.examples || Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true ].every((flag => flag));
        const _vo15 = (input, _path, _exceptionable = true) => [ (null !== input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: "undefined",
            value: input.type
        })) && (undefined === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: "undefined",
            value: input.type
        })), undefined === input.examples || Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true ].every((flag => flag));
        const _vo16 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(IAnyOf & { name: string; in: string; description?: string | undefined; } | IArray & { name: string; in: string; description?: string | undefined; } | IBoolean & { name: string; in: string; description?: string | undefined; } | IInteger & { name: string; in: string; description?: string | undefined; } | INullOnly & { name: string; in: string; description?: string | undefined; } | INumber & { name: string; in: string; description?: string | undefined; } | IObject & { name: string; in: string; description?: string | undefined; } | IOneOf & { name: string; in: string; description?: string | undefined; } | IReference<string> & { name: string; in: string; description?: string | undefined; } | IString & { name: string; in: string; description?: string | undefined; } | IUnknown & { name: string; in: string; description?: string | undefined; } | SwaggerV2.IOperation.IBodyParameter)",
                value
            })) && _vu9(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(IAnyOf & { name: string; in: string; description?: string | undefined; } | IArray & { name: string; in: string; description?: string | undefined; } | IBoolean & { name: string; in: string; description?: string | undefined; } | IInteger & { name: string; in: string; description?: string | undefined; } | INullOnly & { name: string; in: string; description?: string | undefined; } | INumber & { name: string; in: string; description?: string | undefined; } | IObject & { name: string; in: string; description?: string | undefined; } | IOneOf & { name: string; in: string; description?: string | undefined; } | IReference<string> & { name: string; in: string; description?: string | undefined; } | IString & { name: string; in: string; description?: string | undefined; } | IUnknown & { name: string; in: string; description?: string | undefined; } | SwaggerV2.IOperation.IBodyParameter)",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo17 = (input, _path, _exceptionable = true) => [ null === input["default"] || undefined === input["default"] || "boolean" === typeof input["default"] || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: "(boolean | null | undefined)",
            value: input["default"]
        }), undefined === input["enum"] || (Array.isArray(input["enum"]) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<boolean | null> | undefined)",
            value: input["enum"]
        })) && input["enum"].map(((elem, _index94) => null === elem || "boolean" === typeof elem || _report(_exceptionable, {
            path: _path + '["enum"][' + _index94 + "]",
            expected: "(boolean | null)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<boolean | null> | undefined)",
            value: input["enum"]
        }), "boolean" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"boolean"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"] || _report(_exceptionable, {
            path: _path + '["x-nullable"]',
            expected: "(boolean | undefined)",
            value: input["x-nullable"]
        }), undefined === input.examples || Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }), "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "string",
            value: input.name
        }), "string" === typeof input["in"] || _report(_exceptionable, {
            path: _path + '["in"]',
            expected: "string",
            value: input["in"]
        }) ].every((flag => flag));
        const _vo18 = (input, _path, _exceptionable = true) => [ null === input["default"] || undefined === input["default"] || "number" === typeof input["default"] && (Math.floor(input["default"]) === input["default"] && -0x8000000000000000 <= input["default"] && input["default"] <= 0x8000000000000000 || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: 'number & Type<"int64">',
            value: input["default"]
        })) || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: '((number & Type<"int64">) | null | undefined)',
            value: input["default"]
        }), undefined === input["enum"] || (Array.isArray(input["enum"]) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<number | null> | undefined)",
            value: input["enum"]
        })) && input["enum"].map(((elem, _index95) => null === elem || "number" === typeof elem || _report(_exceptionable, {
            path: _path + '["enum"][' + _index95 + "]",
            expected: "(null | number)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<number | null> | undefined)",
            value: input["enum"]
        }), undefined === input.minimum || "number" === typeof input.minimum && (Math.floor(input.minimum) === input.minimum && -0x8000000000000000 <= input.minimum && input.minimum <= 0x8000000000000000 || _report(_exceptionable, {
            path: _path + ".minimum",
            expected: 'number & Type<"int64">',
            value: input.minimum
        })) || _report(_exceptionable, {
            path: _path + ".minimum",
            expected: '((number & Type<"int64">) | undefined)',
            value: input.minimum
        }), undefined === input.maximum || "number" === typeof input.maximum && (Math.floor(input.maximum) === input.maximum && -0x8000000000000000 <= input.maximum && input.maximum <= 0x8000000000000000 || _report(_exceptionable, {
            path: _path + ".maximum",
            expected: 'number & Type<"int64">',
            value: input.maximum
        })) || _report(_exceptionable, {
            path: _path + ".maximum",
            expected: '((number & Type<"int64">) | undefined)',
            value: input.maximum
        }), undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum || _report(_exceptionable, {
            path: _path + ".exclusiveMinimum",
            expected: "(boolean | number | undefined)",
            value: input.exclusiveMinimum
        }), undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum || _report(_exceptionable, {
            path: _path + ".exclusiveMaximum",
            expected: "(boolean | number | undefined)",
            value: input.exclusiveMaximum
        }), undefined === input.multipleOf || "number" === typeof input.multipleOf && (Math.floor(input.multipleOf) === input.multipleOf && 0 <= input.multipleOf && input.multipleOf <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".multipleOf",
            expected: 'number & Type<"uint64">',
            value: input.multipleOf
        })) && (0 < input.multipleOf || _report(_exceptionable, {
            path: _path + ".multipleOf",
            expected: "number & ExclusiveMinimum<0>",
            value: input.multipleOf
        })) || _report(_exceptionable, {
            path: _path + ".multipleOf",
            expected: '((number & Type<"uint64"> & ExclusiveMinimum<0>) | undefined)',
            value: input.multipleOf
        }), "integer" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"integer"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"] || _report(_exceptionable, {
            path: _path + '["x-nullable"]',
            expected: "(boolean | undefined)",
            value: input["x-nullable"]
        }), undefined === input.examples || Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }), "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "string",
            value: input.name
        }), "string" === typeof input["in"] || _report(_exceptionable, {
            path: _path + '["in"]',
            expected: "string",
            value: input["in"]
        }) ].every((flag => flag));
        const _vo19 = (input, _path, _exceptionable = true) => [ null === input["default"] || undefined === input["default"] || "number" === typeof input["default"] || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: "(null | number | undefined)",
            value: input["default"]
        }), undefined === input["enum"] || (Array.isArray(input["enum"]) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<number | null> | undefined)",
            value: input["enum"]
        })) && input["enum"].map(((elem, _index96) => null === elem || "number" === typeof elem || _report(_exceptionable, {
            path: _path + '["enum"][' + _index96 + "]",
            expected: "(null | number)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<number | null> | undefined)",
            value: input["enum"]
        }), undefined === input.minimum || "number" === typeof input.minimum || _report(_exceptionable, {
            path: _path + ".minimum",
            expected: "(number | undefined)",
            value: input.minimum
        }), undefined === input.maximum || "number" === typeof input.maximum || _report(_exceptionable, {
            path: _path + ".maximum",
            expected: "(number | undefined)",
            value: input.maximum
        }), undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum || _report(_exceptionable, {
            path: _path + ".exclusiveMinimum",
            expected: "(boolean | number | undefined)",
            value: input.exclusiveMinimum
        }), undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum || _report(_exceptionable, {
            path: _path + ".exclusiveMaximum",
            expected: "(boolean | number | undefined)",
            value: input.exclusiveMaximum
        }), undefined === input.multipleOf || "number" === typeof input.multipleOf && (0 < input.multipleOf || _report(_exceptionable, {
            path: _path + ".multipleOf",
            expected: "number & ExclusiveMinimum<0>",
            value: input.multipleOf
        })) || _report(_exceptionable, {
            path: _path + ".multipleOf",
            expected: "((number & ExclusiveMinimum<0>) | undefined)",
            value: input.multipleOf
        }), "number" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"number"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"] || _report(_exceptionable, {
            path: _path + '["x-nullable"]',
            expected: "(boolean | undefined)",
            value: input["x-nullable"]
        }), undefined === input.examples || Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }), "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "string",
            value: input.name
        }), "string" === typeof input["in"] || _report(_exceptionable, {
            path: _path + '["in"]',
            expected: "string",
            value: input["in"]
        }) ].every((flag => flag));
        const _vo20 = (input, _path, _exceptionable = true) => [ null === input["default"] || undefined === input["default"] || "string" === typeof input["default"] || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: "(null | string | undefined)",
            value: input["default"]
        }), undefined === input["enum"] || (Array.isArray(input["enum"]) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<string | null> | undefined)",
            value: input["enum"]
        })) && input["enum"].map(((elem, _index97) => null === elem || "string" === typeof elem || _report(_exceptionable, {
            path: _path + '["enum"][' + _index97 + "]",
            expected: "(null | string)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<string | null> | undefined)",
            value: input["enum"]
        }), undefined === input.format || "string" === typeof input.format || _report(_exceptionable, {
            path: _path + ".format",
            expected: "(string | undefined)",
            value: input.format
        }), undefined === input.pattern || "string" === typeof input.pattern || _report(_exceptionable, {
            path: _path + ".pattern",
            expected: "(string | undefined)",
            value: input.pattern
        }), undefined === input.minLength || "number" === typeof input.minLength && (Math.floor(input.minLength) === input.minLength && 0 <= input.minLength && input.minLength <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".minLength",
            expected: 'number & Type<"uint64">',
            value: input.minLength
        })) || _report(_exceptionable, {
            path: _path + ".minLength",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.minLength
        }), undefined === input.maxLength || "number" === typeof input.maxLength && (Math.floor(input.maxLength) === input.maxLength && 0 <= input.maxLength && input.maxLength <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".maxLength",
            expected: 'number & Type<"uint64">',
            value: input.maxLength
        })) || _report(_exceptionable, {
            path: _path + ".maxLength",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.maxLength
        }), "string" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"string"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"] || _report(_exceptionable, {
            path: _path + '["x-nullable"]',
            expected: "(boolean | undefined)",
            value: input["x-nullable"]
        }), undefined === input.examples || Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }), "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "string",
            value: input.name
        }), "string" === typeof input["in"] || _report(_exceptionable, {
            path: _path + '["in"]',
            expected: "string",
            value: input["in"]
        }) ].every((flag => flag));
        const _vo21 = (input, _path, _exceptionable = true) => [ ("object" === typeof input.items && null !== input.items && false === Array.isArray(input.items) || _report(_exceptionable, {
            path: _path + ".items",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown)",
            value: input.items
        })) && _vu0(input.items, _path + ".items", _exceptionable) || _report(_exceptionable, {
            path: _path + ".items",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown)",
            value: input.items
        }), undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems || _report(_exceptionable, {
            path: _path + ".uniqueItems",
            expected: "(boolean | undefined)",
            value: input.uniqueItems
        }), undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".minItems",
            expected: 'number & Type<"uint64">',
            value: input.minItems
        })) || _report(_exceptionable, {
            path: _path + ".minItems",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.minItems
        }), undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".maxItems",
            expected: 'number & Type<"uint64">',
            value: input.maxItems
        })) || _report(_exceptionable, {
            path: _path + ".maxItems",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.maxItems
        }), "array" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"array"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"] || _report(_exceptionable, {
            path: _path + '["x-nullable"]',
            expected: "(boolean | undefined)",
            value: input["x-nullable"]
        }), undefined === input.examples || Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }), "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "string",
            value: input.name
        }), "string" === typeof input["in"] || _report(_exceptionable, {
            path: _path + '["in"]',
            expected: "string",
            value: input["in"]
        }) ].every((flag => flag));
        const _vo22 = (input, _path, _exceptionable = true) => [ undefined === input.properties || ("object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) || _report(_exceptionable, {
            path: _path + ".properties",
            expected: "(Record<string, SwaggerV2.IJsonSchema> | undefined)",
            value: input.properties
        })) && _vo4(input.properties, _path + ".properties", _exceptionable) || _report(_exceptionable, {
            path: _path + ".properties",
            expected: "(Record<string, SwaggerV2.IJsonSchema> | undefined)",
            value: input.properties
        }), undefined === input.required || (Array.isArray(input.required) || _report(_exceptionable, {
            path: _path + ".required",
            expected: "(Array<string> | undefined)",
            value: input.required
        })) && input.required.map(((elem, _index98) => "string" === typeof elem || _report(_exceptionable, {
            path: _path + ".required[" + _index98 + "]",
            expected: "string",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".required",
            expected: "(Array<string> | undefined)",
            value: input.required
        }), (null !== input.additionalProperties || _report(_exceptionable, {
            path: _path + ".additionalProperties",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalProperties
        })) && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || ("object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) || _report(_exceptionable, {
            path: _path + ".additionalProperties",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalProperties
        })) && _vu0(input.additionalProperties, _path + ".additionalProperties", _exceptionable) || _report(_exceptionable, {
            path: _path + ".additionalProperties",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalProperties
        })), undefined === input.maxProperties || "number" === typeof input.maxProperties || _report(_exceptionable, {
            path: _path + ".maxProperties",
            expected: "(number | undefined)",
            value: input.maxProperties
        }), undefined === input.minProperties || "number" === typeof input.minProperties || _report(_exceptionable, {
            path: _path + ".minProperties",
            expected: "(number | undefined)",
            value: input.minProperties
        }), "object" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"object"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"] || _report(_exceptionable, {
            path: _path + '["x-nullable"]',
            expected: "(boolean | undefined)",
            value: input["x-nullable"]
        }), undefined === input.examples || Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }), "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "string",
            value: input.name
        }), "string" === typeof input["in"] || _report(_exceptionable, {
            path: _path + '["in"]',
            expected: "string",
            value: input["in"]
        }) ].every((flag => flag));
        const _vo23 = (input, _path, _exceptionable = true) => [ "string" === typeof input.$ref || _report(_exceptionable, {
            path: _path + ".$ref",
            expected: "string",
            value: input.$ref
        }), undefined === input.examples || Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "string",
            value: input.name
        }), "string" === typeof input["in"] || _report(_exceptionable, {
            path: _path + '["in"]',
            expected: "string",
            value: input["in"]
        }) ].every((flag => flag));
        const _vo24 = (input, _path, _exceptionable = true) => [ (Array.isArray(input["x-anyOf"]) || _report(_exceptionable, {
            path: _path + '["x-anyOf"]',
            expected: "Array<SwaggerV2.IJsonSchema>",
            value: input["x-anyOf"]
        })) && input["x-anyOf"].map(((elem, _index99) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
            path: _path + '["x-anyOf"][' + _index99 + "]",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown)",
            value: elem
        })) && _vu0(elem, _path + '["x-anyOf"][' + _index99 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + '["x-anyOf"][' + _index99 + "]",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + '["x-anyOf"]',
            expected: "Array<SwaggerV2.IJsonSchema>",
            value: input["x-anyOf"]
        }), undefined === input.examples || Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "string",
            value: input.name
        }), "string" === typeof input["in"] || _report(_exceptionable, {
            path: _path + '["in"]',
            expected: "string",
            value: input["in"]
        }) ].every((flag => flag));
        const _vo25 = (input, _path, _exceptionable = true) => [ (Array.isArray(input["x-oneOf"]) || _report(_exceptionable, {
            path: _path + '["x-oneOf"]',
            expected: "Array<SwaggerV2.IJsonSchema>",
            value: input["x-oneOf"]
        })) && input["x-oneOf"].map(((elem, _index100) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
            path: _path + '["x-oneOf"][' + _index100 + "]",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown)",
            value: elem
        })) && _vu0(elem, _path + '["x-oneOf"][' + _index100 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + '["x-oneOf"][' + _index100 + "]",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + '["x-oneOf"]',
            expected: "Array<SwaggerV2.IJsonSchema>",
            value: input["x-oneOf"]
        }), undefined === input.examples || Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "string",
            value: input.name
        }), "string" === typeof input["in"] || _report(_exceptionable, {
            path: _path + '["in"]',
            expected: "string",
            value: input["in"]
        }) ].every((flag => flag));
        const _vo26 = (input, _path, _exceptionable = true) => [ "null" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"null"',
            value: input.type
        }), null === input["default"] || undefined === input["default"] || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: "(null | undefined)",
            value: input["default"]
        }), undefined === input.examples || Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "string",
            value: input.name
        }), "string" === typeof input["in"] || _report(_exceptionable, {
            path: _path + '["in"]',
            expected: "string",
            value: input["in"]
        }) ].every((flag => flag));
        const _vo27 = (input, _path, _exceptionable = true) => [ (null !== input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: "undefined",
            value: input.type
        })) && (undefined === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: "undefined",
            value: input.type
        })), undefined === input.examples || Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "string",
            value: input.name
        }), "string" === typeof input["in"] || _report(_exceptionable, {
            path: _path + '["in"]',
            expected: "string",
            value: input["in"]
        }) ].every((flag => flag));
        const _vo28 = (input, _path, _exceptionable = true) => [ ("object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) || _report(_exceptionable, {
            path: _path + ".schema",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown)",
            value: input.schema
        })) && _vu0(input.schema, _path + ".schema", _exceptionable) || _report(_exceptionable, {
            path: _path + ".schema",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown)",
            value: input.schema
        }), "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "string",
            value: input.name
        }), "string" === typeof input["in"] || _report(_exceptionable, {
            path: _path + '["in"]',
            expected: "string",
            value: input["in"]
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.required || "boolean" === typeof input.required || _report(_exceptionable, {
            path: _path + ".required",
            expected: "(boolean | undefined)",
            value: input.required
        }) ].every((flag => flag));
        const _vo29 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "SwaggerV2.IOperation.IResponse",
                value
            })) && _vo30(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "SwaggerV2.IOperation.IResponse",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo30 = (input, _path, _exceptionable = true) => [ undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.headers || ("object" === typeof input.headers && null !== input.headers && false === Array.isArray(input.headers) || _report(_exceptionable, {
            path: _path + ".headers",
            expected: "(Record<string, SwaggerV2.IJsonSchema> | undefined)",
            value: input.headers
        })) && _vo4(input.headers, _path + ".headers", _exceptionable) || _report(_exceptionable, {
            path: _path + ".headers",
            expected: "(Record<string, SwaggerV2.IJsonSchema> | undefined)",
            value: input.headers
        }), undefined === input.schema || ("object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) || _report(_exceptionable, {
            path: _path + ".schema",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown | undefined)",
            value: input.schema
        })) && _vu0(input.schema, _path + ".schema", _exceptionable) || _report(_exceptionable, {
            path: _path + ".schema",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown | undefined)",
            value: input.schema
        }), true ].every((flag => flag));
        const _vo31 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(SwaggerV2.ISecurityDefinition.IApiKey | SwaggerV2.ISecurityDefinition.IBasic | SwaggerV2.ISecurityDefinition.IOauth2AccessCode | SwaggerV2.ISecurityDefinition.IOauth2Application | SwaggerV2.ISecurityDefinition.IOauth2Implicit | SwaggerV2.ISecurityDefinition.IOauth2Password)",
                value
            })) && _vu10(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(SwaggerV2.ISecurityDefinition.IApiKey | SwaggerV2.ISecurityDefinition.IBasic | SwaggerV2.ISecurityDefinition.IOauth2AccessCode | SwaggerV2.ISecurityDefinition.IOauth2Application | SwaggerV2.ISecurityDefinition.IOauth2Implicit | SwaggerV2.ISecurityDefinition.IOauth2Password)",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo32 = (input, _path, _exceptionable = true) => [ "apiKey" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"apiKey"',
            value: input.type
        }), undefined === input["in"] || "query" === input["in"] || "header" === input["in"] || "cookie" === input["in"] || _report(_exceptionable, {
            path: _path + '["in"]',
            expected: '("cookie" | "header" | "query" | undefined)',
            value: input["in"]
        }), undefined === input.name || "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "(string | undefined)",
            value: input.name
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }) ].every((flag => flag));
        const _vo33 = (input, _path, _exceptionable = true) => [ "basic" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"basic"',
            value: input.type
        }), undefined === input.name || "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "(string | undefined)",
            value: input.name
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }) ].every((flag => flag));
        const _vo34 = (input, _path, _exceptionable = true) => [ "oauth2" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"oauth2"',
            value: input.type
        }), "implicit" === input.flow || _report(_exceptionable, {
            path: _path + ".flow",
            expected: '"implicit"',
            value: input.flow
        }), undefined === input.authorizationUrl || "string" === typeof input.authorizationUrl || _report(_exceptionable, {
            path: _path + ".authorizationUrl",
            expected: "(string | undefined)",
            value: input.authorizationUrl
        }), undefined === input.scopes || ("object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) || _report(_exceptionable, {
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        })) && _vo35(input.scopes, _path + ".scopes", _exceptionable) || _report(_exceptionable, {
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }) ].every((flag => flag));
        const _vo35 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "string" === typeof value || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "string",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo36 = (input, _path, _exceptionable = true) => [ "oauth2" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"oauth2"',
            value: input.type
        }), "accessCode" === input.flow || _report(_exceptionable, {
            path: _path + ".flow",
            expected: '"accessCode"',
            value: input.flow
        }), undefined === input.authorizationUrl || "string" === typeof input.authorizationUrl || _report(_exceptionable, {
            path: _path + ".authorizationUrl",
            expected: "(string | undefined)",
            value: input.authorizationUrl
        }), undefined === input.tokenUrl || "string" === typeof input.tokenUrl || _report(_exceptionable, {
            path: _path + ".tokenUrl",
            expected: "(string | undefined)",
            value: input.tokenUrl
        }), undefined === input.scopes || ("object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) || _report(_exceptionable, {
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        })) && _vo35(input.scopes, _path + ".scopes", _exceptionable) || _report(_exceptionable, {
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }) ].every((flag => flag));
        const _vo37 = (input, _path, _exceptionable = true) => [ "oauth2" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"oauth2"',
            value: input.type
        }), "password" === input.flow || _report(_exceptionable, {
            path: _path + ".flow",
            expected: '"password"',
            value: input.flow
        }), undefined === input.tokenUrl || "string" === typeof input.tokenUrl || _report(_exceptionable, {
            path: _path + ".tokenUrl",
            expected: "(string | undefined)",
            value: input.tokenUrl
        }), undefined === input.scopes || ("object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) || _report(_exceptionable, {
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        })) && _vo35(input.scopes, _path + ".scopes", _exceptionable) || _report(_exceptionable, {
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }) ].every((flag => flag));
        const _vo38 = (input, _path, _exceptionable = true) => [ "oauth2" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"oauth2"',
            value: input.type
        }), "application" === input.flow || _report(_exceptionable, {
            path: _path + ".flow",
            expected: '"application"',
            value: input.flow
        }), undefined === input.tokenUrl || "string" === typeof input.tokenUrl || _report(_exceptionable, {
            path: _path + ".tokenUrl",
            expected: "(string | undefined)",
            value: input.tokenUrl
        }), undefined === input.scopes || ("object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) || _report(_exceptionable, {
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        })) && _vo35(input.scopes, _path + ".scopes", _exceptionable) || _report(_exceptionable, {
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }) ].every((flag => flag));
        const _vo39 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return (Array.isArray(value) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "Array<string>",
                value
            })) && value.map(((elem, _index101) => "string" === typeof elem || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key) + "[" + _index101 + "]",
                expected: "string",
                value: elem
            }))).every((flag => flag)) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "Array<string>",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo40 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "SwaggerV2.IPath",
                value
            })) && _vo41(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "SwaggerV2.IPath",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo41 = (input, _path, _exceptionable = true) => [ undefined === input.parameters || (Array.isArray(input.parameters) || _report(_exceptionable, {
            path: _path + ".parameters",
            expected: "(Array<IParameter | IReference<`#/parameters/${string}`>> | undefined)",
            value: input.parameters
        })) && input.parameters.map(((elem, _index102) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
            path: _path + ".parameters[" + _index102 + "]",
            expected: "(IAnyOf & { name: string; in: string; description?: string | undefined; } | IArray & { name: string; in: string; description?: string | undefined; } | IBoolean & { name: string; in: string; description?: string | undefined; } | IInteger & { name: string; in: string; description?: string | undefined; } | INullOnly & { name: string; in: string; description?: string | undefined; } | INumber & { name: string; in: string; description?: string | undefined; } | IObject & { name: string; in: string; description?: string | undefined; } | IOneOf & { name: string; in: string; description?: string | undefined; } | IReference<string> & { name: string; in: string; description?: string | undefined; } | IString & { name: string; in: string; description?: string | undefined; } | IUnknown & { name: string; in: string; description?: string | undefined; } | SwaggerV2.IJsonSchema.IReference<`#/parameters/${string}`> | SwaggerV2.IOperation.IBodyParameter)",
            value: elem
        })) && _vu1(elem, _path + ".parameters[" + _index102 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".parameters[" + _index102 + "]",
            expected: "(IAnyOf & { name: string; in: string; description?: string | undefined; } | IArray & { name: string; in: string; description?: string | undefined; } | IBoolean & { name: string; in: string; description?: string | undefined; } | IInteger & { name: string; in: string; description?: string | undefined; } | INullOnly & { name: string; in: string; description?: string | undefined; } | INumber & { name: string; in: string; description?: string | undefined; } | IObject & { name: string; in: string; description?: string | undefined; } | IOneOf & { name: string; in: string; description?: string | undefined; } | IReference<string> & { name: string; in: string; description?: string | undefined; } | IString & { name: string; in: string; description?: string | undefined; } | IUnknown & { name: string; in: string; description?: string | undefined; } | SwaggerV2.IJsonSchema.IReference<`#/parameters/${string}`> | SwaggerV2.IOperation.IBodyParameter)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".parameters",
            expected: "(Array<IParameter | IReference<`#/parameters/${string}`>> | undefined)",
            value: input.parameters
        }), undefined === input.options || ("object" === typeof input.options && null !== input.options && false === Array.isArray(input.options) || _report(_exceptionable, {
            path: _path + ".options",
            expected: "(SwaggerV2.IOperation | undefined)",
            value: input.options
        })) && _vo43(input.options, _path + ".options", _exceptionable) || _report(_exceptionable, {
            path: _path + ".options",
            expected: "(SwaggerV2.IOperation | undefined)",
            value: input.options
        }), undefined === input.get || ("object" === typeof input.get && null !== input.get && false === Array.isArray(input.get) || _report(_exceptionable, {
            path: _path + ".get",
            expected: "(SwaggerV2.IOperation | undefined)",
            value: input.get
        })) && _vo43(input.get, _path + ".get", _exceptionable) || _report(_exceptionable, {
            path: _path + ".get",
            expected: "(SwaggerV2.IOperation | undefined)",
            value: input.get
        }), undefined === input.post || ("object" === typeof input.post && null !== input.post && false === Array.isArray(input.post) || _report(_exceptionable, {
            path: _path + ".post",
            expected: "(SwaggerV2.IOperation | undefined)",
            value: input.post
        })) && _vo43(input.post, _path + ".post", _exceptionable) || _report(_exceptionable, {
            path: _path + ".post",
            expected: "(SwaggerV2.IOperation | undefined)",
            value: input.post
        }), undefined === input.patch || ("object" === typeof input.patch && null !== input.patch && false === Array.isArray(input.patch) || _report(_exceptionable, {
            path: _path + ".patch",
            expected: "(SwaggerV2.IOperation | undefined)",
            value: input.patch
        })) && _vo43(input.patch, _path + ".patch", _exceptionable) || _report(_exceptionable, {
            path: _path + ".patch",
            expected: "(SwaggerV2.IOperation | undefined)",
            value: input.patch
        }), undefined === input.put || ("object" === typeof input.put && null !== input.put && false === Array.isArray(input.put) || _report(_exceptionable, {
            path: _path + ".put",
            expected: "(SwaggerV2.IOperation | undefined)",
            value: input.put
        })) && _vo43(input.put, _path + ".put", _exceptionable) || _report(_exceptionable, {
            path: _path + ".put",
            expected: "(SwaggerV2.IOperation | undefined)",
            value: input.put
        }), undefined === input["delete"] || ("object" === typeof input["delete"] && null !== input["delete"] && false === Array.isArray(input["delete"]) || _report(_exceptionable, {
            path: _path + '["delete"]',
            expected: "(SwaggerV2.IOperation | undefined)",
            value: input["delete"]
        })) && _vo43(input["delete"], _path + '["delete"]', _exceptionable) || _report(_exceptionable, {
            path: _path + '["delete"]',
            expected: "(SwaggerV2.IOperation | undefined)",
            value: input["delete"]
        }), undefined === input.head || ("object" === typeof input.head && null !== input.head && false === Array.isArray(input.head) || _report(_exceptionable, {
            path: _path + ".head",
            expected: "(SwaggerV2.IOperation | undefined)",
            value: input.head
        })) && _vo43(input.head, _path + ".head", _exceptionable) || _report(_exceptionable, {
            path: _path + ".head",
            expected: "(SwaggerV2.IOperation | undefined)",
            value: input.head
        }), undefined === input.trace || ("object" === typeof input.trace && null !== input.trace && false === Array.isArray(input.trace) || _report(_exceptionable, {
            path: _path + ".trace",
            expected: "(SwaggerV2.IOperation | undefined)",
            value: input.trace
        })) && _vo43(input.trace, _path + ".trace", _exceptionable) || _report(_exceptionable, {
            path: _path + ".trace",
            expected: "(SwaggerV2.IOperation | undefined)",
            value: input.trace
        }) ].every((flag => flag));
        const _vo42 = (input, _path, _exceptionable = true) => [ "string" === typeof input.$ref && RegExp(/^#\/parameters\/(.*)/).test(input.$ref) || _report(_exceptionable, {
            path: _path + ".$ref",
            expected: "`#/parameters/${string}`",
            value: input.$ref
        }), undefined === input.examples || Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true ].every((flag => flag));
        const _vo43 = (input, _path, _exceptionable = true) => [ undefined === input.operationId || "string" === typeof input.operationId || _report(_exceptionable, {
            path: _path + ".operationId",
            expected: "(string | undefined)",
            value: input.operationId
        }), undefined === input.parameters || (Array.isArray(input.parameters) || _report(_exceptionable, {
            path: _path + ".parameters",
            expected: "(Array<IParameter | IReference<`#/definitions/parameters/${string}`>> | undefined)",
            value: input.parameters
        })) && input.parameters.map(((elem, _index103) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
            path: _path + ".parameters[" + _index103 + "]",
            expected: "(IAnyOf & { name: string; in: string; description?: string | undefined; } | IArray & { name: string; in: string; description?: string | undefined; } | IBoolean & { name: string; in: string; description?: string | undefined; } | IInteger & { name: string; in: string; description?: string | undefined; } | INullOnly & { name: string; in: string; description?: string | undefined; } | INumber & { name: string; in: string; description?: string | undefined; } | IObject & { name: string; in: string; description?: string | undefined; } | IOneOf & { name: string; in: string; description?: string | undefined; } | IReference<string> & { name: string; in: string; description?: string | undefined; } | IString & { name: string; in: string; description?: string | undefined; } | IUnknown & { name: string; in: string; description?: string | undefined; } | SwaggerV2.IJsonSchema.IReference<`#/definitions/parameters/${string}`> | SwaggerV2.IOperation.IBodyParameter)",
            value: elem
        })) && _vu2(elem, _path + ".parameters[" + _index103 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".parameters[" + _index103 + "]",
            expected: "(IAnyOf & { name: string; in: string; description?: string | undefined; } | IArray & { name: string; in: string; description?: string | undefined; } | IBoolean & { name: string; in: string; description?: string | undefined; } | IInteger & { name: string; in: string; description?: string | undefined; } | INullOnly & { name: string; in: string; description?: string | undefined; } | INumber & { name: string; in: string; description?: string | undefined; } | IObject & { name: string; in: string; description?: string | undefined; } | IOneOf & { name: string; in: string; description?: string | undefined; } | IReference<string> & { name: string; in: string; description?: string | undefined; } | IString & { name: string; in: string; description?: string | undefined; } | IUnknown & { name: string; in: string; description?: string | undefined; } | SwaggerV2.IJsonSchema.IReference<`#/definitions/parameters/${string}`> | SwaggerV2.IOperation.IBodyParameter)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".parameters",
            expected: "(Array<IParameter | IReference<`#/definitions/parameters/${string}`>> | undefined)",
            value: input.parameters
        }), undefined === input.responses || ("object" === typeof input.responses && null !== input.responses && false === Array.isArray(input.responses) || _report(_exceptionable, {
            path: _path + ".responses",
            expected: "(Record<string, IResponse | IReference<`#/definitions/responses/${string}`>> | undefined)",
            value: input.responses
        })) && _vo45(input.responses, _path + ".responses", _exceptionable) || _report(_exceptionable, {
            path: _path + ".responses",
            expected: "(Record<string, IResponse | IReference<`#/definitions/responses/${string}`>> | undefined)",
            value: input.responses
        }), undefined === input.summary || "string" === typeof input.summary || _report(_exceptionable, {
            path: _path + ".summary",
            expected: "(string | undefined)",
            value: input.summary
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.security || (Array.isArray(input.security) || _report(_exceptionable, {
            path: _path + ".security",
            expected: "(Array<Record<string, Array<string>>> | undefined)",
            value: input.security
        })) && input.security.map(((elem, _index104) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
            path: _path + ".security[" + _index104 + "]",
            expected: "Record<string, Array<string>>",
            value: elem
        })) && _vo39(elem, _path + ".security[" + _index104 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".security[" + _index104 + "]",
            expected: "Record<string, Array<string>>",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".security",
            expected: "(Array<Record<string, Array<string>>> | undefined)",
            value: input.security
        }), undefined === input.tags || (Array.isArray(input.tags) || _report(_exceptionable, {
            path: _path + ".tags",
            expected: "(Array<string> | undefined)",
            value: input.tags
        })) && input.tags.map(((elem, _index105) => "string" === typeof elem || _report(_exceptionable, {
            path: _path + ".tags[" + _index105 + "]",
            expected: "string",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".tags",
            expected: "(Array<string> | undefined)",
            value: input.tags
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }) ].every((flag => flag));
        const _vo44 = (input, _path, _exceptionable = true) => [ "string" === typeof input.$ref && RegExp(/^#\/definitions\/parameters\/(.*)/).test(input.$ref) || _report(_exceptionable, {
            path: _path + ".$ref",
            expected: "`#/definitions/parameters/${string}`",
            value: input.$ref
        }), undefined === input.examples || Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true ].every((flag => flag));
        const _vo45 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(SwaggerV2.IJsonSchema.IReference<`#/definitions/responses/${string}`> | SwaggerV2.IOperation.IResponse)",
                value
            })) && _vu11(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(SwaggerV2.IJsonSchema.IReference<`#/definitions/responses/${string}`> | SwaggerV2.IOperation.IResponse)",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo46 = (input, _path, _exceptionable = true) => [ "string" === typeof input.$ref && RegExp(/^#\/definitions\/responses\/(.*)/).test(input.$ref) || _report(_exceptionable, {
            path: _path + ".$ref",
            expected: "`#/definitions/responses/${string}`",
            value: input.$ref
        }), undefined === input.examples || Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true ].every((flag => flag));
        const _vo47 = (input, _path, _exceptionable = true) => [ "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "string",
            value: input.name
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }) ].every((flag => flag));
        const _vo48 = (input, _path, _exceptionable = true) => [ (null !== input.openapi || _report(_exceptionable, {
            path: _path + ".openapi",
            expected: '("3.0" | `3.0.${number}`)',
            value: input.openapi
        })) && (undefined !== input.openapi || _report(_exceptionable, {
            path: _path + ".openapi",
            expected: '("3.0" | `3.0.${number}`)',
            value: input.openapi
        })) && ("3.0" === input.openapi || "string" === typeof input.openapi && RegExp(/^3\.0\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(input.openapi) || _report(_exceptionable, {
            path: _path + ".openapi",
            expected: '("3.0" | `3.0.${number}`)',
            value: input.openapi
        })), undefined === input.servers || (Array.isArray(input.servers) || _report(_exceptionable, {
            path: _path + ".servers",
            expected: "(Array<OpenApiV3.IServer> | undefined)",
            value: input.servers
        })) && input.servers.map(((elem, _index106) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
            path: _path + ".servers[" + _index106 + "]",
            expected: "OpenApiV3.IServer",
            value: elem
        })) && _vo49(elem, _path + ".servers[" + _index106 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".servers[" + _index106 + "]",
            expected: "OpenApiV3.IServer",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".servers",
            expected: "(Array<OpenApiV3.IServer> | undefined)",
            value: input.servers
        }), undefined === input.info || ("object" === typeof input.info && null !== input.info || _report(_exceptionable, {
            path: _path + ".info",
            expected: "(OpenApiV3.IDocument.IInfo | undefined)",
            value: input.info
        })) && _vo52(input.info, _path + ".info", _exceptionable) || _report(_exceptionable, {
            path: _path + ".info",
            expected: "(OpenApiV3.IDocument.IInfo | undefined)",
            value: input.info
        }), undefined === input.components || ("object" === typeof input.components && null !== input.components && false === Array.isArray(input.components) || _report(_exceptionable, {
            path: _path + ".components",
            expected: "(OpenApiV3.IComponents | undefined)",
            value: input.components
        })) && _vo55(input.components, _path + ".components", _exceptionable) || _report(_exceptionable, {
            path: _path + ".components",
            expected: "(OpenApiV3.IComponents | undefined)",
            value: input.components
        }), undefined === input.paths || ("object" === typeof input.paths && null !== input.paths && false === Array.isArray(input.paths) || _report(_exceptionable, {
            path: _path + ".paths",
            expected: "(Record<string, OpenApiV3.IPath> | undefined)",
            value: input.paths
        })) && _vo97(input.paths, _path + ".paths", _exceptionable) || _report(_exceptionable, {
            path: _path + ".paths",
            expected: "(Record<string, OpenApiV3.IPath> | undefined)",
            value: input.paths
        }), undefined === input.security || (Array.isArray(input.security) || _report(_exceptionable, {
            path: _path + ".security",
            expected: "(Array<Record<string, Array<string>>> | undefined)",
            value: input.security
        })) && input.security.map(((elem, _index107) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
            path: _path + ".security[" + _index107 + "]",
            expected: "Record<string, Array<string>>",
            value: elem
        })) && _vo39(elem, _path + ".security[" + _index107 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".security[" + _index107 + "]",
            expected: "Record<string, Array<string>>",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".security",
            expected: "(Array<Record<string, Array<string>>> | undefined)",
            value: input.security
        }), undefined === input.tags || (Array.isArray(input.tags) || _report(_exceptionable, {
            path: _path + ".tags",
            expected: "(Array<OpenApiV3.IDocument.ITag> | undefined)",
            value: input.tags
        })) && input.tags.map(((elem, _index108) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
            path: _path + ".tags[" + _index108 + "]",
            expected: "OpenApiV3.IDocument.ITag",
            value: elem
        })) && _vo104(elem, _path + ".tags[" + _index108 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".tags[" + _index108 + "]",
            expected: "OpenApiV3.IDocument.ITag",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".tags",
            expected: "(Array<OpenApiV3.IDocument.ITag> | undefined)",
            value: input.tags
        }) ].every((flag => flag));
        const _vo49 = (input, _path, _exceptionable = true) => [ "string" === typeof input.url || _report(_exceptionable, {
            path: _path + ".url",
            expected: "string",
            value: input.url
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.variables || ("object" === typeof input.variables && null !== input.variables && false === Array.isArray(input.variables) || _report(_exceptionable, {
            path: _path + ".variables",
            expected: "(Record<string, OpenApiV3.IServer.IVariable> | undefined)",
            value: input.variables
        })) && _vo50(input.variables, _path + ".variables", _exceptionable) || _report(_exceptionable, {
            path: _path + ".variables",
            expected: "(Record<string, OpenApiV3.IServer.IVariable> | undefined)",
            value: input.variables
        }) ].every((flag => flag));
        const _vo50 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3.IServer.IVariable",
                value
            })) && _vo51(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3.IServer.IVariable",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo51 = (input, _path, _exceptionable = true) => [ "string" === typeof input["default"] || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: "string",
            value: input["default"]
        }), undefined === input["enum"] || (Array.isArray(input["enum"]) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<string> | undefined)",
            value: input["enum"]
        })) && input["enum"].map(((elem, _index109) => "string" === typeof elem || _report(_exceptionable, {
            path: _path + '["enum"][' + _index109 + "]",
            expected: "string",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<string> | undefined)",
            value: input["enum"]
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }) ].every((flag => flag));
        const _vo52 = (input, _path, _exceptionable = true) => [ "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "string",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.termsOfService || "string" === typeof input.termsOfService || _report(_exceptionable, {
            path: _path + ".termsOfService",
            expected: "(string | undefined)",
            value: input.termsOfService
        }), undefined === input.contact || ("object" === typeof input.contact && null !== input.contact && false === Array.isArray(input.contact) || _report(_exceptionable, {
            path: _path + ".contact",
            expected: "(OpenApiV3.IDocument.IContact | undefined)",
            value: input.contact
        })) && _vo53(input.contact, _path + ".contact", _exceptionable) || _report(_exceptionable, {
            path: _path + ".contact",
            expected: "(OpenApiV3.IDocument.IContact | undefined)",
            value: input.contact
        }), undefined === input.license || ("object" === typeof input.license && null !== input.license || _report(_exceptionable, {
            path: _path + ".license",
            expected: "(OpenApiV3.IDocument.ILicense | undefined)",
            value: input.license
        })) && _vo54(input.license, _path + ".license", _exceptionable) || _report(_exceptionable, {
            path: _path + ".license",
            expected: "(OpenApiV3.IDocument.ILicense | undefined)",
            value: input.license
        }), "string" === typeof input.version || _report(_exceptionable, {
            path: _path + ".version",
            expected: "string",
            value: input.version
        }) ].every((flag => flag));
        const _vo53 = (input, _path, _exceptionable = true) => [ undefined === input.name || "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "(string | undefined)",
            value: input.name
        }), undefined === input.url || "string" === typeof input.url || _report(_exceptionable, {
            path: _path + ".url",
            expected: "(string | undefined)",
            value: input.url
        }), undefined === input.email || "string" === typeof input.email || _report(_exceptionable, {
            path: _path + ".email",
            expected: "(string | undefined)",
            value: input.email
        }) ].every((flag => flag));
        const _vo54 = (input, _path, _exceptionable = true) => [ "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "string",
            value: input.name
        }), undefined === input.url || "string" === typeof input.url || _report(_exceptionable, {
            path: _path + ".url",
            expected: "(string | undefined)",
            value: input.url
        }) ].every((flag => flag));
        const _vo55 = (input, _path, _exceptionable = true) => [ undefined === input.schemas || ("object" === typeof input.schemas && null !== input.schemas && false === Array.isArray(input.schemas) || _report(_exceptionable, {
            path: _path + ".schemas",
            expected: "(Record<string, OpenApiV3.IJsonSchema> | undefined)",
            value: input.schemas
        })) && _vo56(input.schemas, _path + ".schemas", _exceptionable) || _report(_exceptionable, {
            path: _path + ".schemas",
            expected: "(Record<string, OpenApiV3.IJsonSchema> | undefined)",
            value: input.schemas
        }), undefined === input.responses || ("object" === typeof input.responses && null !== input.responses && false === Array.isArray(input.responses) || _report(_exceptionable, {
            path: _path + ".responses",
            expected: "(Record<string, OpenApiV3.IOperation.IResponse> | undefined)",
            value: input.responses
        })) && _vo71(input.responses, _path + ".responses", _exceptionable) || _report(_exceptionable, {
            path: _path + ".responses",
            expected: "(Record<string, OpenApiV3.IOperation.IResponse> | undefined)",
            value: input.responses
        }), undefined === input.parameters || ("object" === typeof input.parameters && null !== input.parameters && false === Array.isArray(input.parameters) || _report(_exceptionable, {
            path: _path + ".parameters",
            expected: "(Record<string, OpenApiV3.IOperation.IParameter> | undefined)",
            value: input.parameters
        })) && _vo81(input.parameters, _path + ".parameters", _exceptionable) || _report(_exceptionable, {
            path: _path + ".parameters",
            expected: "(Record<string, OpenApiV3.IOperation.IParameter> | undefined)",
            value: input.parameters
        }), undefined === input.requestBodies || ("object" === typeof input.requestBodies && null !== input.requestBodies && false === Array.isArray(input.requestBodies) || _report(_exceptionable, {
            path: _path + ".requestBodies",
            expected: "(Record<string, OpenApiV3.IOperation.IRequestBody> | undefined)",
            value: input.requestBodies
        })) && _vo83(input.requestBodies, _path + ".requestBodies", _exceptionable) || _report(_exceptionable, {
            path: _path + ".requestBodies",
            expected: "(Record<string, OpenApiV3.IOperation.IRequestBody> | undefined)",
            value: input.requestBodies
        }), undefined === input.securitySchemes || ("object" === typeof input.securitySchemes && null !== input.securitySchemes && false === Array.isArray(input.securitySchemes) || _report(_exceptionable, {
            path: _path + ".securitySchemes",
            expected: "(Record<string, OpenApiV3.ISecurityScheme> | undefined)",
            value: input.securitySchemes
        })) && _vo85(input.securitySchemes, _path + ".securitySchemes", _exceptionable) || _report(_exceptionable, {
            path: _path + ".securitySchemes",
            expected: "(Record<string, OpenApiV3.ISecurityScheme> | undefined)",
            value: input.securitySchemes
        }), undefined === input.headers || ("object" === typeof input.headers && null !== input.headers && false === Array.isArray(input.headers) || _report(_exceptionable, {
            path: _path + ".headers",
            expected: '(Record<string, Omit<OpenApiV3.IOperation.IParameter, "in">> | undefined)',
            value: input.headers
        })) && _vo95(input.headers, _path + ".headers", _exceptionable) || _report(_exceptionable, {
            path: _path + ".headers",
            expected: '(Record<string, Omit<OpenApiV3.IOperation.IParameter, "in">> | undefined)',
            value: input.headers
        }), undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, OpenApiV3.IExample> | undefined)",
            value: input.examples
        })) && _vo96(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, OpenApiV3.IExample> | undefined)",
            value: input.examples
        }) ].every((flag => flag));
        const _vo56 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown)",
                value
            })) && _vu3(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown)",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo57 = (input, _path, _exceptionable = true) => [ undefined === input.nullable || "boolean" === typeof input.nullable || _report(_exceptionable, {
            path: _path + ".nullable",
            expected: "(boolean | undefined)",
            value: input.nullable
        }), null === input["default"] || undefined === input["default"] || "boolean" === typeof input["default"] || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: "(boolean | null | undefined)",
            value: input["default"]
        }), undefined === input["enum"] || (Array.isArray(input["enum"]) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<boolean | null> | undefined)",
            value: input["enum"]
        })) && input["enum"].map(((elem, _index110) => null === elem || "boolean" === typeof elem || _report(_exceptionable, {
            path: _path + '["enum"][' + _index110 + "]",
            expected: "(boolean | null)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<boolean | null> | undefined)",
            value: input["enum"]
        }), "boolean" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"boolean"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) ].every((flag => flag));
        const _vo58 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return true;
        })).every((flag => flag)) ].every((flag => flag));
        const _vo59 = (input, _path, _exceptionable = true) => [ undefined === input.nullable || "boolean" === typeof input.nullable || _report(_exceptionable, {
            path: _path + ".nullable",
            expected: "(boolean | undefined)",
            value: input.nullable
        }), null === input["default"] || undefined === input["default"] || "number" === typeof input["default"] && (Math.floor(input["default"]) === input["default"] && -0x8000000000000000 <= input["default"] && input["default"] <= 0x8000000000000000 || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: 'number & Type<"int64">',
            value: input["default"]
        })) || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: '((number & Type<"int64">) | null | undefined)',
            value: input["default"]
        }), undefined === input["enum"] || (Array.isArray(input["enum"]) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<number | null> | undefined)",
            value: input["enum"]
        })) && input["enum"].map(((elem, _index111) => null === elem || "number" === typeof elem || _report(_exceptionable, {
            path: _path + '["enum"][' + _index111 + "]",
            expected: "(null | number)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<number | null> | undefined)",
            value: input["enum"]
        }), undefined === input.minimum || "number" === typeof input.minimum && (Math.floor(input.minimum) === input.minimum && -0x8000000000000000 <= input.minimum && input.minimum <= 0x8000000000000000 || _report(_exceptionable, {
            path: _path + ".minimum",
            expected: 'number & Type<"int64">',
            value: input.minimum
        })) || _report(_exceptionable, {
            path: _path + ".minimum",
            expected: '((number & Type<"int64">) | undefined)',
            value: input.minimum
        }), undefined === input.maximum || "number" === typeof input.maximum && (Math.floor(input.maximum) === input.maximum && -0x8000000000000000 <= input.maximum && input.maximum <= 0x8000000000000000 || _report(_exceptionable, {
            path: _path + ".maximum",
            expected: 'number & Type<"int64">',
            value: input.maximum
        })) || _report(_exceptionable, {
            path: _path + ".maximum",
            expected: '((number & Type<"int64">) | undefined)',
            value: input.maximum
        }), undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum || _report(_exceptionable, {
            path: _path + ".exclusiveMinimum",
            expected: "(boolean | number | undefined)",
            value: input.exclusiveMinimum
        }), undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum || _report(_exceptionable, {
            path: _path + ".exclusiveMaximum",
            expected: "(boolean | number | undefined)",
            value: input.exclusiveMaximum
        }), undefined === input.multipleOf || "number" === typeof input.multipleOf && (Math.floor(input.multipleOf) === input.multipleOf && 0 <= input.multipleOf && input.multipleOf <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".multipleOf",
            expected: 'number & Type<"uint64">',
            value: input.multipleOf
        })) && (0 < input.multipleOf || _report(_exceptionable, {
            path: _path + ".multipleOf",
            expected: "number & ExclusiveMinimum<0>",
            value: input.multipleOf
        })) || _report(_exceptionable, {
            path: _path + ".multipleOf",
            expected: '((number & Type<"uint64"> & ExclusiveMinimum<0>) | undefined)',
            value: input.multipleOf
        }), "integer" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"integer"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) ].every((flag => flag));
        const _vo60 = (input, _path, _exceptionable = true) => [ undefined === input.nullable || "boolean" === typeof input.nullable || _report(_exceptionable, {
            path: _path + ".nullable",
            expected: "(boolean | undefined)",
            value: input.nullable
        }), null === input["default"] || undefined === input["default"] || "number" === typeof input["default"] || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: "(null | number | undefined)",
            value: input["default"]
        }), undefined === input["enum"] || (Array.isArray(input["enum"]) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<number | null> | undefined)",
            value: input["enum"]
        })) && input["enum"].map(((elem, _index112) => null === elem || "number" === typeof elem || _report(_exceptionable, {
            path: _path + '["enum"][' + _index112 + "]",
            expected: "(null | number)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<number | null> | undefined)",
            value: input["enum"]
        }), undefined === input.minimum || "number" === typeof input.minimum || _report(_exceptionable, {
            path: _path + ".minimum",
            expected: "(number | undefined)",
            value: input.minimum
        }), undefined === input.maximum || "number" === typeof input.maximum || _report(_exceptionable, {
            path: _path + ".maximum",
            expected: "(number | undefined)",
            value: input.maximum
        }), undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum || _report(_exceptionable, {
            path: _path + ".exclusiveMinimum",
            expected: "(boolean | number | undefined)",
            value: input.exclusiveMinimum
        }), undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum || _report(_exceptionable, {
            path: _path + ".exclusiveMaximum",
            expected: "(boolean | number | undefined)",
            value: input.exclusiveMaximum
        }), undefined === input.multipleOf || "number" === typeof input.multipleOf && (0 < input.multipleOf || _report(_exceptionable, {
            path: _path + ".multipleOf",
            expected: "number & ExclusiveMinimum<0>",
            value: input.multipleOf
        })) || _report(_exceptionable, {
            path: _path + ".multipleOf",
            expected: "((number & ExclusiveMinimum<0>) | undefined)",
            value: input.multipleOf
        }), "number" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"number"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) ].every((flag => flag));
        const _vo61 = (input, _path, _exceptionable = true) => [ undefined === input.nullable || "boolean" === typeof input.nullable || _report(_exceptionable, {
            path: _path + ".nullable",
            expected: "(boolean | undefined)",
            value: input.nullable
        }), null === input["default"] || undefined === input["default"] || "string" === typeof input["default"] || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: "(null | string | undefined)",
            value: input["default"]
        }), undefined === input["enum"] || (Array.isArray(input["enum"]) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<string | null> | undefined)",
            value: input["enum"]
        })) && input["enum"].map(((elem, _index113) => null === elem || "string" === typeof elem || _report(_exceptionable, {
            path: _path + '["enum"][' + _index113 + "]",
            expected: "(null | string)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<string | null> | undefined)",
            value: input["enum"]
        }), undefined === input.format || "string" === typeof input.format || _report(_exceptionable, {
            path: _path + ".format",
            expected: "(string | undefined)",
            value: input.format
        }), undefined === input.pattern || "string" === typeof input.pattern || _report(_exceptionable, {
            path: _path + ".pattern",
            expected: "(string | undefined)",
            value: input.pattern
        }), undefined === input.minLength || "number" === typeof input.minLength && (Math.floor(input.minLength) === input.minLength && 0 <= input.minLength && input.minLength <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".minLength",
            expected: 'number & Type<"uint64">',
            value: input.minLength
        })) || _report(_exceptionable, {
            path: _path + ".minLength",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.minLength
        }), undefined === input.maxLength || "number" === typeof input.maxLength && (Math.floor(input.maxLength) === input.maxLength && 0 <= input.maxLength && input.maxLength <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".maxLength",
            expected: 'number & Type<"uint64">',
            value: input.maxLength
        })) || _report(_exceptionable, {
            path: _path + ".maxLength",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.maxLength
        }), "string" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"string"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) ].every((flag => flag));
        const _vo62 = (input, _path, _exceptionable = true) => [ undefined === input.nullable || "boolean" === typeof input.nullable || _report(_exceptionable, {
            path: _path + ".nullable",
            expected: "(boolean | undefined)",
            value: input.nullable
        }), ("object" === typeof input.items && null !== input.items && false === Array.isArray(input.items) || _report(_exceptionable, {
            path: _path + ".items",
            expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown)",
            value: input.items
        })) && _vu3(input.items, _path + ".items", _exceptionable) || _report(_exceptionable, {
            path: _path + ".items",
            expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown)",
            value: input.items
        }), undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems || _report(_exceptionable, {
            path: _path + ".uniqueItems",
            expected: "(boolean | undefined)",
            value: input.uniqueItems
        }), undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".minItems",
            expected: 'number & Type<"uint64">',
            value: input.minItems
        })) || _report(_exceptionable, {
            path: _path + ".minItems",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.minItems
        }), undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".maxItems",
            expected: 'number & Type<"uint64">',
            value: input.maxItems
        })) || _report(_exceptionable, {
            path: _path + ".maxItems",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.maxItems
        }), "array" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"array"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) ].every((flag => flag));
        const _vo63 = (input, _path, _exceptionable = true) => [ undefined === input.nullable || "boolean" === typeof input.nullable || _report(_exceptionable, {
            path: _path + ".nullable",
            expected: "(boolean | undefined)",
            value: input.nullable
        }), undefined === input.properties || ("object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) || _report(_exceptionable, {
            path: _path + ".properties",
            expected: "(Record<string, OpenApiV3.IJsonSchema> | undefined)",
            value: input.properties
        })) && _vo56(input.properties, _path + ".properties", _exceptionable) || _report(_exceptionable, {
            path: _path + ".properties",
            expected: "(Record<string, OpenApiV3.IJsonSchema> | undefined)",
            value: input.properties
        }), undefined === input.required || (Array.isArray(input.required) || _report(_exceptionable, {
            path: _path + ".required",
            expected: "(Array<string> | undefined)",
            value: input.required
        })) && input.required.map(((elem, _index114) => "string" === typeof elem || _report(_exceptionable, {
            path: _path + ".required[" + _index114 + "]",
            expected: "string",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".required",
            expected: "(Array<string> | undefined)",
            value: input.required
        }), (null !== input.additionalProperties || _report(_exceptionable, {
            path: _path + ".additionalProperties",
            expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalProperties
        })) && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || ("object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) || _report(_exceptionable, {
            path: _path + ".additionalProperties",
            expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalProperties
        })) && _vu3(input.additionalProperties, _path + ".additionalProperties", _exceptionable) || _report(_exceptionable, {
            path: _path + ".additionalProperties",
            expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalProperties
        })), undefined === input.maxProperties || "number" === typeof input.maxProperties || _report(_exceptionable, {
            path: _path + ".maxProperties",
            expected: "(number | undefined)",
            value: input.maxProperties
        }), undefined === input.minProperties || "number" === typeof input.minProperties || _report(_exceptionable, {
            path: _path + ".minProperties",
            expected: "(number | undefined)",
            value: input.minProperties
        }), "object" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"object"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) ].every((flag => flag));
        const _vo64 = (input, _path, _exceptionable = true) => [ "string" === typeof input.$ref || _report(_exceptionable, {
            path: _path + ".$ref",
            expected: "string",
            value: input.$ref
        }), (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true ].every((flag => flag));
        const _vo65 = (input, _path, _exceptionable = true) => [ (Array.isArray(input.allOf) || _report(_exceptionable, {
            path: _path + ".allOf",
            expected: "Array<OpenApiV3.IJsonSchema>",
            value: input.allOf
        })) && input.allOf.map(((elem, _index115) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
            path: _path + ".allOf[" + _index115 + "]",
            expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown)",
            value: elem
        })) && _vu3(elem, _path + ".allOf[" + _index115 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".allOf[" + _index115 + "]",
            expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".allOf",
            expected: "Array<OpenApiV3.IJsonSchema>",
            value: input.allOf
        }), (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true ].every((flag => flag));
        const _vo66 = (input, _path, _exceptionable = true) => [ (Array.isArray(input.anyOf) || _report(_exceptionable, {
            path: _path + ".anyOf",
            expected: "Array<OpenApiV3.IJsonSchema>",
            value: input.anyOf
        })) && input.anyOf.map(((elem, _index116) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
            path: _path + ".anyOf[" + _index116 + "]",
            expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown)",
            value: elem
        })) && _vu3(elem, _path + ".anyOf[" + _index116 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".anyOf[" + _index116 + "]",
            expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".anyOf",
            expected: "Array<OpenApiV3.IJsonSchema>",
            value: input.anyOf
        }), (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true ].every((flag => flag));
        const _vo67 = (input, _path, _exceptionable = true) => [ (Array.isArray(input.oneOf) || _report(_exceptionable, {
            path: _path + ".oneOf",
            expected: "Array<OpenApiV3.IJsonSchema>",
            value: input.oneOf
        })) && input.oneOf.map(((elem, _index117) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
            path: _path + ".oneOf[" + _index117 + "]",
            expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown)",
            value: elem
        })) && _vu3(elem, _path + ".oneOf[" + _index117 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".oneOf[" + _index117 + "]",
            expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".oneOf",
            expected: "Array<OpenApiV3.IJsonSchema>",
            value: input.oneOf
        }), undefined === input.discriminator || ("object" === typeof input.discriminator && null !== input.discriminator || _report(_exceptionable, {
            path: _path + ".discriminator",
            expected: "(OpenApiV3.IJsonSchema.IOneOf.IDiscriminator | undefined)",
            value: input.discriminator
        })) && _vo68(input.discriminator, _path + ".discriminator", _exceptionable) || _report(_exceptionable, {
            path: _path + ".discriminator",
            expected: "(OpenApiV3.IJsonSchema.IOneOf.IDiscriminator | undefined)",
            value: input.discriminator
        }), (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true ].every((flag => flag));
        const _vo68 = (input, _path, _exceptionable = true) => [ "string" === typeof input.propertyName || _report(_exceptionable, {
            path: _path + ".propertyName",
            expected: "string",
            value: input.propertyName
        }), undefined === input.mapping || ("object" === typeof input.mapping && null !== input.mapping && false === Array.isArray(input.mapping) || _report(_exceptionable, {
            path: _path + ".mapping",
            expected: "(Record<string, string> | undefined)",
            value: input.mapping
        })) && _vo35(input.mapping, _path + ".mapping", _exceptionable) || _report(_exceptionable, {
            path: _path + ".mapping",
            expected: "(Record<string, string> | undefined)",
            value: input.mapping
        }) ].every((flag => flag));
        const _vo69 = (input, _path, _exceptionable = true) => [ null === input["default"] || undefined === input["default"] || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: "(null | undefined)",
            value: input["default"]
        }), "null" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"null"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) ].every((flag => flag));
        const _vo70 = (input, _path, _exceptionable = true) => [ true, (null !== input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: "undefined",
            value: input.type
        })) && (undefined === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: "undefined",
            value: input.type
        })), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) ].every((flag => flag));
        const _vo71 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3.IOperation.IResponse",
                value
            })) && _vo72(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3.IOperation.IResponse",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo72 = (input, _path, _exceptionable = true) => [ undefined === input.content || ("object" === typeof input.content && null !== input.content && false === Array.isArray(input.content) || _report(_exceptionable, {
            path: _path + ".content",
            expected: "(Record<string, OpenApiV3.IOperation.IMediaType> | undefined)",
            value: input.content
        })) && _vo73(input.content, _path + ".content", _exceptionable) || _report(_exceptionable, {
            path: _path + ".content",
            expected: "(Record<string, OpenApiV3.IOperation.IMediaType> | undefined)",
            value: input.content
        }), undefined === input.headers || ("object" === typeof input.headers && null !== input.headers && false === Array.isArray(input.headers) || _report(_exceptionable, {
            path: _path + ".headers",
            expected: '(Record<string, Omit<IParameter, "in"> | IReference<`#/components/headers/${string}`>> | undefined)',
            value: input.headers
        })) && _vo78(input.headers, _path + ".headers", _exceptionable) || _report(_exceptionable, {
            path: _path + ".headers",
            expected: '(Record<string, Omit<IParameter, "in"> | IReference<`#/components/headers/${string}`>> | undefined)',
            value: input.headers
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }) ].every((flag => flag));
        const _vo73 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3.IOperation.IMediaType",
                value
            })) && _vo74(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3.IOperation.IMediaType",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo74 = (input, _path, _exceptionable = true) => [ undefined === input.schema || ("object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) || _report(_exceptionable, {
            path: _path + ".schema",
            expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown | undefined)",
            value: input.schema
        })) && _vu3(input.schema, _path + ".schema", _exceptionable) || _report(_exceptionable, {
            path: _path + ".schema",
            expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown | undefined)",
            value: input.schema
        }), true, undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, IExample | IReference<`#/components/examples/${string}`>> | undefined)",
            value: input.examples
        })) && _vo75(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, IExample | IReference<`#/components/examples/${string}`>> | undefined)",
            value: input.examples
        }) ].every((flag => flag));
        const _vo75 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApiV3.IExample | OpenApiV3.IJsonSchema.IReference<`#/components/examples/${string}`>)",
                value
            })) && _vu12(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApiV3.IExample | OpenApiV3.IJsonSchema.IReference<`#/components/examples/${string}`>)",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo76 = (input, _path, _exceptionable = true) => [ undefined === input.summary || "string" === typeof input.summary || _report(_exceptionable, {
            path: _path + ".summary",
            expected: "(string | undefined)",
            value: input.summary
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), true, undefined === input.externalValue || "string" === typeof input.externalValue || _report(_exceptionable, {
            path: _path + ".externalValue",
            expected: "(string | undefined)",
            value: input.externalValue
        }) ].every((flag => flag));
        const _vo77 = (input, _path, _exceptionable = true) => [ "string" === typeof input.$ref && RegExp(/^#\/components\/examples\/(.*)/).test(input.$ref) || _report(_exceptionable, {
            path: _path + ".$ref",
            expected: "`#/components/examples/${string}`",
            value: input.$ref
        }), (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true ].every((flag => flag));
        const _vo78 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: '(Omit<OpenApiV3.IOperation.IParameter, "in"> | OpenApiV3.IJsonSchema.IReference<`#/components/headers/${string}`>)',
                value
            })) && _vu13(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: '(Omit<OpenApiV3.IOperation.IParameter, "in"> | OpenApiV3.IJsonSchema.IReference<`#/components/headers/${string}`>)',
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo79 = (input, _path, _exceptionable = true) => [ undefined === input.name || "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "(string | undefined)",
            value: input.name
        }), undefined === input.required || "boolean" === typeof input.required || _report(_exceptionable, {
            path: _path + ".required",
            expected: "(boolean | undefined)",
            value: input.required
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), true, undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, IExample | IReference<`#/components/examples/${string}`>> | undefined)",
            value: input.examples
        })) && _vo75(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, IExample | IReference<`#/components/examples/${string}`>> | undefined)",
            value: input.examples
        }), ("object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) || _report(_exceptionable, {
            path: _path + ".schema",
            expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown)",
            value: input.schema
        })) && _vu3(input.schema, _path + ".schema", _exceptionable) || _report(_exceptionable, {
            path: _path + ".schema",
            expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown)",
            value: input.schema
        }) ].every((flag => flag));
        const _vo80 = (input, _path, _exceptionable = true) => [ "string" === typeof input.$ref && RegExp(/^#\/components\/headers\/(.*)/).test(input.$ref) || _report(_exceptionable, {
            path: _path + ".$ref",
            expected: "`#/components/headers/${string}`",
            value: input.$ref
        }), (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true ].every((flag => flag));
        const _vo81 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3.IOperation.IParameter",
                value
            })) && _vo82(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3.IOperation.IParameter",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo82 = (input, _path, _exceptionable = true) => [ undefined === input.name || "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "(string | undefined)",
            value: input.name
        }), "path" === input["in"] || "query" === input["in"] || "header" === input["in"] || "cookie" === input["in"] || _report(_exceptionable, {
            path: _path + '["in"]',
            expected: '("cookie" | "header" | "path" | "query")',
            value: input["in"]
        }), ("object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) || _report(_exceptionable, {
            path: _path + ".schema",
            expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown)",
            value: input.schema
        })) && _vu3(input.schema, _path + ".schema", _exceptionable) || _report(_exceptionable, {
            path: _path + ".schema",
            expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown)",
            value: input.schema
        }), undefined === input.required || "boolean" === typeof input.required || _report(_exceptionable, {
            path: _path + ".required",
            expected: "(boolean | undefined)",
            value: input.required
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), true, undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, IExample | IReference<`#/components/examples/${string}`>> | undefined)",
            value: input.examples
        })) && _vo75(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, IExample | IReference<`#/components/examples/${string}`>> | undefined)",
            value: input.examples
        }) ].every((flag => flag));
        const _vo83 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3.IOperation.IRequestBody",
                value
            })) && _vo84(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3.IOperation.IRequestBody",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo84 = (input, _path, _exceptionable = true) => [ undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.required || "boolean" === typeof input.required || _report(_exceptionable, {
            path: _path + ".required",
            expected: "(boolean | undefined)",
            value: input.required
        }), undefined === input.content || ("object" === typeof input.content && null !== input.content && false === Array.isArray(input.content) || _report(_exceptionable, {
            path: _path + ".content",
            expected: "(Record<string, OpenApiV3.IOperation.IMediaType> | undefined)",
            value: input.content
        })) && _vo73(input.content, _path + ".content", _exceptionable) || _report(_exceptionable, {
            path: _path + ".content",
            expected: "(Record<string, OpenApiV3.IOperation.IMediaType> | undefined)",
            value: input.content
        }) ].every((flag => flag));
        const _vo85 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApiV3.ISecurityScheme.IApiKey | OpenApiV3.ISecurityScheme.IHttpBasic | OpenApiV3.ISecurityScheme.IHttpBearer | OpenApiV3.ISecurityScheme.IOAuth2 | OpenApiV3.ISecurityScheme.IOpenId)",
                value
            })) && _vu14(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApiV3.ISecurityScheme.IApiKey | OpenApiV3.ISecurityScheme.IHttpBasic | OpenApiV3.ISecurityScheme.IHttpBearer | OpenApiV3.ISecurityScheme.IOAuth2 | OpenApiV3.ISecurityScheme.IOpenId)",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo86 = (input, _path, _exceptionable = true) => [ "apiKey" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"apiKey"',
            value: input.type
        }), undefined === input["in"] || "query" === input["in"] || "header" === input["in"] || "cookie" === input["in"] || _report(_exceptionable, {
            path: _path + '["in"]',
            expected: '("cookie" | "header" | "query" | undefined)',
            value: input["in"]
        }), undefined === input.name || "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "(string | undefined)",
            value: input.name
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }) ].every((flag => flag));
        const _vo87 = (input, _path, _exceptionable = true) => [ "http" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"http"',
            value: input.type
        }), "basic" === input.scheme || _report(_exceptionable, {
            path: _path + ".scheme",
            expected: '"basic"',
            value: input.scheme
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }) ].every((flag => flag));
        const _vo88 = (input, _path, _exceptionable = true) => [ "http" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"http"',
            value: input.type
        }), "bearer" === input.scheme || _report(_exceptionable, {
            path: _path + ".scheme",
            expected: '"bearer"',
            value: input.scheme
        }), undefined === input.bearerFormat || "string" === typeof input.bearerFormat || _report(_exceptionable, {
            path: _path + ".bearerFormat",
            expected: "(string | undefined)",
            value: input.bearerFormat
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }) ].every((flag => flag));
        const _vo89 = (input, _path, _exceptionable = true) => [ "oauth2" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"oauth2"',
            value: input.type
        }), ("object" === typeof input.flows && null !== input.flows && false === Array.isArray(input.flows) || _report(_exceptionable, {
            path: _path + ".flows",
            expected: "OpenApiV3.ISecurityScheme.IOAuth2.IFlowSet",
            value: input.flows
        })) && _vo90(input.flows, _path + ".flows", _exceptionable) || _report(_exceptionable, {
            path: _path + ".flows",
            expected: "OpenApiV3.ISecurityScheme.IOAuth2.IFlowSet",
            value: input.flows
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }) ].every((flag => flag));
        const _vo90 = (input, _path, _exceptionable = true) => [ undefined === input.authorizationCode || ("object" === typeof input.authorizationCode && null !== input.authorizationCode && false === Array.isArray(input.authorizationCode) || _report(_exceptionable, {
            path: _path + ".authorizationCode",
            expected: "(OpenApiV3.ISecurityScheme.IOAuth2.IFlow | undefined)",
            value: input.authorizationCode
        })) && _vo91(input.authorizationCode, _path + ".authorizationCode", _exceptionable) || _report(_exceptionable, {
            path: _path + ".authorizationCode",
            expected: "(OpenApiV3.ISecurityScheme.IOAuth2.IFlow | undefined)",
            value: input.authorizationCode
        }), undefined === input.implicit || ("object" === typeof input.implicit && null !== input.implicit && false === Array.isArray(input.implicit) || _report(_exceptionable, {
            path: _path + ".implicit",
            expected: '(Omit<OpenApiV3.ISecurityScheme.IOAuth2.IFlow, "tokenUrl"> | undefined)',
            value: input.implicit
        })) && _vo92(input.implicit, _path + ".implicit", _exceptionable) || _report(_exceptionable, {
            path: _path + ".implicit",
            expected: '(Omit<OpenApiV3.ISecurityScheme.IOAuth2.IFlow, "tokenUrl"> | undefined)',
            value: input.implicit
        }), undefined === input.password || ("object" === typeof input.password && null !== input.password && false === Array.isArray(input.password) || _report(_exceptionable, {
            path: _path + ".password",
            expected: '(Omit<OpenApiV3.ISecurityScheme.IOAuth2.IFlow, "authorizationUrl"> | undefined)',
            value: input.password
        })) && _vo93(input.password, _path + ".password", _exceptionable) || _report(_exceptionable, {
            path: _path + ".password",
            expected: '(Omit<OpenApiV3.ISecurityScheme.IOAuth2.IFlow, "authorizationUrl"> | undefined)',
            value: input.password
        }), undefined === input.clientCredentials || ("object" === typeof input.clientCredentials && null !== input.clientCredentials && false === Array.isArray(input.clientCredentials) || _report(_exceptionable, {
            path: _path + ".clientCredentials",
            expected: '(Omit<OpenApiV3.ISecurityScheme.IOAuth2.IFlow, "authorizationUrl"> | undefined)',
            value: input.clientCredentials
        })) && _vo93(input.clientCredentials, _path + ".clientCredentials", _exceptionable) || _report(_exceptionable, {
            path: _path + ".clientCredentials",
            expected: '(Omit<OpenApiV3.ISecurityScheme.IOAuth2.IFlow, "authorizationUrl"> | undefined)',
            value: input.clientCredentials
        }) ].every((flag => flag));
        const _vo91 = (input, _path, _exceptionable = true) => [ undefined === input.authorizationUrl || "string" === typeof input.authorizationUrl || _report(_exceptionable, {
            path: _path + ".authorizationUrl",
            expected: "(string | undefined)",
            value: input.authorizationUrl
        }), undefined === input.tokenUrl || "string" === typeof input.tokenUrl || _report(_exceptionable, {
            path: _path + ".tokenUrl",
            expected: "(string | undefined)",
            value: input.tokenUrl
        }), undefined === input.refreshUrl || "string" === typeof input.refreshUrl || _report(_exceptionable, {
            path: _path + ".refreshUrl",
            expected: "(string | undefined)",
            value: input.refreshUrl
        }), undefined === input.scopes || ("object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) || _report(_exceptionable, {
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        })) && _vo35(input.scopes, _path + ".scopes", _exceptionable) || _report(_exceptionable, {
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        }) ].every((flag => flag));
        const _vo92 = (input, _path, _exceptionable = true) => [ undefined === input.authorizationUrl || "string" === typeof input.authorizationUrl || _report(_exceptionable, {
            path: _path + ".authorizationUrl",
            expected: "(string | undefined)",
            value: input.authorizationUrl
        }), undefined === input.refreshUrl || "string" === typeof input.refreshUrl || _report(_exceptionable, {
            path: _path + ".refreshUrl",
            expected: "(string | undefined)",
            value: input.refreshUrl
        }), undefined === input.scopes || ("object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) || _report(_exceptionable, {
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        })) && _vo35(input.scopes, _path + ".scopes", _exceptionable) || _report(_exceptionable, {
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        }) ].every((flag => flag));
        const _vo93 = (input, _path, _exceptionable = true) => [ undefined === input.tokenUrl || "string" === typeof input.tokenUrl || _report(_exceptionable, {
            path: _path + ".tokenUrl",
            expected: "(string | undefined)",
            value: input.tokenUrl
        }), undefined === input.refreshUrl || "string" === typeof input.refreshUrl || _report(_exceptionable, {
            path: _path + ".refreshUrl",
            expected: "(string | undefined)",
            value: input.refreshUrl
        }), undefined === input.scopes || ("object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) || _report(_exceptionable, {
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        })) && _vo35(input.scopes, _path + ".scopes", _exceptionable) || _report(_exceptionable, {
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        }) ].every((flag => flag));
        const _vo94 = (input, _path, _exceptionable = true) => [ "openIdConnect" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"openIdConnect"',
            value: input.type
        }), "string" === typeof input.openIdConnectUrl || _report(_exceptionable, {
            path: _path + ".openIdConnectUrl",
            expected: "string",
            value: input.openIdConnectUrl
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }) ].every((flag => flag));
        const _vo95 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: 'Omit<OpenApiV3.IOperation.IParameter, "in">',
                value
            })) && _vo79(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: 'Omit<OpenApiV3.IOperation.IParameter, "in">',
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo96 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3.IExample",
                value
            })) && _vo76(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3.IExample",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo97 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3.IPath",
                value
            })) && _vo98(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3.IPath",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo98 = (input, _path, _exceptionable = true) => [ undefined === input.parameters || (Array.isArray(input.parameters) || _report(_exceptionable, {
            path: _path + ".parameters",
            expected: "(Array<IParameter | IReference<`#/components/headers/${string}`> | IReference<`#/components/parameters/${string}`>> | undefined)",
            value: input.parameters
        })) && input.parameters.map(((elem, _index118) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
            path: _path + ".parameters[" + _index118 + "]",
            expected: "(OpenApiV3.IJsonSchema.IReference<`#/components/headers/${string}`> | OpenApiV3.IJsonSchema.IReference<`#/components/parameters/${string}`> | OpenApiV3.IOperation.IParameter)",
            value: elem
        })) && _vu4(elem, _path + ".parameters[" + _index118 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".parameters[" + _index118 + "]",
            expected: "(OpenApiV3.IJsonSchema.IReference<`#/components/headers/${string}`> | OpenApiV3.IJsonSchema.IReference<`#/components/parameters/${string}`> | OpenApiV3.IOperation.IParameter)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".parameters",
            expected: "(Array<IParameter | IReference<`#/components/headers/${string}`> | IReference<`#/components/parameters/${string}`>> | undefined)",
            value: input.parameters
        }), undefined === input.servers || (Array.isArray(input.servers) || _report(_exceptionable, {
            path: _path + ".servers",
            expected: "(Array<OpenApiV3.IServer> | undefined)",
            value: input.servers
        })) && input.servers.map(((elem, _index119) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
            path: _path + ".servers[" + _index119 + "]",
            expected: "OpenApiV3.IServer",
            value: elem
        })) && _vo49(elem, _path + ".servers[" + _index119 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".servers[" + _index119 + "]",
            expected: "OpenApiV3.IServer",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".servers",
            expected: "(Array<OpenApiV3.IServer> | undefined)",
            value: input.servers
        }), undefined === input.summary || "string" === typeof input.summary || _report(_exceptionable, {
            path: _path + ".summary",
            expected: "(string | undefined)",
            value: input.summary
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.options || ("object" === typeof input.options && null !== input.options && false === Array.isArray(input.options) || _report(_exceptionable, {
            path: _path + ".options",
            expected: "(OpenApiV3.IOperation | undefined)",
            value: input.options
        })) && _vo100(input.options, _path + ".options", _exceptionable) || _report(_exceptionable, {
            path: _path + ".options",
            expected: "(OpenApiV3.IOperation | undefined)",
            value: input.options
        }), undefined === input.get || ("object" === typeof input.get && null !== input.get && false === Array.isArray(input.get) || _report(_exceptionable, {
            path: _path + ".get",
            expected: "(OpenApiV3.IOperation | undefined)",
            value: input.get
        })) && _vo100(input.get, _path + ".get", _exceptionable) || _report(_exceptionable, {
            path: _path + ".get",
            expected: "(OpenApiV3.IOperation | undefined)",
            value: input.get
        }), undefined === input.post || ("object" === typeof input.post && null !== input.post && false === Array.isArray(input.post) || _report(_exceptionable, {
            path: _path + ".post",
            expected: "(OpenApiV3.IOperation | undefined)",
            value: input.post
        })) && _vo100(input.post, _path + ".post", _exceptionable) || _report(_exceptionable, {
            path: _path + ".post",
            expected: "(OpenApiV3.IOperation | undefined)",
            value: input.post
        }), undefined === input.patch || ("object" === typeof input.patch && null !== input.patch && false === Array.isArray(input.patch) || _report(_exceptionable, {
            path: _path + ".patch",
            expected: "(OpenApiV3.IOperation | undefined)",
            value: input.patch
        })) && _vo100(input.patch, _path + ".patch", _exceptionable) || _report(_exceptionable, {
            path: _path + ".patch",
            expected: "(OpenApiV3.IOperation | undefined)",
            value: input.patch
        }), undefined === input.put || ("object" === typeof input.put && null !== input.put && false === Array.isArray(input.put) || _report(_exceptionable, {
            path: _path + ".put",
            expected: "(OpenApiV3.IOperation | undefined)",
            value: input.put
        })) && _vo100(input.put, _path + ".put", _exceptionable) || _report(_exceptionable, {
            path: _path + ".put",
            expected: "(OpenApiV3.IOperation | undefined)",
            value: input.put
        }), undefined === input["delete"] || ("object" === typeof input["delete"] && null !== input["delete"] && false === Array.isArray(input["delete"]) || _report(_exceptionable, {
            path: _path + '["delete"]',
            expected: "(OpenApiV3.IOperation | undefined)",
            value: input["delete"]
        })) && _vo100(input["delete"], _path + '["delete"]', _exceptionable) || _report(_exceptionable, {
            path: _path + '["delete"]',
            expected: "(OpenApiV3.IOperation | undefined)",
            value: input["delete"]
        }), undefined === input.head || ("object" === typeof input.head && null !== input.head && false === Array.isArray(input.head) || _report(_exceptionable, {
            path: _path + ".head",
            expected: "(OpenApiV3.IOperation | undefined)",
            value: input.head
        })) && _vo100(input.head, _path + ".head", _exceptionable) || _report(_exceptionable, {
            path: _path + ".head",
            expected: "(OpenApiV3.IOperation | undefined)",
            value: input.head
        }), undefined === input.trace || ("object" === typeof input.trace && null !== input.trace && false === Array.isArray(input.trace) || _report(_exceptionable, {
            path: _path + ".trace",
            expected: "(OpenApiV3.IOperation | undefined)",
            value: input.trace
        })) && _vo100(input.trace, _path + ".trace", _exceptionable) || _report(_exceptionable, {
            path: _path + ".trace",
            expected: "(OpenApiV3.IOperation | undefined)",
            value: input.trace
        }) ].every((flag => flag));
        const _vo99 = (input, _path, _exceptionable = true) => [ "string" === typeof input.$ref && RegExp(/^#\/components\/parameters\/(.*)/).test(input.$ref) || _report(_exceptionable, {
            path: _path + ".$ref",
            expected: "`#/components/parameters/${string}`",
            value: input.$ref
        }), (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true ].every((flag => flag));
        const _vo100 = (input, _path, _exceptionable = true) => [ undefined === input.operationId || "string" === typeof input.operationId || _report(_exceptionable, {
            path: _path + ".operationId",
            expected: "(string | undefined)",
            value: input.operationId
        }), undefined === input.parameters || (Array.isArray(input.parameters) || _report(_exceptionable, {
            path: _path + ".parameters",
            expected: "(Array<IParameter | IReference<`#/components/headers/${string}`> | IReference<`#/components/parameters/${string}`>> | undefined)",
            value: input.parameters
        })) && input.parameters.map(((elem, _index120) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
            path: _path + ".parameters[" + _index120 + "]",
            expected: "(OpenApiV3.IJsonSchema.IReference<`#/components/headers/${string}`> | OpenApiV3.IJsonSchema.IReference<`#/components/parameters/${string}`> | OpenApiV3.IOperation.IParameter)",
            value: elem
        })) && _vu4(elem, _path + ".parameters[" + _index120 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".parameters[" + _index120 + "]",
            expected: "(OpenApiV3.IJsonSchema.IReference<`#/components/headers/${string}`> | OpenApiV3.IJsonSchema.IReference<`#/components/parameters/${string}`> | OpenApiV3.IOperation.IParameter)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".parameters",
            expected: "(Array<IParameter | IReference<`#/components/headers/${string}`> | IReference<`#/components/parameters/${string}`>> | undefined)",
            value: input.parameters
        }), undefined === input.requestBody || ("object" === typeof input.requestBody && null !== input.requestBody && false === Array.isArray(input.requestBody) || _report(_exceptionable, {
            path: _path + ".requestBody",
            expected: "(OpenApiV3.IJsonSchema.IReference<`#/components/requestBodies/${string}`> | OpenApiV3.IOperation.IRequestBody | undefined)",
            value: input.requestBody
        })) && _vu15(input.requestBody, _path + ".requestBody", _exceptionable) || _report(_exceptionable, {
            path: _path + ".requestBody",
            expected: "(OpenApiV3.IJsonSchema.IReference<`#/components/requestBodies/${string}`> | OpenApiV3.IOperation.IRequestBody | undefined)",
            value: input.requestBody
        }), undefined === input.responses || ("object" === typeof input.responses && null !== input.responses && false === Array.isArray(input.responses) || _report(_exceptionable, {
            path: _path + ".responses",
            expected: "(Record<string, IResponse | IReference<`#/components/responses/${string}`>> | undefined)",
            value: input.responses
        })) && _vo102(input.responses, _path + ".responses", _exceptionable) || _report(_exceptionable, {
            path: _path + ".responses",
            expected: "(Record<string, IResponse | IReference<`#/components/responses/${string}`>> | undefined)",
            value: input.responses
        }), undefined === input.servers || (Array.isArray(input.servers) || _report(_exceptionable, {
            path: _path + ".servers",
            expected: "(Array<OpenApiV3.IServer> | undefined)",
            value: input.servers
        })) && input.servers.map(((elem, _index121) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
            path: _path + ".servers[" + _index121 + "]",
            expected: "OpenApiV3.IServer",
            value: elem
        })) && _vo49(elem, _path + ".servers[" + _index121 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".servers[" + _index121 + "]",
            expected: "OpenApiV3.IServer",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".servers",
            expected: "(Array<OpenApiV3.IServer> | undefined)",
            value: input.servers
        }), undefined === input.summary || "string" === typeof input.summary || _report(_exceptionable, {
            path: _path + ".summary",
            expected: "(string | undefined)",
            value: input.summary
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.security || (Array.isArray(input.security) || _report(_exceptionable, {
            path: _path + ".security",
            expected: "(Array<Record<string, Array<string>>> | undefined)",
            value: input.security
        })) && input.security.map(((elem, _index122) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
            path: _path + ".security[" + _index122 + "]",
            expected: "Record<string, Array<string>>",
            value: elem
        })) && _vo39(elem, _path + ".security[" + _index122 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".security[" + _index122 + "]",
            expected: "Record<string, Array<string>>",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".security",
            expected: "(Array<Record<string, Array<string>>> | undefined)",
            value: input.security
        }), undefined === input.tags || (Array.isArray(input.tags) || _report(_exceptionable, {
            path: _path + ".tags",
            expected: "(Array<string> | undefined)",
            value: input.tags
        })) && input.tags.map(((elem, _index123) => "string" === typeof elem || _report(_exceptionable, {
            path: _path + ".tags[" + _index123 + "]",
            expected: "string",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".tags",
            expected: "(Array<string> | undefined)",
            value: input.tags
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }) ].every((flag => flag));
        const _vo101 = (input, _path, _exceptionable = true) => [ "string" === typeof input.$ref && RegExp(/^#\/components\/requestBodies\/(.*)/).test(input.$ref) || _report(_exceptionable, {
            path: _path + ".$ref",
            expected: "`#/components/requestBodies/${string}`",
            value: input.$ref
        }), (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true ].every((flag => flag));
        const _vo102 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApiV3.IJsonSchema.IReference<`#/components/responses/${string}`> | OpenApiV3.IOperation.IResponse)",
                value
            })) && _vu16(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApiV3.IJsonSchema.IReference<`#/components/responses/${string}`> | OpenApiV3.IOperation.IResponse)",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo103 = (input, _path, _exceptionable = true) => [ "string" === typeof input.$ref && RegExp(/^#\/components\/responses\/(.*)/).test(input.$ref) || _report(_exceptionable, {
            path: _path + ".$ref",
            expected: "`#/components/responses/${string}`",
            value: input.$ref
        }), (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true ].every((flag => flag));
        const _vo104 = (input, _path, _exceptionable = true) => [ "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "string",
            value: input.name
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }) ].every((flag => flag));
        const _vo105 = (input, _path, _exceptionable = true) => [ "string" === typeof input.openapi && RegExp(/^3\.1\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(input.openapi) || _report(_exceptionable, {
            path: _path + ".openapi",
            expected: "`3.1.${number}`",
            value: input.openapi
        }), undefined === input.servers || (Array.isArray(input.servers) || _report(_exceptionable, {
            path: _path + ".servers",
            expected: "(Array<OpenApiV3_1.IServer> | undefined)",
            value: input.servers
        })) && input.servers.map(((elem, _index124) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
            path: _path + ".servers[" + _index124 + "]",
            expected: "OpenApiV3_1.IServer",
            value: elem
        })) && _vo106(elem, _path + ".servers[" + _index124 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".servers[" + _index124 + "]",
            expected: "OpenApiV3_1.IServer",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".servers",
            expected: "(Array<OpenApiV3_1.IServer> | undefined)",
            value: input.servers
        }), undefined === input.info || ("object" === typeof input.info && null !== input.info || _report(_exceptionable, {
            path: _path + ".info",
            expected: "(OpenApiV3_1.IDocument.IInfo | undefined)",
            value: input.info
        })) && _vo109(input.info, _path + ".info", _exceptionable) || _report(_exceptionable, {
            path: _path + ".info",
            expected: "(OpenApiV3_1.IDocument.IInfo | undefined)",
            value: input.info
        }), undefined === input.components || ("object" === typeof input.components && null !== input.components && false === Array.isArray(input.components) || _report(_exceptionable, {
            path: _path + ".components",
            expected: "(OpenApiV3_1.IComponents | undefined)",
            value: input.components
        })) && _vo112(input.components, _path + ".components", _exceptionable) || _report(_exceptionable, {
            path: _path + ".components",
            expected: "(OpenApiV3_1.IComponents | undefined)",
            value: input.components
        }), undefined === input.paths || ("object" === typeof input.paths && null !== input.paths && false === Array.isArray(input.paths) || _report(_exceptionable, {
            path: _path + ".paths",
            expected: "(Record<string, OpenApiV3_1.IPath> | undefined)",
            value: input.paths
        })) && _vo130(input.paths, _path + ".paths", _exceptionable) || _report(_exceptionable, {
            path: _path + ".paths",
            expected: "(Record<string, OpenApiV3_1.IPath> | undefined)",
            value: input.paths
        }), undefined === input.webhooks || ("object" === typeof input.webhooks && null !== input.webhooks && false === Array.isArray(input.webhooks) || _report(_exceptionable, {
            path: _path + ".webhooks",
            expected: "(Record<string, IPath | IReference<`#/components/pathItems/${string}`>> | undefined)",
            value: input.webhooks
        })) && _vo163(input.webhooks, _path + ".webhooks", _exceptionable) || _report(_exceptionable, {
            path: _path + ".webhooks",
            expected: "(Record<string, IPath | IReference<`#/components/pathItems/${string}`>> | undefined)",
            value: input.webhooks
        }), undefined === input.security || (Array.isArray(input.security) || _report(_exceptionable, {
            path: _path + ".security",
            expected: "(Array<Record<string, Array<string>>> | undefined)",
            value: input.security
        })) && input.security.map(((elem, _index125) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
            path: _path + ".security[" + _index125 + "]",
            expected: "Record<string, Array<string>>",
            value: elem
        })) && _vo39(elem, _path + ".security[" + _index125 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".security[" + _index125 + "]",
            expected: "Record<string, Array<string>>",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".security",
            expected: "(Array<Record<string, Array<string>>> | undefined)",
            value: input.security
        }), undefined === input.tags || (Array.isArray(input.tags) || _report(_exceptionable, {
            path: _path + ".tags",
            expected: "(Array<OpenApiV3_1.IDocument.ITag> | undefined)",
            value: input.tags
        })) && input.tags.map(((elem, _index126) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
            path: _path + ".tags[" + _index126 + "]",
            expected: "OpenApiV3_1.IDocument.ITag",
            value: elem
        })) && _vo165(elem, _path + ".tags[" + _index126 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".tags[" + _index126 + "]",
            expected: "OpenApiV3_1.IDocument.ITag",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".tags",
            expected: "(Array<OpenApiV3_1.IDocument.ITag> | undefined)",
            value: input.tags
        }) ].every((flag => flag));
        const _vo106 = (input, _path, _exceptionable = true) => [ "string" === typeof input.url || _report(_exceptionable, {
            path: _path + ".url",
            expected: "string",
            value: input.url
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.variables || ("object" === typeof input.variables && null !== input.variables && false === Array.isArray(input.variables) || _report(_exceptionable, {
            path: _path + ".variables",
            expected: "(Record<string, OpenApiV3_1.IServer.IVariable> | undefined)",
            value: input.variables
        })) && _vo107(input.variables, _path + ".variables", _exceptionable) || _report(_exceptionable, {
            path: _path + ".variables",
            expected: "(Record<string, OpenApiV3_1.IServer.IVariable> | undefined)",
            value: input.variables
        }) ].every((flag => flag));
        const _vo107 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3_1.IServer.IVariable",
                value
            })) && _vo108(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3_1.IServer.IVariable",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo108 = (input, _path, _exceptionable = true) => [ "string" === typeof input["default"] || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: "string",
            value: input["default"]
        }), undefined === input["enum"] || (Array.isArray(input["enum"]) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "((Array<string> & MinItems<1>) | undefined)",
            value: input["enum"]
        })) && ((1 <= input["enum"].length || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "Array<> & MinItems<1>",
            value: input["enum"]
        })) && input["enum"].map(((elem, _index127) => "string" === typeof elem || _report(_exceptionable, {
            path: _path + '["enum"][' + _index127 + "]",
            expected: "string",
            value: elem
        }))).every((flag => flag))) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "((Array<string> & MinItems<1>) | undefined)",
            value: input["enum"]
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }) ].every((flag => flag));
        const _vo109 = (input, _path, _exceptionable = true) => [ "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "string",
            value: input.title
        }), undefined === input.summary || "string" === typeof input.summary || _report(_exceptionable, {
            path: _path + ".summary",
            expected: "(string | undefined)",
            value: input.summary
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.termsOfService || "string" === typeof input.termsOfService || _report(_exceptionable, {
            path: _path + ".termsOfService",
            expected: "(string | undefined)",
            value: input.termsOfService
        }), undefined === input.contact || ("object" === typeof input.contact && null !== input.contact && false === Array.isArray(input.contact) || _report(_exceptionable, {
            path: _path + ".contact",
            expected: "(OpenApiV3_1.IDocument.IContact | undefined)",
            value: input.contact
        })) && _vo110(input.contact, _path + ".contact", _exceptionable) || _report(_exceptionable, {
            path: _path + ".contact",
            expected: "(OpenApiV3_1.IDocument.IContact | undefined)",
            value: input.contact
        }), undefined === input.license || ("object" === typeof input.license && null !== input.license || _report(_exceptionable, {
            path: _path + ".license",
            expected: "(OpenApiV3_1.IDocument.ILicense | undefined)",
            value: input.license
        })) && _vo111(input.license, _path + ".license", _exceptionable) || _report(_exceptionable, {
            path: _path + ".license",
            expected: "(OpenApiV3_1.IDocument.ILicense | undefined)",
            value: input.license
        }), "string" === typeof input.version || _report(_exceptionable, {
            path: _path + ".version",
            expected: "string",
            value: input.version
        }) ].every((flag => flag));
        const _vo110 = (input, _path, _exceptionable = true) => [ undefined === input.name || "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "(string | undefined)",
            value: input.name
        }), undefined === input.url || "string" === typeof input.url || _report(_exceptionable, {
            path: _path + ".url",
            expected: "(string | undefined)",
            value: input.url
        }), undefined === input.email || "string" === typeof input.email || _report(_exceptionable, {
            path: _path + ".email",
            expected: "(string | undefined)",
            value: input.email
        }) ].every((flag => flag));
        const _vo111 = (input, _path, _exceptionable = true) => [ "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "string",
            value: input.name
        }), undefined === input.identifier || "string" === typeof input.identifier || _report(_exceptionable, {
            path: _path + ".identifier",
            expected: "(string | undefined)",
            value: input.identifier
        }), undefined === input.url || "string" === typeof input.url || _report(_exceptionable, {
            path: _path + ".url",
            expected: "(string | undefined)",
            value: input.url
        }) ].every((flag => flag));
        const _vo112 = (input, _path, _exceptionable = true) => [ undefined === input.schemas || ("object" === typeof input.schemas && null !== input.schemas && false === Array.isArray(input.schemas) || _report(_exceptionable, {
            path: _path + ".schemas",
            expected: "(Record<string, OpenApiV3_1.IJsonSchema> | undefined)",
            value: input.schemas
        })) && _vo113(input.schemas, _path + ".schemas", _exceptionable) || _report(_exceptionable, {
            path: _path + ".schemas",
            expected: "(Record<string, OpenApiV3_1.IJsonSchema> | undefined)",
            value: input.schemas
        }), undefined === input.pathItems || ("object" === typeof input.pathItems && null !== input.pathItems && false === Array.isArray(input.pathItems) || _report(_exceptionable, {
            path: _path + ".pathItems",
            expected: "(Record<string, OpenApiV3_1.IPath> | undefined)",
            value: input.pathItems
        })) && _vo130(input.pathItems, _path + ".pathItems", _exceptionable) || _report(_exceptionable, {
            path: _path + ".pathItems",
            expected: "(Record<string, OpenApiV3_1.IPath> | undefined)",
            value: input.pathItems
        }), undefined === input.responses || ("object" === typeof input.responses && null !== input.responses && false === Array.isArray(input.responses) || _report(_exceptionable, {
            path: _path + ".responses",
            expected: "(Record<string, OpenApiV3_1.IOperation.IResponse> | undefined)",
            value: input.responses
        })) && _vo148(input.responses, _path + ".responses", _exceptionable) || _report(_exceptionable, {
            path: _path + ".responses",
            expected: "(Record<string, OpenApiV3_1.IOperation.IResponse> | undefined)",
            value: input.responses
        }), undefined === input.parameters || ("object" === typeof input.parameters && null !== input.parameters && false === Array.isArray(input.parameters) || _report(_exceptionable, {
            path: _path + ".parameters",
            expected: "(Record<string, OpenApiV3_1.IOperation.IParameter> | undefined)",
            value: input.parameters
        })) && _vo149(input.parameters, _path + ".parameters", _exceptionable) || _report(_exceptionable, {
            path: _path + ".parameters",
            expected: "(Record<string, OpenApiV3_1.IOperation.IParameter> | undefined)",
            value: input.parameters
        }), undefined === input.requestBodies || ("object" === typeof input.requestBodies && null !== input.requestBodies && false === Array.isArray(input.requestBodies) || _report(_exceptionable, {
            path: _path + ".requestBodies",
            expected: "(Record<string, OpenApiV3_1.IOperation.IRequestBody> | undefined)",
            value: input.requestBodies
        })) && _vo150(input.requestBodies, _path + ".requestBodies", _exceptionable) || _report(_exceptionable, {
            path: _path + ".requestBodies",
            expected: "(Record<string, OpenApiV3_1.IOperation.IRequestBody> | undefined)",
            value: input.requestBodies
        }), undefined === input.securitySchemes || ("object" === typeof input.securitySchemes && null !== input.securitySchemes && false === Array.isArray(input.securitySchemes) || _report(_exceptionable, {
            path: _path + ".securitySchemes",
            expected: "(Record<string, OpenApiV3_1.ISecurityScheme> | undefined)",
            value: input.securitySchemes
        })) && _vo151(input.securitySchemes, _path + ".securitySchemes", _exceptionable) || _report(_exceptionable, {
            path: _path + ".securitySchemes",
            expected: "(Record<string, OpenApiV3_1.ISecurityScheme> | undefined)",
            value: input.securitySchemes
        }), undefined === input.headers || ("object" === typeof input.headers && null !== input.headers && false === Array.isArray(input.headers) || _report(_exceptionable, {
            path: _path + ".headers",
            expected: '(Record<string, Omit<OpenApiV3_1.IOperation.IParameter, "in">> | undefined)',
            value: input.headers
        })) && _vo161(input.headers, _path + ".headers", _exceptionable) || _report(_exceptionable, {
            path: _path + ".headers",
            expected: '(Record<string, Omit<OpenApiV3_1.IOperation.IParameter, "in">> | undefined)',
            value: input.headers
        }), undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, OpenApiV3_1.IExample> | undefined)",
            value: input.examples
        })) && _vo162(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, OpenApiV3_1.IExample> | undefined)",
            value: input.examples
        }) ].every((flag => flag));
        const _vo113 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value
            })) && _vu5(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo114 = (input, _path, _exceptionable = true) => [ undefined === input.nullable || "boolean" === typeof input.nullable || _report(_exceptionable, {
            path: _path + ".nullable",
            expected: "(boolean | undefined)",
            value: input.nullable
        }), undefined === input.properties || ("object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) || _report(_exceptionable, {
            path: _path + ".properties",
            expected: "(Record<string, OpenApiV3_1.IJsonSchema> | undefined)",
            value: input.properties
        })) && _vo113(input.properties, _path + ".properties", _exceptionable) || _report(_exceptionable, {
            path: _path + ".properties",
            expected: "(Record<string, OpenApiV3_1.IJsonSchema> | undefined)",
            value: input.properties
        }), undefined === input.required || (Array.isArray(input.required) || _report(_exceptionable, {
            path: _path + ".required",
            expected: "(Array<string> | undefined)",
            value: input.required
        })) && input.required.map(((elem, _index128) => "string" === typeof elem || _report(_exceptionable, {
            path: _path + ".required[" + _index128 + "]",
            expected: "string",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".required",
            expected: "(Array<string> | undefined)",
            value: input.required
        }), (null !== input.additionalProperties || _report(_exceptionable, {
            path: _path + ".additionalProperties",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalProperties
        })) && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || ("object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) || _report(_exceptionable, {
            path: _path + ".additionalProperties",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalProperties
        })) && _vu5(input.additionalProperties, _path + ".additionalProperties", _exceptionable) || _report(_exceptionable, {
            path: _path + ".additionalProperties",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalProperties
        })), undefined === input.maxProperties || "number" === typeof input.maxProperties || _report(_exceptionable, {
            path: _path + ".maxProperties",
            expected: "(number | undefined)",
            value: input.maxProperties
        }), undefined === input.minProperties || "number" === typeof input.minProperties || _report(_exceptionable, {
            path: _path + ".minProperties",
            expected: "(number | undefined)",
            value: input.minProperties
        }), "object" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"object"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) ].every((flag => flag));
        const _vo115 = (input, _path, _exceptionable = true) => [ (Array.isArray(input.type) || _report(_exceptionable, {
            path: _path + ".type",
            expected: 'Array<"string" | "number" | "boolean" | "object" | "integer" | "array" | "null">',
            value: input.type
        })) && input.type.map(((elem, _index129) => "string" === elem || "number" === elem || "boolean" === elem || "object" === elem || "integer" === elem || "array" === elem || "null" === elem || _report(_exceptionable, {
            path: _path + ".type[" + _index129 + "]",
            expected: '("array" | "boolean" | "integer" | "null" | "number" | "object" | "string")',
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".type",
            expected: 'Array<"string" | "number" | "boolean" | "object" | "integer" | "array" | "null">',
            value: input.type
        }), null === input["default"] || undefined === input["default"] || Array.isArray(input["default"]) || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: "(Array<any> | null | undefined)",
            value: input["default"]
        }), undefined === input["enum"] || Array.isArray(input["enum"]) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<any> | undefined)",
            value: input["enum"]
        }), "string" === typeof input["const"] || "number" === typeof input["const"] || "boolean" === typeof input["const"] || _report(_exceptionable, {
            path: _path + '["const"]',
            expected: "(boolean | number | string)",
            value: input["const"]
        }), undefined === input.nullable || "boolean" === typeof input.nullable || _report(_exceptionable, {
            path: _path + ".nullable",
            expected: "(boolean | undefined)",
            value: input.nullable
        }), (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, undefined === input.minimum || "number" === typeof input.minimum || _report(_exceptionable, {
            path: _path + ".minimum",
            expected: "(number | undefined)",
            value: input.minimum
        }), undefined === input.maximum || "number" === typeof input.maximum || _report(_exceptionable, {
            path: _path + ".maximum",
            expected: "(number | undefined)",
            value: input.maximum
        }), undefined === input.multipleOf || "number" === typeof input.multipleOf && (0 < input.multipleOf || _report(_exceptionable, {
            path: _path + ".multipleOf",
            expected: "number & ExclusiveMinimum<0>",
            value: input.multipleOf
        })) || _report(_exceptionable, {
            path: _path + ".multipleOf",
            expected: "((number & ExclusiveMinimum<0>) | undefined)",
            value: input.multipleOf
        }), undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum || _report(_exceptionable, {
            path: _path + ".exclusiveMinimum",
            expected: "(boolean | number | undefined)",
            value: input.exclusiveMinimum
        }), undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum || _report(_exceptionable, {
            path: _path + ".exclusiveMaximum",
            expected: "(boolean | number | undefined)",
            value: input.exclusiveMaximum
        }), undefined === input.format || "string" === typeof input.format || _report(_exceptionable, {
            path: _path + ".format",
            expected: "(string | undefined)",
            value: input.format
        }), undefined === input.maxLength || "number" === typeof input.maxLength && (Math.floor(input.maxLength) === input.maxLength && 0 <= input.maxLength && input.maxLength <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".maxLength",
            expected: 'number & Type<"uint64">',
            value: input.maxLength
        })) || _report(_exceptionable, {
            path: _path + ".maxLength",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.maxLength
        }), undefined === input.pattern || "string" === typeof input.pattern || _report(_exceptionable, {
            path: _path + ".pattern",
            expected: "(string | undefined)",
            value: input.pattern
        }), undefined === input.contentMediaType || "string" === typeof input.contentMediaType || _report(_exceptionable, {
            path: _path + ".contentMediaType",
            expected: "(string | undefined)",
            value: input.contentMediaType
        }), undefined === input.minLength || "number" === typeof input.minLength && (Math.floor(input.minLength) === input.minLength && 0 <= input.minLength && input.minLength <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".minLength",
            expected: 'number & Type<"uint64">',
            value: input.minLength
        })) || _report(_exceptionable, {
            path: _path + ".minLength",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.minLength
        }), (null !== input.items || _report(_exceptionable, {
            path: _path + ".items",
            expected: "(Array<OpenApiV3_1.IJsonSchema> | OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | undefined)",
            value: input.items
        })) && (undefined === input.items || (Array.isArray(input.items) && input.items.map(((elem, _index130) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
            path: _path + ".items[" + _index130 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        })) && _vu5(elem, _path + ".items[" + _index130 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".items[" + _index130 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        }))).every((flag => flag)) || "object" === typeof input.items && null !== input.items && false === Array.isArray(input.items) && _vu5(input.items, _path + ".items", _exceptionable) || _report(_exceptionable, {
            path: _path + ".items",
            expected: "(Array<OpenApiV3_1.IJsonSchema> | OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | undefined)",
            value: input.items
        })) || _report(_exceptionable, {
            path: _path + ".items",
            expected: "(Array<OpenApiV3_1.IJsonSchema> | OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | undefined)",
            value: input.items
        })), undefined === input.prefixItems || (Array.isArray(input.prefixItems) || _report(_exceptionable, {
            path: _path + ".prefixItems",
            expected: "(Array<OpenApiV3_1.IJsonSchema> | undefined)",
            value: input.prefixItems
        })) && input.prefixItems.map(((elem, _index131) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
            path: _path + ".prefixItems[" + _index131 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        })) && _vu5(elem, _path + ".prefixItems[" + _index131 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".prefixItems[" + _index131 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".prefixItems",
            expected: "(Array<OpenApiV3_1.IJsonSchema> | undefined)",
            value: input.prefixItems
        }), undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems || _report(_exceptionable, {
            path: _path + ".uniqueItems",
            expected: "(boolean | undefined)",
            value: input.uniqueItems
        }), (null !== input.additionalItems || _report(_exceptionable, {
            path: _path + ".additionalItems",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalItems
        })) && (undefined === input.additionalItems || "boolean" === typeof input.additionalItems || ("object" === typeof input.additionalItems && null !== input.additionalItems && false === Array.isArray(input.additionalItems) || _report(_exceptionable, {
            path: _path + ".additionalItems",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalItems
        })) && _vu5(input.additionalItems, _path + ".additionalItems", _exceptionable) || _report(_exceptionable, {
            path: _path + ".additionalItems",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalItems
        })), undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".minItems",
            expected: 'number & Type<"uint64">',
            value: input.minItems
        })) || _report(_exceptionable, {
            path: _path + ".minItems",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.minItems
        }), undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".maxItems",
            expected: 'number & Type<"uint64">',
            value: input.maxItems
        })) || _report(_exceptionable, {
            path: _path + ".maxItems",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.maxItems
        }), (null !== input.additionalProperties || _report(_exceptionable, {
            path: _path + ".additionalProperties",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalProperties
        })) && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || ("object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) || _report(_exceptionable, {
            path: _path + ".additionalProperties",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalProperties
        })) && _vu5(input.additionalProperties, _path + ".additionalProperties", _exceptionable) || _report(_exceptionable, {
            path: _path + ".additionalProperties",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalProperties
        })), undefined === input.properties || ("object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) || _report(_exceptionable, {
            path: _path + ".properties",
            expected: "(Record<string, OpenApiV3_1.IJsonSchema> | undefined)",
            value: input.properties
        })) && _vo113(input.properties, _path + ".properties", _exceptionable) || _report(_exceptionable, {
            path: _path + ".properties",
            expected: "(Record<string, OpenApiV3_1.IJsonSchema> | undefined)",
            value: input.properties
        }), undefined === input.required || (Array.isArray(input.required) || _report(_exceptionable, {
            path: _path + ".required",
            expected: "(Array<string> | undefined)",
            value: input.required
        })) && input.required.map(((elem, _index132) => "string" === typeof elem || _report(_exceptionable, {
            path: _path + ".required[" + _index132 + "]",
            expected: "string",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".required",
            expected: "(Array<string> | undefined)",
            value: input.required
        }), undefined === input.maxProperties || "number" === typeof input.maxProperties || _report(_exceptionable, {
            path: _path + ".maxProperties",
            expected: "(number | undefined)",
            value: input.maxProperties
        }), undefined === input.minProperties || "number" === typeof input.minProperties || _report(_exceptionable, {
            path: _path + ".minProperties",
            expected: "(number | undefined)",
            value: input.minProperties
        }), (Array.isArray(input.oneOf) || _report(_exceptionable, {
            path: _path + ".oneOf",
            expected: "Array<OpenApiV3_1.IJsonSchema>",
            value: input.oneOf
        })) && input.oneOf.map(((elem, _index133) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
            path: _path + ".oneOf[" + _index133 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        })) && _vu5(elem, _path + ".oneOf[" + _index133 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".oneOf[" + _index133 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".oneOf",
            expected: "Array<OpenApiV3_1.IJsonSchema>",
            value: input.oneOf
        }), undefined === input.discriminator || ("object" === typeof input.discriminator && null !== input.discriminator || _report(_exceptionable, {
            path: _path + ".discriminator",
            expected: "(OpenApiV3_1.IJsonSchema.IOneOf.IDiscriminator | undefined)",
            value: input.discriminator
        })) && _vo127(input.discriminator, _path + ".discriminator", _exceptionable) || _report(_exceptionable, {
            path: _path + ".discriminator",
            expected: "(OpenApiV3_1.IJsonSchema.IOneOf.IDiscriminator | undefined)",
            value: input.discriminator
        }), (Array.isArray(input.anyOf) || _report(_exceptionable, {
            path: _path + ".anyOf",
            expected: "Array<OpenApiV3_1.IJsonSchema>",
            value: input.anyOf
        })) && input.anyOf.map(((elem, _index134) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
            path: _path + ".anyOf[" + _index134 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        })) && _vu5(elem, _path + ".anyOf[" + _index134 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".anyOf[" + _index134 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".anyOf",
            expected: "Array<OpenApiV3_1.IJsonSchema>",
            value: input.anyOf
        }), (Array.isArray(input.allOf) || _report(_exceptionable, {
            path: _path + ".allOf",
            expected: "Array<OpenApiV3_1.IJsonSchema>",
            value: input.allOf
        })) && input.allOf.map(((elem, _index135) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
            path: _path + ".allOf[" + _index135 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        })) && _vu5(elem, _path + ".allOf[" + _index135 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".allOf[" + _index135 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".allOf",
            expected: "Array<OpenApiV3_1.IJsonSchema>",
            value: input.allOf
        }), "string" === typeof input.$ref || _report(_exceptionable, {
            path: _path + ".$ref",
            expected: "string",
            value: input.$ref
        }) ].every((flag => flag));
        const _vo116 = (input, _path, _exceptionable = true) => [ "string" === typeof input["const"] || "number" === typeof input["const"] || "boolean" === typeof input["const"] || _report(_exceptionable, {
            path: _path + '["const"]',
            expected: "(boolean | number | string)",
            value: input["const"]
        }), undefined === input.nullable || "boolean" === typeof input.nullable || _report(_exceptionable, {
            path: _path + ".nullable",
            expected: "(boolean | undefined)",
            value: input.nullable
        }), (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true ].every((flag => flag));
        const _vo117 = (input, _path, _exceptionable = true) => [ undefined === input.nullable || "boolean" === typeof input.nullable || _report(_exceptionable, {
            path: _path + ".nullable",
            expected: "(boolean | undefined)",
            value: input.nullable
        }), null === input["default"] || undefined === input["default"] || "boolean" === typeof input["default"] || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: "(boolean | null | undefined)",
            value: input["default"]
        }), undefined === input["enum"] || (Array.isArray(input["enum"]) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<boolean | null> | undefined)",
            value: input["enum"]
        })) && input["enum"].map(((elem, _index136) => null === elem || "boolean" === typeof elem || _report(_exceptionable, {
            path: _path + '["enum"][' + _index136 + "]",
            expected: "(boolean | null)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<boolean | null> | undefined)",
            value: input["enum"]
        }), "boolean" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"boolean"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) ].every((flag => flag));
        const _vo118 = (input, _path, _exceptionable = true) => [ undefined === input.nullable || "boolean" === typeof input.nullable || _report(_exceptionable, {
            path: _path + ".nullable",
            expected: "(boolean | undefined)",
            value: input.nullable
        }), null === input["default"] || undefined === input["default"] || "number" === typeof input["default"] && (Math.floor(input["default"]) === input["default"] && -0x8000000000000000 <= input["default"] && input["default"] <= 0x8000000000000000 || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: 'number & Type<"int64">',
            value: input["default"]
        })) || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: '((number & Type<"int64">) | null | undefined)',
            value: input["default"]
        }), undefined === input["enum"] || (Array.isArray(input["enum"]) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<number | null> | undefined)",
            value: input["enum"]
        })) && input["enum"].map(((elem, _index137) => null === elem || "number" === typeof elem || _report(_exceptionable, {
            path: _path + '["enum"][' + _index137 + "]",
            expected: "(null | number)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<number | null> | undefined)",
            value: input["enum"]
        }), undefined === input.minimum || "number" === typeof input.minimum && (Math.floor(input.minimum) === input.minimum && -0x8000000000000000 <= input.minimum && input.minimum <= 0x8000000000000000 || _report(_exceptionable, {
            path: _path + ".minimum",
            expected: 'number & Type<"int64">',
            value: input.minimum
        })) || _report(_exceptionable, {
            path: _path + ".minimum",
            expected: '((number & Type<"int64">) | undefined)',
            value: input.minimum
        }), undefined === input.maximum || "number" === typeof input.maximum && (Math.floor(input.maximum) === input.maximum && -0x8000000000000000 <= input.maximum && input.maximum <= 0x8000000000000000 || _report(_exceptionable, {
            path: _path + ".maximum",
            expected: 'number & Type<"int64">',
            value: input.maximum
        })) || _report(_exceptionable, {
            path: _path + ".maximum",
            expected: '((number & Type<"int64">) | undefined)',
            value: input.maximum
        }), undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum && (Math.floor(input.exclusiveMinimum) === input.exclusiveMinimum && -0x8000000000000000 <= input.exclusiveMinimum && input.exclusiveMinimum <= 0x8000000000000000 || _report(_exceptionable, {
            path: _path + ".exclusiveMinimum",
            expected: 'number & Type<"int64">',
            value: input.exclusiveMinimum
        })) || "boolean" === typeof input.exclusiveMinimum || _report(_exceptionable, {
            path: _path + ".exclusiveMinimum",
            expected: '((number & Type<"int64">) | boolean | undefined)',
            value: input.exclusiveMinimum
        }), undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum && (Math.floor(input.exclusiveMaximum) === input.exclusiveMaximum && -0x8000000000000000 <= input.exclusiveMaximum && input.exclusiveMaximum <= 0x8000000000000000 || _report(_exceptionable, {
            path: _path + ".exclusiveMaximum",
            expected: 'number & Type<"int64">',
            value: input.exclusiveMaximum
        })) || "boolean" === typeof input.exclusiveMaximum || _report(_exceptionable, {
            path: _path + ".exclusiveMaximum",
            expected: '((number & Type<"int64">) | boolean | undefined)',
            value: input.exclusiveMaximum
        }), undefined === input.multipleOf || "number" === typeof input.multipleOf && (Math.floor(input.multipleOf) === input.multipleOf && 0 <= input.multipleOf && input.multipleOf <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".multipleOf",
            expected: 'number & Type<"uint64">',
            value: input.multipleOf
        })) && (0 < input.multipleOf || _report(_exceptionable, {
            path: _path + ".multipleOf",
            expected: "number & ExclusiveMinimum<0>",
            value: input.multipleOf
        })) || _report(_exceptionable, {
            path: _path + ".multipleOf",
            expected: '((number & Type<"uint64"> & ExclusiveMinimum<0>) | undefined)',
            value: input.multipleOf
        }), "integer" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"integer"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) ].every((flag => flag));
        const _vo119 = (input, _path, _exceptionable = true) => [ undefined === input.nullable || "boolean" === typeof input.nullable || _report(_exceptionable, {
            path: _path + ".nullable",
            expected: "(boolean | undefined)",
            value: input.nullable
        }), null === input["default"] || undefined === input["default"] || "number" === typeof input["default"] || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: "(null | number | undefined)",
            value: input["default"]
        }), undefined === input["enum"] || (Array.isArray(input["enum"]) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<number | null> | undefined)",
            value: input["enum"]
        })) && input["enum"].map(((elem, _index138) => null === elem || "number" === typeof elem || _report(_exceptionable, {
            path: _path + '["enum"][' + _index138 + "]",
            expected: "(null | number)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<number | null> | undefined)",
            value: input["enum"]
        }), undefined === input.minimum || "number" === typeof input.minimum || _report(_exceptionable, {
            path: _path + ".minimum",
            expected: "(number | undefined)",
            value: input.minimum
        }), undefined === input.maximum || "number" === typeof input.maximum || _report(_exceptionable, {
            path: _path + ".maximum",
            expected: "(number | undefined)",
            value: input.maximum
        }), undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum || _report(_exceptionable, {
            path: _path + ".exclusiveMinimum",
            expected: "(boolean | number | undefined)",
            value: input.exclusiveMinimum
        }), undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum || _report(_exceptionable, {
            path: _path + ".exclusiveMaximum",
            expected: "(boolean | number | undefined)",
            value: input.exclusiveMaximum
        }), undefined === input.multipleOf || "number" === typeof input.multipleOf && (0 < input.multipleOf || _report(_exceptionable, {
            path: _path + ".multipleOf",
            expected: "number & ExclusiveMinimum<0>",
            value: input.multipleOf
        })) || _report(_exceptionable, {
            path: _path + ".multipleOf",
            expected: "((number & ExclusiveMinimum<0>) | undefined)",
            value: input.multipleOf
        }), "number" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"number"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) ].every((flag => flag));
        const _vo120 = (input, _path, _exceptionable = true) => [ undefined === input.nullable || "boolean" === typeof input.nullable || _report(_exceptionable, {
            path: _path + ".nullable",
            expected: "(boolean | undefined)",
            value: input.nullable
        }), null === input["default"] || undefined === input["default"] || "string" === typeof input["default"] || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: "(null | string | undefined)",
            value: input["default"]
        }), undefined === input["enum"] || (Array.isArray(input["enum"]) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<string | null> | undefined)",
            value: input["enum"]
        })) && input["enum"].map(((elem, _index139) => null === elem || "string" === typeof elem || _report(_exceptionable, {
            path: _path + '["enum"][' + _index139 + "]",
            expected: "(null | string)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<string | null> | undefined)",
            value: input["enum"]
        }), undefined === input.format || "string" === typeof input.format || _report(_exceptionable, {
            path: _path + ".format",
            expected: "(string | undefined)",
            value: input.format
        }), undefined === input.pattern || "string" === typeof input.pattern || _report(_exceptionable, {
            path: _path + ".pattern",
            expected: "(string | undefined)",
            value: input.pattern
        }), undefined === input.contentMediaType || "string" === typeof input.contentMediaType || _report(_exceptionable, {
            path: _path + ".contentMediaType",
            expected: "(string | undefined)",
            value: input.contentMediaType
        }), undefined === input.minLength || "number" === typeof input.minLength && (Math.floor(input.minLength) === input.minLength && 0 <= input.minLength && input.minLength <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".minLength",
            expected: 'number & Type<"uint64">',
            value: input.minLength
        })) || _report(_exceptionable, {
            path: _path + ".minLength",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.minLength
        }), undefined === input.maxLength || "number" === typeof input.maxLength && (Math.floor(input.maxLength) === input.maxLength && 0 <= input.maxLength && input.maxLength <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".maxLength",
            expected: 'number & Type<"uint64">',
            value: input.maxLength
        })) || _report(_exceptionable, {
            path: _path + ".maxLength",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.maxLength
        }), "string" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"string"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) ].every((flag => flag));
        const _vo121 = (input, _path, _exceptionable = true) => [ undefined === input.nullable || "boolean" === typeof input.nullable || _report(_exceptionable, {
            path: _path + ".nullable",
            expected: "(boolean | undefined)",
            value: input.nullable
        }), (null !== input.items || _report(_exceptionable, {
            path: _path + ".items",
            expected: "(Array<OpenApiV3_1.IJsonSchema> | OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | undefined)",
            value: input.items
        })) && (undefined === input.items || (Array.isArray(input.items) && input.items.map(((elem, _index140) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
            path: _path + ".items[" + _index140 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        })) && _vu5(elem, _path + ".items[" + _index140 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".items[" + _index140 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        }))).every((flag => flag)) || "object" === typeof input.items && null !== input.items && false === Array.isArray(input.items) && _vu5(input.items, _path + ".items", _exceptionable) || _report(_exceptionable, {
            path: _path + ".items",
            expected: "(Array<OpenApiV3_1.IJsonSchema> | OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | undefined)",
            value: input.items
        })) || _report(_exceptionable, {
            path: _path + ".items",
            expected: "(Array<OpenApiV3_1.IJsonSchema> | OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | undefined)",
            value: input.items
        })), undefined === input.prefixItems || (Array.isArray(input.prefixItems) || _report(_exceptionable, {
            path: _path + ".prefixItems",
            expected: "(Array<OpenApiV3_1.IJsonSchema> | undefined)",
            value: input.prefixItems
        })) && input.prefixItems.map(((elem, _index141) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
            path: _path + ".prefixItems[" + _index141 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        })) && _vu5(elem, _path + ".prefixItems[" + _index141 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".prefixItems[" + _index141 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".prefixItems",
            expected: "(Array<OpenApiV3_1.IJsonSchema> | undefined)",
            value: input.prefixItems
        }), undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems || _report(_exceptionable, {
            path: _path + ".uniqueItems",
            expected: "(boolean | undefined)",
            value: input.uniqueItems
        }), (null !== input.additionalItems || _report(_exceptionable, {
            path: _path + ".additionalItems",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalItems
        })) && (undefined === input.additionalItems || "boolean" === typeof input.additionalItems || ("object" === typeof input.additionalItems && null !== input.additionalItems && false === Array.isArray(input.additionalItems) || _report(_exceptionable, {
            path: _path + ".additionalItems",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalItems
        })) && _vu5(input.additionalItems, _path + ".additionalItems", _exceptionable) || _report(_exceptionable, {
            path: _path + ".additionalItems",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalItems
        })), undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".minItems",
            expected: 'number & Type<"uint64">',
            value: input.minItems
        })) || _report(_exceptionable, {
            path: _path + ".minItems",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.minItems
        }), undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".maxItems",
            expected: 'number & Type<"uint64">',
            value: input.maxItems
        })) || _report(_exceptionable, {
            path: _path + ".maxItems",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.maxItems
        }), "array" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"array"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) ].every((flag => flag));
        const _vo122 = (input, _path, _exceptionable = true) => [ "string" === typeof input.$ref || _report(_exceptionable, {
            path: _path + ".$ref",
            expected: "string",
            value: input.$ref
        }), (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true ].every((flag => flag));
        const _vo123 = (input, _path, _exceptionable = true) => [ "string" === typeof input.$recursiveRef || _report(_exceptionable, {
            path: _path + ".$recursiveRef",
            expected: "string",
            value: input.$recursiveRef
        }), (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true ].every((flag => flag));
        const _vo124 = (input, _path, _exceptionable = true) => [ (Array.isArray(input.allOf) || _report(_exceptionable, {
            path: _path + ".allOf",
            expected: "Array<OpenApiV3_1.IJsonSchema>",
            value: input.allOf
        })) && input.allOf.map(((elem, _index142) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
            path: _path + ".allOf[" + _index142 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        })) && _vu5(elem, _path + ".allOf[" + _index142 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".allOf[" + _index142 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".allOf",
            expected: "Array<OpenApiV3_1.IJsonSchema>",
            value: input.allOf
        }), (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true ].every((flag => flag));
        const _vo125 = (input, _path, _exceptionable = true) => [ (Array.isArray(input.anyOf) || _report(_exceptionable, {
            path: _path + ".anyOf",
            expected: "Array<OpenApiV3_1.IJsonSchema>",
            value: input.anyOf
        })) && input.anyOf.map(((elem, _index143) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
            path: _path + ".anyOf[" + _index143 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        })) && _vu5(elem, _path + ".anyOf[" + _index143 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".anyOf[" + _index143 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".anyOf",
            expected: "Array<OpenApiV3_1.IJsonSchema>",
            value: input.anyOf
        }), (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true ].every((flag => flag));
        const _vo126 = (input, _path, _exceptionable = true) => [ (Array.isArray(input.oneOf) || _report(_exceptionable, {
            path: _path + ".oneOf",
            expected: "Array<OpenApiV3_1.IJsonSchema>",
            value: input.oneOf
        })) && input.oneOf.map(((elem, _index144) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
            path: _path + ".oneOf[" + _index144 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        })) && _vu5(elem, _path + ".oneOf[" + _index144 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".oneOf[" + _index144 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".oneOf",
            expected: "Array<OpenApiV3_1.IJsonSchema>",
            value: input.oneOf
        }), undefined === input.discriminator || ("object" === typeof input.discriminator && null !== input.discriminator || _report(_exceptionable, {
            path: _path + ".discriminator",
            expected: "(OpenApiV3_1.IJsonSchema.IOneOf.IDiscriminator | undefined)",
            value: input.discriminator
        })) && _vo127(input.discriminator, _path + ".discriminator", _exceptionable) || _report(_exceptionable, {
            path: _path + ".discriminator",
            expected: "(OpenApiV3_1.IJsonSchema.IOneOf.IDiscriminator | undefined)",
            value: input.discriminator
        }), (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true ].every((flag => flag));
        const _vo127 = (input, _path, _exceptionable = true) => [ "string" === typeof input.propertyName || _report(_exceptionable, {
            path: _path + ".propertyName",
            expected: "string",
            value: input.propertyName
        }), undefined === input.mapping || ("object" === typeof input.mapping && null !== input.mapping && false === Array.isArray(input.mapping) || _report(_exceptionable, {
            path: _path + ".mapping",
            expected: "(Record<string, string> | undefined)",
            value: input.mapping
        })) && _vo35(input.mapping, _path + ".mapping", _exceptionable) || _report(_exceptionable, {
            path: _path + ".mapping",
            expected: "(Record<string, string> | undefined)",
            value: input.mapping
        }) ].every((flag => flag));
        const _vo128 = (input, _path, _exceptionable = true) => [ null === input["default"] || undefined === input["default"] || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: "(null | undefined)",
            value: input["default"]
        }), "null" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"null"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) ].every((flag => flag));
        const _vo129 = (input, _path, _exceptionable = true) => [ (null !== input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: "undefined",
            value: input.type
        })) && (undefined === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: "undefined",
            value: input.type
        })), true, undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) ].every((flag => flag));
        const _vo130 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3_1.IPath",
                value
            })) && _vo131(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3_1.IPath",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo131 = (input, _path, _exceptionable = true) => [ undefined === input.parameters || (Array.isArray(input.parameters) || _report(_exceptionable, {
            path: _path + ".parameters",
            expected: "(Array<IParameter | IReference<`#/components/headers/${string}`> | IReference<`#/components/parameters/${string}`>>.o1 | undefined)",
            value: input.parameters
        })) && input.parameters.map(((elem, _index145) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
            path: _path + ".parameters[" + _index145 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IReference<`#/components/headers/${string}`> | OpenApiV3_1.IJsonSchema.IReference<`#/components/parameters/${string}`> | OpenApiV3_1.IOperation.IParameter)",
            value: elem
        })) && _vu6(elem, _path + ".parameters[" + _index145 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".parameters[" + _index145 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IReference<`#/components/headers/${string}`> | OpenApiV3_1.IJsonSchema.IReference<`#/components/parameters/${string}`> | OpenApiV3_1.IOperation.IParameter)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".parameters",
            expected: "(Array<IParameter | IReference<`#/components/headers/${string}`> | IReference<`#/components/parameters/${string}`>>.o1 | undefined)",
            value: input.parameters
        }), undefined === input.servers || (Array.isArray(input.servers) || _report(_exceptionable, {
            path: _path + ".servers",
            expected: "(Array<OpenApiV3_1.IServer> | undefined)",
            value: input.servers
        })) && input.servers.map(((elem, _index146) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
            path: _path + ".servers[" + _index146 + "]",
            expected: "OpenApiV3_1.IServer",
            value: elem
        })) && _vo106(elem, _path + ".servers[" + _index146 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".servers[" + _index146 + "]",
            expected: "OpenApiV3_1.IServer",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".servers",
            expected: "(Array<OpenApiV3_1.IServer> | undefined)",
            value: input.servers
        }), undefined === input.summary || "string" === typeof input.summary || _report(_exceptionable, {
            path: _path + ".summary",
            expected: "(string | undefined)",
            value: input.summary
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.options || ("object" === typeof input.options && null !== input.options && false === Array.isArray(input.options) || _report(_exceptionable, {
            path: _path + ".options",
            expected: "(OpenApiV3_1.IOperation | undefined)",
            value: input.options
        })) && _vo138(input.options, _path + ".options", _exceptionable) || _report(_exceptionable, {
            path: _path + ".options",
            expected: "(OpenApiV3_1.IOperation | undefined)",
            value: input.options
        }), undefined === input.get || ("object" === typeof input.get && null !== input.get && false === Array.isArray(input.get) || _report(_exceptionable, {
            path: _path + ".get",
            expected: "(OpenApiV3_1.IOperation | undefined)",
            value: input.get
        })) && _vo138(input.get, _path + ".get", _exceptionable) || _report(_exceptionable, {
            path: _path + ".get",
            expected: "(OpenApiV3_1.IOperation | undefined)",
            value: input.get
        }), undefined === input.post || ("object" === typeof input.post && null !== input.post && false === Array.isArray(input.post) || _report(_exceptionable, {
            path: _path + ".post",
            expected: "(OpenApiV3_1.IOperation | undefined)",
            value: input.post
        })) && _vo138(input.post, _path + ".post", _exceptionable) || _report(_exceptionable, {
            path: _path + ".post",
            expected: "(OpenApiV3_1.IOperation | undefined)",
            value: input.post
        }), undefined === input.patch || ("object" === typeof input.patch && null !== input.patch && false === Array.isArray(input.patch) || _report(_exceptionable, {
            path: _path + ".patch",
            expected: "(OpenApiV3_1.IOperation | undefined)",
            value: input.patch
        })) && _vo138(input.patch, _path + ".patch", _exceptionable) || _report(_exceptionable, {
            path: _path + ".patch",
            expected: "(OpenApiV3_1.IOperation | undefined)",
            value: input.patch
        }), undefined === input.put || ("object" === typeof input.put && null !== input.put && false === Array.isArray(input.put) || _report(_exceptionable, {
            path: _path + ".put",
            expected: "(OpenApiV3_1.IOperation | undefined)",
            value: input.put
        })) && _vo138(input.put, _path + ".put", _exceptionable) || _report(_exceptionable, {
            path: _path + ".put",
            expected: "(OpenApiV3_1.IOperation | undefined)",
            value: input.put
        }), undefined === input["delete"] || ("object" === typeof input["delete"] && null !== input["delete"] && false === Array.isArray(input["delete"]) || _report(_exceptionable, {
            path: _path + '["delete"]',
            expected: "(OpenApiV3_1.IOperation | undefined)",
            value: input["delete"]
        })) && _vo138(input["delete"], _path + '["delete"]', _exceptionable) || _report(_exceptionable, {
            path: _path + '["delete"]',
            expected: "(OpenApiV3_1.IOperation | undefined)",
            value: input["delete"]
        }), undefined === input.head || ("object" === typeof input.head && null !== input.head && false === Array.isArray(input.head) || _report(_exceptionable, {
            path: _path + ".head",
            expected: "(OpenApiV3_1.IOperation | undefined)",
            value: input.head
        })) && _vo138(input.head, _path + ".head", _exceptionable) || _report(_exceptionable, {
            path: _path + ".head",
            expected: "(OpenApiV3_1.IOperation | undefined)",
            value: input.head
        }), undefined === input.trace || ("object" === typeof input.trace && null !== input.trace && false === Array.isArray(input.trace) || _report(_exceptionable, {
            path: _path + ".trace",
            expected: "(OpenApiV3_1.IOperation | undefined)",
            value: input.trace
        })) && _vo138(input.trace, _path + ".trace", _exceptionable) || _report(_exceptionable, {
            path: _path + ".trace",
            expected: "(OpenApiV3_1.IOperation | undefined)",
            value: input.trace
        }) ].every((flag => flag));
        const _vo132 = (input, _path, _exceptionable = true) => [ undefined === input.name || "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "(string | undefined)",
            value: input.name
        }), "path" === input["in"] || "query" === input["in"] || "header" === input["in"] || "cookie" === input["in"] || _report(_exceptionable, {
            path: _path + '["in"]',
            expected: '("cookie" | "header" | "path" | "query")',
            value: input["in"]
        }), ("object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) || _report(_exceptionable, {
            path: _path + ".schema",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: input.schema
        })) && _vu5(input.schema, _path + ".schema", _exceptionable) || _report(_exceptionable, {
            path: _path + ".schema",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: input.schema
        }), undefined === input.required || "boolean" === typeof input.required || _report(_exceptionable, {
            path: _path + ".required",
            expected: "(boolean | undefined)",
            value: input.required
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), true, undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, IExample | IReference<`#/components/examples/${string}`>>.o1 | undefined)",
            value: input.examples
        })) && _vo133(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, IExample | IReference<`#/components/examples/${string}`>>.o1 | undefined)",
            value: input.examples
        }) ].every((flag => flag));
        const _vo133 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApiV3_1.IExample | OpenApiV3_1.IJsonSchema.IReference<`#/components/examples/${string}`>)",
                value
            })) && _vu17(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApiV3_1.IExample | OpenApiV3_1.IJsonSchema.IReference<`#/components/examples/${string}`>)",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo134 = (input, _path, _exceptionable = true) => [ undefined === input.summary || "string" === typeof input.summary || _report(_exceptionable, {
            path: _path + ".summary",
            expected: "(string | undefined)",
            value: input.summary
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), true, undefined === input.externalValue || "string" === typeof input.externalValue || _report(_exceptionable, {
            path: _path + ".externalValue",
            expected: "(string | undefined)",
            value: input.externalValue
        }) ].every((flag => flag));
        const _vo135 = (input, _path, _exceptionable = true) => [ "string" === typeof input.$ref && RegExp(/^#\/components\/examples\/(.*)/).test(input.$ref) || _report(_exceptionable, {
            path: _path + ".$ref",
            expected: "`#/components/examples/${string}`",
            value: input.$ref
        }), (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true ].every((flag => flag));
        const _vo136 = (input, _path, _exceptionable = true) => [ "string" === typeof input.$ref && RegExp(/^#\/components\/headers\/(.*)/).test(input.$ref) || _report(_exceptionable, {
            path: _path + ".$ref",
            expected: "`#/components/headers/${string}`",
            value: input.$ref
        }), (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true ].every((flag => flag));
        const _vo137 = (input, _path, _exceptionable = true) => [ "string" === typeof input.$ref && RegExp(/^#\/components\/parameters\/(.*)/).test(input.$ref) || _report(_exceptionable, {
            path: _path + ".$ref",
            expected: "`#/components/parameters/${string}`",
            value: input.$ref
        }), (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true ].every((flag => flag));
        const _vo138 = (input, _path, _exceptionable = true) => [ undefined === input.operationId || "string" === typeof input.operationId || _report(_exceptionable, {
            path: _path + ".operationId",
            expected: "(string | undefined)",
            value: input.operationId
        }), undefined === input.parameters || (Array.isArray(input.parameters) || _report(_exceptionable, {
            path: _path + ".parameters",
            expected: "(Array<IParameter | IReference<`#/components/headers/${string}`> | IReference<`#/components/parameters/${string}`>>.o1 | undefined)",
            value: input.parameters
        })) && input.parameters.map(((elem, _index147) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
            path: _path + ".parameters[" + _index147 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IReference<`#/components/headers/${string}`> | OpenApiV3_1.IJsonSchema.IReference<`#/components/parameters/${string}`> | OpenApiV3_1.IOperation.IParameter)",
            value: elem
        })) && _vu6(elem, _path + ".parameters[" + _index147 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".parameters[" + _index147 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IReference<`#/components/headers/${string}`> | OpenApiV3_1.IJsonSchema.IReference<`#/components/parameters/${string}`> | OpenApiV3_1.IOperation.IParameter)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".parameters",
            expected: "(Array<IParameter | IReference<`#/components/headers/${string}`> | IReference<`#/components/parameters/${string}`>>.o1 | undefined)",
            value: input.parameters
        }), undefined === input.requestBody || ("object" === typeof input.requestBody && null !== input.requestBody && false === Array.isArray(input.requestBody) || _report(_exceptionable, {
            path: _path + ".requestBody",
            expected: "(OpenApiV3_1.IJsonSchema.IReference<`#/components/requestBodies/${string}`> | OpenApiV3_1.IOperation.IRequestBody | undefined)",
            value: input.requestBody
        })) && _vu18(input.requestBody, _path + ".requestBody", _exceptionable) || _report(_exceptionable, {
            path: _path + ".requestBody",
            expected: "(OpenApiV3_1.IJsonSchema.IReference<`#/components/requestBodies/${string}`> | OpenApiV3_1.IOperation.IRequestBody | undefined)",
            value: input.requestBody
        }), undefined === input.responses || ("object" === typeof input.responses && null !== input.responses && false === Array.isArray(input.responses) || _report(_exceptionable, {
            path: _path + ".responses",
            expected: "(Record<string, IResponse | IReference<`#/components/responses/${string}`>>.o1 | undefined)",
            value: input.responses
        })) && _vo143(input.responses, _path + ".responses", _exceptionable) || _report(_exceptionable, {
            path: _path + ".responses",
            expected: "(Record<string, IResponse | IReference<`#/components/responses/${string}`>>.o1 | undefined)",
            value: input.responses
        }), undefined === input.servers || (Array.isArray(input.servers) || _report(_exceptionable, {
            path: _path + ".servers",
            expected: "(Array<OpenApiV3_1.IServer> | undefined)",
            value: input.servers
        })) && input.servers.map(((elem, _index148) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
            path: _path + ".servers[" + _index148 + "]",
            expected: "OpenApiV3_1.IServer",
            value: elem
        })) && _vo106(elem, _path + ".servers[" + _index148 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".servers[" + _index148 + "]",
            expected: "OpenApiV3_1.IServer",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".servers",
            expected: "(Array<OpenApiV3_1.IServer> | undefined)",
            value: input.servers
        }), undefined === input.summary || "string" === typeof input.summary || _report(_exceptionable, {
            path: _path + ".summary",
            expected: "(string | undefined)",
            value: input.summary
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.security || (Array.isArray(input.security) || _report(_exceptionable, {
            path: _path + ".security",
            expected: "(Array<Record<string, Array<string>>> | undefined)",
            value: input.security
        })) && input.security.map(((elem, _index149) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
            path: _path + ".security[" + _index149 + "]",
            expected: "Record<string, Array<string>>",
            value: elem
        })) && _vo39(elem, _path + ".security[" + _index149 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".security[" + _index149 + "]",
            expected: "Record<string, Array<string>>",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".security",
            expected: "(Array<Record<string, Array<string>>> | undefined)",
            value: input.security
        }), undefined === input.tags || (Array.isArray(input.tags) || _report(_exceptionable, {
            path: _path + ".tags",
            expected: "(Array<string> | undefined)",
            value: input.tags
        })) && input.tags.map(((elem, _index150) => "string" === typeof elem || _report(_exceptionable, {
            path: _path + ".tags[" + _index150 + "]",
            expected: "string",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".tags",
            expected: "(Array<string> | undefined)",
            value: input.tags
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }) ].every((flag => flag));
        const _vo139 = (input, _path, _exceptionable = true) => [ undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.required || "boolean" === typeof input.required || _report(_exceptionable, {
            path: _path + ".required",
            expected: "(boolean | undefined)",
            value: input.required
        }), undefined === input.content || ("object" === typeof input.content && null !== input.content && false === Array.isArray(input.content) || _report(_exceptionable, {
            path: _path + ".content",
            expected: "(Record<string, OpenApiV3_1.IOperation.IMediaType> | undefined)",
            value: input.content
        })) && _vo140(input.content, _path + ".content", _exceptionable) || _report(_exceptionable, {
            path: _path + ".content",
            expected: "(Record<string, OpenApiV3_1.IOperation.IMediaType> | undefined)",
            value: input.content
        }) ].every((flag => flag));
        const _vo140 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3_1.IOperation.IMediaType",
                value
            })) && _vo141(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3_1.IOperation.IMediaType",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo141 = (input, _path, _exceptionable = true) => [ undefined === input.schema || ("object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) || _report(_exceptionable, {
            path: _path + ".schema",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | undefined)",
            value: input.schema
        })) && _vu5(input.schema, _path + ".schema", _exceptionable) || _report(_exceptionable, {
            path: _path + ".schema",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | undefined)",
            value: input.schema
        }), true, undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, IExample | IReference<`#/components/examples/${string}`>>.o1 | undefined)",
            value: input.examples
        })) && _vo133(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, IExample | IReference<`#/components/examples/${string}`>>.o1 | undefined)",
            value: input.examples
        }) ].every((flag => flag));
        const _vo142 = (input, _path, _exceptionable = true) => [ "string" === typeof input.$ref && RegExp(/^#\/components\/requestBodies\/(.*)/).test(input.$ref) || _report(_exceptionable, {
            path: _path + ".$ref",
            expected: "`#/components/requestBodies/${string}`",
            value: input.$ref
        }), (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true ].every((flag => flag));
        const _vo143 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApiV3_1.IJsonSchema.IReference<`#/components/responses/${string}`> | OpenApiV3_1.IOperation.IResponse)",
                value
            })) && _vu19(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApiV3_1.IJsonSchema.IReference<`#/components/responses/${string}`> | OpenApiV3_1.IOperation.IResponse)",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo144 = (input, _path, _exceptionable = true) => [ undefined === input.content || ("object" === typeof input.content && null !== input.content && false === Array.isArray(input.content) || _report(_exceptionable, {
            path: _path + ".content",
            expected: "(Record<string, OpenApiV3_1.IOperation.IMediaType> | undefined)",
            value: input.content
        })) && _vo140(input.content, _path + ".content", _exceptionable) || _report(_exceptionable, {
            path: _path + ".content",
            expected: "(Record<string, OpenApiV3_1.IOperation.IMediaType> | undefined)",
            value: input.content
        }), undefined === input.headers || ("object" === typeof input.headers && null !== input.headers && false === Array.isArray(input.headers) || _report(_exceptionable, {
            path: _path + ".headers",
            expected: '(Record<string, IReference<`#/components/headers/${string}`> | Omit<IParameter, "in">> | undefined)',
            value: input.headers
        })) && _vo145(input.headers, _path + ".headers", _exceptionable) || _report(_exceptionable, {
            path: _path + ".headers",
            expected: '(Record<string, IReference<`#/components/headers/${string}`> | Omit<IParameter, "in">> | undefined)',
            value: input.headers
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }) ].every((flag => flag));
        const _vo145 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: '(Omit<OpenApiV3_1.IOperation.IParameter, "in"> | OpenApiV3_1.IJsonSchema.IReference<`#/components/headers/${string}`>)',
                value
            })) && _vu20(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: '(Omit<OpenApiV3_1.IOperation.IParameter, "in"> | OpenApiV3_1.IJsonSchema.IReference<`#/components/headers/${string}`>)',
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo146 = (input, _path, _exceptionable = true) => [ undefined === input.name || "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "(string | undefined)",
            value: input.name
        }), undefined === input.required || "boolean" === typeof input.required || _report(_exceptionable, {
            path: _path + ".required",
            expected: "(boolean | undefined)",
            value: input.required
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), true, undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, IExample | IReference<`#/components/examples/${string}`>>.o1 | undefined)",
            value: input.examples
        })) && _vo133(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, IExample | IReference<`#/components/examples/${string}`>>.o1 | undefined)",
            value: input.examples
        }), ("object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) || _report(_exceptionable, {
            path: _path + ".schema",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: input.schema
        })) && _vu5(input.schema, _path + ".schema", _exceptionable) || _report(_exceptionable, {
            path: _path + ".schema",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: input.schema
        }) ].every((flag => flag));
        const _vo147 = (input, _path, _exceptionable = true) => [ "string" === typeof input.$ref && RegExp(/^#\/components\/responses\/(.*)/).test(input.$ref) || _report(_exceptionable, {
            path: _path + ".$ref",
            expected: "`#/components/responses/${string}`",
            value: input.$ref
        }), (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true ].every((flag => flag));
        const _vo148 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3_1.IOperation.IResponse",
                value
            })) && _vo144(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3_1.IOperation.IResponse",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo149 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3_1.IOperation.IParameter",
                value
            })) && _vo132(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3_1.IOperation.IParameter",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo150 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3_1.IOperation.IRequestBody",
                value
            })) && _vo139(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3_1.IOperation.IRequestBody",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo151 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApiV3_1.ISecurityScheme.IApiKey | OpenApiV3_1.ISecurityScheme.IHttpBasic | OpenApiV3_1.ISecurityScheme.IHttpBearer | OpenApiV3_1.ISecurityScheme.IOAuth2 | OpenApiV3_1.ISecurityScheme.IOpenId)",
                value
            })) && _vu21(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApiV3_1.ISecurityScheme.IApiKey | OpenApiV3_1.ISecurityScheme.IHttpBasic | OpenApiV3_1.ISecurityScheme.IHttpBearer | OpenApiV3_1.ISecurityScheme.IOAuth2 | OpenApiV3_1.ISecurityScheme.IOpenId)",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo152 = (input, _path, _exceptionable = true) => [ "apiKey" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"apiKey"',
            value: input.type
        }), undefined === input["in"] || "query" === input["in"] || "header" === input["in"] || "cookie" === input["in"] || _report(_exceptionable, {
            path: _path + '["in"]',
            expected: '("cookie" | "header" | "query" | undefined)',
            value: input["in"]
        }), undefined === input.name || "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "(string | undefined)",
            value: input.name
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }) ].every((flag => flag));
        const _vo153 = (input, _path, _exceptionable = true) => [ "http" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"http"',
            value: input.type
        }), "basic" === input.scheme || _report(_exceptionable, {
            path: _path + ".scheme",
            expected: '"basic"',
            value: input.scheme
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }) ].every((flag => flag));
        const _vo154 = (input, _path, _exceptionable = true) => [ "http" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"http"',
            value: input.type
        }), "bearer" === input.scheme || _report(_exceptionable, {
            path: _path + ".scheme",
            expected: '"bearer"',
            value: input.scheme
        }), undefined === input.bearerFormat || "string" === typeof input.bearerFormat || _report(_exceptionable, {
            path: _path + ".bearerFormat",
            expected: "(string | undefined)",
            value: input.bearerFormat
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }) ].every((flag => flag));
        const _vo155 = (input, _path, _exceptionable = true) => [ "oauth2" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"oauth2"',
            value: input.type
        }), ("object" === typeof input.flows && null !== input.flows && false === Array.isArray(input.flows) || _report(_exceptionable, {
            path: _path + ".flows",
            expected: "OpenApiV3_1.ISecurityScheme.IOAuth2.IFlowSet",
            value: input.flows
        })) && _vo156(input.flows, _path + ".flows", _exceptionable) || _report(_exceptionable, {
            path: _path + ".flows",
            expected: "OpenApiV3_1.ISecurityScheme.IOAuth2.IFlowSet",
            value: input.flows
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }) ].every((flag => flag));
        const _vo156 = (input, _path, _exceptionable = true) => [ undefined === input.authorizationCode || ("object" === typeof input.authorizationCode && null !== input.authorizationCode && false === Array.isArray(input.authorizationCode) || _report(_exceptionable, {
            path: _path + ".authorizationCode",
            expected: "(OpenApiV3_1.ISecurityScheme.IOAuth2.IFlow | undefined)",
            value: input.authorizationCode
        })) && _vo157(input.authorizationCode, _path + ".authorizationCode", _exceptionable) || _report(_exceptionable, {
            path: _path + ".authorizationCode",
            expected: "(OpenApiV3_1.ISecurityScheme.IOAuth2.IFlow | undefined)",
            value: input.authorizationCode
        }), undefined === input.implicit || ("object" === typeof input.implicit && null !== input.implicit && false === Array.isArray(input.implicit) || _report(_exceptionable, {
            path: _path + ".implicit",
            expected: '(Omit<OpenApiV3_1.ISecurityScheme.IOAuth2.IFlow, "tokenUrl"> | undefined)',
            value: input.implicit
        })) && _vo158(input.implicit, _path + ".implicit", _exceptionable) || _report(_exceptionable, {
            path: _path + ".implicit",
            expected: '(Omit<OpenApiV3_1.ISecurityScheme.IOAuth2.IFlow, "tokenUrl"> | undefined)',
            value: input.implicit
        }), undefined === input.password || ("object" === typeof input.password && null !== input.password && false === Array.isArray(input.password) || _report(_exceptionable, {
            path: _path + ".password",
            expected: '(Omit<OpenApiV3_1.ISecurityScheme.IOAuth2.IFlow, "authorizationUrl"> | undefined)',
            value: input.password
        })) && _vo159(input.password, _path + ".password", _exceptionable) || _report(_exceptionable, {
            path: _path + ".password",
            expected: '(Omit<OpenApiV3_1.ISecurityScheme.IOAuth2.IFlow, "authorizationUrl"> | undefined)',
            value: input.password
        }), undefined === input.clientCredentials || ("object" === typeof input.clientCredentials && null !== input.clientCredentials && false === Array.isArray(input.clientCredentials) || _report(_exceptionable, {
            path: _path + ".clientCredentials",
            expected: '(Omit<OpenApiV3_1.ISecurityScheme.IOAuth2.IFlow, "authorizationUrl"> | undefined)',
            value: input.clientCredentials
        })) && _vo159(input.clientCredentials, _path + ".clientCredentials", _exceptionable) || _report(_exceptionable, {
            path: _path + ".clientCredentials",
            expected: '(Omit<OpenApiV3_1.ISecurityScheme.IOAuth2.IFlow, "authorizationUrl"> | undefined)',
            value: input.clientCredentials
        }) ].every((flag => flag));
        const _vo157 = (input, _path, _exceptionable = true) => [ undefined === input.authorizationUrl || "string" === typeof input.authorizationUrl || _report(_exceptionable, {
            path: _path + ".authorizationUrl",
            expected: "(string | undefined)",
            value: input.authorizationUrl
        }), undefined === input.tokenUrl || "string" === typeof input.tokenUrl || _report(_exceptionable, {
            path: _path + ".tokenUrl",
            expected: "(string | undefined)",
            value: input.tokenUrl
        }), undefined === input.refreshUrl || "string" === typeof input.refreshUrl || _report(_exceptionable, {
            path: _path + ".refreshUrl",
            expected: "(string | undefined)",
            value: input.refreshUrl
        }), undefined === input.scopes || ("object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) || _report(_exceptionable, {
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        })) && _vo35(input.scopes, _path + ".scopes", _exceptionable) || _report(_exceptionable, {
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        }) ].every((flag => flag));
        const _vo158 = (input, _path, _exceptionable = true) => [ undefined === input.authorizationUrl || "string" === typeof input.authorizationUrl || _report(_exceptionable, {
            path: _path + ".authorizationUrl",
            expected: "(string | undefined)",
            value: input.authorizationUrl
        }), undefined === input.refreshUrl || "string" === typeof input.refreshUrl || _report(_exceptionable, {
            path: _path + ".refreshUrl",
            expected: "(string | undefined)",
            value: input.refreshUrl
        }), undefined === input.scopes || ("object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) || _report(_exceptionable, {
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        })) && _vo35(input.scopes, _path + ".scopes", _exceptionable) || _report(_exceptionable, {
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        }) ].every((flag => flag));
        const _vo159 = (input, _path, _exceptionable = true) => [ undefined === input.tokenUrl || "string" === typeof input.tokenUrl || _report(_exceptionable, {
            path: _path + ".tokenUrl",
            expected: "(string | undefined)",
            value: input.tokenUrl
        }), undefined === input.refreshUrl || "string" === typeof input.refreshUrl || _report(_exceptionable, {
            path: _path + ".refreshUrl",
            expected: "(string | undefined)",
            value: input.refreshUrl
        }), undefined === input.scopes || ("object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) || _report(_exceptionable, {
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        })) && _vo35(input.scopes, _path + ".scopes", _exceptionable) || _report(_exceptionable, {
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        }) ].every((flag => flag));
        const _vo160 = (input, _path, _exceptionable = true) => [ "openIdConnect" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"openIdConnect"',
            value: input.type
        }), "string" === typeof input.openIdConnectUrl || _report(_exceptionable, {
            path: _path + ".openIdConnectUrl",
            expected: "string",
            value: input.openIdConnectUrl
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }) ].every((flag => flag));
        const _vo161 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: 'Omit<OpenApiV3_1.IOperation.IParameter, "in">',
                value
            })) && _vo146(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: 'Omit<OpenApiV3_1.IOperation.IParameter, "in">',
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo162 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3_1.IExample",
                value
            })) && _vo134(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3_1.IExample",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo163 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApiV3_1.IJsonSchema.IReference<`#/components/pathItems/${string}`> | OpenApiV3_1.IPath)",
                value
            })) && _vu22(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApiV3_1.IJsonSchema.IReference<`#/components/pathItems/${string}`> | OpenApiV3_1.IPath)",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo164 = (input, _path, _exceptionable = true) => [ "string" === typeof input.$ref && RegExp(/^#\/components\/pathItems\/(.*)/).test(input.$ref) || _report(_exceptionable, {
            path: _path + ".$ref",
            expected: "`#/components/pathItems/${string}`",
            value: input.$ref
        }), (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true ].every((flag => flag));
        const _vo165 = (input, _path, _exceptionable = true) => [ "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "string",
            value: input.name
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }) ].every((flag => flag));
        const _vo166 = (input, _path, _exceptionable = true) => [ "string" === typeof input.openapi && RegExp(/^3\.1\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(input.openapi) || _report(_exceptionable, {
            path: _path + ".openapi",
            expected: "`3.1.${number}`",
            value: input.openapi
        }), undefined === input.servers || (Array.isArray(input.servers) || _report(_exceptionable, {
            path: _path + ".servers",
            expected: "(Array<OpenApi.IServer> | undefined)",
            value: input.servers
        })) && input.servers.map(((elem, _index151) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
            path: _path + ".servers[" + _index151 + "]",
            expected: "OpenApi.IServer",
            value: elem
        })) && _vo167(elem, _path + ".servers[" + _index151 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".servers[" + _index151 + "]",
            expected: "OpenApi.IServer",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".servers",
            expected: "(Array<OpenApi.IServer> | undefined)",
            value: input.servers
        }), undefined === input.info || ("object" === typeof input.info && null !== input.info || _report(_exceptionable, {
            path: _path + ".info",
            expected: "(OpenApi.IDocument.IInfo | undefined)",
            value: input.info
        })) && _vo170(input.info, _path + ".info", _exceptionable) || _report(_exceptionable, {
            path: _path + ".info",
            expected: "(OpenApi.IDocument.IInfo | undefined)",
            value: input.info
        }), ("object" === typeof input.components && null !== input.components && false === Array.isArray(input.components) || _report(_exceptionable, {
            path: _path + ".components",
            expected: "OpenApi.IComponents",
            value: input.components
        })) && _vo173(input.components, _path + ".components", _exceptionable) || _report(_exceptionable, {
            path: _path + ".components",
            expected: "OpenApi.IComponents",
            value: input.components
        }), undefined === input.paths || ("object" === typeof input.paths && null !== input.paths && false === Array.isArray(input.paths) || _report(_exceptionable, {
            path: _path + ".paths",
            expected: "(Record<string, OpenApi.IPath> | undefined)",
            value: input.paths
        })) && _vo198(input.paths, _path + ".paths", _exceptionable) || _report(_exceptionable, {
            path: _path + ".paths",
            expected: "(Record<string, OpenApi.IPath> | undefined)",
            value: input.paths
        }), undefined === input.webhooks || ("object" === typeof input.webhooks && null !== input.webhooks && false === Array.isArray(input.webhooks) || _report(_exceptionable, {
            path: _path + ".webhooks",
            expected: "(Record<string, OpenApi.IPath> | undefined)",
            value: input.webhooks
        })) && _vo198(input.webhooks, _path + ".webhooks", _exceptionable) || _report(_exceptionable, {
            path: _path + ".webhooks",
            expected: "(Record<string, OpenApi.IPath> | undefined)",
            value: input.webhooks
        }), undefined === input.security || (Array.isArray(input.security) || _report(_exceptionable, {
            path: _path + ".security",
            expected: "(Array<Record<string, Array<string>>> | undefined)",
            value: input.security
        })) && input.security.map(((elem, _index152) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
            path: _path + ".security[" + _index152 + "]",
            expected: "Record<string, Array<string>>",
            value: elem
        })) && _vo39(elem, _path + ".security[" + _index152 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".security[" + _index152 + "]",
            expected: "Record<string, Array<string>>",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".security",
            expected: "(Array<Record<string, Array<string>>> | undefined)",
            value: input.security
        }), undefined === input.tags || (Array.isArray(input.tags) || _report(_exceptionable, {
            path: _path + ".tags",
            expected: "(Array<OpenApi.IDocument.ITag> | undefined)",
            value: input.tags
        })) && input.tags.map(((elem, _index153) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
            path: _path + ".tags[" + _index153 + "]",
            expected: "OpenApi.IDocument.ITag",
            value: elem
        })) && _vo210(elem, _path + ".tags[" + _index153 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".tags[" + _index153 + "]",
            expected: "OpenApi.IDocument.ITag",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".tags",
            expected: "(Array<OpenApi.IDocument.ITag> | undefined)",
            value: input.tags
        }), true === input["x-samchon-emended-v4"] || _report(_exceptionable, {
            path: _path + '["x-samchon-emended-v4"]',
            expected: "true",
            value: input["x-samchon-emended-v4"]
        }) ].every((flag => flag));
        const _vo167 = (input, _path, _exceptionable = true) => [ "string" === typeof input.url || _report(_exceptionable, {
            path: _path + ".url",
            expected: "string",
            value: input.url
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.variables || ("object" === typeof input.variables && null !== input.variables && false === Array.isArray(input.variables) || _report(_exceptionable, {
            path: _path + ".variables",
            expected: "(Record<string, OpenApi.IServer.IVariable> | undefined)",
            value: input.variables
        })) && _vo168(input.variables, _path + ".variables", _exceptionable) || _report(_exceptionable, {
            path: _path + ".variables",
            expected: "(Record<string, OpenApi.IServer.IVariable> | undefined)",
            value: input.variables
        }) ].every((flag => flag));
        const _vo168 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApi.IServer.IVariable",
                value
            })) && _vo169(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApi.IServer.IVariable",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo169 = (input, _path, _exceptionable = true) => [ "string" === typeof input["default"] || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: "string",
            value: input["default"]
        }), undefined === input["enum"] || (Array.isArray(input["enum"]) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<string> | undefined)",
            value: input["enum"]
        })) && input["enum"].map(((elem, _index154) => "string" === typeof elem || _report(_exceptionable, {
            path: _path + '["enum"][' + _index154 + "]",
            expected: "string",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<string> | undefined)",
            value: input["enum"]
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }) ].every((flag => flag));
        const _vo170 = (input, _path, _exceptionable = true) => [ "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "string",
            value: input.title
        }), undefined === input.summary || "string" === typeof input.summary || _report(_exceptionable, {
            path: _path + ".summary",
            expected: "(string | undefined)",
            value: input.summary
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.termsOfService || "string" === typeof input.termsOfService || _report(_exceptionable, {
            path: _path + ".termsOfService",
            expected: "(string | undefined)",
            value: input.termsOfService
        }), undefined === input.contact || ("object" === typeof input.contact && null !== input.contact && false === Array.isArray(input.contact) || _report(_exceptionable, {
            path: _path + ".contact",
            expected: "(OpenApi.IDocument.IContact | undefined)",
            value: input.contact
        })) && _vo171(input.contact, _path + ".contact", _exceptionable) || _report(_exceptionable, {
            path: _path + ".contact",
            expected: "(OpenApi.IDocument.IContact | undefined)",
            value: input.contact
        }), undefined === input.license || ("object" === typeof input.license && null !== input.license || _report(_exceptionable, {
            path: _path + ".license",
            expected: "(OpenApi.IDocument.ILicense | undefined)",
            value: input.license
        })) && _vo172(input.license, _path + ".license", _exceptionable) || _report(_exceptionable, {
            path: _path + ".license",
            expected: "(OpenApi.IDocument.ILicense | undefined)",
            value: input.license
        }), "string" === typeof input.version || _report(_exceptionable, {
            path: _path + ".version",
            expected: "string",
            value: input.version
        }) ].every((flag => flag));
        const _vo171 = (input, _path, _exceptionable = true) => [ undefined === input.name || "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "(string | undefined)",
            value: input.name
        }), undefined === input.url || "string" === typeof input.url || _report(_exceptionable, {
            path: _path + ".url",
            expected: "(string | undefined)",
            value: input.url
        }), undefined === input.email || "string" === typeof input.email && (/^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i.test(input.email) || _report(_exceptionable, {
            path: _path + ".email",
            expected: 'string & Format<"email">',
            value: input.email
        })) || _report(_exceptionable, {
            path: _path + ".email",
            expected: '((string & Format<"email">) | undefined)',
            value: input.email
        }) ].every((flag => flag));
        const _vo172 = (input, _path, _exceptionable = true) => [ "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "string",
            value: input.name
        }), undefined === input.identifier || "string" === typeof input.identifier || _report(_exceptionable, {
            path: _path + ".identifier",
            expected: "(string | undefined)",
            value: input.identifier
        }), undefined === input.url || "string" === typeof input.url || _report(_exceptionable, {
            path: _path + ".url",
            expected: "(string | undefined)",
            value: input.url
        }) ].every((flag => flag));
        const _vo173 = (input, _path, _exceptionable = true) => [ undefined === input.schemas || ("object" === typeof input.schemas && null !== input.schemas && false === Array.isArray(input.schemas) || _report(_exceptionable, {
            path: _path + ".schemas",
            expected: "(Record<string, OpenApi.IJsonSchema> | undefined)",
            value: input.schemas
        })) && _vo174(input.schemas, _path + ".schemas", _exceptionable) || _report(_exceptionable, {
            path: _path + ".schemas",
            expected: "(Record<string, OpenApi.IJsonSchema> | undefined)",
            value: input.schemas
        }), undefined === input.securitySchemes || ("object" === typeof input.securitySchemes && null !== input.securitySchemes && false === Array.isArray(input.securitySchemes) || _report(_exceptionable, {
            path: _path + ".securitySchemes",
            expected: "(Record<string, OpenApi.ISecurityScheme> | undefined)",
            value: input.securitySchemes
        })) && _vo188(input.securitySchemes, _path + ".securitySchemes", _exceptionable) || _report(_exceptionable, {
            path: _path + ".securitySchemes",
            expected: "(Record<string, OpenApi.ISecurityScheme> | undefined)",
            value: input.securitySchemes
        }) ].every((flag => flag));
        const _vo174 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IOneOf | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown)",
                value
            })) && _vu7(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IOneOf | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown)",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo175 = (input, _path, _exceptionable = true) => [ "string" === typeof input["const"] || "number" === typeof input["const"] || "boolean" === typeof input["const"] || _report(_exceptionable, {
            path: _path + '["const"]',
            expected: "(boolean | number | string)",
            value: input["const"]
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        })) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        }) ].every((flag => flag));
        const _vo176 = (input, _path, _exceptionable = true) => [ undefined === input["default"] || "boolean" === typeof input["default"] || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: "(boolean | undefined)",
            value: input["default"]
        }), "boolean" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"boolean"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        })) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        }) ].every((flag => flag));
        const _vo177 = (input, _path, _exceptionable = true) => [ undefined === input["default"] || "number" === typeof input["default"] && (Math.floor(input["default"]) === input["default"] && -0x8000000000000000 <= input["default"] && input["default"] <= 0x8000000000000000 || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: 'number & Type<"int64">',
            value: input["default"]
        })) || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: '((number & Type<"int64">) | undefined)',
            value: input["default"]
        }), undefined === input.minimum || "number" === typeof input.minimum && (Math.floor(input.minimum) === input.minimum && -0x8000000000000000 <= input.minimum && input.minimum <= 0x8000000000000000 || _report(_exceptionable, {
            path: _path + ".minimum",
            expected: 'number & Type<"int64">',
            value: input.minimum
        })) || _report(_exceptionable, {
            path: _path + ".minimum",
            expected: '((number & Type<"int64">) | undefined)',
            value: input.minimum
        }), undefined === input.maximum || "number" === typeof input.maximum && (Math.floor(input.maximum) === input.maximum && -0x8000000000000000 <= input.maximum && input.maximum <= 0x8000000000000000 || _report(_exceptionable, {
            path: _path + ".maximum",
            expected: 'number & Type<"int64">',
            value: input.maximum
        })) || _report(_exceptionable, {
            path: _path + ".maximum",
            expected: '((number & Type<"int64">) | undefined)',
            value: input.maximum
        }), undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || _report(_exceptionable, {
            path: _path + ".exclusiveMinimum",
            expected: "(number | undefined)",
            value: input.exclusiveMinimum
        }), undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || _report(_exceptionable, {
            path: _path + ".exclusiveMaximum",
            expected: "(number | undefined)",
            value: input.exclusiveMaximum
        }), undefined === input.multipleOf || "number" === typeof input.multipleOf && (Math.floor(input.multipleOf) === input.multipleOf && 0 <= input.multipleOf && input.multipleOf <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".multipleOf",
            expected: 'number & Type<"uint64">',
            value: input.multipleOf
        })) && (0 < input.multipleOf || _report(_exceptionable, {
            path: _path + ".multipleOf",
            expected: "number & ExclusiveMinimum<0>",
            value: input.multipleOf
        })) || _report(_exceptionable, {
            path: _path + ".multipleOf",
            expected: '((number & Type<"uint64"> & ExclusiveMinimum<0>) | undefined)',
            value: input.multipleOf
        }), "integer" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"integer"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        })) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        }) ].every((flag => flag));
        const _vo178 = (input, _path, _exceptionable = true) => [ undefined === input["default"] || "number" === typeof input["default"] || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: "(number | undefined)",
            value: input["default"]
        }), undefined === input.minimum || "number" === typeof input.minimum || _report(_exceptionable, {
            path: _path + ".minimum",
            expected: "(number | undefined)",
            value: input.minimum
        }), undefined === input.maximum || "number" === typeof input.maximum || _report(_exceptionable, {
            path: _path + ".maximum",
            expected: "(number | undefined)",
            value: input.maximum
        }), undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || _report(_exceptionable, {
            path: _path + ".exclusiveMinimum",
            expected: "(number | undefined)",
            value: input.exclusiveMinimum
        }), undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || _report(_exceptionable, {
            path: _path + ".exclusiveMaximum",
            expected: "(number | undefined)",
            value: input.exclusiveMaximum
        }), undefined === input.multipleOf || "number" === typeof input.multipleOf && (0 < input.multipleOf || _report(_exceptionable, {
            path: _path + ".multipleOf",
            expected: "number & ExclusiveMinimum<0>",
            value: input.multipleOf
        })) || _report(_exceptionable, {
            path: _path + ".multipleOf",
            expected: "((number & ExclusiveMinimum<0>) | undefined)",
            value: input.multipleOf
        }), "number" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"number"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        })) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        }) ].every((flag => flag));
        const _vo179 = (input, _path, _exceptionable = true) => [ undefined === input["default"] || "string" === typeof input["default"] || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: "(string | undefined)",
            value: input["default"]
        }), undefined === input.format || "string" === typeof input.format || _report(_exceptionable, {
            path: _path + ".format",
            expected: "(string | undefined)",
            value: input.format
        }), undefined === input.pattern || "string" === typeof input.pattern || _report(_exceptionable, {
            path: _path + ".pattern",
            expected: "(string | undefined)",
            value: input.pattern
        }), undefined === input.contentMediaType || "string" === typeof input.contentMediaType || _report(_exceptionable, {
            path: _path + ".contentMediaType",
            expected: "(string | undefined)",
            value: input.contentMediaType
        }), undefined === input.minLength || "number" === typeof input.minLength && (Math.floor(input.minLength) === input.minLength && 0 <= input.minLength && input.minLength <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".minLength",
            expected: 'number & Type<"uint64">',
            value: input.minLength
        })) || _report(_exceptionable, {
            path: _path + ".minLength",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.minLength
        }), undefined === input.maxLength || "number" === typeof input.maxLength && (Math.floor(input.maxLength) === input.maxLength && 0 <= input.maxLength && input.maxLength <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".maxLength",
            expected: 'number & Type<"uint64">',
            value: input.maxLength
        })) || _report(_exceptionable, {
            path: _path + ".maxLength",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.maxLength
        }), "string" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"string"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        })) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        }) ].every((flag => flag));
        const _vo180 = (input, _path, _exceptionable = true) => [ ("object" === typeof input.items && null !== input.items && false === Array.isArray(input.items) || _report(_exceptionable, {
            path: _path + ".items",
            expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IOneOf | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown)",
            value: input.items
        })) && _vu7(input.items, _path + ".items", _exceptionable) || _report(_exceptionable, {
            path: _path + ".items",
            expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IOneOf | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown)",
            value: input.items
        }), undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems || _report(_exceptionable, {
            path: _path + ".uniqueItems",
            expected: "(boolean | undefined)",
            value: input.uniqueItems
        }), undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".minItems",
            expected: 'number & Type<"uint64">',
            value: input.minItems
        })) || _report(_exceptionable, {
            path: _path + ".minItems",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.minItems
        }), undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".maxItems",
            expected: 'number & Type<"uint64">',
            value: input.maxItems
        })) || _report(_exceptionable, {
            path: _path + ".maxItems",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.maxItems
        }), "array" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"array"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        })) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        }) ].every((flag => flag));
        const _vo181 = (input, _path, _exceptionable = true) => [ "array" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"array"',
            value: input.type
        }), (Array.isArray(input.prefixItems) || _report(_exceptionable, {
            path: _path + ".prefixItems",
            expected: "Array<OpenApi.IJsonSchema>",
            value: input.prefixItems
        })) && input.prefixItems.map(((elem, _index155) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
            path: _path + ".prefixItems[" + _index155 + "]",
            expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IOneOf | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown)",
            value: elem
        })) && _vu7(elem, _path + ".prefixItems[" + _index155 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".prefixItems[" + _index155 + "]",
            expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IOneOf | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".prefixItems",
            expected: "Array<OpenApi.IJsonSchema>",
            value: input.prefixItems
        }), (null !== input.additionalItems || _report(_exceptionable, {
            path: _path + ".additionalItems",
            expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IOneOf | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalItems
        })) && (undefined === input.additionalItems || "boolean" === typeof input.additionalItems || ("object" === typeof input.additionalItems && null !== input.additionalItems && false === Array.isArray(input.additionalItems) || _report(_exceptionable, {
            path: _path + ".additionalItems",
            expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IOneOf | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalItems
        })) && _vu7(input.additionalItems, _path + ".additionalItems", _exceptionable) || _report(_exceptionable, {
            path: _path + ".additionalItems",
            expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IOneOf | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalItems
        })), undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems || _report(_exceptionable, {
            path: _path + ".uniqueItems",
            expected: "(boolean | undefined)",
            value: input.uniqueItems
        }), undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".minItems",
            expected: 'number & Type<"uint64">',
            value: input.minItems
        })) || _report(_exceptionable, {
            path: _path + ".minItems",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.minItems
        }), undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".maxItems",
            expected: 'number & Type<"uint64">',
            value: input.maxItems
        })) || _report(_exceptionable, {
            path: _path + ".maxItems",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.maxItems
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        })) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        }) ].every((flag => flag));
        const _vo182 = (input, _path, _exceptionable = true) => [ undefined === input.properties || ("object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) || _report(_exceptionable, {
            path: _path + ".properties",
            expected: "(Record<string, OpenApi.IJsonSchema> | undefined)",
            value: input.properties
        })) && _vo174(input.properties, _path + ".properties", _exceptionable) || _report(_exceptionable, {
            path: _path + ".properties",
            expected: "(Record<string, OpenApi.IJsonSchema> | undefined)",
            value: input.properties
        }), (null !== input.additionalProperties || _report(_exceptionable, {
            path: _path + ".additionalProperties",
            expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IOneOf | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalProperties
        })) && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || ("object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) || _report(_exceptionable, {
            path: _path + ".additionalProperties",
            expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IOneOf | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalProperties
        })) && _vu7(input.additionalProperties, _path + ".additionalProperties", _exceptionable) || _report(_exceptionable, {
            path: _path + ".additionalProperties",
            expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IOneOf | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalProperties
        })), undefined === input.required || (Array.isArray(input.required) || _report(_exceptionable, {
            path: _path + ".required",
            expected: "(Array<string> | undefined)",
            value: input.required
        })) && input.required.map(((elem, _index156) => "string" === typeof elem || _report(_exceptionable, {
            path: _path + ".required[" + _index156 + "]",
            expected: "string",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".required",
            expected: "(Array<string> | undefined)",
            value: input.required
        }), "object" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"object"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        })) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        }) ].every((flag => flag));
        const _vo183 = (input, _path, _exceptionable = true) => [ "string" === typeof input.$ref || _report(_exceptionable, {
            path: _path + ".$ref",
            expected: "string",
            value: input.$ref
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        })) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        }) ].every((flag => flag));
        const _vo184 = (input, _path, _exceptionable = true) => [ (Array.isArray(input.oneOf) || _report(_exceptionable, {
            path: _path + ".oneOf",
            expected: "Array<IConstant | IBoolean | IInteger | INumber | IString | IArray | ITuple | IObject | IReference<string> | INull | IUnknown>",
            value: input.oneOf
        })) && input.oneOf.map(((elem, _index157) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
            path: _path + ".oneOf[" + _index157 + "]",
            expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown)",
            value: elem
        })) && _vu8(elem, _path + ".oneOf[" + _index157 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".oneOf[" + _index157 + "]",
            expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".oneOf",
            expected: "Array<IConstant | IBoolean | IInteger | INumber | IString | IArray | ITuple | IObject | IReference<string> | INull | IUnknown>",
            value: input.oneOf
        }), undefined === input.discriminator || ("object" === typeof input.discriminator && null !== input.discriminator || _report(_exceptionable, {
            path: _path + ".discriminator",
            expected: "(OpenApi.IJsonSchema.IOneOf.IDiscriminator | undefined)",
            value: input.discriminator
        })) && _vo187(input.discriminator, _path + ".discriminator", _exceptionable) || _report(_exceptionable, {
            path: _path + ".discriminator",
            expected: "(OpenApi.IJsonSchema.IOneOf.IDiscriminator | undefined)",
            value: input.discriminator
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        })) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        }) ].every((flag => flag));
        const _vo185 = (input, _path, _exceptionable = true) => [ null === input["default"] || undefined === input["default"] || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: "(null | undefined)",
            value: input["default"]
        }), "null" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"null"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        })) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        }) ].every((flag => flag));
        const _vo186 = (input, _path, _exceptionable = true) => [ true, (null !== input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: "undefined",
            value: input.type
        })) && (undefined === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: "undefined",
            value: input.type
        })), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        })) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        }) ].every((flag => flag));
        const _vo187 = (input, _path, _exceptionable = true) => [ "string" === typeof input.propertyName || _report(_exceptionable, {
            path: _path + ".propertyName",
            expected: "string",
            value: input.propertyName
        }), undefined === input.mapping || ("object" === typeof input.mapping && null !== input.mapping && false === Array.isArray(input.mapping) || _report(_exceptionable, {
            path: _path + ".mapping",
            expected: "(Record<string, string> | undefined)",
            value: input.mapping
        })) && _vo35(input.mapping, _path + ".mapping", _exceptionable) || _report(_exceptionable, {
            path: _path + ".mapping",
            expected: "(Record<string, string> | undefined)",
            value: input.mapping
        }) ].every((flag => flag));
        const _vo188 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApi.ISecurityScheme.IApiKey | OpenApi.ISecurityScheme.IHttpBasic | OpenApi.ISecurityScheme.IHttpBearer | OpenApi.ISecurityScheme.IOAuth2 | OpenApi.ISecurityScheme.IOpenId)",
                value
            })) && _vu23(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApi.ISecurityScheme.IApiKey | OpenApi.ISecurityScheme.IHttpBasic | OpenApi.ISecurityScheme.IHttpBearer | OpenApi.ISecurityScheme.IOAuth2 | OpenApi.ISecurityScheme.IOpenId)",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo189 = (input, _path, _exceptionable = true) => [ "apiKey" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"apiKey"',
            value: input.type
        }), undefined === input["in"] || "query" === input["in"] || "header" === input["in"] || "cookie" === input["in"] || _report(_exceptionable, {
            path: _path + '["in"]',
            expected: '("cookie" | "header" | "query" | undefined)',
            value: input["in"]
        }), undefined === input.name || "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "(string | undefined)",
            value: input.name
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }) ].every((flag => flag));
        const _vo190 = (input, _path, _exceptionable = true) => [ "http" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"http"',
            value: input.type
        }), "basic" === input.scheme || _report(_exceptionable, {
            path: _path + ".scheme",
            expected: '"basic"',
            value: input.scheme
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }) ].every((flag => flag));
        const _vo191 = (input, _path, _exceptionable = true) => [ "http" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"http"',
            value: input.type
        }), "bearer" === input.scheme || _report(_exceptionable, {
            path: _path + ".scheme",
            expected: '"bearer"',
            value: input.scheme
        }), undefined === input.bearerFormat || "string" === typeof input.bearerFormat || _report(_exceptionable, {
            path: _path + ".bearerFormat",
            expected: "(string | undefined)",
            value: input.bearerFormat
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }) ].every((flag => flag));
        const _vo192 = (input, _path, _exceptionable = true) => [ "oauth2" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"oauth2"',
            value: input.type
        }), ("object" === typeof input.flows && null !== input.flows && false === Array.isArray(input.flows) || _report(_exceptionable, {
            path: _path + ".flows",
            expected: "OpenApi.ISecurityScheme.IOAuth2.IFlowSet",
            value: input.flows
        })) && _vo193(input.flows, _path + ".flows", _exceptionable) || _report(_exceptionable, {
            path: _path + ".flows",
            expected: "OpenApi.ISecurityScheme.IOAuth2.IFlowSet",
            value: input.flows
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }) ].every((flag => flag));
        const _vo193 = (input, _path, _exceptionable = true) => [ undefined === input.authorizationCode || ("object" === typeof input.authorizationCode && null !== input.authorizationCode && false === Array.isArray(input.authorizationCode) || _report(_exceptionable, {
            path: _path + ".authorizationCode",
            expected: "(OpenApi.ISecurityScheme.IOAuth2.IFlow | undefined)",
            value: input.authorizationCode
        })) && _vo194(input.authorizationCode, _path + ".authorizationCode", _exceptionable) || _report(_exceptionable, {
            path: _path + ".authorizationCode",
            expected: "(OpenApi.ISecurityScheme.IOAuth2.IFlow | undefined)",
            value: input.authorizationCode
        }), undefined === input.implicit || ("object" === typeof input.implicit && null !== input.implicit && false === Array.isArray(input.implicit) || _report(_exceptionable, {
            path: _path + ".implicit",
            expected: '(Omit<OpenApi.ISecurityScheme.IOAuth2.IFlow, "tokenUrl"> | undefined)',
            value: input.implicit
        })) && _vo195(input.implicit, _path + ".implicit", _exceptionable) || _report(_exceptionable, {
            path: _path + ".implicit",
            expected: '(Omit<OpenApi.ISecurityScheme.IOAuth2.IFlow, "tokenUrl"> | undefined)',
            value: input.implicit
        }), undefined === input.password || ("object" === typeof input.password && null !== input.password && false === Array.isArray(input.password) || _report(_exceptionable, {
            path: _path + ".password",
            expected: '(Omit<OpenApi.ISecurityScheme.IOAuth2.IFlow, "authorizationUrl"> | undefined)',
            value: input.password
        })) && _vo196(input.password, _path + ".password", _exceptionable) || _report(_exceptionable, {
            path: _path + ".password",
            expected: '(Omit<OpenApi.ISecurityScheme.IOAuth2.IFlow, "authorizationUrl"> | undefined)',
            value: input.password
        }), undefined === input.clientCredentials || ("object" === typeof input.clientCredentials && null !== input.clientCredentials && false === Array.isArray(input.clientCredentials) || _report(_exceptionable, {
            path: _path + ".clientCredentials",
            expected: '(Omit<OpenApi.ISecurityScheme.IOAuth2.IFlow, "authorizationUrl"> | undefined)',
            value: input.clientCredentials
        })) && _vo196(input.clientCredentials, _path + ".clientCredentials", _exceptionable) || _report(_exceptionable, {
            path: _path + ".clientCredentials",
            expected: '(Omit<OpenApi.ISecurityScheme.IOAuth2.IFlow, "authorizationUrl"> | undefined)',
            value: input.clientCredentials
        }) ].every((flag => flag));
        const _vo194 = (input, _path, _exceptionable = true) => [ undefined === input.authorizationUrl || "string" === typeof input.authorizationUrl || _report(_exceptionable, {
            path: _path + ".authorizationUrl",
            expected: "(string | undefined)",
            value: input.authorizationUrl
        }), undefined === input.tokenUrl || "string" === typeof input.tokenUrl || _report(_exceptionable, {
            path: _path + ".tokenUrl",
            expected: "(string | undefined)",
            value: input.tokenUrl
        }), undefined === input.refreshUrl || "string" === typeof input.refreshUrl || _report(_exceptionable, {
            path: _path + ".refreshUrl",
            expected: "(string | undefined)",
            value: input.refreshUrl
        }), undefined === input.scopes || ("object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) || _report(_exceptionable, {
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        })) && _vo35(input.scopes, _path + ".scopes", _exceptionable) || _report(_exceptionable, {
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        }) ].every((flag => flag));
        const _vo195 = (input, _path, _exceptionable = true) => [ undefined === input.authorizationUrl || "string" === typeof input.authorizationUrl || _report(_exceptionable, {
            path: _path + ".authorizationUrl",
            expected: "(string | undefined)",
            value: input.authorizationUrl
        }), undefined === input.refreshUrl || "string" === typeof input.refreshUrl || _report(_exceptionable, {
            path: _path + ".refreshUrl",
            expected: "(string | undefined)",
            value: input.refreshUrl
        }), undefined === input.scopes || ("object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) || _report(_exceptionable, {
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        })) && _vo35(input.scopes, _path + ".scopes", _exceptionable) || _report(_exceptionable, {
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        }) ].every((flag => flag));
        const _vo196 = (input, _path, _exceptionable = true) => [ undefined === input.tokenUrl || "string" === typeof input.tokenUrl || _report(_exceptionable, {
            path: _path + ".tokenUrl",
            expected: "(string | undefined)",
            value: input.tokenUrl
        }), undefined === input.refreshUrl || "string" === typeof input.refreshUrl || _report(_exceptionable, {
            path: _path + ".refreshUrl",
            expected: "(string | undefined)",
            value: input.refreshUrl
        }), undefined === input.scopes || ("object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) || _report(_exceptionable, {
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        })) && _vo35(input.scopes, _path + ".scopes", _exceptionable) || _report(_exceptionable, {
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        }) ].every((flag => flag));
        const _vo197 = (input, _path, _exceptionable = true) => [ "openIdConnect" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"openIdConnect"',
            value: input.type
        }), "string" === typeof input.openIdConnectUrl || _report(_exceptionable, {
            path: _path + ".openIdConnectUrl",
            expected: "string",
            value: input.openIdConnectUrl
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }) ].every((flag => flag));
        const _vo198 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApi.IPath",
                value
            })) && _vo199(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApi.IPath",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo199 = (input, _path, _exceptionable = true) => [ undefined === input.servers || (Array.isArray(input.servers) || _report(_exceptionable, {
            path: _path + ".servers",
            expected: "(Array<OpenApi.IServer> | undefined)",
            value: input.servers
        })) && input.servers.map(((elem, _index158) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
            path: _path + ".servers[" + _index158 + "]",
            expected: "OpenApi.IServer",
            value: elem
        })) && _vo167(elem, _path + ".servers[" + _index158 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".servers[" + _index158 + "]",
            expected: "OpenApi.IServer",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".servers",
            expected: "(Array<OpenApi.IServer> | undefined)",
            value: input.servers
        }), undefined === input.summary || "string" === typeof input.summary || _report(_exceptionable, {
            path: _path + ".summary",
            expected: "(string | undefined)",
            value: input.summary
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.options || ("object" === typeof input.options && null !== input.options && false === Array.isArray(input.options) || _report(_exceptionable, {
            path: _path + ".options",
            expected: "(OpenApi.IOperation | undefined)",
            value: input.options
        })) && _vo200(input.options, _path + ".options", _exceptionable) || _report(_exceptionable, {
            path: _path + ".options",
            expected: "(OpenApi.IOperation | undefined)",
            value: input.options
        }), undefined === input.get || ("object" === typeof input.get && null !== input.get && false === Array.isArray(input.get) || _report(_exceptionable, {
            path: _path + ".get",
            expected: "(OpenApi.IOperation | undefined)",
            value: input.get
        })) && _vo200(input.get, _path + ".get", _exceptionable) || _report(_exceptionable, {
            path: _path + ".get",
            expected: "(OpenApi.IOperation | undefined)",
            value: input.get
        }), undefined === input.post || ("object" === typeof input.post && null !== input.post && false === Array.isArray(input.post) || _report(_exceptionable, {
            path: _path + ".post",
            expected: "(OpenApi.IOperation | undefined)",
            value: input.post
        })) && _vo200(input.post, _path + ".post", _exceptionable) || _report(_exceptionable, {
            path: _path + ".post",
            expected: "(OpenApi.IOperation | undefined)",
            value: input.post
        }), undefined === input.patch || ("object" === typeof input.patch && null !== input.patch && false === Array.isArray(input.patch) || _report(_exceptionable, {
            path: _path + ".patch",
            expected: "(OpenApi.IOperation | undefined)",
            value: input.patch
        })) && _vo200(input.patch, _path + ".patch", _exceptionable) || _report(_exceptionable, {
            path: _path + ".patch",
            expected: "(OpenApi.IOperation | undefined)",
            value: input.patch
        }), undefined === input.put || ("object" === typeof input.put && null !== input.put && false === Array.isArray(input.put) || _report(_exceptionable, {
            path: _path + ".put",
            expected: "(OpenApi.IOperation | undefined)",
            value: input.put
        })) && _vo200(input.put, _path + ".put", _exceptionable) || _report(_exceptionable, {
            path: _path + ".put",
            expected: "(OpenApi.IOperation | undefined)",
            value: input.put
        }), undefined === input["delete"] || ("object" === typeof input["delete"] && null !== input["delete"] && false === Array.isArray(input["delete"]) || _report(_exceptionable, {
            path: _path + '["delete"]',
            expected: "(OpenApi.IOperation | undefined)",
            value: input["delete"]
        })) && _vo200(input["delete"], _path + '["delete"]', _exceptionable) || _report(_exceptionable, {
            path: _path + '["delete"]',
            expected: "(OpenApi.IOperation | undefined)",
            value: input["delete"]
        }), undefined === input.head || ("object" === typeof input.head && null !== input.head && false === Array.isArray(input.head) || _report(_exceptionable, {
            path: _path + ".head",
            expected: "(OpenApi.IOperation | undefined)",
            value: input.head
        })) && _vo200(input.head, _path + ".head", _exceptionable) || _report(_exceptionable, {
            path: _path + ".head",
            expected: "(OpenApi.IOperation | undefined)",
            value: input.head
        }), undefined === input.trace || ("object" === typeof input.trace && null !== input.trace && false === Array.isArray(input.trace) || _report(_exceptionable, {
            path: _path + ".trace",
            expected: "(OpenApi.IOperation | undefined)",
            value: input.trace
        })) && _vo200(input.trace, _path + ".trace", _exceptionable) || _report(_exceptionable, {
            path: _path + ".trace",
            expected: "(OpenApi.IOperation | undefined)",
            value: input.trace
        }) ].every((flag => flag));
        const _vo200 = (input, _path, _exceptionable = true) => [ undefined === input.operationId || "string" === typeof input.operationId || _report(_exceptionable, {
            path: _path + ".operationId",
            expected: "(string | undefined)",
            value: input.operationId
        }), undefined === input.parameters || (Array.isArray(input.parameters) || _report(_exceptionable, {
            path: _path + ".parameters",
            expected: "(Array<OpenApi.IOperation.IParameter> | undefined)",
            value: input.parameters
        })) && input.parameters.map(((elem, _index159) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
            path: _path + ".parameters[" + _index159 + "]",
            expected: "OpenApi.IOperation.IParameter",
            value: elem
        })) && _vo201(elem, _path + ".parameters[" + _index159 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".parameters[" + _index159 + "]",
            expected: "OpenApi.IOperation.IParameter",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".parameters",
            expected: "(Array<OpenApi.IOperation.IParameter> | undefined)",
            value: input.parameters
        }), undefined === input.requestBody || ("object" === typeof input.requestBody && null !== input.requestBody && false === Array.isArray(input.requestBody) || _report(_exceptionable, {
            path: _path + ".requestBody",
            expected: "(OpenApi.IOperation.IRequestBody | undefined)",
            value: input.requestBody
        })) && _vo204(input.requestBody, _path + ".requestBody", _exceptionable) || _report(_exceptionable, {
            path: _path + ".requestBody",
            expected: "(OpenApi.IOperation.IRequestBody | undefined)",
            value: input.requestBody
        }), undefined === input.responses || ("object" === typeof input.responses && null !== input.responses && false === Array.isArray(input.responses) || _report(_exceptionable, {
            path: _path + ".responses",
            expected: "(Record<string, OpenApi.IOperation.IResponse> | undefined)",
            value: input.responses
        })) && _vo207(input.responses, _path + ".responses", _exceptionable) || _report(_exceptionable, {
            path: _path + ".responses",
            expected: "(Record<string, OpenApi.IOperation.IResponse> | undefined)",
            value: input.responses
        }), undefined === input.servers || (Array.isArray(input.servers) || _report(_exceptionable, {
            path: _path + ".servers",
            expected: "(Array<OpenApi.IServer> | undefined)",
            value: input.servers
        })) && input.servers.map(((elem, _index160) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
            path: _path + ".servers[" + _index160 + "]",
            expected: "OpenApi.IServer",
            value: elem
        })) && _vo167(elem, _path + ".servers[" + _index160 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".servers[" + _index160 + "]",
            expected: "OpenApi.IServer",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".servers",
            expected: "(Array<OpenApi.IServer> | undefined)",
            value: input.servers
        }), undefined === input.summary || "string" === typeof input.summary || _report(_exceptionable, {
            path: _path + ".summary",
            expected: "(string | undefined)",
            value: input.summary
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.security || (Array.isArray(input.security) || _report(_exceptionable, {
            path: _path + ".security",
            expected: "(Array<Record<string, Array<string>>> | undefined)",
            value: input.security
        })) && input.security.map(((elem, _index161) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
            path: _path + ".security[" + _index161 + "]",
            expected: "Record<string, Array<string>>",
            value: elem
        })) && _vo39(elem, _path + ".security[" + _index161 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".security[" + _index161 + "]",
            expected: "Record<string, Array<string>>",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".security",
            expected: "(Array<Record<string, Array<string>>> | undefined)",
            value: input.security
        }), undefined === input.tags || (Array.isArray(input.tags) || _report(_exceptionable, {
            path: _path + ".tags",
            expected: "(Array<string> | undefined)",
            value: input.tags
        })) && input.tags.map(((elem, _index162) => "string" === typeof elem || _report(_exceptionable, {
            path: _path + ".tags[" + _index162 + "]",
            expected: "string",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".tags",
            expected: "(Array<string> | undefined)",
            value: input.tags
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), undefined === input["x-samchon-human"] || "boolean" === typeof input["x-samchon-human"] || _report(_exceptionable, {
            path: _path + '["x-samchon-human"]',
            expected: "(boolean | undefined)",
            value: input["x-samchon-human"]
        }), undefined === input["x-samchon-accessor"] || (Array.isArray(input["x-samchon-accessor"]) || _report(_exceptionable, {
            path: _path + '["x-samchon-accessor"]',
            expected: "(Array<string> | undefined)",
            value: input["x-samchon-accessor"]
        })) && input["x-samchon-accessor"].map(((elem, _index163) => "string" === typeof elem || _report(_exceptionable, {
            path: _path + '["x-samchon-accessor"][' + _index163 + "]",
            expected: "string",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + '["x-samchon-accessor"]',
            expected: "(Array<string> | undefined)",
            value: input["x-samchon-accessor"]
        }), undefined === input["x-samchon-controller"] || "string" === typeof input["x-samchon-controller"] || _report(_exceptionable, {
            path: _path + '["x-samchon-controller"]',
            expected: "(string | undefined)",
            value: input["x-samchon-controller"]
        }) ].every((flag => flag));
        const _vo201 = (input, _path, _exceptionable = true) => [ undefined === input.name || "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "(string | undefined)",
            value: input.name
        }), "path" === input["in"] || "query" === input["in"] || "header" === input["in"] || "cookie" === input["in"] || _report(_exceptionable, {
            path: _path + '["in"]',
            expected: '("cookie" | "header" | "path" | "query")',
            value: input["in"]
        }), ("object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) || _report(_exceptionable, {
            path: _path + ".schema",
            expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IOneOf | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown)",
            value: input.schema
        })) && _vu7(input.schema, _path + ".schema", _exceptionable) || _report(_exceptionable, {
            path: _path + ".schema",
            expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IOneOf | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown)",
            value: input.schema
        }), undefined === input.required || "boolean" === typeof input.required || _report(_exceptionable, {
            path: _path + ".required",
            expected: "(boolean | undefined)",
            value: input.required
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), true, undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, OpenApi.IExample> | undefined)",
            value: input.examples
        })) && _vo202(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, OpenApi.IExample> | undefined)",
            value: input.examples
        }) ].every((flag => flag));
        const _vo202 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApi.IExample",
                value
            })) && _vo203(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApi.IExample",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo203 = (input, _path, _exceptionable = true) => [ undefined === input.summary || "string" === typeof input.summary || _report(_exceptionable, {
            path: _path + ".summary",
            expected: "(string | undefined)",
            value: input.summary
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), true, undefined === input.externalValue || "string" === typeof input.externalValue || _report(_exceptionable, {
            path: _path + ".externalValue",
            expected: "(string | undefined)",
            value: input.externalValue
        }) ].every((flag => flag));
        const _vo204 = (input, _path, _exceptionable = true) => [ undefined === input.content || ("object" === typeof input.content && null !== input.content && false === Array.isArray(input.content) || _report(_exceptionable, {
            path: _path + ".content",
            expected: "(OpenApi.IOperation.IContent | undefined)",
            value: input.content
        })) && _vo205(input.content, _path + ".content", _exceptionable) || _report(_exceptionable, {
            path: _path + ".content",
            expected: "(OpenApi.IOperation.IContent | undefined)",
            value: input.content
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.required || "boolean" === typeof input.required || _report(_exceptionable, {
            path: _path + ".required",
            expected: "(boolean | undefined)",
            value: input.required
        }), undefined === input["x-nestia-encrypted"] || "boolean" === typeof input["x-nestia-encrypted"] || _report(_exceptionable, {
            path: _path + '["x-nestia-encrypted"]',
            expected: "(boolean | undefined)",
            value: input["x-nestia-encrypted"]
        }) ].every((flag => flag));
        const _vo205 = (input, _path, _exceptionable = true) => [ undefined === input["text/plain"] || ("object" === typeof input["text/plain"] && null !== input["text/plain"] && false === Array.isArray(input["text/plain"]) || _report(_exceptionable, {
            path: _path + '["text/plain"]',
            expected: "(OpenApi.IOperation.IMediaType | undefined)",
            value: input["text/plain"]
        })) && _vo206(input["text/plain"], _path + '["text/plain"]', _exceptionable) || _report(_exceptionable, {
            path: _path + '["text/plain"]',
            expected: "(OpenApi.IOperation.IMediaType | undefined)",
            value: input["text/plain"]
        }), undefined === input["application/json"] || ("object" === typeof input["application/json"] && null !== input["application/json"] && false === Array.isArray(input["application/json"]) || _report(_exceptionable, {
            path: _path + '["application/json"]',
            expected: "(OpenApi.IOperation.IMediaType | undefined)",
            value: input["application/json"]
        })) && _vo206(input["application/json"], _path + '["application/json"]', _exceptionable) || _report(_exceptionable, {
            path: _path + '["application/json"]',
            expected: "(OpenApi.IOperation.IMediaType | undefined)",
            value: input["application/json"]
        }), undefined === input["application/x-www-form-url-encoded"] || ("object" === typeof input["application/x-www-form-url-encoded"] && null !== input["application/x-www-form-url-encoded"] && false === Array.isArray(input["application/x-www-form-url-encoded"]) || _report(_exceptionable, {
            path: _path + '["application/x-www-form-url-encoded"]',
            expected: "(OpenApi.IOperation.IMediaType | undefined)",
            value: input["application/x-www-form-url-encoded"]
        })) && _vo206(input["application/x-www-form-url-encoded"], _path + '["application/x-www-form-url-encoded"]', _exceptionable) || _report(_exceptionable, {
            path: _path + '["application/x-www-form-url-encoded"]',
            expected: "(OpenApi.IOperation.IMediaType | undefined)",
            value: input["application/x-www-form-url-encoded"]
        }), undefined === input["multipart/form-data"] || ("object" === typeof input["multipart/form-data"] && null !== input["multipart/form-data"] && false === Array.isArray(input["multipart/form-data"]) || _report(_exceptionable, {
            path: _path + '["multipart/form-data"]',
            expected: "(OpenApi.IOperation.IMediaType | undefined)",
            value: input["multipart/form-data"]
        })) && _vo206(input["multipart/form-data"], _path + '["multipart/form-data"]', _exceptionable) || _report(_exceptionable, {
            path: _path + '["multipart/form-data"]',
            expected: "(OpenApi.IOperation.IMediaType | undefined)",
            value: input["multipart/form-data"]
        }), undefined === input["*/*"] || ("object" === typeof input["*/*"] && null !== input["*/*"] && false === Array.isArray(input["*/*"]) || _report(_exceptionable, {
            path: _path + '["*/*"]',
            expected: "(OpenApi.IOperation.IMediaType | undefined)",
            value: input["*/*"]
        })) && _vo206(input["*/*"], _path + '["*/*"]', _exceptionable) || _report(_exceptionable, {
            path: _path + '["*/*"]',
            expected: "(OpenApi.IOperation.IMediaType | undefined)",
            value: input["*/*"]
        }), false === _exceptionable || Object.keys(input).map((key => {
            if ([ "text/plain", "application/json", "application/x-www-form-url-encoded", "multipart/form-data", "*/*" ].some((prop => key === prop))) return true;
            const value = input[key];
            if (undefined === value) return true;
            return undefined === value || ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApi.IOperation.IMediaType | undefined)",
                value
            })) && _vo206(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApi.IOperation.IMediaType | undefined)",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo206 = (input, _path, _exceptionable = true) => [ undefined === input.schema || ("object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) || _report(_exceptionable, {
            path: _path + ".schema",
            expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IOneOf | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown | undefined)",
            value: input.schema
        })) && _vu7(input.schema, _path + ".schema", _exceptionable) || _report(_exceptionable, {
            path: _path + ".schema",
            expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IOneOf | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown | undefined)",
            value: input.schema
        }), true, undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, OpenApi.IExample> | undefined)",
            value: input.examples
        })) && _vo202(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, OpenApi.IExample> | undefined)",
            value: input.examples
        }) ].every((flag => flag));
        const _vo207 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApi.IOperation.IResponse",
                value
            })) && _vo208(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApi.IOperation.IResponse",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo208 = (input, _path, _exceptionable = true) => [ undefined === input.headers || ("object" === typeof input.headers && null !== input.headers && false === Array.isArray(input.headers) || _report(_exceptionable, {
            path: _path + ".headers",
            expected: "(Record<string, OpenApi.IOperation.IParameter> | undefined)",
            value: input.headers
        })) && _vo209(input.headers, _path + ".headers", _exceptionable) || _report(_exceptionable, {
            path: _path + ".headers",
            expected: "(Record<string, OpenApi.IOperation.IParameter> | undefined)",
            value: input.headers
        }), undefined === input.content || ("object" === typeof input.content && null !== input.content && false === Array.isArray(input.content) || _report(_exceptionable, {
            path: _path + ".content",
            expected: "(OpenApi.IOperation.IContent | undefined)",
            value: input.content
        })) && _vo205(input.content, _path + ".content", _exceptionable) || _report(_exceptionable, {
            path: _path + ".content",
            expected: "(OpenApi.IOperation.IContent | undefined)",
            value: input.content
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input["x-nestia-encrypted"] || "boolean" === typeof input["x-nestia-encrypted"] || _report(_exceptionable, {
            path: _path + '["x-nestia-encrypted"]',
            expected: "(boolean | undefined)",
            value: input["x-nestia-encrypted"]
        }) ].every((flag => flag));
        const _vo209 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApi.IOperation.IParameter",
                value
            })) && _vo201(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApi.IOperation.IParameter",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo210 = (input, _path, _exceptionable = true) => [ "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "string",
            value: input.name
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }) ].every((flag => flag));
        const _vu0 = (input, _path, _exceptionable = true) => (() => {
            if ("boolean" === input.type) return _vo5(input, _path, _exceptionable); else if ("number" === input.type) return _vo7(input, _path, _exceptionable); else if ("integer" === input.type) return _vo6(input, _path, _exceptionable); else if ("string" === input.type) return _vo8(input, _path, _exceptionable); else if ("array" === input.type) return _vo9(input, _path, _exceptionable); else if ("object" === input.type) return _vo10(input, _path, _exceptionable); else if (undefined !== input.$ref) return _vo11(input, _path, _exceptionable); else if (undefined !== input["x-anyOf"]) return _vo12(input, _path, _exceptionable); else if (undefined !== input["x-oneOf"]) return _vo13(input, _path, _exceptionable); else if ("null" === input.type) return _vo14(input, _path, _exceptionable); else return _vo15(input, _path, _exceptionable);
        })();
        const _vu1 = (input, _path, _exceptionable = true) => (() => {
            if ("boolean" === input.type) return _vo17(input, _path, _exceptionable); else if ("number" === input.type) return _vo19(input, _path, _exceptionable); else if ("integer" === input.type) return _vo18(input, _path, _exceptionable); else if ("string" === input.type) return _vo20(input, _path, _exceptionable); else if ("array" === input.type) return _vo21(input, _path, _exceptionable); else if ("object" === input.type) return _vo22(input, _path, _exceptionable); else if (undefined !== input["x-anyOf"]) return _vo24(input, _path, _exceptionable); else if (undefined !== input["x-oneOf"]) return _vo25(input, _path, _exceptionable); else if ("null" === input.type) return _vo26(input, _path, _exceptionable); else if (undefined !== input.schema) return _vo28(input, _path, _exceptionable); else return _vo23(input, _path, false) || _vo27(input, _path, false) || _vo42(input, _path, false);
        })();
        const _vu2 = (input, _path, _exceptionable = true) => (() => {
            if ("boolean" === input.type) return _vo17(input, _path, _exceptionable); else if ("number" === input.type) return _vo19(input, _path, _exceptionable); else if ("integer" === input.type) return _vo18(input, _path, _exceptionable); else if ("string" === input.type) return _vo20(input, _path, _exceptionable); else if ("array" === input.type) return _vo21(input, _path, _exceptionable); else if ("object" === input.type) return _vo22(input, _path, _exceptionable); else if (undefined !== input["x-anyOf"]) return _vo24(input, _path, _exceptionable); else if (undefined !== input["x-oneOf"]) return _vo25(input, _path, _exceptionable); else if ("null" === input.type) return _vo26(input, _path, _exceptionable); else if (undefined !== input.schema) return _vo28(input, _path, _exceptionable); else return _vo23(input, _path, false) || _vo27(input, _path, false) || _vo44(input, _path, false);
        })();
        const _vu3 = (input, _path, _exceptionable = true) => (() => {
            if ("boolean" === input.type) return _vo57(input, _path, _exceptionable); else if ("number" === input.type) return _vo60(input, _path, _exceptionable); else if ("integer" === input.type) return _vo59(input, _path, _exceptionable); else if ("string" === input.type) return _vo61(input, _path, _exceptionable); else if ("array" === input.type) return _vo62(input, _path, _exceptionable); else if ("object" === input.type) return _vo63(input, _path, _exceptionable); else if (undefined !== input.$ref) return _vo64(input, _path, _exceptionable); else if (undefined !== input.allOf) return _vo65(input, _path, _exceptionable); else if (undefined !== input.anyOf) return _vo66(input, _path, _exceptionable); else if (undefined !== input.oneOf) return _vo67(input, _path, _exceptionable); else if ("null" === input.type) return _vo69(input, _path, _exceptionable); else return _vo70(input, _path, _exceptionable);
        })();
        const _vu4 = (input, _path, _exceptionable = true) => (() => {
            if (undefined !== input["in"]) return _vo82(input, _path, _exceptionable); else if ("string" === typeof input.$ref && RegExp(/^#\/components\/parameters\/(.*)/).test(input.$ref)) return _vo99(input, _path, _exceptionable); else if ("string" === typeof input.$ref && RegExp(/^#\/components\/headers\/(.*)/).test(input.$ref)) return _vo80(input, _path, _exceptionable); else return _report(_exceptionable, {
                path: _path,
                expected: "(OpenApiV3.IOperation.IParameter | OpenApiV3.IJsonSchema.IReference<`#/components/parameters/${string}`> | OpenApiV3.IJsonSchema.IReference<`#/components/headers/${string}`>)",
                value: input
            });
        })();
        const _vu5 = (input, _path, _exceptionable = true) => (() => {
            if ("object" === input.type) return _vo114(input, _path, _exceptionable); else if (Array.isArray(input.type) && input.type.map(((elem, _index164) => "string" === elem || "number" === elem || "boolean" === elem || "object" === elem || "integer" === elem || "array" === elem || "null" === elem)).every((flag => flag))) return _vo115(input, _path, _exceptionable); else if ("boolean" === input.type) return _vo117(input, _path, _exceptionable); else if ("number" === input.type) return _vo119(input, _path, _exceptionable); else if ("integer" === input.type) return _vo118(input, _path, _exceptionable); else if ("string" === input.type) return _vo120(input, _path, _exceptionable); else if ("array" === input.type) return _vo121(input, _path, _exceptionable); else if (undefined !== input.$recursiveRef) return _vo123(input, _path, _exceptionable); else if ("null" === input.type) return _vo128(input, _path, _exceptionable); else return (() => {
                if (undefined !== input["const"]) return _vo116(input, _path, _exceptionable); else if (undefined !== input.$ref) return _vo122(input, _path, _exceptionable); else if (undefined !== input.allOf) return _vo124(input, _path, _exceptionable); else if (undefined !== input.anyOf) return _vo125(input, _path, _exceptionable); else if (undefined !== input.oneOf) return _vo126(input, _path, _exceptionable); else return _vo129(input, _path, _exceptionable);
            })();
        })();
        const _vu6 = (input, _path, _exceptionable = true) => (() => {
            if (undefined !== input["in"]) return _vo132(input, _path, _exceptionable); else if ("string" === typeof input.$ref && RegExp(/^#\/components\/parameters\/(.*)/).test(input.$ref)) return _vo137(input, _path, _exceptionable); else if ("string" === typeof input.$ref && RegExp(/^#\/components\/headers\/(.*)/).test(input.$ref)) return _vo136(input, _path, _exceptionable); else return _report(_exceptionable, {
                path: _path,
                expected: "(OpenApiV3_1.IOperation.IParameter | OpenApiV3_1.IJsonSchema.IReference<`#/components/parameters/${string}`> | OpenApiV3_1.IJsonSchema.IReference<`#/components/headers/${string}`>)",
                value: input
            });
        })();
        const _vu7 = (input, _path, _exceptionable = true) => (() => {
            if (undefined !== input["const"]) return _vo175(input, _path, _exceptionable); else if ("boolean" === input.type) return _vo176(input, _path, _exceptionable); else if ("number" === input.type) return _vo178(input, _path, _exceptionable); else if ("integer" === input.type) return _vo177(input, _path, _exceptionable); else if ("string" === input.type) return _vo179(input, _path, _exceptionable); else if (undefined !== input.items) return _vo180(input, _path, _exceptionable); else if (undefined !== input.prefixItems) return _vo181(input, _path, _exceptionable); else if ("object" === input.type) return _vo182(input, _path, _exceptionable); else if (undefined !== input.$ref) return _vo183(input, _path, _exceptionable); else if (undefined !== input.oneOf) return _vo184(input, _path, _exceptionable); else if ("null" === input.type) return _vo185(input, _path, _exceptionable); else return _vo186(input, _path, _exceptionable);
        })();
        const _vu8 = (input, _path, _exceptionable = true) => (() => {
            if (undefined !== input["const"]) return _vo175(input, _path, _exceptionable); else if ("boolean" === input.type) return _vo176(input, _path, _exceptionable); else if ("number" === input.type) return _vo178(input, _path, _exceptionable); else if ("integer" === input.type) return _vo177(input, _path, _exceptionable); else if ("string" === input.type) return _vo179(input, _path, _exceptionable); else if (undefined !== input.items) return _vo180(input, _path, _exceptionable); else if (undefined !== input.prefixItems) return _vo181(input, _path, _exceptionable); else if ("object" === input.type) return _vo182(input, _path, _exceptionable); else if (undefined !== input.$ref) return _vo183(input, _path, _exceptionable); else if ("null" === input.type) return _vo185(input, _path, _exceptionable); else return _vo186(input, _path, _exceptionable);
        })();
        const _vu9 = (input, _path, _exceptionable = true) => (() => {
            if ("boolean" === input.type) return _vo17(input, _path, _exceptionable); else if ("number" === input.type) return _vo19(input, _path, _exceptionable); else if ("integer" === input.type) return _vo18(input, _path, _exceptionable); else if ("string" === input.type) return _vo20(input, _path, _exceptionable); else if ("array" === input.type) return _vo21(input, _path, _exceptionable); else if ("object" === input.type) return _vo22(input, _path, _exceptionable); else if (undefined !== input.$ref) return _vo23(input, _path, _exceptionable); else if (undefined !== input["x-anyOf"]) return _vo24(input, _path, _exceptionable); else if (undefined !== input["x-oneOf"]) return _vo25(input, _path, _exceptionable); else if ("null" === input.type) return _vo26(input, _path, _exceptionable); else if (undefined !== input.schema) return _vo28(input, _path, _exceptionable); else return _vo27(input, _path, _exceptionable);
        })();
        const _vu10 = (input, _path, _exceptionable = true) => (() => {
            if ("apiKey" === input.type) return _vo32(input, _path, _exceptionable); else if ("basic" === input.type) return _vo33(input, _path, _exceptionable); else if ("implicit" === input.flow) return _vo34(input, _path, _exceptionable); else if ("accessCode" === input.flow) return _vo36(input, _path, _exceptionable); else if ("application" === input.flow) return _vo38(input, _path, _exceptionable); else if ("password" === input.flow) return _vo37(input, _path, _exceptionable); else return _report(_exceptionable, {
                path: _path,
                expected: "(SwaggerV2.ISecurityDefinition.IApiKey | SwaggerV2.ISecurityDefinition.IBasic | SwaggerV2.ISecurityDefinition.IOauth2Implicit | SwaggerV2.ISecurityDefinition.IOauth2AccessCode | SwaggerV2.ISecurityDefinition.IOauth2Application | SwaggerV2.ISecurityDefinition.IOauth2Password)",
                value: input
            });
        })();
        const _vu11 = (input, _path, _exceptionable = true) => (() => {
            if (undefined !== input.$ref) return _vo46(input, _path, _exceptionable); else return _vo30(input, _path, _exceptionable);
        })();
        const _vu12 = (input, _path, _exceptionable = true) => (() => {
            if (undefined !== input.$ref) return _vo77(input, _path, _exceptionable); else return _vo76(input, _path, _exceptionable);
        })();
        const _vu13 = (input, _path, _exceptionable = true) => (() => {
            if (undefined !== input.schema) return _vo79(input, _path, _exceptionable); else if (undefined !== input.$ref) return _vo80(input, _path, _exceptionable); else return _report(_exceptionable, {
                path: _path,
                expected: '(Omit<OpenApiV3.IOperation.IParameter, "in"> | OpenApiV3.IJsonSchema.IReference<`#/components/headers/${string}`>)',
                value: input
            });
        })();
        const _vu14 = (input, _path, _exceptionable = true) => (() => {
            if ("apiKey" === input.type) return _vo86(input, _path, _exceptionable); else if ("basic" === input.scheme) return _vo87(input, _path, _exceptionable); else if ("bearer" === input.scheme) return _vo88(input, _path, _exceptionable); else if ("oauth2" === input.type) return _vo89(input, _path, _exceptionable); else if ("openIdConnect" === input.type) return _vo94(input, _path, _exceptionable); else return _report(_exceptionable, {
                path: _path,
                expected: "(OpenApiV3.ISecurityScheme.IApiKey | OpenApiV3.ISecurityScheme.IHttpBasic | OpenApiV3.ISecurityScheme.IHttpBearer | OpenApiV3.ISecurityScheme.IOAuth2 | OpenApiV3.ISecurityScheme.IOpenId)",
                value: input
            });
        })();
        const _vu15 = (input, _path, _exceptionable = true) => (() => {
            if (undefined !== input.$ref) return _vo101(input, _path, _exceptionable); else return _vo84(input, _path, _exceptionable);
        })();
        const _vu16 = (input, _path, _exceptionable = true) => (() => {
            if (undefined !== input.$ref) return _vo103(input, _path, _exceptionable); else return _vo72(input, _path, _exceptionable);
        })();
        const _vu17 = (input, _path, _exceptionable = true) => (() => {
            if (undefined !== input.$ref) return _vo135(input, _path, _exceptionable); else return _vo134(input, _path, _exceptionable);
        })();
        const _vu18 = (input, _path, _exceptionable = true) => (() => {
            if (undefined !== input.$ref) return _vo142(input, _path, _exceptionable); else return _vo139(input, _path, _exceptionable);
        })();
        const _vu19 = (input, _path, _exceptionable = true) => (() => {
            if (undefined !== input.$ref) return _vo147(input, _path, _exceptionable); else return _vo144(input, _path, _exceptionable);
        })();
        const _vu20 = (input, _path, _exceptionable = true) => (() => {
            if (undefined !== input.$ref) return _vo136(input, _path, _exceptionable); else if (undefined !== input.schema) return _vo146(input, _path, _exceptionable); else return _report(_exceptionable, {
                path: _path,
                expected: '(OpenApiV3_1.IJsonSchema.IReference<`#/components/headers/${string}`> | Omit<OpenApiV3_1.IOperation.IParameter, "in">)',
                value: input
            });
        })();
        const _vu21 = (input, _path, _exceptionable = true) => (() => {
            if ("apiKey" === input.type) return _vo152(input, _path, _exceptionable); else if ("basic" === input.scheme) return _vo153(input, _path, _exceptionable); else if ("bearer" === input.scheme) return _vo154(input, _path, _exceptionable); else if ("oauth2" === input.type) return _vo155(input, _path, _exceptionable); else if ("openIdConnect" === input.type) return _vo160(input, _path, _exceptionable); else return _report(_exceptionable, {
                path: _path,
                expected: "(OpenApiV3_1.ISecurityScheme.IApiKey | OpenApiV3_1.ISecurityScheme.IHttpBasic | OpenApiV3_1.ISecurityScheme.IHttpBearer | OpenApiV3_1.ISecurityScheme.IOAuth2 | OpenApiV3_1.ISecurityScheme.IOpenId)",
                value: input
            });
        })();
        const _vu22 = (input, _path, _exceptionable = true) => (() => {
            if (undefined !== input.$ref) return _vo164(input, _path, _exceptionable); else return _vo131(input, _path, _exceptionable);
        })();
        const _vu23 = (input, _path, _exceptionable = true) => (() => {
            if ("apiKey" === input.type) return _vo189(input, _path, _exceptionable); else if ("basic" === input.scheme) return _vo190(input, _path, _exceptionable); else if ("bearer" === input.scheme) return _vo191(input, _path, _exceptionable); else if ("oauth2" === input.type) return _vo192(input, _path, _exceptionable); else if ("openIdConnect" === input.type) return _vo197(input, _path, _exceptionable); else return _report(_exceptionable, {
                path: _path,
                expected: "(OpenApi.ISecurityScheme.IApiKey | OpenApi.ISecurityScheme.IHttpBasic | OpenApi.ISecurityScheme.IHttpBearer | OpenApi.ISecurityScheme.IOAuth2 | OpenApi.ISecurityScheme.IOpenId)",
                value: input
            });
        })();
        const _vu24 = (input, _path, _exceptionable = true) => (() => {
            if (undefined !== input.swagger) return _vo0(input, _path, _exceptionable); else if (null !== input.openapi && undefined !== input.openapi && ("3.0" === input.openapi || "string" === typeof input.openapi && RegExp(/^3\.0\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(input.openapi))) return _vo48(input, _path, _exceptionable); else if ("string" === typeof input.openapi && RegExp(/^3\.1\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(input.openapi)) return _vo105(input, _path, _exceptionable); else if (undefined !== input["x-samchon-emended-v4"]) return _vo166(input, _path, _exceptionable); else return _report(_exceptionable, {
                path: _path,
                expected: "(SwaggerV2.IDocument | OpenApiV3.IDocument | OpenApiV3_1.IDocument | OpenApi.IDocument)",
                value: input
            });
        })();
        const __is = input => "object" === typeof input && null !== input && _iu24(input);
        let errors;
        let _report;
        return input => {
            if (false === __is(input)) {
                errors = [];
                _report = __typia_transform__validateReport._validateReport(errors);
                ((input, _path, _exceptionable = true) => ("object" === typeof input && null !== input || _report(true, {
                    path: _path + "",
                    expected: "(OpenApi.IDocument | OpenApiV3.IDocument | OpenApiV3_1.IDocument | SwaggerV2.IDocument)",
                    value: input
                })) && _vu24(input, _path + "", true) || _report(true, {
                    path: _path + "",
                    expected: "(OpenApi.IDocument | OpenApiV3.IDocument | OpenApiV3_1.IDocument | SwaggerV2.IDocument)",
                    value: input
                }))(input, "$input", true);
                const success = 0 === errors.length;
                return success ? {
                    success,
                    data: input
                } : {
                    success,
                    errors,
                    data: input
                };
            }
            return {
                success: true,
                data: input
            };
        };
    })()(props.document);
    if (inspect.success === false) {
        return inspect;
    }
    return {
        success: true,
        data: {
            protocol: "http",
            name: props.name,
            application: HttpLlm.application({
                model: props.model,
                document: OpenApi.convert(inspect.data),
                options: props.options
            }),
            execute: props.execute,
            connection: props.connection
        }
    };
}

function validateHttpLlmApplication(props) {
    const inspect = (() => {
        const _io0 = input => null !== input.swagger && undefined !== input.swagger && ("2.0" === input.swagger || "string" === typeof input.swagger && RegExp(/^2\.0\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(input.swagger)) && (undefined === input.info || "object" === typeof input.info && null !== input.info && _io1(input.info)) && (undefined === input.host || "string" === typeof input.host) && (undefined === input.basePath || "string" === typeof input.basePath) && (undefined === input.consumes || Array.isArray(input.consumes) && input.consumes.every((elem => "string" === typeof elem))) && (undefined === input.produces || Array.isArray(input.produces) && input.produces.every((elem => "string" === typeof elem))) && (undefined === input.definitions || "object" === typeof input.definitions && null !== input.definitions && false === Array.isArray(input.definitions) && _io4(input.definitions)) && (undefined === input.parameters || "object" === typeof input.parameters && null !== input.parameters && false === Array.isArray(input.parameters) && _io16(input.parameters)) && (undefined === input.responses || "object" === typeof input.responses && null !== input.responses && false === Array.isArray(input.responses) && _io29(input.responses)) && (undefined === input.securityDefinitions || "object" === typeof input.securityDefinitions && null !== input.securityDefinitions && false === Array.isArray(input.securityDefinitions) && _io31(input.securityDefinitions)) && (undefined === input.security || Array.isArray(input.security) && input.security.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io39(elem)))) && (undefined === input.paths || "object" === typeof input.paths && null !== input.paths && false === Array.isArray(input.paths) && _io40(input.paths)) && (undefined === input.tags || Array.isArray(input.tags) && input.tags.every((elem => "object" === typeof elem && null !== elem && _io47(elem))));
        const _io1 = input => "string" === typeof input.title && (undefined === input.description || "string" === typeof input.description) && (undefined === input.termsOfService || "string" === typeof input.termsOfService) && (undefined === input.contact || "object" === typeof input.contact && null !== input.contact && false === Array.isArray(input.contact) && _io2(input.contact)) && (undefined === input.license || "object" === typeof input.license && null !== input.license && _io3(input.license)) && "string" === typeof input.version;
        const _io2 = input => (undefined === input.name || "string" === typeof input.name) && (undefined === input.url || "string" === typeof input.url) && (undefined === input.email || "string" === typeof input.email);
        const _io3 = input => "string" === typeof input.name && (undefined === input.url || "string" === typeof input.url);
        const _io4 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _iu0(value);
        }));
        const _io5 = input => (null === input["default"] || undefined === input["default"] || "boolean" === typeof input["default"]) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "boolean" === typeof elem))) && "boolean" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"]) && (undefined === input.examples || Array.isArray(input.examples));
        const _io6 = input => (null === input["default"] || undefined === input["default"] || "number" === typeof input["default"] && (Math.floor(input["default"]) === input["default"] && -0x8000000000000000 <= input["default"] && input["default"] <= 0x8000000000000000)) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "number" === typeof elem))) && (undefined === input.minimum || "number" === typeof input.minimum && (Math.floor(input.minimum) === input.minimum && -0x8000000000000000 <= input.minimum && input.minimum <= 0x8000000000000000)) && (undefined === input.maximum || "number" === typeof input.maximum && (Math.floor(input.maximum) === input.maximum && -0x8000000000000000 <= input.maximum && input.maximum <= 0x8000000000000000)) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && (Math.floor(input.multipleOf) === input.multipleOf && 0 <= input.multipleOf && input.multipleOf <= 0x10000000000000000 && 0 < input.multipleOf)) && "integer" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"]) && (undefined === input.examples || Array.isArray(input.examples));
        const _io7 = input => (null === input["default"] || undefined === input["default"] || "number" === typeof input["default"]) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "number" === typeof elem))) && (undefined === input.minimum || "number" === typeof input.minimum) && (undefined === input.maximum || "number" === typeof input.maximum) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && 0 < input.multipleOf) && "number" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"]) && (undefined === input.examples || Array.isArray(input.examples));
        const _io8 = input => (null === input["default"] || undefined === input["default"] || "string" === typeof input["default"]) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "string" === typeof elem))) && (undefined === input.format || "string" === typeof input.format) && (undefined === input.pattern || "string" === typeof input.pattern) && (undefined === input.minLength || "number" === typeof input.minLength && (Math.floor(input.minLength) === input.minLength && 0 <= input.minLength && input.minLength <= 0x10000000000000000)) && (undefined === input.maxLength || "number" === typeof input.maxLength && (Math.floor(input.maxLength) === input.maxLength && 0 <= input.maxLength && input.maxLength <= 0x10000000000000000)) && "string" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"]) && (undefined === input.examples || Array.isArray(input.examples));
        const _io9 = input => "object" === typeof input.items && null !== input.items && false === Array.isArray(input.items) && _iu0(input.items) && (undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems) && (undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000)) && (undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000)) && "array" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"]) && (undefined === input.examples || Array.isArray(input.examples));
        const _io10 = input => (undefined === input.properties || "object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) && _io4(input.properties)) && (undefined === input.required || Array.isArray(input.required) && input.required.every((elem => "string" === typeof elem))) && (null !== input.additionalProperties && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || "object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) && _iu0(input.additionalProperties))) && (undefined === input.maxProperties || "number" === typeof input.maxProperties) && (undefined === input.minProperties || "number" === typeof input.minProperties) && "object" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"]) && (undefined === input.examples || Array.isArray(input.examples));
        const _io11 = input => "string" === typeof input.$ref && (undefined === input.examples || Array.isArray(input.examples)) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io12 = input => Array.isArray(input["x-anyOf"]) && input["x-anyOf"].every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu0(elem))) && (undefined === input.examples || Array.isArray(input.examples)) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io13 = input => Array.isArray(input["x-oneOf"]) && input["x-oneOf"].every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu0(elem))) && (undefined === input.examples || Array.isArray(input.examples)) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io14 = input => "null" === input.type && (null === input["default"] || undefined === input["default"]) && (undefined === input.examples || Array.isArray(input.examples)) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io15 = input => null !== input.type && undefined === input.type && (undefined === input.examples || Array.isArray(input.examples)) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io16 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && _iu9(value);
        }));
        const _io17 = input => (null === input["default"] || undefined === input["default"] || "boolean" === typeof input["default"]) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "boolean" === typeof elem))) && "boolean" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"]) && (undefined === input.examples || Array.isArray(input.examples)) && "string" === typeof input.name && "string" === typeof input["in"];
        const _io18 = input => (null === input["default"] || undefined === input["default"] || "number" === typeof input["default"] && (Math.floor(input["default"]) === input["default"] && -0x8000000000000000 <= input["default"] && input["default"] <= 0x8000000000000000)) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "number" === typeof elem))) && (undefined === input.minimum || "number" === typeof input.minimum && (Math.floor(input.minimum) === input.minimum && -0x8000000000000000 <= input.minimum && input.minimum <= 0x8000000000000000)) && (undefined === input.maximum || "number" === typeof input.maximum && (Math.floor(input.maximum) === input.maximum && -0x8000000000000000 <= input.maximum && input.maximum <= 0x8000000000000000)) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && (Math.floor(input.multipleOf) === input.multipleOf && 0 <= input.multipleOf && input.multipleOf <= 0x10000000000000000 && 0 < input.multipleOf)) && "integer" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"]) && (undefined === input.examples || Array.isArray(input.examples)) && "string" === typeof input.name && "string" === typeof input["in"];
        const _io19 = input => (null === input["default"] || undefined === input["default"] || "number" === typeof input["default"]) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "number" === typeof elem))) && (undefined === input.minimum || "number" === typeof input.minimum) && (undefined === input.maximum || "number" === typeof input.maximum) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && 0 < input.multipleOf) && "number" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"]) && (undefined === input.examples || Array.isArray(input.examples)) && "string" === typeof input.name && "string" === typeof input["in"];
        const _io20 = input => (null === input["default"] || undefined === input["default"] || "string" === typeof input["default"]) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "string" === typeof elem))) && (undefined === input.format || "string" === typeof input.format) && (undefined === input.pattern || "string" === typeof input.pattern) && (undefined === input.minLength || "number" === typeof input.minLength && (Math.floor(input.minLength) === input.minLength && 0 <= input.minLength && input.minLength <= 0x10000000000000000)) && (undefined === input.maxLength || "number" === typeof input.maxLength && (Math.floor(input.maxLength) === input.maxLength && 0 <= input.maxLength && input.maxLength <= 0x10000000000000000)) && "string" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"]) && (undefined === input.examples || Array.isArray(input.examples)) && "string" === typeof input.name && "string" === typeof input["in"];
        const _io21 = input => "object" === typeof input.items && null !== input.items && false === Array.isArray(input.items) && _iu0(input.items) && (undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems) && (undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000)) && (undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000)) && "array" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"]) && (undefined === input.examples || Array.isArray(input.examples)) && "string" === typeof input.name && "string" === typeof input["in"];
        const _io22 = input => (undefined === input.properties || "object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) && _io4(input.properties)) && (undefined === input.required || Array.isArray(input.required) && input.required.every((elem => "string" === typeof elem))) && (null !== input.additionalProperties && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || "object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) && _iu0(input.additionalProperties))) && (undefined === input.maxProperties || "number" === typeof input.maxProperties) && (undefined === input.minProperties || "number" === typeof input.minProperties) && "object" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"]) && (undefined === input.examples || Array.isArray(input.examples)) && "string" === typeof input.name && "string" === typeof input["in"];
        const _io23 = input => "string" === typeof input.$ref && (undefined === input.examples || Array.isArray(input.examples)) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && "string" === typeof input.name && "string" === typeof input["in"];
        const _io24 = input => Array.isArray(input["x-anyOf"]) && input["x-anyOf"].every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu0(elem))) && (undefined === input.examples || Array.isArray(input.examples)) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && "string" === typeof input.name && "string" === typeof input["in"];
        const _io25 = input => Array.isArray(input["x-oneOf"]) && input["x-oneOf"].every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu0(elem))) && (undefined === input.examples || Array.isArray(input.examples)) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && "string" === typeof input.name && "string" === typeof input["in"];
        const _io26 = input => "null" === input.type && (null === input["default"] || undefined === input["default"]) && (undefined === input.examples || Array.isArray(input.examples)) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && "string" === typeof input.name && "string" === typeof input["in"];
        const _io27 = input => null !== input.type && undefined === input.type && (undefined === input.examples || Array.isArray(input.examples)) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && "string" === typeof input.name && "string" === typeof input["in"];
        const _io28 = input => "object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) && _iu0(input.schema) && "string" === typeof input.name && "string" === typeof input["in"] && (undefined === input.description || "string" === typeof input.description) && (undefined === input.required || "boolean" === typeof input.required);
        const _io29 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _io30(value);
        }));
        const _io30 = input => (undefined === input.description || "string" === typeof input.description) && (undefined === input.headers || "object" === typeof input.headers && null !== input.headers && false === Array.isArray(input.headers) && _io4(input.headers)) && (undefined === input.schema || "object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) && _iu0(input.schema)) && true;
        const _io31 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && _iu10(value);
        }));
        const _io32 = input => "apiKey" === input.type && (undefined === input["in"] || "query" === input["in"] || "header" === input["in"] || "cookie" === input["in"]) && (undefined === input.name || "string" === typeof input.name) && (undefined === input.description || "string" === typeof input.description);
        const _io33 = input => "basic" === input.type && (undefined === input.name || "string" === typeof input.name) && (undefined === input.description || "string" === typeof input.description);
        const _io34 = input => "oauth2" === input.type && "implicit" === input.flow && (undefined === input.authorizationUrl || "string" === typeof input.authorizationUrl) && (undefined === input.scopes || "object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) && _io35(input.scopes)) && (undefined === input.description || "string" === typeof input.description);
        const _io35 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "string" === typeof value;
        }));
        const _io36 = input => "oauth2" === input.type && "accessCode" === input.flow && (undefined === input.authorizationUrl || "string" === typeof input.authorizationUrl) && (undefined === input.tokenUrl || "string" === typeof input.tokenUrl) && (undefined === input.scopes || "object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) && _io35(input.scopes)) && (undefined === input.description || "string" === typeof input.description);
        const _io37 = input => "oauth2" === input.type && "password" === input.flow && (undefined === input.tokenUrl || "string" === typeof input.tokenUrl) && (undefined === input.scopes || "object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) && _io35(input.scopes)) && (undefined === input.description || "string" === typeof input.description);
        const _io38 = input => "oauth2" === input.type && "application" === input.flow && (undefined === input.tokenUrl || "string" === typeof input.tokenUrl) && (undefined === input.scopes || "object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) && _io35(input.scopes)) && (undefined === input.description || "string" === typeof input.description);
        const _io39 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return Array.isArray(value) && value.every((elem => "string" === typeof elem));
        }));
        const _io40 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _io41(value);
        }));
        const _io41 = input => (undefined === input.parameters || Array.isArray(input.parameters) && input.parameters.every((elem => "object" === typeof elem && null !== elem && _iu1(elem)))) && (undefined === input.options || "object" === typeof input.options && null !== input.options && false === Array.isArray(input.options) && _io43(input.options)) && (undefined === input.get || "object" === typeof input.get && null !== input.get && false === Array.isArray(input.get) && _io43(input.get)) && (undefined === input.post || "object" === typeof input.post && null !== input.post && false === Array.isArray(input.post) && _io43(input.post)) && (undefined === input.patch || "object" === typeof input.patch && null !== input.patch && false === Array.isArray(input.patch) && _io43(input.patch)) && (undefined === input.put || "object" === typeof input.put && null !== input.put && false === Array.isArray(input.put) && _io43(input.put)) && (undefined === input["delete"] || "object" === typeof input["delete"] && null !== input["delete"] && false === Array.isArray(input["delete"]) && _io43(input["delete"])) && (undefined === input.head || "object" === typeof input.head && null !== input.head && false === Array.isArray(input.head) && _io43(input.head)) && (undefined === input.trace || "object" === typeof input.trace && null !== input.trace && false === Array.isArray(input.trace) && _io43(input.trace));
        const _io42 = input => "string" === typeof input.$ref && RegExp(/^#\/parameters\/(.*)/).test(input.$ref) && (undefined === input.examples || Array.isArray(input.examples)) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io43 = input => (undefined === input.operationId || "string" === typeof input.operationId) && (undefined === input.parameters || Array.isArray(input.parameters) && input.parameters.every((elem => "object" === typeof elem && null !== elem && _iu2(elem)))) && (undefined === input.responses || "object" === typeof input.responses && null !== input.responses && false === Array.isArray(input.responses) && _io45(input.responses)) && (undefined === input.summary || "string" === typeof input.summary) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.security || Array.isArray(input.security) && input.security.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io39(elem)))) && (undefined === input.tags || Array.isArray(input.tags) && input.tags.every((elem => "string" === typeof elem))) && (undefined === input.deprecated || "boolean" === typeof input.deprecated);
        const _io44 = input => "string" === typeof input.$ref && RegExp(/^#\/definitions\/parameters\/(.*)/).test(input.$ref) && (undefined === input.examples || Array.isArray(input.examples)) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io45 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _iu11(value);
        }));
        const _io46 = input => "string" === typeof input.$ref && RegExp(/^#\/definitions\/responses\/(.*)/).test(input.$ref) && (undefined === input.examples || Array.isArray(input.examples)) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io47 = input => "string" === typeof input.name && (undefined === input.description || "string" === typeof input.description);
        const _io48 = input => null !== input.openapi && undefined !== input.openapi && ("3.0" === input.openapi || "string" === typeof input.openapi && RegExp(/^3\.0\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(input.openapi)) && (undefined === input.servers || Array.isArray(input.servers) && input.servers.every((elem => "object" === typeof elem && null !== elem && _io49(elem)))) && (undefined === input.info || "object" === typeof input.info && null !== input.info && _io52(input.info)) && (undefined === input.components || "object" === typeof input.components && null !== input.components && false === Array.isArray(input.components) && _io55(input.components)) && (undefined === input.paths || "object" === typeof input.paths && null !== input.paths && false === Array.isArray(input.paths) && _io97(input.paths)) && (undefined === input.security || Array.isArray(input.security) && input.security.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io39(elem)))) && (undefined === input.tags || Array.isArray(input.tags) && input.tags.every((elem => "object" === typeof elem && null !== elem && _io104(elem))));
        const _io49 = input => "string" === typeof input.url && (undefined === input.description || "string" === typeof input.description) && (undefined === input.variables || "object" === typeof input.variables && null !== input.variables && false === Array.isArray(input.variables) && _io50(input.variables));
        const _io50 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && _io51(value);
        }));
        const _io51 = input => "string" === typeof input["default"] && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => "string" === typeof elem))) && (undefined === input.description || "string" === typeof input.description);
        const _io52 = input => "string" === typeof input.title && (undefined === input.description || "string" === typeof input.description) && (undefined === input.termsOfService || "string" === typeof input.termsOfService) && (undefined === input.contact || "object" === typeof input.contact && null !== input.contact && false === Array.isArray(input.contact) && _io53(input.contact)) && (undefined === input.license || "object" === typeof input.license && null !== input.license && _io54(input.license)) && "string" === typeof input.version;
        const _io53 = input => (undefined === input.name || "string" === typeof input.name) && (undefined === input.url || "string" === typeof input.url) && (undefined === input.email || "string" === typeof input.email);
        const _io54 = input => "string" === typeof input.name && (undefined === input.url || "string" === typeof input.url);
        const _io55 = input => (undefined === input.schemas || "object" === typeof input.schemas && null !== input.schemas && false === Array.isArray(input.schemas) && _io56(input.schemas)) && (undefined === input.responses || "object" === typeof input.responses && null !== input.responses && false === Array.isArray(input.responses) && _io71(input.responses)) && (undefined === input.parameters || "object" === typeof input.parameters && null !== input.parameters && false === Array.isArray(input.parameters) && _io81(input.parameters)) && (undefined === input.requestBodies || "object" === typeof input.requestBodies && null !== input.requestBodies && false === Array.isArray(input.requestBodies) && _io83(input.requestBodies)) && (undefined === input.securitySchemes || "object" === typeof input.securitySchemes && null !== input.securitySchemes && false === Array.isArray(input.securitySchemes) && _io85(input.securitySchemes)) && (undefined === input.headers || "object" === typeof input.headers && null !== input.headers && false === Array.isArray(input.headers) && _io95(input.headers)) && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io96(input.examples));
        const _io56 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _iu3(value);
        }));
        const _io57 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && (null === input["default"] || undefined === input["default"] || "boolean" === typeof input["default"]) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "boolean" === typeof elem))) && "boolean" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples))));
        const _io58 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return true;
        }));
        const _io59 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && (null === input["default"] || undefined === input["default"] || "number" === typeof input["default"] && (Math.floor(input["default"]) === input["default"] && -0x8000000000000000 <= input["default"] && input["default"] <= 0x8000000000000000)) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "number" === typeof elem))) && (undefined === input.minimum || "number" === typeof input.minimum && (Math.floor(input.minimum) === input.minimum && -0x8000000000000000 <= input.minimum && input.minimum <= 0x8000000000000000)) && (undefined === input.maximum || "number" === typeof input.maximum && (Math.floor(input.maximum) === input.maximum && -0x8000000000000000 <= input.maximum && input.maximum <= 0x8000000000000000)) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && (Math.floor(input.multipleOf) === input.multipleOf && 0 <= input.multipleOf && input.multipleOf <= 0x10000000000000000 && 0 < input.multipleOf)) && "integer" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples))));
        const _io60 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && (null === input["default"] || undefined === input["default"] || "number" === typeof input["default"]) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "number" === typeof elem))) && (undefined === input.minimum || "number" === typeof input.minimum) && (undefined === input.maximum || "number" === typeof input.maximum) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && 0 < input.multipleOf) && "number" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples))));
        const _io61 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && (null === input["default"] || undefined === input["default"] || "string" === typeof input["default"]) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "string" === typeof elem))) && (undefined === input.format || "string" === typeof input.format) && (undefined === input.pattern || "string" === typeof input.pattern) && (undefined === input.minLength || "number" === typeof input.minLength && (Math.floor(input.minLength) === input.minLength && 0 <= input.minLength && input.minLength <= 0x10000000000000000)) && (undefined === input.maxLength || "number" === typeof input.maxLength && (Math.floor(input.maxLength) === input.maxLength && 0 <= input.maxLength && input.maxLength <= 0x10000000000000000)) && "string" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples))));
        const _io62 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && ("object" === typeof input.items && null !== input.items && false === Array.isArray(input.items) && _iu3(input.items)) && (undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems) && (undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000)) && (undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000)) && "array" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples))));
        const _io63 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && (undefined === input.properties || "object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) && _io56(input.properties)) && (undefined === input.required || Array.isArray(input.required) && input.required.every((elem => "string" === typeof elem))) && (null !== input.additionalProperties && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || "object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) && _iu3(input.additionalProperties))) && (undefined === input.maxProperties || "number" === typeof input.maxProperties) && (undefined === input.minProperties || "number" === typeof input.minProperties) && "object" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples))));
        const _io64 = input => "string" === typeof input.$ref && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io65 = input => Array.isArray(input.allOf) && input.allOf.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu3(elem))) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io66 = input => Array.isArray(input.anyOf) && input.anyOf.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu3(elem))) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io67 = input => Array.isArray(input.oneOf) && input.oneOf.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu3(elem))) && (undefined === input.discriminator || "object" === typeof input.discriminator && null !== input.discriminator && _io68(input.discriminator)) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io68 = input => "string" === typeof input.propertyName && (undefined === input.mapping || "object" === typeof input.mapping && null !== input.mapping && false === Array.isArray(input.mapping) && _io35(input.mapping));
        const _io69 = input => (null === input["default"] || undefined === input["default"]) && "null" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples))));
        const _io70 = input => null !== input.type && undefined === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples))));
        const _io71 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _io72(value);
        }));
        const _io72 = input => (undefined === input.content || "object" === typeof input.content && null !== input.content && false === Array.isArray(input.content) && _io73(input.content)) && (undefined === input.headers || "object" === typeof input.headers && null !== input.headers && false === Array.isArray(input.headers) && _io78(input.headers)) && (undefined === input.description || "string" === typeof input.description);
        const _io73 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _io74(value);
        }));
        const _io74 = input => (undefined === input.schema || "object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) && _iu3(input.schema)) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io75(input.examples));
        const _io75 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _iu12(value);
        }));
        const _io76 = input => (undefined === input.summary || "string" === typeof input.summary) && (undefined === input.description || "string" === typeof input.description) && true && (undefined === input.externalValue || "string" === typeof input.externalValue);
        const _io77 = input => "string" === typeof input.$ref && RegExp(/^#\/components\/examples\/(.*)/).test(input.$ref) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io78 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && _iu13(value);
        }));
        const _io79 = input => (undefined === input.name || "string" === typeof input.name) && (undefined === input.required || "boolean" === typeof input.required) && (undefined === input.description || "string" === typeof input.description) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io75(input.examples)) && ("object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) && _iu3(input.schema));
        const _io80 = input => "string" === typeof input.$ref && RegExp(/^#\/components\/headers\/(.*)/).test(input.$ref) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io81 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && _io82(value);
        }));
        const _io82 = input => (undefined === input.name || "string" === typeof input.name) && ("path" === input["in"] || "query" === input["in"] || "header" === input["in"] || "cookie" === input["in"]) && ("object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) && _iu3(input.schema)) && (undefined === input.required || "boolean" === typeof input.required) && (undefined === input.description || "string" === typeof input.description) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io75(input.examples));
        const _io83 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _io84(value);
        }));
        const _io84 = input => (undefined === input.description || "string" === typeof input.description) && (undefined === input.required || "boolean" === typeof input.required) && (undefined === input.content || "object" === typeof input.content && null !== input.content && false === Array.isArray(input.content) && _io73(input.content));
        const _io85 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && _iu14(value);
        }));
        const _io86 = input => "apiKey" === input.type && (undefined === input["in"] || "query" === input["in"] || "header" === input["in"] || "cookie" === input["in"]) && (undefined === input.name || "string" === typeof input.name) && (undefined === input.description || "string" === typeof input.description);
        const _io87 = input => "http" === input.type && "basic" === input.scheme && (undefined === input.description || "string" === typeof input.description);
        const _io88 = input => "http" === input.type && "bearer" === input.scheme && (undefined === input.bearerFormat || "string" === typeof input.bearerFormat) && (undefined === input.description || "string" === typeof input.description);
        const _io89 = input => "oauth2" === input.type && ("object" === typeof input.flows && null !== input.flows && false === Array.isArray(input.flows) && _io90(input.flows)) && (undefined === input.description || "string" === typeof input.description);
        const _io90 = input => (undefined === input.authorizationCode || "object" === typeof input.authorizationCode && null !== input.authorizationCode && false === Array.isArray(input.authorizationCode) && _io91(input.authorizationCode)) && (undefined === input.implicit || "object" === typeof input.implicit && null !== input.implicit && false === Array.isArray(input.implicit) && _io92(input.implicit)) && (undefined === input.password || "object" === typeof input.password && null !== input.password && false === Array.isArray(input.password) && _io93(input.password)) && (undefined === input.clientCredentials || "object" === typeof input.clientCredentials && null !== input.clientCredentials && false === Array.isArray(input.clientCredentials) && _io93(input.clientCredentials));
        const _io91 = input => (undefined === input.authorizationUrl || "string" === typeof input.authorizationUrl) && (undefined === input.tokenUrl || "string" === typeof input.tokenUrl) && (undefined === input.refreshUrl || "string" === typeof input.refreshUrl) && (undefined === input.scopes || "object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) && _io35(input.scopes));
        const _io92 = input => (undefined === input.authorizationUrl || "string" === typeof input.authorizationUrl) && (undefined === input.refreshUrl || "string" === typeof input.refreshUrl) && (undefined === input.scopes || "object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) && _io35(input.scopes));
        const _io93 = input => (undefined === input.tokenUrl || "string" === typeof input.tokenUrl) && (undefined === input.refreshUrl || "string" === typeof input.refreshUrl) && (undefined === input.scopes || "object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) && _io35(input.scopes));
        const _io94 = input => "openIdConnect" === input.type && "string" === typeof input.openIdConnectUrl && (undefined === input.description || "string" === typeof input.description);
        const _io95 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && _io79(value);
        }));
        const _io96 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _io76(value);
        }));
        const _io97 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _io98(value);
        }));
        const _io98 = input => (undefined === input.parameters || Array.isArray(input.parameters) && input.parameters.every((elem => "object" === typeof elem && null !== elem && _iu4(elem)))) && (undefined === input.servers || Array.isArray(input.servers) && input.servers.every((elem => "object" === typeof elem && null !== elem && _io49(elem)))) && (undefined === input.summary || "string" === typeof input.summary) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.options || "object" === typeof input.options && null !== input.options && false === Array.isArray(input.options) && _io100(input.options)) && (undefined === input.get || "object" === typeof input.get && null !== input.get && false === Array.isArray(input.get) && _io100(input.get)) && (undefined === input.post || "object" === typeof input.post && null !== input.post && false === Array.isArray(input.post) && _io100(input.post)) && (undefined === input.patch || "object" === typeof input.patch && null !== input.patch && false === Array.isArray(input.patch) && _io100(input.patch)) && (undefined === input.put || "object" === typeof input.put && null !== input.put && false === Array.isArray(input.put) && _io100(input.put)) && (undefined === input["delete"] || "object" === typeof input["delete"] && null !== input["delete"] && false === Array.isArray(input["delete"]) && _io100(input["delete"])) && (undefined === input.head || "object" === typeof input.head && null !== input.head && false === Array.isArray(input.head) && _io100(input.head)) && (undefined === input.trace || "object" === typeof input.trace && null !== input.trace && false === Array.isArray(input.trace) && _io100(input.trace));
        const _io99 = input => "string" === typeof input.$ref && RegExp(/^#\/components\/parameters\/(.*)/).test(input.$ref) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io100 = input => (undefined === input.operationId || "string" === typeof input.operationId) && (undefined === input.parameters || Array.isArray(input.parameters) && input.parameters.every((elem => "object" === typeof elem && null !== elem && _iu4(elem)))) && (undefined === input.requestBody || "object" === typeof input.requestBody && null !== input.requestBody && false === Array.isArray(input.requestBody) && _iu15(input.requestBody)) && (undefined === input.responses || "object" === typeof input.responses && null !== input.responses && false === Array.isArray(input.responses) && _io102(input.responses)) && (undefined === input.servers || Array.isArray(input.servers) && input.servers.every((elem => "object" === typeof elem && null !== elem && _io49(elem)))) && (undefined === input.summary || "string" === typeof input.summary) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.security || Array.isArray(input.security) && input.security.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io39(elem)))) && (undefined === input.tags || Array.isArray(input.tags) && input.tags.every((elem => "string" === typeof elem))) && (undefined === input.deprecated || "boolean" === typeof input.deprecated);
        const _io101 = input => "string" === typeof input.$ref && RegExp(/^#\/components\/requestBodies\/(.*)/).test(input.$ref) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io102 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _iu16(value);
        }));
        const _io103 = input => "string" === typeof input.$ref && RegExp(/^#\/components\/responses\/(.*)/).test(input.$ref) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io104 = input => "string" === typeof input.name && (undefined === input.description || "string" === typeof input.description);
        const _io105 = input => "string" === typeof input.openapi && RegExp(/^3\.1\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(input.openapi) && (undefined === input.servers || Array.isArray(input.servers) && input.servers.every((elem => "object" === typeof elem && null !== elem && _io106(elem)))) && (undefined === input.info || "object" === typeof input.info && null !== input.info && _io109(input.info)) && (undefined === input.components || "object" === typeof input.components && null !== input.components && false === Array.isArray(input.components) && _io112(input.components)) && (undefined === input.paths || "object" === typeof input.paths && null !== input.paths && false === Array.isArray(input.paths) && _io130(input.paths)) && (undefined === input.webhooks || "object" === typeof input.webhooks && null !== input.webhooks && false === Array.isArray(input.webhooks) && _io163(input.webhooks)) && (undefined === input.security || Array.isArray(input.security) && input.security.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io39(elem)))) && (undefined === input.tags || Array.isArray(input.tags) && input.tags.every((elem => "object" === typeof elem && null !== elem && _io165(elem))));
        const _io106 = input => "string" === typeof input.url && (undefined === input.description || "string" === typeof input.description) && (undefined === input.variables || "object" === typeof input.variables && null !== input.variables && false === Array.isArray(input.variables) && _io107(input.variables));
        const _io107 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && _io108(value);
        }));
        const _io108 = input => "string" === typeof input["default"] && (undefined === input["enum"] || Array.isArray(input["enum"]) && (1 <= input["enum"].length && input["enum"].every((elem => "string" === typeof elem)))) && (undefined === input.description || "string" === typeof input.description);
        const _io109 = input => "string" === typeof input.title && (undefined === input.summary || "string" === typeof input.summary) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.termsOfService || "string" === typeof input.termsOfService) && (undefined === input.contact || "object" === typeof input.contact && null !== input.contact && false === Array.isArray(input.contact) && _io110(input.contact)) && (undefined === input.license || "object" === typeof input.license && null !== input.license && _io111(input.license)) && "string" === typeof input.version;
        const _io110 = input => (undefined === input.name || "string" === typeof input.name) && (undefined === input.url || "string" === typeof input.url) && (undefined === input.email || "string" === typeof input.email);
        const _io111 = input => "string" === typeof input.name && (undefined === input.identifier || "string" === typeof input.identifier) && (undefined === input.url || "string" === typeof input.url);
        const _io112 = input => (undefined === input.schemas || "object" === typeof input.schemas && null !== input.schemas && false === Array.isArray(input.schemas) && _io113(input.schemas)) && (undefined === input.pathItems || "object" === typeof input.pathItems && null !== input.pathItems && false === Array.isArray(input.pathItems) && _io130(input.pathItems)) && (undefined === input.responses || "object" === typeof input.responses && null !== input.responses && false === Array.isArray(input.responses) && _io148(input.responses)) && (undefined === input.parameters || "object" === typeof input.parameters && null !== input.parameters && false === Array.isArray(input.parameters) && _io149(input.parameters)) && (undefined === input.requestBodies || "object" === typeof input.requestBodies && null !== input.requestBodies && false === Array.isArray(input.requestBodies) && _io150(input.requestBodies)) && (undefined === input.securitySchemes || "object" === typeof input.securitySchemes && null !== input.securitySchemes && false === Array.isArray(input.securitySchemes) && _io151(input.securitySchemes)) && (undefined === input.headers || "object" === typeof input.headers && null !== input.headers && false === Array.isArray(input.headers) && _io161(input.headers)) && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io162(input.examples));
        const _io113 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _iu5(value);
        }));
        const _io114 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && (undefined === input.properties || "object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) && _io113(input.properties)) && (undefined === input.required || Array.isArray(input.required) && input.required.every((elem => "string" === typeof elem))) && (null !== input.additionalProperties && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || "object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) && _iu5(input.additionalProperties))) && (undefined === input.maxProperties || "number" === typeof input.maxProperties) && (undefined === input.minProperties || "number" === typeof input.minProperties) && "object" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples))));
        const _io115 = input => Array.isArray(input.type) && input.type.every((elem => "string" === elem || "number" === elem || "boolean" === elem || "object" === elem || "integer" === elem || "array" === elem || "null" === elem)) && (null === input["default"] || undefined === input["default"] || Array.isArray(input["default"])) && (undefined === input["enum"] || Array.isArray(input["enum"])) && ("string" === typeof input["const"] || "number" === typeof input["const"] || "boolean" === typeof input["const"]) && (undefined === input.nullable || "boolean" === typeof input.nullable) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input.minimum || "number" === typeof input.minimum) && (undefined === input.maximum || "number" === typeof input.maximum) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && 0 < input.multipleOf) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum) && (undefined === input.format || "string" === typeof input.format) && (undefined === input.maxLength || "number" === typeof input.maxLength && (Math.floor(input.maxLength) === input.maxLength && 0 <= input.maxLength && input.maxLength <= 0x10000000000000000)) && (undefined === input.pattern || "string" === typeof input.pattern) && (undefined === input.contentMediaType || "string" === typeof input.contentMediaType) && (undefined === input.minLength || "number" === typeof input.minLength && (Math.floor(input.minLength) === input.minLength && 0 <= input.minLength && input.minLength <= 0x10000000000000000)) && (null !== input.items && (undefined === input.items || (Array.isArray(input.items) && input.items.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu5(elem))) || "object" === typeof input.items && null !== input.items && false === Array.isArray(input.items) && _iu5(input.items)))) && (undefined === input.prefixItems || Array.isArray(input.prefixItems) && input.prefixItems.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu5(elem)))) && (undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems) && (null !== input.additionalItems && (undefined === input.additionalItems || "boolean" === typeof input.additionalItems || "object" === typeof input.additionalItems && null !== input.additionalItems && false === Array.isArray(input.additionalItems) && _iu5(input.additionalItems))) && (undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000)) && (undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000)) && (null !== input.additionalProperties && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || "object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) && _iu5(input.additionalProperties))) && (undefined === input.properties || "object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) && _io113(input.properties)) && (undefined === input.required || Array.isArray(input.required) && input.required.every((elem => "string" === typeof elem))) && (undefined === input.maxProperties || "number" === typeof input.maxProperties) && (undefined === input.minProperties || "number" === typeof input.minProperties) && (Array.isArray(input.oneOf) && input.oneOf.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu5(elem)))) && (undefined === input.discriminator || "object" === typeof input.discriminator && null !== input.discriminator && _io127(input.discriminator)) && (Array.isArray(input.anyOf) && input.anyOf.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu5(elem)))) && (Array.isArray(input.allOf) && input.allOf.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu5(elem)))) && "string" === typeof input.$ref;
        const _io116 = input => ("string" === typeof input["const"] || "number" === typeof input["const"] || "boolean" === typeof input["const"]) && (undefined === input.nullable || "boolean" === typeof input.nullable) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io117 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && (null === input["default"] || undefined === input["default"] || "boolean" === typeof input["default"]) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "boolean" === typeof elem))) && "boolean" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples))));
        const _io118 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && (null === input["default"] || undefined === input["default"] || "number" === typeof input["default"] && (Math.floor(input["default"]) === input["default"] && -0x8000000000000000 <= input["default"] && input["default"] <= 0x8000000000000000)) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "number" === typeof elem))) && (undefined === input.minimum || "number" === typeof input.minimum && (Math.floor(input.minimum) === input.minimum && -0x8000000000000000 <= input.minimum && input.minimum <= 0x8000000000000000)) && (undefined === input.maximum || "number" === typeof input.maximum && (Math.floor(input.maximum) === input.maximum && -0x8000000000000000 <= input.maximum && input.maximum <= 0x8000000000000000)) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum && (Math.floor(input.exclusiveMinimum) === input.exclusiveMinimum && -0x8000000000000000 <= input.exclusiveMinimum && input.exclusiveMinimum <= 0x8000000000000000) || "boolean" === typeof input.exclusiveMinimum) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum && (Math.floor(input.exclusiveMaximum) === input.exclusiveMaximum && -0x8000000000000000 <= input.exclusiveMaximum && input.exclusiveMaximum <= 0x8000000000000000) || "boolean" === typeof input.exclusiveMaximum) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && (Math.floor(input.multipleOf) === input.multipleOf && 0 <= input.multipleOf && input.multipleOf <= 0x10000000000000000 && 0 < input.multipleOf)) && "integer" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples))));
        const _io119 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && (null === input["default"] || undefined === input["default"] || "number" === typeof input["default"]) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "number" === typeof elem))) && (undefined === input.minimum || "number" === typeof input.minimum) && (undefined === input.maximum || "number" === typeof input.maximum) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && 0 < input.multipleOf) && "number" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples))));
        const _io120 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && (null === input["default"] || undefined === input["default"] || "string" === typeof input["default"]) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "string" === typeof elem))) && (undefined === input.format || "string" === typeof input.format) && (undefined === input.pattern || "string" === typeof input.pattern) && (undefined === input.contentMediaType || "string" === typeof input.contentMediaType) && (undefined === input.minLength || "number" === typeof input.minLength && (Math.floor(input.minLength) === input.minLength && 0 <= input.minLength && input.minLength <= 0x10000000000000000)) && (undefined === input.maxLength || "number" === typeof input.maxLength && (Math.floor(input.maxLength) === input.maxLength && 0 <= input.maxLength && input.maxLength <= 0x10000000000000000)) && "string" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples))));
        const _io121 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && (null !== input.items && (undefined === input.items || (Array.isArray(input.items) && input.items.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu5(elem))) || "object" === typeof input.items && null !== input.items && false === Array.isArray(input.items) && _iu5(input.items)))) && (undefined === input.prefixItems || Array.isArray(input.prefixItems) && input.prefixItems.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu5(elem)))) && (undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems) && (null !== input.additionalItems && (undefined === input.additionalItems || "boolean" === typeof input.additionalItems || "object" === typeof input.additionalItems && null !== input.additionalItems && false === Array.isArray(input.additionalItems) && _iu5(input.additionalItems))) && (undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000)) && (undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000)) && "array" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples))));
        const _io122 = input => "string" === typeof input.$ref && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io123 = input => "string" === typeof input.$recursiveRef && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io124 = input => Array.isArray(input.allOf) && input.allOf.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu5(elem))) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io125 = input => Array.isArray(input.anyOf) && input.anyOf.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu5(elem))) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io126 = input => Array.isArray(input.oneOf) && input.oneOf.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu5(elem))) && (undefined === input.discriminator || "object" === typeof input.discriminator && null !== input.discriminator && _io127(input.discriminator)) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io127 = input => "string" === typeof input.propertyName && (undefined === input.mapping || "object" === typeof input.mapping && null !== input.mapping && false === Array.isArray(input.mapping) && _io35(input.mapping));
        const _io128 = input => (null === input["default"] || undefined === input["default"]) && "null" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples))));
        const _io129 = input => null !== input.type && undefined === input.type && true && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples))));
        const _io130 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _io131(value);
        }));
        const _io131 = input => (undefined === input.parameters || Array.isArray(input.parameters) && input.parameters.every((elem => "object" === typeof elem && null !== elem && _iu6(elem)))) && (undefined === input.servers || Array.isArray(input.servers) && input.servers.every((elem => "object" === typeof elem && null !== elem && _io106(elem)))) && (undefined === input.summary || "string" === typeof input.summary) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.options || "object" === typeof input.options && null !== input.options && false === Array.isArray(input.options) && _io138(input.options)) && (undefined === input.get || "object" === typeof input.get && null !== input.get && false === Array.isArray(input.get) && _io138(input.get)) && (undefined === input.post || "object" === typeof input.post && null !== input.post && false === Array.isArray(input.post) && _io138(input.post)) && (undefined === input.patch || "object" === typeof input.patch && null !== input.patch && false === Array.isArray(input.patch) && _io138(input.patch)) && (undefined === input.put || "object" === typeof input.put && null !== input.put && false === Array.isArray(input.put) && _io138(input.put)) && (undefined === input["delete"] || "object" === typeof input["delete"] && null !== input["delete"] && false === Array.isArray(input["delete"]) && _io138(input["delete"])) && (undefined === input.head || "object" === typeof input.head && null !== input.head && false === Array.isArray(input.head) && _io138(input.head)) && (undefined === input.trace || "object" === typeof input.trace && null !== input.trace && false === Array.isArray(input.trace) && _io138(input.trace));
        const _io132 = input => (undefined === input.name || "string" === typeof input.name) && ("path" === input["in"] || "query" === input["in"] || "header" === input["in"] || "cookie" === input["in"]) && ("object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) && _iu5(input.schema)) && (undefined === input.required || "boolean" === typeof input.required) && (undefined === input.description || "string" === typeof input.description) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io133(input.examples));
        const _io133 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _iu17(value);
        }));
        const _io134 = input => (undefined === input.summary || "string" === typeof input.summary) && (undefined === input.description || "string" === typeof input.description) && true && (undefined === input.externalValue || "string" === typeof input.externalValue);
        const _io135 = input => "string" === typeof input.$ref && RegExp(/^#\/components\/examples\/(.*)/).test(input.$ref) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io136 = input => "string" === typeof input.$ref && RegExp(/^#\/components\/headers\/(.*)/).test(input.$ref) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io137 = input => "string" === typeof input.$ref && RegExp(/^#\/components\/parameters\/(.*)/).test(input.$ref) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io138 = input => (undefined === input.operationId || "string" === typeof input.operationId) && (undefined === input.parameters || Array.isArray(input.parameters) && input.parameters.every((elem => "object" === typeof elem && null !== elem && _iu6(elem)))) && (undefined === input.requestBody || "object" === typeof input.requestBody && null !== input.requestBody && false === Array.isArray(input.requestBody) && _iu18(input.requestBody)) && (undefined === input.responses || "object" === typeof input.responses && null !== input.responses && false === Array.isArray(input.responses) && _io143(input.responses)) && (undefined === input.servers || Array.isArray(input.servers) && input.servers.every((elem => "object" === typeof elem && null !== elem && _io106(elem)))) && (undefined === input.summary || "string" === typeof input.summary) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.security || Array.isArray(input.security) && input.security.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io39(elem)))) && (undefined === input.tags || Array.isArray(input.tags) && input.tags.every((elem => "string" === typeof elem))) && (undefined === input.deprecated || "boolean" === typeof input.deprecated);
        const _io139 = input => (undefined === input.description || "string" === typeof input.description) && (undefined === input.required || "boolean" === typeof input.required) && (undefined === input.content || "object" === typeof input.content && null !== input.content && false === Array.isArray(input.content) && _io140(input.content));
        const _io140 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _io141(value);
        }));
        const _io141 = input => (undefined === input.schema || "object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) && _iu5(input.schema)) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io133(input.examples));
        const _io142 = input => "string" === typeof input.$ref && RegExp(/^#\/components\/requestBodies\/(.*)/).test(input.$ref) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io143 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _iu19(value);
        }));
        const _io144 = input => (undefined === input.content || "object" === typeof input.content && null !== input.content && false === Array.isArray(input.content) && _io140(input.content)) && (undefined === input.headers || "object" === typeof input.headers && null !== input.headers && false === Array.isArray(input.headers) && _io145(input.headers)) && (undefined === input.description || "string" === typeof input.description);
        const _io145 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && _iu20(value);
        }));
        const _io146 = input => (undefined === input.name || "string" === typeof input.name) && (undefined === input.required || "boolean" === typeof input.required) && (undefined === input.description || "string" === typeof input.description) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io133(input.examples)) && ("object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) && _iu5(input.schema));
        const _io147 = input => "string" === typeof input.$ref && RegExp(/^#\/components\/responses\/(.*)/).test(input.$ref) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io148 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _io144(value);
        }));
        const _io149 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && _io132(value);
        }));
        const _io150 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _io139(value);
        }));
        const _io151 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && _iu21(value);
        }));
        const _io152 = input => "apiKey" === input.type && (undefined === input["in"] || "query" === input["in"] || "header" === input["in"] || "cookie" === input["in"]) && (undefined === input.name || "string" === typeof input.name) && (undefined === input.description || "string" === typeof input.description);
        const _io153 = input => "http" === input.type && "basic" === input.scheme && (undefined === input.description || "string" === typeof input.description);
        const _io154 = input => "http" === input.type && "bearer" === input.scheme && (undefined === input.bearerFormat || "string" === typeof input.bearerFormat) && (undefined === input.description || "string" === typeof input.description);
        const _io155 = input => "oauth2" === input.type && ("object" === typeof input.flows && null !== input.flows && false === Array.isArray(input.flows) && _io156(input.flows)) && (undefined === input.description || "string" === typeof input.description);
        const _io156 = input => (undefined === input.authorizationCode || "object" === typeof input.authorizationCode && null !== input.authorizationCode && false === Array.isArray(input.authorizationCode) && _io157(input.authorizationCode)) && (undefined === input.implicit || "object" === typeof input.implicit && null !== input.implicit && false === Array.isArray(input.implicit) && _io158(input.implicit)) && (undefined === input.password || "object" === typeof input.password && null !== input.password && false === Array.isArray(input.password) && _io159(input.password)) && (undefined === input.clientCredentials || "object" === typeof input.clientCredentials && null !== input.clientCredentials && false === Array.isArray(input.clientCredentials) && _io159(input.clientCredentials));
        const _io157 = input => (undefined === input.authorizationUrl || "string" === typeof input.authorizationUrl) && (undefined === input.tokenUrl || "string" === typeof input.tokenUrl) && (undefined === input.refreshUrl || "string" === typeof input.refreshUrl) && (undefined === input.scopes || "object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) && _io35(input.scopes));
        const _io158 = input => (undefined === input.authorizationUrl || "string" === typeof input.authorizationUrl) && (undefined === input.refreshUrl || "string" === typeof input.refreshUrl) && (undefined === input.scopes || "object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) && _io35(input.scopes));
        const _io159 = input => (undefined === input.tokenUrl || "string" === typeof input.tokenUrl) && (undefined === input.refreshUrl || "string" === typeof input.refreshUrl) && (undefined === input.scopes || "object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) && _io35(input.scopes));
        const _io160 = input => "openIdConnect" === input.type && "string" === typeof input.openIdConnectUrl && (undefined === input.description || "string" === typeof input.description);
        const _io161 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && _io146(value);
        }));
        const _io162 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _io134(value);
        }));
        const _io163 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _iu22(value);
        }));
        const _io164 = input => "string" === typeof input.$ref && RegExp(/^#\/components\/pathItems\/(.*)/).test(input.$ref) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io165 = input => "string" === typeof input.name && (undefined === input.description || "string" === typeof input.description);
        const _io166 = input => "string" === typeof input.openapi && RegExp(/^3\.1\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(input.openapi) && (undefined === input.servers || Array.isArray(input.servers) && input.servers.every((elem => "object" === typeof elem && null !== elem && _io167(elem)))) && (undefined === input.info || "object" === typeof input.info && null !== input.info && _io170(input.info)) && ("object" === typeof input.components && null !== input.components && false === Array.isArray(input.components) && _io173(input.components)) && (undefined === input.paths || "object" === typeof input.paths && null !== input.paths && false === Array.isArray(input.paths) && _io198(input.paths)) && (undefined === input.webhooks || "object" === typeof input.webhooks && null !== input.webhooks && false === Array.isArray(input.webhooks) && _io198(input.webhooks)) && (undefined === input.security || Array.isArray(input.security) && input.security.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io39(elem)))) && (undefined === input.tags || Array.isArray(input.tags) && input.tags.every((elem => "object" === typeof elem && null !== elem && _io210(elem)))) && true === input["x-samchon-emended-v4"];
        const _io167 = input => "string" === typeof input.url && (undefined === input.description || "string" === typeof input.description) && (undefined === input.variables || "object" === typeof input.variables && null !== input.variables && false === Array.isArray(input.variables) && _io168(input.variables));
        const _io168 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && _io169(value);
        }));
        const _io169 = input => "string" === typeof input["default"] && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => "string" === typeof elem))) && (undefined === input.description || "string" === typeof input.description);
        const _io170 = input => "string" === typeof input.title && (undefined === input.summary || "string" === typeof input.summary) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.termsOfService || "string" === typeof input.termsOfService) && (undefined === input.contact || "object" === typeof input.contact && null !== input.contact && false === Array.isArray(input.contact) && _io171(input.contact)) && (undefined === input.license || "object" === typeof input.license && null !== input.license && _io172(input.license)) && "string" === typeof input.version;
        const _io171 = input => (undefined === input.name || "string" === typeof input.name) && (undefined === input.url || "string" === typeof input.url) && (undefined === input.email || "string" === typeof input.email && /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i.test(input.email));
        const _io172 = input => "string" === typeof input.name && (undefined === input.identifier || "string" === typeof input.identifier) && (undefined === input.url || "string" === typeof input.url);
        const _io173 = input => (undefined === input.schemas || "object" === typeof input.schemas && null !== input.schemas && false === Array.isArray(input.schemas) && _io174(input.schemas)) && (undefined === input.securitySchemes || "object" === typeof input.securitySchemes && null !== input.securitySchemes && false === Array.isArray(input.securitySchemes) && _io188(input.securitySchemes));
        const _io174 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _iu7(value);
        }));
        const _io175 = input => ("string" === typeof input["const"] || "number" === typeof input["const"] || "boolean" === typeof input["const"]) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples));
        const _io176 = input => (undefined === input["default"] || "boolean" === typeof input["default"]) && "boolean" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples));
        const _io177 = input => (undefined === input["default"] || "number" === typeof input["default"] && (Math.floor(input["default"]) === input["default"] && -0x8000000000000000 <= input["default"] && input["default"] <= 0x8000000000000000)) && (undefined === input.minimum || "number" === typeof input.minimum && (Math.floor(input.minimum) === input.minimum && -0x8000000000000000 <= input.minimum && input.minimum <= 0x8000000000000000)) && (undefined === input.maximum || "number" === typeof input.maximum && (Math.floor(input.maximum) === input.maximum && -0x8000000000000000 <= input.maximum && input.maximum <= 0x8000000000000000)) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && (Math.floor(input.multipleOf) === input.multipleOf && 0 <= input.multipleOf && input.multipleOf <= 0x10000000000000000 && 0 < input.multipleOf)) && "integer" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples));
        const _io178 = input => (undefined === input["default"] || "number" === typeof input["default"]) && (undefined === input.minimum || "number" === typeof input.minimum) && (undefined === input.maximum || "number" === typeof input.maximum) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && 0 < input.multipleOf) && "number" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples));
        const _io179 = input => (undefined === input["default"] || "string" === typeof input["default"]) && (undefined === input.format || "string" === typeof input.format) && (undefined === input.pattern || "string" === typeof input.pattern) && (undefined === input.contentMediaType || "string" === typeof input.contentMediaType) && (undefined === input.minLength || "number" === typeof input.minLength && (Math.floor(input.minLength) === input.minLength && 0 <= input.minLength && input.minLength <= 0x10000000000000000)) && (undefined === input.maxLength || "number" === typeof input.maxLength && (Math.floor(input.maxLength) === input.maxLength && 0 <= input.maxLength && input.maxLength <= 0x10000000000000000)) && "string" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples));
        const _io180 = input => "object" === typeof input.items && null !== input.items && false === Array.isArray(input.items) && _iu7(input.items) && (undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems) && (undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000)) && (undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000)) && "array" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples));
        const _io181 = input => "array" === input.type && (Array.isArray(input.prefixItems) && input.prefixItems.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu7(elem)))) && (null !== input.additionalItems && (undefined === input.additionalItems || "boolean" === typeof input.additionalItems || "object" === typeof input.additionalItems && null !== input.additionalItems && false === Array.isArray(input.additionalItems) && _iu7(input.additionalItems))) && (undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems) && (undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000)) && (undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000)) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples));
        const _io182 = input => (undefined === input.properties || "object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) && _io174(input.properties)) && (null !== input.additionalProperties && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || "object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) && _iu7(input.additionalProperties))) && (undefined === input.required || Array.isArray(input.required) && input.required.every((elem => "string" === typeof elem))) && "object" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples));
        const _io183 = input => "string" === typeof input.$ref && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples));
        const _io184 = input => Array.isArray(input.oneOf) && input.oneOf.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu8(elem))) && (undefined === input.discriminator || "object" === typeof input.discriminator && null !== input.discriminator && _io187(input.discriminator)) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples));
        const _io185 = input => (null === input["default"] || undefined === input["default"]) && "null" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples));
        const _io186 = input => null !== input.type && undefined === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io58(input.examples));
        const _io187 = input => "string" === typeof input.propertyName && (undefined === input.mapping || "object" === typeof input.mapping && null !== input.mapping && false === Array.isArray(input.mapping) && _io35(input.mapping));
        const _io188 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && _iu23(value);
        }));
        const _io189 = input => "apiKey" === input.type && (undefined === input["in"] || "query" === input["in"] || "header" === input["in"] || "cookie" === input["in"]) && (undefined === input.name || "string" === typeof input.name) && (undefined === input.description || "string" === typeof input.description);
        const _io190 = input => "http" === input.type && "basic" === input.scheme && (undefined === input.description || "string" === typeof input.description);
        const _io191 = input => "http" === input.type && "bearer" === input.scheme && (undefined === input.bearerFormat || "string" === typeof input.bearerFormat) && (undefined === input.description || "string" === typeof input.description);
        const _io192 = input => "oauth2" === input.type && ("object" === typeof input.flows && null !== input.flows && false === Array.isArray(input.flows) && _io193(input.flows)) && (undefined === input.description || "string" === typeof input.description);
        const _io193 = input => (undefined === input.authorizationCode || "object" === typeof input.authorizationCode && null !== input.authorizationCode && false === Array.isArray(input.authorizationCode) && _io194(input.authorizationCode)) && (undefined === input.implicit || "object" === typeof input.implicit && null !== input.implicit && false === Array.isArray(input.implicit) && _io195(input.implicit)) && (undefined === input.password || "object" === typeof input.password && null !== input.password && false === Array.isArray(input.password) && _io196(input.password)) && (undefined === input.clientCredentials || "object" === typeof input.clientCredentials && null !== input.clientCredentials && false === Array.isArray(input.clientCredentials) && _io196(input.clientCredentials));
        const _io194 = input => (undefined === input.authorizationUrl || "string" === typeof input.authorizationUrl) && (undefined === input.tokenUrl || "string" === typeof input.tokenUrl) && (undefined === input.refreshUrl || "string" === typeof input.refreshUrl) && (undefined === input.scopes || "object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) && _io35(input.scopes));
        const _io195 = input => (undefined === input.authorizationUrl || "string" === typeof input.authorizationUrl) && (undefined === input.refreshUrl || "string" === typeof input.refreshUrl) && (undefined === input.scopes || "object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) && _io35(input.scopes));
        const _io196 = input => (undefined === input.tokenUrl || "string" === typeof input.tokenUrl) && (undefined === input.refreshUrl || "string" === typeof input.refreshUrl) && (undefined === input.scopes || "object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) && _io35(input.scopes));
        const _io197 = input => "openIdConnect" === input.type && "string" === typeof input.openIdConnectUrl && (undefined === input.description || "string" === typeof input.description);
        const _io198 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _io199(value);
        }));
        const _io199 = input => (undefined === input.servers || Array.isArray(input.servers) && input.servers.every((elem => "object" === typeof elem && null !== elem && _io167(elem)))) && (undefined === input.summary || "string" === typeof input.summary) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.options || "object" === typeof input.options && null !== input.options && false === Array.isArray(input.options) && _io200(input.options)) && (undefined === input.get || "object" === typeof input.get && null !== input.get && false === Array.isArray(input.get) && _io200(input.get)) && (undefined === input.post || "object" === typeof input.post && null !== input.post && false === Array.isArray(input.post) && _io200(input.post)) && (undefined === input.patch || "object" === typeof input.patch && null !== input.patch && false === Array.isArray(input.patch) && _io200(input.patch)) && (undefined === input.put || "object" === typeof input.put && null !== input.put && false === Array.isArray(input.put) && _io200(input.put)) && (undefined === input["delete"] || "object" === typeof input["delete"] && null !== input["delete"] && false === Array.isArray(input["delete"]) && _io200(input["delete"])) && (undefined === input.head || "object" === typeof input.head && null !== input.head && false === Array.isArray(input.head) && _io200(input.head)) && (undefined === input.trace || "object" === typeof input.trace && null !== input.trace && false === Array.isArray(input.trace) && _io200(input.trace));
        const _io200 = input => (undefined === input.operationId || "string" === typeof input.operationId) && (undefined === input.parameters || Array.isArray(input.parameters) && input.parameters.every((elem => "object" === typeof elem && null !== elem && _io201(elem)))) && (undefined === input.requestBody || "object" === typeof input.requestBody && null !== input.requestBody && false === Array.isArray(input.requestBody) && _io204(input.requestBody)) && (undefined === input.responses || "object" === typeof input.responses && null !== input.responses && false === Array.isArray(input.responses) && _io207(input.responses)) && (undefined === input.servers || Array.isArray(input.servers) && input.servers.every((elem => "object" === typeof elem && null !== elem && _io167(elem)))) && (undefined === input.summary || "string" === typeof input.summary) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.security || Array.isArray(input.security) && input.security.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _io39(elem)))) && (undefined === input.tags || Array.isArray(input.tags) && input.tags.every((elem => "string" === typeof elem))) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && (undefined === input["x-samchon-human"] || "boolean" === typeof input["x-samchon-human"]) && (undefined === input["x-samchon-accessor"] || Array.isArray(input["x-samchon-accessor"]) && input["x-samchon-accessor"].every((elem => "string" === typeof elem))) && (undefined === input["x-samchon-controller"] || "string" === typeof input["x-samchon-controller"]);
        const _io201 = input => (undefined === input.name || "string" === typeof input.name) && ("path" === input["in"] || "query" === input["in"] || "header" === input["in"] || "cookie" === input["in"]) && ("object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) && _iu7(input.schema)) && (undefined === input.required || "boolean" === typeof input.required) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io202(input.examples));
        const _io202 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _io203(value);
        }));
        const _io203 = input => (undefined === input.summary || "string" === typeof input.summary) && (undefined === input.description || "string" === typeof input.description) && true && (undefined === input.externalValue || "string" === typeof input.externalValue);
        const _io204 = input => (undefined === input.content || "object" === typeof input.content && null !== input.content && false === Array.isArray(input.content) && _io205(input.content)) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.required || "boolean" === typeof input.required) && (undefined === input["x-nestia-encrypted"] || "boolean" === typeof input["x-nestia-encrypted"]);
        const _io205 = input => (undefined === input["text/plain"] || "object" === typeof input["text/plain"] && null !== input["text/plain"] && false === Array.isArray(input["text/plain"]) && _io206(input["text/plain"])) && (undefined === input["application/json"] || "object" === typeof input["application/json"] && null !== input["application/json"] && false === Array.isArray(input["application/json"]) && _io206(input["application/json"])) && (undefined === input["application/x-www-form-url-encoded"] || "object" === typeof input["application/x-www-form-url-encoded"] && null !== input["application/x-www-form-url-encoded"] && false === Array.isArray(input["application/x-www-form-url-encoded"]) && _io206(input["application/x-www-form-url-encoded"])) && (undefined === input["multipart/form-data"] || "object" === typeof input["multipart/form-data"] && null !== input["multipart/form-data"] && false === Array.isArray(input["multipart/form-data"]) && _io206(input["multipart/form-data"])) && (undefined === input["*/*"] || "object" === typeof input["*/*"] && null !== input["*/*"] && false === Array.isArray(input["*/*"]) && _io206(input["*/*"])) && Object.keys(input).every((key => {
            if ([ "text/plain", "application/json", "application/x-www-form-url-encoded", "multipart/form-data", "*/*" ].some((prop => key === prop))) return true;
            const value = input[key];
            if (undefined === value) return true;
            return undefined === value || "object" === typeof value && null !== value && false === Array.isArray(value) && _io206(value);
        }));
        const _io206 = input => (undefined === input.schema || "object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) && _iu7(input.schema)) && true && (undefined === input.examples || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io202(input.examples));
        const _io207 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _io208(value);
        }));
        const _io208 = input => (undefined === input.headers || "object" === typeof input.headers && null !== input.headers && false === Array.isArray(input.headers) && _io209(input.headers)) && (undefined === input.content || "object" === typeof input.content && null !== input.content && false === Array.isArray(input.content) && _io205(input.content)) && (undefined === input.description || "string" === typeof input.description) && (undefined === input["x-nestia-encrypted"] || "boolean" === typeof input["x-nestia-encrypted"]);
        const _io209 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && _io201(value);
        }));
        const _io210 = input => "string" === typeof input.name && (undefined === input.description || "string" === typeof input.description);
        const _iu0 = input => (() => {
            if ("boolean" === input.type) return _io5(input); else if ("number" === input.type) return _io7(input); else if ("integer" === input.type) return _io6(input); else if ("string" === input.type) return _io8(input); else if ("array" === input.type) return _io9(input); else if ("object" === input.type) return _io10(input); else if (undefined !== input.$ref) return _io11(input); else if (undefined !== input["x-anyOf"]) return _io12(input); else if (undefined !== input["x-oneOf"]) return _io13(input); else if ("null" === input.type) return _io14(input); else return _io15(input);
        })();
        const _iu1 = input => (() => {
            if ("boolean" === input.type) return _io17(input); else if ("number" === input.type) return _io19(input); else if ("integer" === input.type) return _io18(input); else if ("string" === input.type) return _io20(input); else if ("array" === input.type) return _io21(input); else if ("object" === input.type) return _io22(input); else if (undefined !== input["x-anyOf"]) return _io24(input); else if (undefined !== input["x-oneOf"]) return _io25(input); else if ("null" === input.type) return _io26(input); else if (undefined !== input.schema) return _io28(input); else return (() => {
                if (_io23(input)) return _io23(input);
                if (_io27(input)) return _io27(input);
                if (_io42(input)) return _io42(input);
                return false;
            })();
        })();
        const _iu2 = input => (() => {
            if ("boolean" === input.type) return _io17(input); else if ("number" === input.type) return _io19(input); else if ("integer" === input.type) return _io18(input); else if ("string" === input.type) return _io20(input); else if ("array" === input.type) return _io21(input); else if ("object" === input.type) return _io22(input); else if (undefined !== input["x-anyOf"]) return _io24(input); else if (undefined !== input["x-oneOf"]) return _io25(input); else if ("null" === input.type) return _io26(input); else if (undefined !== input.schema) return _io28(input); else return (() => {
                if (_io23(input)) return _io23(input);
                if (_io27(input)) return _io27(input);
                if (_io44(input)) return _io44(input);
                return false;
            })();
        })();
        const _iu3 = input => (() => {
            if ("boolean" === input.type) return _io57(input); else if ("number" === input.type) return _io60(input); else if ("integer" === input.type) return _io59(input); else if ("string" === input.type) return _io61(input); else if ("array" === input.type) return _io62(input); else if ("object" === input.type) return _io63(input); else if (undefined !== input.$ref) return _io64(input); else if (undefined !== input.allOf) return _io65(input); else if (undefined !== input.anyOf) return _io66(input); else if (undefined !== input.oneOf) return _io67(input); else if ("null" === input.type) return _io69(input); else return _io70(input);
        })();
        const _iu4 = input => (() => {
            if (undefined !== input["in"]) return _io82(input); else if ("string" === typeof input.$ref && RegExp(/^#\/components\/parameters\/(.*)/).test(input.$ref)) return _io99(input); else if ("string" === typeof input.$ref && RegExp(/^#\/components\/headers\/(.*)/).test(input.$ref)) return _io80(input); else return false;
        })();
        const _iu5 = input => (() => {
            if ("object" === input.type) return _io114(input); else if (Array.isArray(input.type) && input.type.every((elem => "string" === elem || "number" === elem || "boolean" === elem || "object" === elem || "integer" === elem || "array" === elem || "null" === elem))) return _io115(input); else if ("boolean" === input.type) return _io117(input); else if ("number" === input.type) return _io119(input); else if ("integer" === input.type) return _io118(input); else if ("string" === input.type) return _io120(input); else if ("array" === input.type) return _io121(input); else if (undefined !== input.$recursiveRef) return _io123(input); else if ("null" === input.type) return _io128(input); else return (() => {
                if (undefined !== input["const"]) return _io116(input); else if (undefined !== input.$ref) return _io122(input); else if (undefined !== input.allOf) return _io124(input); else if (undefined !== input.anyOf) return _io125(input); else if (undefined !== input.oneOf) return _io126(input); else return _io129(input);
            })();
        })();
        const _iu6 = input => (() => {
            if (undefined !== input["in"]) return _io132(input); else if ("string" === typeof input.$ref && RegExp(/^#\/components\/parameters\/(.*)/).test(input.$ref)) return _io137(input); else if ("string" === typeof input.$ref && RegExp(/^#\/components\/headers\/(.*)/).test(input.$ref)) return _io136(input); else return false;
        })();
        const _iu7 = input => (() => {
            if (undefined !== input["const"]) return _io175(input); else if ("boolean" === input.type) return _io176(input); else if ("number" === input.type) return _io178(input); else if ("integer" === input.type) return _io177(input); else if ("string" === input.type) return _io179(input); else if (undefined !== input.items) return _io180(input); else if (undefined !== input.prefixItems) return _io181(input); else if ("object" === input.type) return _io182(input); else if (undefined !== input.$ref) return _io183(input); else if (undefined !== input.oneOf) return _io184(input); else if ("null" === input.type) return _io185(input); else return _io186(input);
        })();
        const _iu8 = input => (() => {
            if (undefined !== input["const"]) return _io175(input); else if ("boolean" === input.type) return _io176(input); else if ("number" === input.type) return _io178(input); else if ("integer" === input.type) return _io177(input); else if ("string" === input.type) return _io179(input); else if (undefined !== input.items) return _io180(input); else if (undefined !== input.prefixItems) return _io181(input); else if ("object" === input.type) return _io182(input); else if (undefined !== input.$ref) return _io183(input); else if ("null" === input.type) return _io185(input); else return _io186(input);
        })();
        const _iu9 = input => (() => {
            if ("boolean" === input.type) return _io17(input); else if ("number" === input.type) return _io19(input); else if ("integer" === input.type) return _io18(input); else if ("string" === input.type) return _io20(input); else if ("array" === input.type) return _io21(input); else if ("object" === input.type) return _io22(input); else if (undefined !== input.$ref) return _io23(input); else if (undefined !== input["x-anyOf"]) return _io24(input); else if (undefined !== input["x-oneOf"]) return _io25(input); else if ("null" === input.type) return _io26(input); else if (undefined !== input.schema) return _io28(input); else return _io27(input);
        })();
        const _iu10 = input => (() => {
            if ("apiKey" === input.type) return _io32(input); else if ("basic" === input.type) return _io33(input); else if ("implicit" === input.flow) return _io34(input); else if ("accessCode" === input.flow) return _io36(input); else if ("application" === input.flow) return _io38(input); else if ("password" === input.flow) return _io37(input); else return false;
        })();
        const _iu11 = input => (() => {
            if (undefined !== input.$ref) return _io46(input); else return _io30(input);
        })();
        const _iu12 = input => (() => {
            if (undefined !== input.$ref) return _io77(input); else return _io76(input);
        })();
        const _iu13 = input => (() => {
            if (undefined !== input.schema) return _io79(input); else if (undefined !== input.$ref) return _io80(input); else return false;
        })();
        const _iu14 = input => (() => {
            if ("apiKey" === input.type) return _io86(input); else if ("basic" === input.scheme) return _io87(input); else if ("bearer" === input.scheme) return _io88(input); else if ("oauth2" === input.type) return _io89(input); else if ("openIdConnect" === input.type) return _io94(input); else return false;
        })();
        const _iu15 = input => (() => {
            if (undefined !== input.$ref) return _io101(input); else return _io84(input);
        })();
        const _iu16 = input => (() => {
            if (undefined !== input.$ref) return _io103(input); else return _io72(input);
        })();
        const _iu17 = input => (() => {
            if (undefined !== input.$ref) return _io135(input); else return _io134(input);
        })();
        const _iu18 = input => (() => {
            if (undefined !== input.$ref) return _io142(input); else return _io139(input);
        })();
        const _iu19 = input => (() => {
            if (undefined !== input.$ref) return _io147(input); else return _io144(input);
        })();
        const _iu20 = input => (() => {
            if (undefined !== input.$ref) return _io136(input); else if (undefined !== input.schema) return _io146(input); else return false;
        })();
        const _iu21 = input => (() => {
            if ("apiKey" === input.type) return _io152(input); else if ("basic" === input.scheme) return _io153(input); else if ("bearer" === input.scheme) return _io154(input); else if ("oauth2" === input.type) return _io155(input); else if ("openIdConnect" === input.type) return _io160(input); else return false;
        })();
        const _iu22 = input => (() => {
            if (undefined !== input.$ref) return _io164(input); else return _io131(input);
        })();
        const _iu23 = input => (() => {
            if ("apiKey" === input.type) return _io189(input); else if ("basic" === input.scheme) return _io190(input); else if ("bearer" === input.scheme) return _io191(input); else if ("oauth2" === input.type) return _io192(input); else if ("openIdConnect" === input.type) return _io197(input); else return false;
        })();
        const _iu24 = input => (() => {
            if (undefined !== input.swagger) return _io0(input); else if (null !== input.openapi && undefined !== input.openapi && ("3.0" === input.openapi || "string" === typeof input.openapi && RegExp(/^3\.0\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(input.openapi))) return _io48(input); else if ("string" === typeof input.openapi && RegExp(/^3\.1\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(input.openapi)) return _io105(input); else if (undefined !== input["x-samchon-emended-v4"]) return _io166(input); else return false;
        })();
        const _vo0 = (input, _path, _exceptionable = true) => [ (null !== input.swagger || _report(_exceptionable, {
            path: _path + ".swagger",
            expected: '("2.0" | `2.0.${number}`)',
            value: input.swagger
        })) && (undefined !== input.swagger || _report(_exceptionable, {
            path: _path + ".swagger",
            expected: '("2.0" | `2.0.${number}`)',
            value: input.swagger
        })) && ("2.0" === input.swagger || "string" === typeof input.swagger && RegExp(/^2\.0\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(input.swagger) || _report(_exceptionable, {
            path: _path + ".swagger",
            expected: '("2.0" | `2.0.${number}`)',
            value: input.swagger
        })), undefined === input.info || ("object" === typeof input.info && null !== input.info || _report(_exceptionable, {
            path: _path + ".info",
            expected: "(SwaggerV2.IDocument.IInfo | undefined)",
            value: input.info
        })) && _vo1(input.info, _path + ".info", _exceptionable) || _report(_exceptionable, {
            path: _path + ".info",
            expected: "(SwaggerV2.IDocument.IInfo | undefined)",
            value: input.info
        }), undefined === input.host || "string" === typeof input.host || _report(_exceptionable, {
            path: _path + ".host",
            expected: "(string | undefined)",
            value: input.host
        }), undefined === input.basePath || "string" === typeof input.basePath || _report(_exceptionable, {
            path: _path + ".basePath",
            expected: "(string | undefined)",
            value: input.basePath
        }), undefined === input.consumes || (Array.isArray(input.consumes) || _report(_exceptionable, {
            path: _path + ".consumes",
            expected: "(Array<string> | undefined)",
            value: input.consumes
        })) && input.consumes.map(((elem, _index83) => "string" === typeof elem || _report(_exceptionable, {
            path: _path + ".consumes[" + _index83 + "]",
            expected: "string",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".consumes",
            expected: "(Array<string> | undefined)",
            value: input.consumes
        }), undefined === input.produces || (Array.isArray(input.produces) || _report(_exceptionable, {
            path: _path + ".produces",
            expected: "(Array<string> | undefined)",
            value: input.produces
        })) && input.produces.map(((elem, _index84) => "string" === typeof elem || _report(_exceptionable, {
            path: _path + ".produces[" + _index84 + "]",
            expected: "string",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".produces",
            expected: "(Array<string> | undefined)",
            value: input.produces
        }), undefined === input.definitions || ("object" === typeof input.definitions && null !== input.definitions && false === Array.isArray(input.definitions) || _report(_exceptionable, {
            path: _path + ".definitions",
            expected: "(Record<string, SwaggerV2.IJsonSchema> | undefined)",
            value: input.definitions
        })) && _vo4(input.definitions, _path + ".definitions", _exceptionable) || _report(_exceptionable, {
            path: _path + ".definitions",
            expected: "(Record<string, SwaggerV2.IJsonSchema> | undefined)",
            value: input.definitions
        }), undefined === input.parameters || ("object" === typeof input.parameters && null !== input.parameters && false === Array.isArray(input.parameters) || _report(_exceptionable, {
            path: _path + ".parameters",
            expected: "(Record<string, SwaggerV2.IOperation.IParameter> | undefined)",
            value: input.parameters
        })) && _vo16(input.parameters, _path + ".parameters", _exceptionable) || _report(_exceptionable, {
            path: _path + ".parameters",
            expected: "(Record<string, SwaggerV2.IOperation.IParameter> | undefined)",
            value: input.parameters
        }), undefined === input.responses || ("object" === typeof input.responses && null !== input.responses && false === Array.isArray(input.responses) || _report(_exceptionable, {
            path: _path + ".responses",
            expected: "(Record<string, SwaggerV2.IOperation.IResponse> | undefined)",
            value: input.responses
        })) && _vo29(input.responses, _path + ".responses", _exceptionable) || _report(_exceptionable, {
            path: _path + ".responses",
            expected: "(Record<string, SwaggerV2.IOperation.IResponse> | undefined)",
            value: input.responses
        }), undefined === input.securityDefinitions || ("object" === typeof input.securityDefinitions && null !== input.securityDefinitions && false === Array.isArray(input.securityDefinitions) || _report(_exceptionable, {
            path: _path + ".securityDefinitions",
            expected: "(Record<string, SwaggerV2.ISecurityDefinition> | undefined)",
            value: input.securityDefinitions
        })) && _vo31(input.securityDefinitions, _path + ".securityDefinitions", _exceptionable) || _report(_exceptionable, {
            path: _path + ".securityDefinitions",
            expected: "(Record<string, SwaggerV2.ISecurityDefinition> | undefined)",
            value: input.securityDefinitions
        }), undefined === input.security || (Array.isArray(input.security) || _report(_exceptionable, {
            path: _path + ".security",
            expected: "(Array<Record<string, Array<string>>> | undefined)",
            value: input.security
        })) && input.security.map(((elem, _index85) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
            path: _path + ".security[" + _index85 + "]",
            expected: "Record<string, Array<string>>",
            value: elem
        })) && _vo39(elem, _path + ".security[" + _index85 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".security[" + _index85 + "]",
            expected: "Record<string, Array<string>>",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".security",
            expected: "(Array<Record<string, Array<string>>> | undefined)",
            value: input.security
        }), undefined === input.paths || ("object" === typeof input.paths && null !== input.paths && false === Array.isArray(input.paths) || _report(_exceptionable, {
            path: _path + ".paths",
            expected: "(Record<string, SwaggerV2.IPath> | undefined)",
            value: input.paths
        })) && _vo40(input.paths, _path + ".paths", _exceptionable) || _report(_exceptionable, {
            path: _path + ".paths",
            expected: "(Record<string, SwaggerV2.IPath> | undefined)",
            value: input.paths
        }), undefined === input.tags || (Array.isArray(input.tags) || _report(_exceptionable, {
            path: _path + ".tags",
            expected: "(Array<SwaggerV2.IDocument.ITag> | undefined)",
            value: input.tags
        })) && input.tags.map(((elem, _index86) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
            path: _path + ".tags[" + _index86 + "]",
            expected: "SwaggerV2.IDocument.ITag",
            value: elem
        })) && _vo47(elem, _path + ".tags[" + _index86 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".tags[" + _index86 + "]",
            expected: "SwaggerV2.IDocument.ITag",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".tags",
            expected: "(Array<SwaggerV2.IDocument.ITag> | undefined)",
            value: input.tags
        }) ].every((flag => flag));
        const _vo1 = (input, _path, _exceptionable = true) => [ "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "string",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.termsOfService || "string" === typeof input.termsOfService || _report(_exceptionable, {
            path: _path + ".termsOfService",
            expected: "(string | undefined)",
            value: input.termsOfService
        }), undefined === input.contact || ("object" === typeof input.contact && null !== input.contact && false === Array.isArray(input.contact) || _report(_exceptionable, {
            path: _path + ".contact",
            expected: "(SwaggerV2.IDocument.IContact | undefined)",
            value: input.contact
        })) && _vo2(input.contact, _path + ".contact", _exceptionable) || _report(_exceptionable, {
            path: _path + ".contact",
            expected: "(SwaggerV2.IDocument.IContact | undefined)",
            value: input.contact
        }), undefined === input.license || ("object" === typeof input.license && null !== input.license || _report(_exceptionable, {
            path: _path + ".license",
            expected: "(SwaggerV2.IDocument.ILicense | undefined)",
            value: input.license
        })) && _vo3(input.license, _path + ".license", _exceptionable) || _report(_exceptionable, {
            path: _path + ".license",
            expected: "(SwaggerV2.IDocument.ILicense | undefined)",
            value: input.license
        }), "string" === typeof input.version || _report(_exceptionable, {
            path: _path + ".version",
            expected: "string",
            value: input.version
        }) ].every((flag => flag));
        const _vo2 = (input, _path, _exceptionable = true) => [ undefined === input.name || "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "(string | undefined)",
            value: input.name
        }), undefined === input.url || "string" === typeof input.url || _report(_exceptionable, {
            path: _path + ".url",
            expected: "(string | undefined)",
            value: input.url
        }), undefined === input.email || "string" === typeof input.email || _report(_exceptionable, {
            path: _path + ".email",
            expected: "(string | undefined)",
            value: input.email
        }) ].every((flag => flag));
        const _vo3 = (input, _path, _exceptionable = true) => [ "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "string",
            value: input.name
        }), undefined === input.url || "string" === typeof input.url || _report(_exceptionable, {
            path: _path + ".url",
            expected: "(string | undefined)",
            value: input.url
        }) ].every((flag => flag));
        const _vo4 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown)",
                value
            })) && _vu0(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown)",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo5 = (input, _path, _exceptionable = true) => [ null === input["default"] || undefined === input["default"] || "boolean" === typeof input["default"] || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: "(boolean | null | undefined)",
            value: input["default"]
        }), undefined === input["enum"] || (Array.isArray(input["enum"]) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<boolean | null> | undefined)",
            value: input["enum"]
        })) && input["enum"].map(((elem, _index87) => null === elem || "boolean" === typeof elem || _report(_exceptionable, {
            path: _path + '["enum"][' + _index87 + "]",
            expected: "(boolean | null)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<boolean | null> | undefined)",
            value: input["enum"]
        }), "boolean" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"boolean"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"] || _report(_exceptionable, {
            path: _path + '["x-nullable"]',
            expected: "(boolean | undefined)",
            value: input["x-nullable"]
        }), undefined === input.examples || Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }) ].every((flag => flag));
        const _vo6 = (input, _path, _exceptionable = true) => [ null === input["default"] || undefined === input["default"] || "number" === typeof input["default"] && (Math.floor(input["default"]) === input["default"] && -0x8000000000000000 <= input["default"] && input["default"] <= 0x8000000000000000 || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: 'number & Type<"int64">',
            value: input["default"]
        })) || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: '((number & Type<"int64">) | null | undefined)',
            value: input["default"]
        }), undefined === input["enum"] || (Array.isArray(input["enum"]) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<number | null> | undefined)",
            value: input["enum"]
        })) && input["enum"].map(((elem, _index88) => null === elem || "number" === typeof elem || _report(_exceptionable, {
            path: _path + '["enum"][' + _index88 + "]",
            expected: "(null | number)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<number | null> | undefined)",
            value: input["enum"]
        }), undefined === input.minimum || "number" === typeof input.minimum && (Math.floor(input.minimum) === input.minimum && -0x8000000000000000 <= input.minimum && input.minimum <= 0x8000000000000000 || _report(_exceptionable, {
            path: _path + ".minimum",
            expected: 'number & Type<"int64">',
            value: input.minimum
        })) || _report(_exceptionable, {
            path: _path + ".minimum",
            expected: '((number & Type<"int64">) | undefined)',
            value: input.minimum
        }), undefined === input.maximum || "number" === typeof input.maximum && (Math.floor(input.maximum) === input.maximum && -0x8000000000000000 <= input.maximum && input.maximum <= 0x8000000000000000 || _report(_exceptionable, {
            path: _path + ".maximum",
            expected: 'number & Type<"int64">',
            value: input.maximum
        })) || _report(_exceptionable, {
            path: _path + ".maximum",
            expected: '((number & Type<"int64">) | undefined)',
            value: input.maximum
        }), undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum || _report(_exceptionable, {
            path: _path + ".exclusiveMinimum",
            expected: "(boolean | number | undefined)",
            value: input.exclusiveMinimum
        }), undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum || _report(_exceptionable, {
            path: _path + ".exclusiveMaximum",
            expected: "(boolean | number | undefined)",
            value: input.exclusiveMaximum
        }), undefined === input.multipleOf || "number" === typeof input.multipleOf && (Math.floor(input.multipleOf) === input.multipleOf && 0 <= input.multipleOf && input.multipleOf <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".multipleOf",
            expected: 'number & Type<"uint64">',
            value: input.multipleOf
        })) && (0 < input.multipleOf || _report(_exceptionable, {
            path: _path + ".multipleOf",
            expected: "number & ExclusiveMinimum<0>",
            value: input.multipleOf
        })) || _report(_exceptionable, {
            path: _path + ".multipleOf",
            expected: '((number & Type<"uint64"> & ExclusiveMinimum<0>) | undefined)',
            value: input.multipleOf
        }), "integer" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"integer"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"] || _report(_exceptionable, {
            path: _path + '["x-nullable"]',
            expected: "(boolean | undefined)",
            value: input["x-nullable"]
        }), undefined === input.examples || Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }) ].every((flag => flag));
        const _vo7 = (input, _path, _exceptionable = true) => [ null === input["default"] || undefined === input["default"] || "number" === typeof input["default"] || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: "(null | number | undefined)",
            value: input["default"]
        }), undefined === input["enum"] || (Array.isArray(input["enum"]) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<number | null> | undefined)",
            value: input["enum"]
        })) && input["enum"].map(((elem, _index89) => null === elem || "number" === typeof elem || _report(_exceptionable, {
            path: _path + '["enum"][' + _index89 + "]",
            expected: "(null | number)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<number | null> | undefined)",
            value: input["enum"]
        }), undefined === input.minimum || "number" === typeof input.minimum || _report(_exceptionable, {
            path: _path + ".minimum",
            expected: "(number | undefined)",
            value: input.minimum
        }), undefined === input.maximum || "number" === typeof input.maximum || _report(_exceptionable, {
            path: _path + ".maximum",
            expected: "(number | undefined)",
            value: input.maximum
        }), undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum || _report(_exceptionable, {
            path: _path + ".exclusiveMinimum",
            expected: "(boolean | number | undefined)",
            value: input.exclusiveMinimum
        }), undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum || _report(_exceptionable, {
            path: _path + ".exclusiveMaximum",
            expected: "(boolean | number | undefined)",
            value: input.exclusiveMaximum
        }), undefined === input.multipleOf || "number" === typeof input.multipleOf && (0 < input.multipleOf || _report(_exceptionable, {
            path: _path + ".multipleOf",
            expected: "number & ExclusiveMinimum<0>",
            value: input.multipleOf
        })) || _report(_exceptionable, {
            path: _path + ".multipleOf",
            expected: "((number & ExclusiveMinimum<0>) | undefined)",
            value: input.multipleOf
        }), "number" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"number"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"] || _report(_exceptionable, {
            path: _path + '["x-nullable"]',
            expected: "(boolean | undefined)",
            value: input["x-nullable"]
        }), undefined === input.examples || Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }) ].every((flag => flag));
        const _vo8 = (input, _path, _exceptionable = true) => [ null === input["default"] || undefined === input["default"] || "string" === typeof input["default"] || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: "(null | string | undefined)",
            value: input["default"]
        }), undefined === input["enum"] || (Array.isArray(input["enum"]) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<string | null> | undefined)",
            value: input["enum"]
        })) && input["enum"].map(((elem, _index90) => null === elem || "string" === typeof elem || _report(_exceptionable, {
            path: _path + '["enum"][' + _index90 + "]",
            expected: "(null | string)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<string | null> | undefined)",
            value: input["enum"]
        }), undefined === input.format || "string" === typeof input.format || _report(_exceptionable, {
            path: _path + ".format",
            expected: "(string | undefined)",
            value: input.format
        }), undefined === input.pattern || "string" === typeof input.pattern || _report(_exceptionable, {
            path: _path + ".pattern",
            expected: "(string | undefined)",
            value: input.pattern
        }), undefined === input.minLength || "number" === typeof input.minLength && (Math.floor(input.minLength) === input.minLength && 0 <= input.minLength && input.minLength <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".minLength",
            expected: 'number & Type<"uint64">',
            value: input.minLength
        })) || _report(_exceptionable, {
            path: _path + ".minLength",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.minLength
        }), undefined === input.maxLength || "number" === typeof input.maxLength && (Math.floor(input.maxLength) === input.maxLength && 0 <= input.maxLength && input.maxLength <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".maxLength",
            expected: 'number & Type<"uint64">',
            value: input.maxLength
        })) || _report(_exceptionable, {
            path: _path + ".maxLength",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.maxLength
        }), "string" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"string"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"] || _report(_exceptionable, {
            path: _path + '["x-nullable"]',
            expected: "(boolean | undefined)",
            value: input["x-nullable"]
        }), undefined === input.examples || Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }) ].every((flag => flag));
        const _vo9 = (input, _path, _exceptionable = true) => [ ("object" === typeof input.items && null !== input.items && false === Array.isArray(input.items) || _report(_exceptionable, {
            path: _path + ".items",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown)",
            value: input.items
        })) && _vu0(input.items, _path + ".items", _exceptionable) || _report(_exceptionable, {
            path: _path + ".items",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown)",
            value: input.items
        }), undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems || _report(_exceptionable, {
            path: _path + ".uniqueItems",
            expected: "(boolean | undefined)",
            value: input.uniqueItems
        }), undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".minItems",
            expected: 'number & Type<"uint64">',
            value: input.minItems
        })) || _report(_exceptionable, {
            path: _path + ".minItems",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.minItems
        }), undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".maxItems",
            expected: 'number & Type<"uint64">',
            value: input.maxItems
        })) || _report(_exceptionable, {
            path: _path + ".maxItems",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.maxItems
        }), "array" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"array"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"] || _report(_exceptionable, {
            path: _path + '["x-nullable"]',
            expected: "(boolean | undefined)",
            value: input["x-nullable"]
        }), undefined === input.examples || Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }) ].every((flag => flag));
        const _vo10 = (input, _path, _exceptionable = true) => [ undefined === input.properties || ("object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) || _report(_exceptionable, {
            path: _path + ".properties",
            expected: "(Record<string, SwaggerV2.IJsonSchema> | undefined)",
            value: input.properties
        })) && _vo4(input.properties, _path + ".properties", _exceptionable) || _report(_exceptionable, {
            path: _path + ".properties",
            expected: "(Record<string, SwaggerV2.IJsonSchema> | undefined)",
            value: input.properties
        }), undefined === input.required || (Array.isArray(input.required) || _report(_exceptionable, {
            path: _path + ".required",
            expected: "(Array<string> | undefined)",
            value: input.required
        })) && input.required.map(((elem, _index91) => "string" === typeof elem || _report(_exceptionable, {
            path: _path + ".required[" + _index91 + "]",
            expected: "string",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".required",
            expected: "(Array<string> | undefined)",
            value: input.required
        }), (null !== input.additionalProperties || _report(_exceptionable, {
            path: _path + ".additionalProperties",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalProperties
        })) && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || ("object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) || _report(_exceptionable, {
            path: _path + ".additionalProperties",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalProperties
        })) && _vu0(input.additionalProperties, _path + ".additionalProperties", _exceptionable) || _report(_exceptionable, {
            path: _path + ".additionalProperties",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalProperties
        })), undefined === input.maxProperties || "number" === typeof input.maxProperties || _report(_exceptionable, {
            path: _path + ".maxProperties",
            expected: "(number | undefined)",
            value: input.maxProperties
        }), undefined === input.minProperties || "number" === typeof input.minProperties || _report(_exceptionable, {
            path: _path + ".minProperties",
            expected: "(number | undefined)",
            value: input.minProperties
        }), "object" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"object"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"] || _report(_exceptionable, {
            path: _path + '["x-nullable"]',
            expected: "(boolean | undefined)",
            value: input["x-nullable"]
        }), undefined === input.examples || Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }) ].every((flag => flag));
        const _vo11 = (input, _path, _exceptionable = true) => [ "string" === typeof input.$ref || _report(_exceptionable, {
            path: _path + ".$ref",
            expected: "string",
            value: input.$ref
        }), undefined === input.examples || Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true ].every((flag => flag));
        const _vo12 = (input, _path, _exceptionable = true) => [ (Array.isArray(input["x-anyOf"]) || _report(_exceptionable, {
            path: _path + '["x-anyOf"]',
            expected: "Array<SwaggerV2.IJsonSchema>",
            value: input["x-anyOf"]
        })) && input["x-anyOf"].map(((elem, _index92) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
            path: _path + '["x-anyOf"][' + _index92 + "]",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown)",
            value: elem
        })) && _vu0(elem, _path + '["x-anyOf"][' + _index92 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + '["x-anyOf"][' + _index92 + "]",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + '["x-anyOf"]',
            expected: "Array<SwaggerV2.IJsonSchema>",
            value: input["x-anyOf"]
        }), undefined === input.examples || Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true ].every((flag => flag));
        const _vo13 = (input, _path, _exceptionable = true) => [ (Array.isArray(input["x-oneOf"]) || _report(_exceptionable, {
            path: _path + '["x-oneOf"]',
            expected: "Array<SwaggerV2.IJsonSchema>",
            value: input["x-oneOf"]
        })) && input["x-oneOf"].map(((elem, _index93) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
            path: _path + '["x-oneOf"][' + _index93 + "]",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown)",
            value: elem
        })) && _vu0(elem, _path + '["x-oneOf"][' + _index93 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + '["x-oneOf"][' + _index93 + "]",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + '["x-oneOf"]',
            expected: "Array<SwaggerV2.IJsonSchema>",
            value: input["x-oneOf"]
        }), undefined === input.examples || Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true ].every((flag => flag));
        const _vo14 = (input, _path, _exceptionable = true) => [ "null" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"null"',
            value: input.type
        }), null === input["default"] || undefined === input["default"] || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: "(null | undefined)",
            value: input["default"]
        }), undefined === input.examples || Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true ].every((flag => flag));
        const _vo15 = (input, _path, _exceptionable = true) => [ (null !== input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: "undefined",
            value: input.type
        })) && (undefined === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: "undefined",
            value: input.type
        })), undefined === input.examples || Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true ].every((flag => flag));
        const _vo16 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(IAnyOf & { name: string; in: string; description?: string | undefined; } | IArray & { name: string; in: string; description?: string | undefined; } | IBoolean & { name: string; in: string; description?: string | undefined; } | IInteger & { name: string; in: string; description?: string | undefined; } | INullOnly & { name: string; in: string; description?: string | undefined; } | INumber & { name: string; in: string; description?: string | undefined; } | IObject & { name: string; in: string; description?: string | undefined; } | IOneOf & { name: string; in: string; description?: string | undefined; } | IReference<string> & { name: string; in: string; description?: string | undefined; } | IString & { name: string; in: string; description?: string | undefined; } | IUnknown & { name: string; in: string; description?: string | undefined; } | SwaggerV2.IOperation.IBodyParameter)",
                value
            })) && _vu9(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(IAnyOf & { name: string; in: string; description?: string | undefined; } | IArray & { name: string; in: string; description?: string | undefined; } | IBoolean & { name: string; in: string; description?: string | undefined; } | IInteger & { name: string; in: string; description?: string | undefined; } | INullOnly & { name: string; in: string; description?: string | undefined; } | INumber & { name: string; in: string; description?: string | undefined; } | IObject & { name: string; in: string; description?: string | undefined; } | IOneOf & { name: string; in: string; description?: string | undefined; } | IReference<string> & { name: string; in: string; description?: string | undefined; } | IString & { name: string; in: string; description?: string | undefined; } | IUnknown & { name: string; in: string; description?: string | undefined; } | SwaggerV2.IOperation.IBodyParameter)",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo17 = (input, _path, _exceptionable = true) => [ null === input["default"] || undefined === input["default"] || "boolean" === typeof input["default"] || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: "(boolean | null | undefined)",
            value: input["default"]
        }), undefined === input["enum"] || (Array.isArray(input["enum"]) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<boolean | null> | undefined)",
            value: input["enum"]
        })) && input["enum"].map(((elem, _index94) => null === elem || "boolean" === typeof elem || _report(_exceptionable, {
            path: _path + '["enum"][' + _index94 + "]",
            expected: "(boolean | null)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<boolean | null> | undefined)",
            value: input["enum"]
        }), "boolean" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"boolean"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"] || _report(_exceptionable, {
            path: _path + '["x-nullable"]',
            expected: "(boolean | undefined)",
            value: input["x-nullable"]
        }), undefined === input.examples || Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }), "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "string",
            value: input.name
        }), "string" === typeof input["in"] || _report(_exceptionable, {
            path: _path + '["in"]',
            expected: "string",
            value: input["in"]
        }) ].every((flag => flag));
        const _vo18 = (input, _path, _exceptionable = true) => [ null === input["default"] || undefined === input["default"] || "number" === typeof input["default"] && (Math.floor(input["default"]) === input["default"] && -0x8000000000000000 <= input["default"] && input["default"] <= 0x8000000000000000 || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: 'number & Type<"int64">',
            value: input["default"]
        })) || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: '((number & Type<"int64">) | null | undefined)',
            value: input["default"]
        }), undefined === input["enum"] || (Array.isArray(input["enum"]) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<number | null> | undefined)",
            value: input["enum"]
        })) && input["enum"].map(((elem, _index95) => null === elem || "number" === typeof elem || _report(_exceptionable, {
            path: _path + '["enum"][' + _index95 + "]",
            expected: "(null | number)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<number | null> | undefined)",
            value: input["enum"]
        }), undefined === input.minimum || "number" === typeof input.minimum && (Math.floor(input.minimum) === input.minimum && -0x8000000000000000 <= input.minimum && input.minimum <= 0x8000000000000000 || _report(_exceptionable, {
            path: _path + ".minimum",
            expected: 'number & Type<"int64">',
            value: input.minimum
        })) || _report(_exceptionable, {
            path: _path + ".minimum",
            expected: '((number & Type<"int64">) | undefined)',
            value: input.minimum
        }), undefined === input.maximum || "number" === typeof input.maximum && (Math.floor(input.maximum) === input.maximum && -0x8000000000000000 <= input.maximum && input.maximum <= 0x8000000000000000 || _report(_exceptionable, {
            path: _path + ".maximum",
            expected: 'number & Type<"int64">',
            value: input.maximum
        })) || _report(_exceptionable, {
            path: _path + ".maximum",
            expected: '((number & Type<"int64">) | undefined)',
            value: input.maximum
        }), undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum || _report(_exceptionable, {
            path: _path + ".exclusiveMinimum",
            expected: "(boolean | number | undefined)",
            value: input.exclusiveMinimum
        }), undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum || _report(_exceptionable, {
            path: _path + ".exclusiveMaximum",
            expected: "(boolean | number | undefined)",
            value: input.exclusiveMaximum
        }), undefined === input.multipleOf || "number" === typeof input.multipleOf && (Math.floor(input.multipleOf) === input.multipleOf && 0 <= input.multipleOf && input.multipleOf <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".multipleOf",
            expected: 'number & Type<"uint64">',
            value: input.multipleOf
        })) && (0 < input.multipleOf || _report(_exceptionable, {
            path: _path + ".multipleOf",
            expected: "number & ExclusiveMinimum<0>",
            value: input.multipleOf
        })) || _report(_exceptionable, {
            path: _path + ".multipleOf",
            expected: '((number & Type<"uint64"> & ExclusiveMinimum<0>) | undefined)',
            value: input.multipleOf
        }), "integer" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"integer"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"] || _report(_exceptionable, {
            path: _path + '["x-nullable"]',
            expected: "(boolean | undefined)",
            value: input["x-nullable"]
        }), undefined === input.examples || Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }), "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "string",
            value: input.name
        }), "string" === typeof input["in"] || _report(_exceptionable, {
            path: _path + '["in"]',
            expected: "string",
            value: input["in"]
        }) ].every((flag => flag));
        const _vo19 = (input, _path, _exceptionable = true) => [ null === input["default"] || undefined === input["default"] || "number" === typeof input["default"] || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: "(null | number | undefined)",
            value: input["default"]
        }), undefined === input["enum"] || (Array.isArray(input["enum"]) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<number | null> | undefined)",
            value: input["enum"]
        })) && input["enum"].map(((elem, _index96) => null === elem || "number" === typeof elem || _report(_exceptionable, {
            path: _path + '["enum"][' + _index96 + "]",
            expected: "(null | number)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<number | null> | undefined)",
            value: input["enum"]
        }), undefined === input.minimum || "number" === typeof input.minimum || _report(_exceptionable, {
            path: _path + ".minimum",
            expected: "(number | undefined)",
            value: input.minimum
        }), undefined === input.maximum || "number" === typeof input.maximum || _report(_exceptionable, {
            path: _path + ".maximum",
            expected: "(number | undefined)",
            value: input.maximum
        }), undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum || _report(_exceptionable, {
            path: _path + ".exclusiveMinimum",
            expected: "(boolean | number | undefined)",
            value: input.exclusiveMinimum
        }), undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum || _report(_exceptionable, {
            path: _path + ".exclusiveMaximum",
            expected: "(boolean | number | undefined)",
            value: input.exclusiveMaximum
        }), undefined === input.multipleOf || "number" === typeof input.multipleOf && (0 < input.multipleOf || _report(_exceptionable, {
            path: _path + ".multipleOf",
            expected: "number & ExclusiveMinimum<0>",
            value: input.multipleOf
        })) || _report(_exceptionable, {
            path: _path + ".multipleOf",
            expected: "((number & ExclusiveMinimum<0>) | undefined)",
            value: input.multipleOf
        }), "number" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"number"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"] || _report(_exceptionable, {
            path: _path + '["x-nullable"]',
            expected: "(boolean | undefined)",
            value: input["x-nullable"]
        }), undefined === input.examples || Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }), "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "string",
            value: input.name
        }), "string" === typeof input["in"] || _report(_exceptionable, {
            path: _path + '["in"]',
            expected: "string",
            value: input["in"]
        }) ].every((flag => flag));
        const _vo20 = (input, _path, _exceptionable = true) => [ null === input["default"] || undefined === input["default"] || "string" === typeof input["default"] || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: "(null | string | undefined)",
            value: input["default"]
        }), undefined === input["enum"] || (Array.isArray(input["enum"]) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<string | null> | undefined)",
            value: input["enum"]
        })) && input["enum"].map(((elem, _index97) => null === elem || "string" === typeof elem || _report(_exceptionable, {
            path: _path + '["enum"][' + _index97 + "]",
            expected: "(null | string)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<string | null> | undefined)",
            value: input["enum"]
        }), undefined === input.format || "string" === typeof input.format || _report(_exceptionable, {
            path: _path + ".format",
            expected: "(string | undefined)",
            value: input.format
        }), undefined === input.pattern || "string" === typeof input.pattern || _report(_exceptionable, {
            path: _path + ".pattern",
            expected: "(string | undefined)",
            value: input.pattern
        }), undefined === input.minLength || "number" === typeof input.minLength && (Math.floor(input.minLength) === input.minLength && 0 <= input.minLength && input.minLength <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".minLength",
            expected: 'number & Type<"uint64">',
            value: input.minLength
        })) || _report(_exceptionable, {
            path: _path + ".minLength",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.minLength
        }), undefined === input.maxLength || "number" === typeof input.maxLength && (Math.floor(input.maxLength) === input.maxLength && 0 <= input.maxLength && input.maxLength <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".maxLength",
            expected: 'number & Type<"uint64">',
            value: input.maxLength
        })) || _report(_exceptionable, {
            path: _path + ".maxLength",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.maxLength
        }), "string" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"string"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"] || _report(_exceptionable, {
            path: _path + '["x-nullable"]',
            expected: "(boolean | undefined)",
            value: input["x-nullable"]
        }), undefined === input.examples || Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }), "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "string",
            value: input.name
        }), "string" === typeof input["in"] || _report(_exceptionable, {
            path: _path + '["in"]',
            expected: "string",
            value: input["in"]
        }) ].every((flag => flag));
        const _vo21 = (input, _path, _exceptionable = true) => [ ("object" === typeof input.items && null !== input.items && false === Array.isArray(input.items) || _report(_exceptionable, {
            path: _path + ".items",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown)",
            value: input.items
        })) && _vu0(input.items, _path + ".items", _exceptionable) || _report(_exceptionable, {
            path: _path + ".items",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown)",
            value: input.items
        }), undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems || _report(_exceptionable, {
            path: _path + ".uniqueItems",
            expected: "(boolean | undefined)",
            value: input.uniqueItems
        }), undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".minItems",
            expected: 'number & Type<"uint64">',
            value: input.minItems
        })) || _report(_exceptionable, {
            path: _path + ".minItems",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.minItems
        }), undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".maxItems",
            expected: 'number & Type<"uint64">',
            value: input.maxItems
        })) || _report(_exceptionable, {
            path: _path + ".maxItems",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.maxItems
        }), "array" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"array"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"] || _report(_exceptionable, {
            path: _path + '["x-nullable"]',
            expected: "(boolean | undefined)",
            value: input["x-nullable"]
        }), undefined === input.examples || Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }), "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "string",
            value: input.name
        }), "string" === typeof input["in"] || _report(_exceptionable, {
            path: _path + '["in"]',
            expected: "string",
            value: input["in"]
        }) ].every((flag => flag));
        const _vo22 = (input, _path, _exceptionable = true) => [ undefined === input.properties || ("object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) || _report(_exceptionable, {
            path: _path + ".properties",
            expected: "(Record<string, SwaggerV2.IJsonSchema> | undefined)",
            value: input.properties
        })) && _vo4(input.properties, _path + ".properties", _exceptionable) || _report(_exceptionable, {
            path: _path + ".properties",
            expected: "(Record<string, SwaggerV2.IJsonSchema> | undefined)",
            value: input.properties
        }), undefined === input.required || (Array.isArray(input.required) || _report(_exceptionable, {
            path: _path + ".required",
            expected: "(Array<string> | undefined)",
            value: input.required
        })) && input.required.map(((elem, _index98) => "string" === typeof elem || _report(_exceptionable, {
            path: _path + ".required[" + _index98 + "]",
            expected: "string",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".required",
            expected: "(Array<string> | undefined)",
            value: input.required
        }), (null !== input.additionalProperties || _report(_exceptionable, {
            path: _path + ".additionalProperties",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalProperties
        })) && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || ("object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) || _report(_exceptionable, {
            path: _path + ".additionalProperties",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalProperties
        })) && _vu0(input.additionalProperties, _path + ".additionalProperties", _exceptionable) || _report(_exceptionable, {
            path: _path + ".additionalProperties",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalProperties
        })), undefined === input.maxProperties || "number" === typeof input.maxProperties || _report(_exceptionable, {
            path: _path + ".maxProperties",
            expected: "(number | undefined)",
            value: input.maxProperties
        }), undefined === input.minProperties || "number" === typeof input.minProperties || _report(_exceptionable, {
            path: _path + ".minProperties",
            expected: "(number | undefined)",
            value: input.minProperties
        }), "object" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"object"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, undefined === input["x-nullable"] || "boolean" === typeof input["x-nullable"] || _report(_exceptionable, {
            path: _path + '["x-nullable"]',
            expected: "(boolean | undefined)",
            value: input["x-nullable"]
        }), undefined === input.examples || Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }), "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "string",
            value: input.name
        }), "string" === typeof input["in"] || _report(_exceptionable, {
            path: _path + '["in"]',
            expected: "string",
            value: input["in"]
        }) ].every((flag => flag));
        const _vo23 = (input, _path, _exceptionable = true) => [ "string" === typeof input.$ref || _report(_exceptionable, {
            path: _path + ".$ref",
            expected: "string",
            value: input.$ref
        }), undefined === input.examples || Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "string",
            value: input.name
        }), "string" === typeof input["in"] || _report(_exceptionable, {
            path: _path + '["in"]',
            expected: "string",
            value: input["in"]
        }) ].every((flag => flag));
        const _vo24 = (input, _path, _exceptionable = true) => [ (Array.isArray(input["x-anyOf"]) || _report(_exceptionable, {
            path: _path + '["x-anyOf"]',
            expected: "Array<SwaggerV2.IJsonSchema>",
            value: input["x-anyOf"]
        })) && input["x-anyOf"].map(((elem, _index99) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
            path: _path + '["x-anyOf"][' + _index99 + "]",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown)",
            value: elem
        })) && _vu0(elem, _path + '["x-anyOf"][' + _index99 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + '["x-anyOf"][' + _index99 + "]",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + '["x-anyOf"]',
            expected: "Array<SwaggerV2.IJsonSchema>",
            value: input["x-anyOf"]
        }), undefined === input.examples || Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "string",
            value: input.name
        }), "string" === typeof input["in"] || _report(_exceptionable, {
            path: _path + '["in"]',
            expected: "string",
            value: input["in"]
        }) ].every((flag => flag));
        const _vo25 = (input, _path, _exceptionable = true) => [ (Array.isArray(input["x-oneOf"]) || _report(_exceptionable, {
            path: _path + '["x-oneOf"]',
            expected: "Array<SwaggerV2.IJsonSchema>",
            value: input["x-oneOf"]
        })) && input["x-oneOf"].map(((elem, _index100) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
            path: _path + '["x-oneOf"][' + _index100 + "]",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown)",
            value: elem
        })) && _vu0(elem, _path + '["x-oneOf"][' + _index100 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + '["x-oneOf"][' + _index100 + "]",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + '["x-oneOf"]',
            expected: "Array<SwaggerV2.IJsonSchema>",
            value: input["x-oneOf"]
        }), undefined === input.examples || Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "string",
            value: input.name
        }), "string" === typeof input["in"] || _report(_exceptionable, {
            path: _path + '["in"]',
            expected: "string",
            value: input["in"]
        }) ].every((flag => flag));
        const _vo26 = (input, _path, _exceptionable = true) => [ "null" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"null"',
            value: input.type
        }), null === input["default"] || undefined === input["default"] || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: "(null | undefined)",
            value: input["default"]
        }), undefined === input.examples || Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "string",
            value: input.name
        }), "string" === typeof input["in"] || _report(_exceptionable, {
            path: _path + '["in"]',
            expected: "string",
            value: input["in"]
        }) ].every((flag => flag));
        const _vo27 = (input, _path, _exceptionable = true) => [ (null !== input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: "undefined",
            value: input.type
        })) && (undefined === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: "undefined",
            value: input.type
        })), undefined === input.examples || Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "string",
            value: input.name
        }), "string" === typeof input["in"] || _report(_exceptionable, {
            path: _path + '["in"]',
            expected: "string",
            value: input["in"]
        }) ].every((flag => flag));
        const _vo28 = (input, _path, _exceptionable = true) => [ ("object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) || _report(_exceptionable, {
            path: _path + ".schema",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown)",
            value: input.schema
        })) && _vu0(input.schema, _path + ".schema", _exceptionable) || _report(_exceptionable, {
            path: _path + ".schema",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown)",
            value: input.schema
        }), "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "string",
            value: input.name
        }), "string" === typeof input["in"] || _report(_exceptionable, {
            path: _path + '["in"]',
            expected: "string",
            value: input["in"]
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.required || "boolean" === typeof input.required || _report(_exceptionable, {
            path: _path + ".required",
            expected: "(boolean | undefined)",
            value: input.required
        }) ].every((flag => flag));
        const _vo29 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "SwaggerV2.IOperation.IResponse",
                value
            })) && _vo30(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "SwaggerV2.IOperation.IResponse",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo30 = (input, _path, _exceptionable = true) => [ undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.headers || ("object" === typeof input.headers && null !== input.headers && false === Array.isArray(input.headers) || _report(_exceptionable, {
            path: _path + ".headers",
            expected: "(Record<string, SwaggerV2.IJsonSchema> | undefined)",
            value: input.headers
        })) && _vo4(input.headers, _path + ".headers", _exceptionable) || _report(_exceptionable, {
            path: _path + ".headers",
            expected: "(Record<string, SwaggerV2.IJsonSchema> | undefined)",
            value: input.headers
        }), undefined === input.schema || ("object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) || _report(_exceptionable, {
            path: _path + ".schema",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown | undefined)",
            value: input.schema
        })) && _vu0(input.schema, _path + ".schema", _exceptionable) || _report(_exceptionable, {
            path: _path + ".schema",
            expected: "(SwaggerV2.IJsonSchema.IAnyOf | SwaggerV2.IJsonSchema.IArray | SwaggerV2.IJsonSchema.IBoolean | SwaggerV2.IJsonSchema.IInteger | SwaggerV2.IJsonSchema.INullOnly | SwaggerV2.IJsonSchema.INumber | SwaggerV2.IJsonSchema.IObject | SwaggerV2.IJsonSchema.IOneOf | SwaggerV2.IJsonSchema.IReference<string> | SwaggerV2.IJsonSchema.IString | SwaggerV2.IJsonSchema.IUnknown | undefined)",
            value: input.schema
        }), true ].every((flag => flag));
        const _vo31 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(SwaggerV2.ISecurityDefinition.IApiKey | SwaggerV2.ISecurityDefinition.IBasic | SwaggerV2.ISecurityDefinition.IOauth2AccessCode | SwaggerV2.ISecurityDefinition.IOauth2Application | SwaggerV2.ISecurityDefinition.IOauth2Implicit | SwaggerV2.ISecurityDefinition.IOauth2Password)",
                value
            })) && _vu10(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(SwaggerV2.ISecurityDefinition.IApiKey | SwaggerV2.ISecurityDefinition.IBasic | SwaggerV2.ISecurityDefinition.IOauth2AccessCode | SwaggerV2.ISecurityDefinition.IOauth2Application | SwaggerV2.ISecurityDefinition.IOauth2Implicit | SwaggerV2.ISecurityDefinition.IOauth2Password)",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo32 = (input, _path, _exceptionable = true) => [ "apiKey" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"apiKey"',
            value: input.type
        }), undefined === input["in"] || "query" === input["in"] || "header" === input["in"] || "cookie" === input["in"] || _report(_exceptionable, {
            path: _path + '["in"]',
            expected: '("cookie" | "header" | "query" | undefined)',
            value: input["in"]
        }), undefined === input.name || "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "(string | undefined)",
            value: input.name
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }) ].every((flag => flag));
        const _vo33 = (input, _path, _exceptionable = true) => [ "basic" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"basic"',
            value: input.type
        }), undefined === input.name || "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "(string | undefined)",
            value: input.name
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }) ].every((flag => flag));
        const _vo34 = (input, _path, _exceptionable = true) => [ "oauth2" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"oauth2"',
            value: input.type
        }), "implicit" === input.flow || _report(_exceptionable, {
            path: _path + ".flow",
            expected: '"implicit"',
            value: input.flow
        }), undefined === input.authorizationUrl || "string" === typeof input.authorizationUrl || _report(_exceptionable, {
            path: _path + ".authorizationUrl",
            expected: "(string | undefined)",
            value: input.authorizationUrl
        }), undefined === input.scopes || ("object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) || _report(_exceptionable, {
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        })) && _vo35(input.scopes, _path + ".scopes", _exceptionable) || _report(_exceptionable, {
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }) ].every((flag => flag));
        const _vo35 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "string" === typeof value || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "string",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo36 = (input, _path, _exceptionable = true) => [ "oauth2" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"oauth2"',
            value: input.type
        }), "accessCode" === input.flow || _report(_exceptionable, {
            path: _path + ".flow",
            expected: '"accessCode"',
            value: input.flow
        }), undefined === input.authorizationUrl || "string" === typeof input.authorizationUrl || _report(_exceptionable, {
            path: _path + ".authorizationUrl",
            expected: "(string | undefined)",
            value: input.authorizationUrl
        }), undefined === input.tokenUrl || "string" === typeof input.tokenUrl || _report(_exceptionable, {
            path: _path + ".tokenUrl",
            expected: "(string | undefined)",
            value: input.tokenUrl
        }), undefined === input.scopes || ("object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) || _report(_exceptionable, {
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        })) && _vo35(input.scopes, _path + ".scopes", _exceptionable) || _report(_exceptionable, {
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }) ].every((flag => flag));
        const _vo37 = (input, _path, _exceptionable = true) => [ "oauth2" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"oauth2"',
            value: input.type
        }), "password" === input.flow || _report(_exceptionable, {
            path: _path + ".flow",
            expected: '"password"',
            value: input.flow
        }), undefined === input.tokenUrl || "string" === typeof input.tokenUrl || _report(_exceptionable, {
            path: _path + ".tokenUrl",
            expected: "(string | undefined)",
            value: input.tokenUrl
        }), undefined === input.scopes || ("object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) || _report(_exceptionable, {
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        })) && _vo35(input.scopes, _path + ".scopes", _exceptionable) || _report(_exceptionable, {
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }) ].every((flag => flag));
        const _vo38 = (input, _path, _exceptionable = true) => [ "oauth2" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"oauth2"',
            value: input.type
        }), "application" === input.flow || _report(_exceptionable, {
            path: _path + ".flow",
            expected: '"application"',
            value: input.flow
        }), undefined === input.tokenUrl || "string" === typeof input.tokenUrl || _report(_exceptionable, {
            path: _path + ".tokenUrl",
            expected: "(string | undefined)",
            value: input.tokenUrl
        }), undefined === input.scopes || ("object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) || _report(_exceptionable, {
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        })) && _vo35(input.scopes, _path + ".scopes", _exceptionable) || _report(_exceptionable, {
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }) ].every((flag => flag));
        const _vo39 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return (Array.isArray(value) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "Array<string>",
                value
            })) && value.map(((elem, _index101) => "string" === typeof elem || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key) + "[" + _index101 + "]",
                expected: "string",
                value: elem
            }))).every((flag => flag)) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "Array<string>",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo40 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "SwaggerV2.IPath",
                value
            })) && _vo41(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "SwaggerV2.IPath",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo41 = (input, _path, _exceptionable = true) => [ undefined === input.parameters || (Array.isArray(input.parameters) || _report(_exceptionable, {
            path: _path + ".parameters",
            expected: "(Array<IParameter | IReference<`#/parameters/${string}`>> | undefined)",
            value: input.parameters
        })) && input.parameters.map(((elem, _index102) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
            path: _path + ".parameters[" + _index102 + "]",
            expected: "(IAnyOf & { name: string; in: string; description?: string | undefined; } | IArray & { name: string; in: string; description?: string | undefined; } | IBoolean & { name: string; in: string; description?: string | undefined; } | IInteger & { name: string; in: string; description?: string | undefined; } | INullOnly & { name: string; in: string; description?: string | undefined; } | INumber & { name: string; in: string; description?: string | undefined; } | IObject & { name: string; in: string; description?: string | undefined; } | IOneOf & { name: string; in: string; description?: string | undefined; } | IReference<string> & { name: string; in: string; description?: string | undefined; } | IString & { name: string; in: string; description?: string | undefined; } | IUnknown & { name: string; in: string; description?: string | undefined; } | SwaggerV2.IJsonSchema.IReference<`#/parameters/${string}`> | SwaggerV2.IOperation.IBodyParameter)",
            value: elem
        })) && _vu1(elem, _path + ".parameters[" + _index102 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".parameters[" + _index102 + "]",
            expected: "(IAnyOf & { name: string; in: string; description?: string | undefined; } | IArray & { name: string; in: string; description?: string | undefined; } | IBoolean & { name: string; in: string; description?: string | undefined; } | IInteger & { name: string; in: string; description?: string | undefined; } | INullOnly & { name: string; in: string; description?: string | undefined; } | INumber & { name: string; in: string; description?: string | undefined; } | IObject & { name: string; in: string; description?: string | undefined; } | IOneOf & { name: string; in: string; description?: string | undefined; } | IReference<string> & { name: string; in: string; description?: string | undefined; } | IString & { name: string; in: string; description?: string | undefined; } | IUnknown & { name: string; in: string; description?: string | undefined; } | SwaggerV2.IJsonSchema.IReference<`#/parameters/${string}`> | SwaggerV2.IOperation.IBodyParameter)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".parameters",
            expected: "(Array<IParameter | IReference<`#/parameters/${string}`>> | undefined)",
            value: input.parameters
        }), undefined === input.options || ("object" === typeof input.options && null !== input.options && false === Array.isArray(input.options) || _report(_exceptionable, {
            path: _path + ".options",
            expected: "(SwaggerV2.IOperation | undefined)",
            value: input.options
        })) && _vo43(input.options, _path + ".options", _exceptionable) || _report(_exceptionable, {
            path: _path + ".options",
            expected: "(SwaggerV2.IOperation | undefined)",
            value: input.options
        }), undefined === input.get || ("object" === typeof input.get && null !== input.get && false === Array.isArray(input.get) || _report(_exceptionable, {
            path: _path + ".get",
            expected: "(SwaggerV2.IOperation | undefined)",
            value: input.get
        })) && _vo43(input.get, _path + ".get", _exceptionable) || _report(_exceptionable, {
            path: _path + ".get",
            expected: "(SwaggerV2.IOperation | undefined)",
            value: input.get
        }), undefined === input.post || ("object" === typeof input.post && null !== input.post && false === Array.isArray(input.post) || _report(_exceptionable, {
            path: _path + ".post",
            expected: "(SwaggerV2.IOperation | undefined)",
            value: input.post
        })) && _vo43(input.post, _path + ".post", _exceptionable) || _report(_exceptionable, {
            path: _path + ".post",
            expected: "(SwaggerV2.IOperation | undefined)",
            value: input.post
        }), undefined === input.patch || ("object" === typeof input.patch && null !== input.patch && false === Array.isArray(input.patch) || _report(_exceptionable, {
            path: _path + ".patch",
            expected: "(SwaggerV2.IOperation | undefined)",
            value: input.patch
        })) && _vo43(input.patch, _path + ".patch", _exceptionable) || _report(_exceptionable, {
            path: _path + ".patch",
            expected: "(SwaggerV2.IOperation | undefined)",
            value: input.patch
        }), undefined === input.put || ("object" === typeof input.put && null !== input.put && false === Array.isArray(input.put) || _report(_exceptionable, {
            path: _path + ".put",
            expected: "(SwaggerV2.IOperation | undefined)",
            value: input.put
        })) && _vo43(input.put, _path + ".put", _exceptionable) || _report(_exceptionable, {
            path: _path + ".put",
            expected: "(SwaggerV2.IOperation | undefined)",
            value: input.put
        }), undefined === input["delete"] || ("object" === typeof input["delete"] && null !== input["delete"] && false === Array.isArray(input["delete"]) || _report(_exceptionable, {
            path: _path + '["delete"]',
            expected: "(SwaggerV2.IOperation | undefined)",
            value: input["delete"]
        })) && _vo43(input["delete"], _path + '["delete"]', _exceptionable) || _report(_exceptionable, {
            path: _path + '["delete"]',
            expected: "(SwaggerV2.IOperation | undefined)",
            value: input["delete"]
        }), undefined === input.head || ("object" === typeof input.head && null !== input.head && false === Array.isArray(input.head) || _report(_exceptionable, {
            path: _path + ".head",
            expected: "(SwaggerV2.IOperation | undefined)",
            value: input.head
        })) && _vo43(input.head, _path + ".head", _exceptionable) || _report(_exceptionable, {
            path: _path + ".head",
            expected: "(SwaggerV2.IOperation | undefined)",
            value: input.head
        }), undefined === input.trace || ("object" === typeof input.trace && null !== input.trace && false === Array.isArray(input.trace) || _report(_exceptionable, {
            path: _path + ".trace",
            expected: "(SwaggerV2.IOperation | undefined)",
            value: input.trace
        })) && _vo43(input.trace, _path + ".trace", _exceptionable) || _report(_exceptionable, {
            path: _path + ".trace",
            expected: "(SwaggerV2.IOperation | undefined)",
            value: input.trace
        }) ].every((flag => flag));
        const _vo42 = (input, _path, _exceptionable = true) => [ "string" === typeof input.$ref && RegExp(/^#\/parameters\/(.*)/).test(input.$ref) || _report(_exceptionable, {
            path: _path + ".$ref",
            expected: "`#/parameters/${string}`",
            value: input.$ref
        }), undefined === input.examples || Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true ].every((flag => flag));
        const _vo43 = (input, _path, _exceptionable = true) => [ undefined === input.operationId || "string" === typeof input.operationId || _report(_exceptionable, {
            path: _path + ".operationId",
            expected: "(string | undefined)",
            value: input.operationId
        }), undefined === input.parameters || (Array.isArray(input.parameters) || _report(_exceptionable, {
            path: _path + ".parameters",
            expected: "(Array<IParameter | IReference<`#/definitions/parameters/${string}`>> | undefined)",
            value: input.parameters
        })) && input.parameters.map(((elem, _index103) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
            path: _path + ".parameters[" + _index103 + "]",
            expected: "(IAnyOf & { name: string; in: string; description?: string | undefined; } | IArray & { name: string; in: string; description?: string | undefined; } | IBoolean & { name: string; in: string; description?: string | undefined; } | IInteger & { name: string; in: string; description?: string | undefined; } | INullOnly & { name: string; in: string; description?: string | undefined; } | INumber & { name: string; in: string; description?: string | undefined; } | IObject & { name: string; in: string; description?: string | undefined; } | IOneOf & { name: string; in: string; description?: string | undefined; } | IReference<string> & { name: string; in: string; description?: string | undefined; } | IString & { name: string; in: string; description?: string | undefined; } | IUnknown & { name: string; in: string; description?: string | undefined; } | SwaggerV2.IJsonSchema.IReference<`#/definitions/parameters/${string}`> | SwaggerV2.IOperation.IBodyParameter)",
            value: elem
        })) && _vu2(elem, _path + ".parameters[" + _index103 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".parameters[" + _index103 + "]",
            expected: "(IAnyOf & { name: string; in: string; description?: string | undefined; } | IArray & { name: string; in: string; description?: string | undefined; } | IBoolean & { name: string; in: string; description?: string | undefined; } | IInteger & { name: string; in: string; description?: string | undefined; } | INullOnly & { name: string; in: string; description?: string | undefined; } | INumber & { name: string; in: string; description?: string | undefined; } | IObject & { name: string; in: string; description?: string | undefined; } | IOneOf & { name: string; in: string; description?: string | undefined; } | IReference<string> & { name: string; in: string; description?: string | undefined; } | IString & { name: string; in: string; description?: string | undefined; } | IUnknown & { name: string; in: string; description?: string | undefined; } | SwaggerV2.IJsonSchema.IReference<`#/definitions/parameters/${string}`> | SwaggerV2.IOperation.IBodyParameter)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".parameters",
            expected: "(Array<IParameter | IReference<`#/definitions/parameters/${string}`>> | undefined)",
            value: input.parameters
        }), undefined === input.responses || ("object" === typeof input.responses && null !== input.responses && false === Array.isArray(input.responses) || _report(_exceptionable, {
            path: _path + ".responses",
            expected: "(Record<string, IResponse | IReference<`#/definitions/responses/${string}`>> | undefined)",
            value: input.responses
        })) && _vo45(input.responses, _path + ".responses", _exceptionable) || _report(_exceptionable, {
            path: _path + ".responses",
            expected: "(Record<string, IResponse | IReference<`#/definitions/responses/${string}`>> | undefined)",
            value: input.responses
        }), undefined === input.summary || "string" === typeof input.summary || _report(_exceptionable, {
            path: _path + ".summary",
            expected: "(string | undefined)",
            value: input.summary
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.security || (Array.isArray(input.security) || _report(_exceptionable, {
            path: _path + ".security",
            expected: "(Array<Record<string, Array<string>>> | undefined)",
            value: input.security
        })) && input.security.map(((elem, _index104) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
            path: _path + ".security[" + _index104 + "]",
            expected: "Record<string, Array<string>>",
            value: elem
        })) && _vo39(elem, _path + ".security[" + _index104 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".security[" + _index104 + "]",
            expected: "Record<string, Array<string>>",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".security",
            expected: "(Array<Record<string, Array<string>>> | undefined)",
            value: input.security
        }), undefined === input.tags || (Array.isArray(input.tags) || _report(_exceptionable, {
            path: _path + ".tags",
            expected: "(Array<string> | undefined)",
            value: input.tags
        })) && input.tags.map(((elem, _index105) => "string" === typeof elem || _report(_exceptionable, {
            path: _path + ".tags[" + _index105 + "]",
            expected: "string",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".tags",
            expected: "(Array<string> | undefined)",
            value: input.tags
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }) ].every((flag => flag));
        const _vo44 = (input, _path, _exceptionable = true) => [ "string" === typeof input.$ref && RegExp(/^#\/definitions\/parameters\/(.*)/).test(input.$ref) || _report(_exceptionable, {
            path: _path + ".$ref",
            expected: "`#/definitions/parameters/${string}`",
            value: input.$ref
        }), undefined === input.examples || Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true ].every((flag => flag));
        const _vo45 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(SwaggerV2.IJsonSchema.IReference<`#/definitions/responses/${string}`> | SwaggerV2.IOperation.IResponse)",
                value
            })) && _vu11(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(SwaggerV2.IJsonSchema.IReference<`#/definitions/responses/${string}`> | SwaggerV2.IOperation.IResponse)",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo46 = (input, _path, _exceptionable = true) => [ "string" === typeof input.$ref && RegExp(/^#\/definitions\/responses\/(.*)/).test(input.$ref) || _report(_exceptionable, {
            path: _path + ".$ref",
            expected: "`#/definitions/responses/${string}`",
            value: input.$ref
        }), undefined === input.examples || Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | undefined)",
            value: input.examples
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true ].every((flag => flag));
        const _vo47 = (input, _path, _exceptionable = true) => [ "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "string",
            value: input.name
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }) ].every((flag => flag));
        const _vo48 = (input, _path, _exceptionable = true) => [ (null !== input.openapi || _report(_exceptionable, {
            path: _path + ".openapi",
            expected: '("3.0" | `3.0.${number}`)',
            value: input.openapi
        })) && (undefined !== input.openapi || _report(_exceptionable, {
            path: _path + ".openapi",
            expected: '("3.0" | `3.0.${number}`)',
            value: input.openapi
        })) && ("3.0" === input.openapi || "string" === typeof input.openapi && RegExp(/^3\.0\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(input.openapi) || _report(_exceptionable, {
            path: _path + ".openapi",
            expected: '("3.0" | `3.0.${number}`)',
            value: input.openapi
        })), undefined === input.servers || (Array.isArray(input.servers) || _report(_exceptionable, {
            path: _path + ".servers",
            expected: "(Array<OpenApiV3.IServer> | undefined)",
            value: input.servers
        })) && input.servers.map(((elem, _index106) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
            path: _path + ".servers[" + _index106 + "]",
            expected: "OpenApiV3.IServer",
            value: elem
        })) && _vo49(elem, _path + ".servers[" + _index106 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".servers[" + _index106 + "]",
            expected: "OpenApiV3.IServer",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".servers",
            expected: "(Array<OpenApiV3.IServer> | undefined)",
            value: input.servers
        }), undefined === input.info || ("object" === typeof input.info && null !== input.info || _report(_exceptionable, {
            path: _path + ".info",
            expected: "(OpenApiV3.IDocument.IInfo | undefined)",
            value: input.info
        })) && _vo52(input.info, _path + ".info", _exceptionable) || _report(_exceptionable, {
            path: _path + ".info",
            expected: "(OpenApiV3.IDocument.IInfo | undefined)",
            value: input.info
        }), undefined === input.components || ("object" === typeof input.components && null !== input.components && false === Array.isArray(input.components) || _report(_exceptionable, {
            path: _path + ".components",
            expected: "(OpenApiV3.IComponents | undefined)",
            value: input.components
        })) && _vo55(input.components, _path + ".components", _exceptionable) || _report(_exceptionable, {
            path: _path + ".components",
            expected: "(OpenApiV3.IComponents | undefined)",
            value: input.components
        }), undefined === input.paths || ("object" === typeof input.paths && null !== input.paths && false === Array.isArray(input.paths) || _report(_exceptionable, {
            path: _path + ".paths",
            expected: "(Record<string, OpenApiV3.IPath> | undefined)",
            value: input.paths
        })) && _vo97(input.paths, _path + ".paths", _exceptionable) || _report(_exceptionable, {
            path: _path + ".paths",
            expected: "(Record<string, OpenApiV3.IPath> | undefined)",
            value: input.paths
        }), undefined === input.security || (Array.isArray(input.security) || _report(_exceptionable, {
            path: _path + ".security",
            expected: "(Array<Record<string, Array<string>>> | undefined)",
            value: input.security
        })) && input.security.map(((elem, _index107) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
            path: _path + ".security[" + _index107 + "]",
            expected: "Record<string, Array<string>>",
            value: elem
        })) && _vo39(elem, _path + ".security[" + _index107 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".security[" + _index107 + "]",
            expected: "Record<string, Array<string>>",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".security",
            expected: "(Array<Record<string, Array<string>>> | undefined)",
            value: input.security
        }), undefined === input.tags || (Array.isArray(input.tags) || _report(_exceptionable, {
            path: _path + ".tags",
            expected: "(Array<OpenApiV3.IDocument.ITag> | undefined)",
            value: input.tags
        })) && input.tags.map(((elem, _index108) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
            path: _path + ".tags[" + _index108 + "]",
            expected: "OpenApiV3.IDocument.ITag",
            value: elem
        })) && _vo104(elem, _path + ".tags[" + _index108 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".tags[" + _index108 + "]",
            expected: "OpenApiV3.IDocument.ITag",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".tags",
            expected: "(Array<OpenApiV3.IDocument.ITag> | undefined)",
            value: input.tags
        }) ].every((flag => flag));
        const _vo49 = (input, _path, _exceptionable = true) => [ "string" === typeof input.url || _report(_exceptionable, {
            path: _path + ".url",
            expected: "string",
            value: input.url
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.variables || ("object" === typeof input.variables && null !== input.variables && false === Array.isArray(input.variables) || _report(_exceptionable, {
            path: _path + ".variables",
            expected: "(Record<string, OpenApiV3.IServer.IVariable> | undefined)",
            value: input.variables
        })) && _vo50(input.variables, _path + ".variables", _exceptionable) || _report(_exceptionable, {
            path: _path + ".variables",
            expected: "(Record<string, OpenApiV3.IServer.IVariable> | undefined)",
            value: input.variables
        }) ].every((flag => flag));
        const _vo50 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3.IServer.IVariable",
                value
            })) && _vo51(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3.IServer.IVariable",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo51 = (input, _path, _exceptionable = true) => [ "string" === typeof input["default"] || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: "string",
            value: input["default"]
        }), undefined === input["enum"] || (Array.isArray(input["enum"]) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<string> | undefined)",
            value: input["enum"]
        })) && input["enum"].map(((elem, _index109) => "string" === typeof elem || _report(_exceptionable, {
            path: _path + '["enum"][' + _index109 + "]",
            expected: "string",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<string> | undefined)",
            value: input["enum"]
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }) ].every((flag => flag));
        const _vo52 = (input, _path, _exceptionable = true) => [ "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "string",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.termsOfService || "string" === typeof input.termsOfService || _report(_exceptionable, {
            path: _path + ".termsOfService",
            expected: "(string | undefined)",
            value: input.termsOfService
        }), undefined === input.contact || ("object" === typeof input.contact && null !== input.contact && false === Array.isArray(input.contact) || _report(_exceptionable, {
            path: _path + ".contact",
            expected: "(OpenApiV3.IDocument.IContact | undefined)",
            value: input.contact
        })) && _vo53(input.contact, _path + ".contact", _exceptionable) || _report(_exceptionable, {
            path: _path + ".contact",
            expected: "(OpenApiV3.IDocument.IContact | undefined)",
            value: input.contact
        }), undefined === input.license || ("object" === typeof input.license && null !== input.license || _report(_exceptionable, {
            path: _path + ".license",
            expected: "(OpenApiV3.IDocument.ILicense | undefined)",
            value: input.license
        })) && _vo54(input.license, _path + ".license", _exceptionable) || _report(_exceptionable, {
            path: _path + ".license",
            expected: "(OpenApiV3.IDocument.ILicense | undefined)",
            value: input.license
        }), "string" === typeof input.version || _report(_exceptionable, {
            path: _path + ".version",
            expected: "string",
            value: input.version
        }) ].every((flag => flag));
        const _vo53 = (input, _path, _exceptionable = true) => [ undefined === input.name || "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "(string | undefined)",
            value: input.name
        }), undefined === input.url || "string" === typeof input.url || _report(_exceptionable, {
            path: _path + ".url",
            expected: "(string | undefined)",
            value: input.url
        }), undefined === input.email || "string" === typeof input.email || _report(_exceptionable, {
            path: _path + ".email",
            expected: "(string | undefined)",
            value: input.email
        }) ].every((flag => flag));
        const _vo54 = (input, _path, _exceptionable = true) => [ "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "string",
            value: input.name
        }), undefined === input.url || "string" === typeof input.url || _report(_exceptionable, {
            path: _path + ".url",
            expected: "(string | undefined)",
            value: input.url
        }) ].every((flag => flag));
        const _vo55 = (input, _path, _exceptionable = true) => [ undefined === input.schemas || ("object" === typeof input.schemas && null !== input.schemas && false === Array.isArray(input.schemas) || _report(_exceptionable, {
            path: _path + ".schemas",
            expected: "(Record<string, OpenApiV3.IJsonSchema> | undefined)",
            value: input.schemas
        })) && _vo56(input.schemas, _path + ".schemas", _exceptionable) || _report(_exceptionable, {
            path: _path + ".schemas",
            expected: "(Record<string, OpenApiV3.IJsonSchema> | undefined)",
            value: input.schemas
        }), undefined === input.responses || ("object" === typeof input.responses && null !== input.responses && false === Array.isArray(input.responses) || _report(_exceptionable, {
            path: _path + ".responses",
            expected: "(Record<string, OpenApiV3.IOperation.IResponse> | undefined)",
            value: input.responses
        })) && _vo71(input.responses, _path + ".responses", _exceptionable) || _report(_exceptionable, {
            path: _path + ".responses",
            expected: "(Record<string, OpenApiV3.IOperation.IResponse> | undefined)",
            value: input.responses
        }), undefined === input.parameters || ("object" === typeof input.parameters && null !== input.parameters && false === Array.isArray(input.parameters) || _report(_exceptionable, {
            path: _path + ".parameters",
            expected: "(Record<string, OpenApiV3.IOperation.IParameter> | undefined)",
            value: input.parameters
        })) && _vo81(input.parameters, _path + ".parameters", _exceptionable) || _report(_exceptionable, {
            path: _path + ".parameters",
            expected: "(Record<string, OpenApiV3.IOperation.IParameter> | undefined)",
            value: input.parameters
        }), undefined === input.requestBodies || ("object" === typeof input.requestBodies && null !== input.requestBodies && false === Array.isArray(input.requestBodies) || _report(_exceptionable, {
            path: _path + ".requestBodies",
            expected: "(Record<string, OpenApiV3.IOperation.IRequestBody> | undefined)",
            value: input.requestBodies
        })) && _vo83(input.requestBodies, _path + ".requestBodies", _exceptionable) || _report(_exceptionable, {
            path: _path + ".requestBodies",
            expected: "(Record<string, OpenApiV3.IOperation.IRequestBody> | undefined)",
            value: input.requestBodies
        }), undefined === input.securitySchemes || ("object" === typeof input.securitySchemes && null !== input.securitySchemes && false === Array.isArray(input.securitySchemes) || _report(_exceptionable, {
            path: _path + ".securitySchemes",
            expected: "(Record<string, OpenApiV3.ISecurityScheme> | undefined)",
            value: input.securitySchemes
        })) && _vo85(input.securitySchemes, _path + ".securitySchemes", _exceptionable) || _report(_exceptionable, {
            path: _path + ".securitySchemes",
            expected: "(Record<string, OpenApiV3.ISecurityScheme> | undefined)",
            value: input.securitySchemes
        }), undefined === input.headers || ("object" === typeof input.headers && null !== input.headers && false === Array.isArray(input.headers) || _report(_exceptionable, {
            path: _path + ".headers",
            expected: '(Record<string, Omit<OpenApiV3.IOperation.IParameter, "in">> | undefined)',
            value: input.headers
        })) && _vo95(input.headers, _path + ".headers", _exceptionable) || _report(_exceptionable, {
            path: _path + ".headers",
            expected: '(Record<string, Omit<OpenApiV3.IOperation.IParameter, "in">> | undefined)',
            value: input.headers
        }), undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, OpenApiV3.IExample> | undefined)",
            value: input.examples
        })) && _vo96(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, OpenApiV3.IExample> | undefined)",
            value: input.examples
        }) ].every((flag => flag));
        const _vo56 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown)",
                value
            })) && _vu3(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown)",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo57 = (input, _path, _exceptionable = true) => [ undefined === input.nullable || "boolean" === typeof input.nullable || _report(_exceptionable, {
            path: _path + ".nullable",
            expected: "(boolean | undefined)",
            value: input.nullable
        }), null === input["default"] || undefined === input["default"] || "boolean" === typeof input["default"] || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: "(boolean | null | undefined)",
            value: input["default"]
        }), undefined === input["enum"] || (Array.isArray(input["enum"]) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<boolean | null> | undefined)",
            value: input["enum"]
        })) && input["enum"].map(((elem, _index110) => null === elem || "boolean" === typeof elem || _report(_exceptionable, {
            path: _path + '["enum"][' + _index110 + "]",
            expected: "(boolean | null)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<boolean | null> | undefined)",
            value: input["enum"]
        }), "boolean" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"boolean"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) ].every((flag => flag));
        const _vo58 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return true;
        })).every((flag => flag)) ].every((flag => flag));
        const _vo59 = (input, _path, _exceptionable = true) => [ undefined === input.nullable || "boolean" === typeof input.nullable || _report(_exceptionable, {
            path: _path + ".nullable",
            expected: "(boolean | undefined)",
            value: input.nullable
        }), null === input["default"] || undefined === input["default"] || "number" === typeof input["default"] && (Math.floor(input["default"]) === input["default"] && -0x8000000000000000 <= input["default"] && input["default"] <= 0x8000000000000000 || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: 'number & Type<"int64">',
            value: input["default"]
        })) || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: '((number & Type<"int64">) | null | undefined)',
            value: input["default"]
        }), undefined === input["enum"] || (Array.isArray(input["enum"]) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<number | null> | undefined)",
            value: input["enum"]
        })) && input["enum"].map(((elem, _index111) => null === elem || "number" === typeof elem || _report(_exceptionable, {
            path: _path + '["enum"][' + _index111 + "]",
            expected: "(null | number)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<number | null> | undefined)",
            value: input["enum"]
        }), undefined === input.minimum || "number" === typeof input.minimum && (Math.floor(input.minimum) === input.minimum && -0x8000000000000000 <= input.minimum && input.minimum <= 0x8000000000000000 || _report(_exceptionable, {
            path: _path + ".minimum",
            expected: 'number & Type<"int64">',
            value: input.minimum
        })) || _report(_exceptionable, {
            path: _path + ".minimum",
            expected: '((number & Type<"int64">) | undefined)',
            value: input.minimum
        }), undefined === input.maximum || "number" === typeof input.maximum && (Math.floor(input.maximum) === input.maximum && -0x8000000000000000 <= input.maximum && input.maximum <= 0x8000000000000000 || _report(_exceptionable, {
            path: _path + ".maximum",
            expected: 'number & Type<"int64">',
            value: input.maximum
        })) || _report(_exceptionable, {
            path: _path + ".maximum",
            expected: '((number & Type<"int64">) | undefined)',
            value: input.maximum
        }), undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum || _report(_exceptionable, {
            path: _path + ".exclusiveMinimum",
            expected: "(boolean | number | undefined)",
            value: input.exclusiveMinimum
        }), undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum || _report(_exceptionable, {
            path: _path + ".exclusiveMaximum",
            expected: "(boolean | number | undefined)",
            value: input.exclusiveMaximum
        }), undefined === input.multipleOf || "number" === typeof input.multipleOf && (Math.floor(input.multipleOf) === input.multipleOf && 0 <= input.multipleOf && input.multipleOf <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".multipleOf",
            expected: 'number & Type<"uint64">',
            value: input.multipleOf
        })) && (0 < input.multipleOf || _report(_exceptionable, {
            path: _path + ".multipleOf",
            expected: "number & ExclusiveMinimum<0>",
            value: input.multipleOf
        })) || _report(_exceptionable, {
            path: _path + ".multipleOf",
            expected: '((number & Type<"uint64"> & ExclusiveMinimum<0>) | undefined)',
            value: input.multipleOf
        }), "integer" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"integer"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) ].every((flag => flag));
        const _vo60 = (input, _path, _exceptionable = true) => [ undefined === input.nullable || "boolean" === typeof input.nullable || _report(_exceptionable, {
            path: _path + ".nullable",
            expected: "(boolean | undefined)",
            value: input.nullable
        }), null === input["default"] || undefined === input["default"] || "number" === typeof input["default"] || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: "(null | number | undefined)",
            value: input["default"]
        }), undefined === input["enum"] || (Array.isArray(input["enum"]) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<number | null> | undefined)",
            value: input["enum"]
        })) && input["enum"].map(((elem, _index112) => null === elem || "number" === typeof elem || _report(_exceptionable, {
            path: _path + '["enum"][' + _index112 + "]",
            expected: "(null | number)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<number | null> | undefined)",
            value: input["enum"]
        }), undefined === input.minimum || "number" === typeof input.minimum || _report(_exceptionable, {
            path: _path + ".minimum",
            expected: "(number | undefined)",
            value: input.minimum
        }), undefined === input.maximum || "number" === typeof input.maximum || _report(_exceptionable, {
            path: _path + ".maximum",
            expected: "(number | undefined)",
            value: input.maximum
        }), undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum || _report(_exceptionable, {
            path: _path + ".exclusiveMinimum",
            expected: "(boolean | number | undefined)",
            value: input.exclusiveMinimum
        }), undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum || _report(_exceptionable, {
            path: _path + ".exclusiveMaximum",
            expected: "(boolean | number | undefined)",
            value: input.exclusiveMaximum
        }), undefined === input.multipleOf || "number" === typeof input.multipleOf && (0 < input.multipleOf || _report(_exceptionable, {
            path: _path + ".multipleOf",
            expected: "number & ExclusiveMinimum<0>",
            value: input.multipleOf
        })) || _report(_exceptionable, {
            path: _path + ".multipleOf",
            expected: "((number & ExclusiveMinimum<0>) | undefined)",
            value: input.multipleOf
        }), "number" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"number"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) ].every((flag => flag));
        const _vo61 = (input, _path, _exceptionable = true) => [ undefined === input.nullable || "boolean" === typeof input.nullable || _report(_exceptionable, {
            path: _path + ".nullable",
            expected: "(boolean | undefined)",
            value: input.nullable
        }), null === input["default"] || undefined === input["default"] || "string" === typeof input["default"] || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: "(null | string | undefined)",
            value: input["default"]
        }), undefined === input["enum"] || (Array.isArray(input["enum"]) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<string | null> | undefined)",
            value: input["enum"]
        })) && input["enum"].map(((elem, _index113) => null === elem || "string" === typeof elem || _report(_exceptionable, {
            path: _path + '["enum"][' + _index113 + "]",
            expected: "(null | string)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<string | null> | undefined)",
            value: input["enum"]
        }), undefined === input.format || "string" === typeof input.format || _report(_exceptionable, {
            path: _path + ".format",
            expected: "(string | undefined)",
            value: input.format
        }), undefined === input.pattern || "string" === typeof input.pattern || _report(_exceptionable, {
            path: _path + ".pattern",
            expected: "(string | undefined)",
            value: input.pattern
        }), undefined === input.minLength || "number" === typeof input.minLength && (Math.floor(input.minLength) === input.minLength && 0 <= input.minLength && input.minLength <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".minLength",
            expected: 'number & Type<"uint64">',
            value: input.minLength
        })) || _report(_exceptionable, {
            path: _path + ".minLength",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.minLength
        }), undefined === input.maxLength || "number" === typeof input.maxLength && (Math.floor(input.maxLength) === input.maxLength && 0 <= input.maxLength && input.maxLength <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".maxLength",
            expected: 'number & Type<"uint64">',
            value: input.maxLength
        })) || _report(_exceptionable, {
            path: _path + ".maxLength",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.maxLength
        }), "string" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"string"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) ].every((flag => flag));
        const _vo62 = (input, _path, _exceptionable = true) => [ undefined === input.nullable || "boolean" === typeof input.nullable || _report(_exceptionable, {
            path: _path + ".nullable",
            expected: "(boolean | undefined)",
            value: input.nullable
        }), ("object" === typeof input.items && null !== input.items && false === Array.isArray(input.items) || _report(_exceptionable, {
            path: _path + ".items",
            expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown)",
            value: input.items
        })) && _vu3(input.items, _path + ".items", _exceptionable) || _report(_exceptionable, {
            path: _path + ".items",
            expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown)",
            value: input.items
        }), undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems || _report(_exceptionable, {
            path: _path + ".uniqueItems",
            expected: "(boolean | undefined)",
            value: input.uniqueItems
        }), undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".minItems",
            expected: 'number & Type<"uint64">',
            value: input.minItems
        })) || _report(_exceptionable, {
            path: _path + ".minItems",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.minItems
        }), undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".maxItems",
            expected: 'number & Type<"uint64">',
            value: input.maxItems
        })) || _report(_exceptionable, {
            path: _path + ".maxItems",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.maxItems
        }), "array" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"array"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) ].every((flag => flag));
        const _vo63 = (input, _path, _exceptionable = true) => [ undefined === input.nullable || "boolean" === typeof input.nullable || _report(_exceptionable, {
            path: _path + ".nullable",
            expected: "(boolean | undefined)",
            value: input.nullable
        }), undefined === input.properties || ("object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) || _report(_exceptionable, {
            path: _path + ".properties",
            expected: "(Record<string, OpenApiV3.IJsonSchema> | undefined)",
            value: input.properties
        })) && _vo56(input.properties, _path + ".properties", _exceptionable) || _report(_exceptionable, {
            path: _path + ".properties",
            expected: "(Record<string, OpenApiV3.IJsonSchema> | undefined)",
            value: input.properties
        }), undefined === input.required || (Array.isArray(input.required) || _report(_exceptionable, {
            path: _path + ".required",
            expected: "(Array<string> | undefined)",
            value: input.required
        })) && input.required.map(((elem, _index114) => "string" === typeof elem || _report(_exceptionable, {
            path: _path + ".required[" + _index114 + "]",
            expected: "string",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".required",
            expected: "(Array<string> | undefined)",
            value: input.required
        }), (null !== input.additionalProperties || _report(_exceptionable, {
            path: _path + ".additionalProperties",
            expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalProperties
        })) && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || ("object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) || _report(_exceptionable, {
            path: _path + ".additionalProperties",
            expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalProperties
        })) && _vu3(input.additionalProperties, _path + ".additionalProperties", _exceptionable) || _report(_exceptionable, {
            path: _path + ".additionalProperties",
            expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalProperties
        })), undefined === input.maxProperties || "number" === typeof input.maxProperties || _report(_exceptionable, {
            path: _path + ".maxProperties",
            expected: "(number | undefined)",
            value: input.maxProperties
        }), undefined === input.minProperties || "number" === typeof input.minProperties || _report(_exceptionable, {
            path: _path + ".minProperties",
            expected: "(number | undefined)",
            value: input.minProperties
        }), "object" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"object"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) ].every((flag => flag));
        const _vo64 = (input, _path, _exceptionable = true) => [ "string" === typeof input.$ref || _report(_exceptionable, {
            path: _path + ".$ref",
            expected: "string",
            value: input.$ref
        }), (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true ].every((flag => flag));
        const _vo65 = (input, _path, _exceptionable = true) => [ (Array.isArray(input.allOf) || _report(_exceptionable, {
            path: _path + ".allOf",
            expected: "Array<OpenApiV3.IJsonSchema>",
            value: input.allOf
        })) && input.allOf.map(((elem, _index115) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
            path: _path + ".allOf[" + _index115 + "]",
            expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown)",
            value: elem
        })) && _vu3(elem, _path + ".allOf[" + _index115 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".allOf[" + _index115 + "]",
            expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".allOf",
            expected: "Array<OpenApiV3.IJsonSchema>",
            value: input.allOf
        }), (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true ].every((flag => flag));
        const _vo66 = (input, _path, _exceptionable = true) => [ (Array.isArray(input.anyOf) || _report(_exceptionable, {
            path: _path + ".anyOf",
            expected: "Array<OpenApiV3.IJsonSchema>",
            value: input.anyOf
        })) && input.anyOf.map(((elem, _index116) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
            path: _path + ".anyOf[" + _index116 + "]",
            expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown)",
            value: elem
        })) && _vu3(elem, _path + ".anyOf[" + _index116 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".anyOf[" + _index116 + "]",
            expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".anyOf",
            expected: "Array<OpenApiV3.IJsonSchema>",
            value: input.anyOf
        }), (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true ].every((flag => flag));
        const _vo67 = (input, _path, _exceptionable = true) => [ (Array.isArray(input.oneOf) || _report(_exceptionable, {
            path: _path + ".oneOf",
            expected: "Array<OpenApiV3.IJsonSchema>",
            value: input.oneOf
        })) && input.oneOf.map(((elem, _index117) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
            path: _path + ".oneOf[" + _index117 + "]",
            expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown)",
            value: elem
        })) && _vu3(elem, _path + ".oneOf[" + _index117 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".oneOf[" + _index117 + "]",
            expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".oneOf",
            expected: "Array<OpenApiV3.IJsonSchema>",
            value: input.oneOf
        }), undefined === input.discriminator || ("object" === typeof input.discriminator && null !== input.discriminator || _report(_exceptionable, {
            path: _path + ".discriminator",
            expected: "(OpenApiV3.IJsonSchema.IOneOf.IDiscriminator | undefined)",
            value: input.discriminator
        })) && _vo68(input.discriminator, _path + ".discriminator", _exceptionable) || _report(_exceptionable, {
            path: _path + ".discriminator",
            expected: "(OpenApiV3.IJsonSchema.IOneOf.IDiscriminator | undefined)",
            value: input.discriminator
        }), (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true ].every((flag => flag));
        const _vo68 = (input, _path, _exceptionable = true) => [ "string" === typeof input.propertyName || _report(_exceptionable, {
            path: _path + ".propertyName",
            expected: "string",
            value: input.propertyName
        }), undefined === input.mapping || ("object" === typeof input.mapping && null !== input.mapping && false === Array.isArray(input.mapping) || _report(_exceptionable, {
            path: _path + ".mapping",
            expected: "(Record<string, string> | undefined)",
            value: input.mapping
        })) && _vo35(input.mapping, _path + ".mapping", _exceptionable) || _report(_exceptionable, {
            path: _path + ".mapping",
            expected: "(Record<string, string> | undefined)",
            value: input.mapping
        }) ].every((flag => flag));
        const _vo69 = (input, _path, _exceptionable = true) => [ null === input["default"] || undefined === input["default"] || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: "(null | undefined)",
            value: input["default"]
        }), "null" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"null"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) ].every((flag => flag));
        const _vo70 = (input, _path, _exceptionable = true) => [ true, (null !== input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: "undefined",
            value: input.type
        })) && (undefined === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: "undefined",
            value: input.type
        })), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) ].every((flag => flag));
        const _vo71 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3.IOperation.IResponse",
                value
            })) && _vo72(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3.IOperation.IResponse",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo72 = (input, _path, _exceptionable = true) => [ undefined === input.content || ("object" === typeof input.content && null !== input.content && false === Array.isArray(input.content) || _report(_exceptionable, {
            path: _path + ".content",
            expected: "(Record<string, OpenApiV3.IOperation.IMediaType> | undefined)",
            value: input.content
        })) && _vo73(input.content, _path + ".content", _exceptionable) || _report(_exceptionable, {
            path: _path + ".content",
            expected: "(Record<string, OpenApiV3.IOperation.IMediaType> | undefined)",
            value: input.content
        }), undefined === input.headers || ("object" === typeof input.headers && null !== input.headers && false === Array.isArray(input.headers) || _report(_exceptionable, {
            path: _path + ".headers",
            expected: '(Record<string, Omit<IParameter, "in"> | IReference<`#/components/headers/${string}`>> | undefined)',
            value: input.headers
        })) && _vo78(input.headers, _path + ".headers", _exceptionable) || _report(_exceptionable, {
            path: _path + ".headers",
            expected: '(Record<string, Omit<IParameter, "in"> | IReference<`#/components/headers/${string}`>> | undefined)',
            value: input.headers
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }) ].every((flag => flag));
        const _vo73 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3.IOperation.IMediaType",
                value
            })) && _vo74(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3.IOperation.IMediaType",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo74 = (input, _path, _exceptionable = true) => [ undefined === input.schema || ("object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) || _report(_exceptionable, {
            path: _path + ".schema",
            expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown | undefined)",
            value: input.schema
        })) && _vu3(input.schema, _path + ".schema", _exceptionable) || _report(_exceptionable, {
            path: _path + ".schema",
            expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown | undefined)",
            value: input.schema
        }), true, undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, IExample | IReference<`#/components/examples/${string}`>> | undefined)",
            value: input.examples
        })) && _vo75(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, IExample | IReference<`#/components/examples/${string}`>> | undefined)",
            value: input.examples
        }) ].every((flag => flag));
        const _vo75 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApiV3.IExample | OpenApiV3.IJsonSchema.IReference<`#/components/examples/${string}`>)",
                value
            })) && _vu12(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApiV3.IExample | OpenApiV3.IJsonSchema.IReference<`#/components/examples/${string}`>)",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo76 = (input, _path, _exceptionable = true) => [ undefined === input.summary || "string" === typeof input.summary || _report(_exceptionable, {
            path: _path + ".summary",
            expected: "(string | undefined)",
            value: input.summary
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), true, undefined === input.externalValue || "string" === typeof input.externalValue || _report(_exceptionable, {
            path: _path + ".externalValue",
            expected: "(string | undefined)",
            value: input.externalValue
        }) ].every((flag => flag));
        const _vo77 = (input, _path, _exceptionable = true) => [ "string" === typeof input.$ref && RegExp(/^#\/components\/examples\/(.*)/).test(input.$ref) || _report(_exceptionable, {
            path: _path + ".$ref",
            expected: "`#/components/examples/${string}`",
            value: input.$ref
        }), (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true ].every((flag => flag));
        const _vo78 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: '(Omit<OpenApiV3.IOperation.IParameter, "in"> | OpenApiV3.IJsonSchema.IReference<`#/components/headers/${string}`>)',
                value
            })) && _vu13(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: '(Omit<OpenApiV3.IOperation.IParameter, "in"> | OpenApiV3.IJsonSchema.IReference<`#/components/headers/${string}`>)',
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo79 = (input, _path, _exceptionable = true) => [ undefined === input.name || "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "(string | undefined)",
            value: input.name
        }), undefined === input.required || "boolean" === typeof input.required || _report(_exceptionable, {
            path: _path + ".required",
            expected: "(boolean | undefined)",
            value: input.required
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), true, undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, IExample | IReference<`#/components/examples/${string}`>> | undefined)",
            value: input.examples
        })) && _vo75(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, IExample | IReference<`#/components/examples/${string}`>> | undefined)",
            value: input.examples
        }), ("object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) || _report(_exceptionable, {
            path: _path + ".schema",
            expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown)",
            value: input.schema
        })) && _vu3(input.schema, _path + ".schema", _exceptionable) || _report(_exceptionable, {
            path: _path + ".schema",
            expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown)",
            value: input.schema
        }) ].every((flag => flag));
        const _vo80 = (input, _path, _exceptionable = true) => [ "string" === typeof input.$ref && RegExp(/^#\/components\/headers\/(.*)/).test(input.$ref) || _report(_exceptionable, {
            path: _path + ".$ref",
            expected: "`#/components/headers/${string}`",
            value: input.$ref
        }), (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true ].every((flag => flag));
        const _vo81 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3.IOperation.IParameter",
                value
            })) && _vo82(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3.IOperation.IParameter",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo82 = (input, _path, _exceptionable = true) => [ undefined === input.name || "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "(string | undefined)",
            value: input.name
        }), "path" === input["in"] || "query" === input["in"] || "header" === input["in"] || "cookie" === input["in"] || _report(_exceptionable, {
            path: _path + '["in"]',
            expected: '("cookie" | "header" | "path" | "query")',
            value: input["in"]
        }), ("object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) || _report(_exceptionable, {
            path: _path + ".schema",
            expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown)",
            value: input.schema
        })) && _vu3(input.schema, _path + ".schema", _exceptionable) || _report(_exceptionable, {
            path: _path + ".schema",
            expected: "(OpenApiV3.IJsonSchema.IAllOf | OpenApiV3.IJsonSchema.IAnyOf | OpenApiV3.IJsonSchema.IArray | OpenApiV3.IJsonSchema.IBoolean | OpenApiV3.IJsonSchema.IInteger | OpenApiV3.IJsonSchema.INullOnly | OpenApiV3.IJsonSchema.INumber | OpenApiV3.IJsonSchema.IObject | OpenApiV3.IJsonSchema.IOneOf | OpenApiV3.IJsonSchema.IReference<string> | OpenApiV3.IJsonSchema.IString | OpenApiV3.IJsonSchema.IUnknown)",
            value: input.schema
        }), undefined === input.required || "boolean" === typeof input.required || _report(_exceptionable, {
            path: _path + ".required",
            expected: "(boolean | undefined)",
            value: input.required
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), true, undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, IExample | IReference<`#/components/examples/${string}`>> | undefined)",
            value: input.examples
        })) && _vo75(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, IExample | IReference<`#/components/examples/${string}`>> | undefined)",
            value: input.examples
        }) ].every((flag => flag));
        const _vo83 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3.IOperation.IRequestBody",
                value
            })) && _vo84(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3.IOperation.IRequestBody",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo84 = (input, _path, _exceptionable = true) => [ undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.required || "boolean" === typeof input.required || _report(_exceptionable, {
            path: _path + ".required",
            expected: "(boolean | undefined)",
            value: input.required
        }), undefined === input.content || ("object" === typeof input.content && null !== input.content && false === Array.isArray(input.content) || _report(_exceptionable, {
            path: _path + ".content",
            expected: "(Record<string, OpenApiV3.IOperation.IMediaType> | undefined)",
            value: input.content
        })) && _vo73(input.content, _path + ".content", _exceptionable) || _report(_exceptionable, {
            path: _path + ".content",
            expected: "(Record<string, OpenApiV3.IOperation.IMediaType> | undefined)",
            value: input.content
        }) ].every((flag => flag));
        const _vo85 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApiV3.ISecurityScheme.IApiKey | OpenApiV3.ISecurityScheme.IHttpBasic | OpenApiV3.ISecurityScheme.IHttpBearer | OpenApiV3.ISecurityScheme.IOAuth2 | OpenApiV3.ISecurityScheme.IOpenId)",
                value
            })) && _vu14(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApiV3.ISecurityScheme.IApiKey | OpenApiV3.ISecurityScheme.IHttpBasic | OpenApiV3.ISecurityScheme.IHttpBearer | OpenApiV3.ISecurityScheme.IOAuth2 | OpenApiV3.ISecurityScheme.IOpenId)",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo86 = (input, _path, _exceptionable = true) => [ "apiKey" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"apiKey"',
            value: input.type
        }), undefined === input["in"] || "query" === input["in"] || "header" === input["in"] || "cookie" === input["in"] || _report(_exceptionable, {
            path: _path + '["in"]',
            expected: '("cookie" | "header" | "query" | undefined)',
            value: input["in"]
        }), undefined === input.name || "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "(string | undefined)",
            value: input.name
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }) ].every((flag => flag));
        const _vo87 = (input, _path, _exceptionable = true) => [ "http" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"http"',
            value: input.type
        }), "basic" === input.scheme || _report(_exceptionable, {
            path: _path + ".scheme",
            expected: '"basic"',
            value: input.scheme
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }) ].every((flag => flag));
        const _vo88 = (input, _path, _exceptionable = true) => [ "http" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"http"',
            value: input.type
        }), "bearer" === input.scheme || _report(_exceptionable, {
            path: _path + ".scheme",
            expected: '"bearer"',
            value: input.scheme
        }), undefined === input.bearerFormat || "string" === typeof input.bearerFormat || _report(_exceptionable, {
            path: _path + ".bearerFormat",
            expected: "(string | undefined)",
            value: input.bearerFormat
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }) ].every((flag => flag));
        const _vo89 = (input, _path, _exceptionable = true) => [ "oauth2" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"oauth2"',
            value: input.type
        }), ("object" === typeof input.flows && null !== input.flows && false === Array.isArray(input.flows) || _report(_exceptionable, {
            path: _path + ".flows",
            expected: "OpenApiV3.ISecurityScheme.IOAuth2.IFlowSet",
            value: input.flows
        })) && _vo90(input.flows, _path + ".flows", _exceptionable) || _report(_exceptionable, {
            path: _path + ".flows",
            expected: "OpenApiV3.ISecurityScheme.IOAuth2.IFlowSet",
            value: input.flows
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }) ].every((flag => flag));
        const _vo90 = (input, _path, _exceptionable = true) => [ undefined === input.authorizationCode || ("object" === typeof input.authorizationCode && null !== input.authorizationCode && false === Array.isArray(input.authorizationCode) || _report(_exceptionable, {
            path: _path + ".authorizationCode",
            expected: "(OpenApiV3.ISecurityScheme.IOAuth2.IFlow | undefined)",
            value: input.authorizationCode
        })) && _vo91(input.authorizationCode, _path + ".authorizationCode", _exceptionable) || _report(_exceptionable, {
            path: _path + ".authorizationCode",
            expected: "(OpenApiV3.ISecurityScheme.IOAuth2.IFlow | undefined)",
            value: input.authorizationCode
        }), undefined === input.implicit || ("object" === typeof input.implicit && null !== input.implicit && false === Array.isArray(input.implicit) || _report(_exceptionable, {
            path: _path + ".implicit",
            expected: '(Omit<OpenApiV3.ISecurityScheme.IOAuth2.IFlow, "tokenUrl"> | undefined)',
            value: input.implicit
        })) && _vo92(input.implicit, _path + ".implicit", _exceptionable) || _report(_exceptionable, {
            path: _path + ".implicit",
            expected: '(Omit<OpenApiV3.ISecurityScheme.IOAuth2.IFlow, "tokenUrl"> | undefined)',
            value: input.implicit
        }), undefined === input.password || ("object" === typeof input.password && null !== input.password && false === Array.isArray(input.password) || _report(_exceptionable, {
            path: _path + ".password",
            expected: '(Omit<OpenApiV3.ISecurityScheme.IOAuth2.IFlow, "authorizationUrl"> | undefined)',
            value: input.password
        })) && _vo93(input.password, _path + ".password", _exceptionable) || _report(_exceptionable, {
            path: _path + ".password",
            expected: '(Omit<OpenApiV3.ISecurityScheme.IOAuth2.IFlow, "authorizationUrl"> | undefined)',
            value: input.password
        }), undefined === input.clientCredentials || ("object" === typeof input.clientCredentials && null !== input.clientCredentials && false === Array.isArray(input.clientCredentials) || _report(_exceptionable, {
            path: _path + ".clientCredentials",
            expected: '(Omit<OpenApiV3.ISecurityScheme.IOAuth2.IFlow, "authorizationUrl"> | undefined)',
            value: input.clientCredentials
        })) && _vo93(input.clientCredentials, _path + ".clientCredentials", _exceptionable) || _report(_exceptionable, {
            path: _path + ".clientCredentials",
            expected: '(Omit<OpenApiV3.ISecurityScheme.IOAuth2.IFlow, "authorizationUrl"> | undefined)',
            value: input.clientCredentials
        }) ].every((flag => flag));
        const _vo91 = (input, _path, _exceptionable = true) => [ undefined === input.authorizationUrl || "string" === typeof input.authorizationUrl || _report(_exceptionable, {
            path: _path + ".authorizationUrl",
            expected: "(string | undefined)",
            value: input.authorizationUrl
        }), undefined === input.tokenUrl || "string" === typeof input.tokenUrl || _report(_exceptionable, {
            path: _path + ".tokenUrl",
            expected: "(string | undefined)",
            value: input.tokenUrl
        }), undefined === input.refreshUrl || "string" === typeof input.refreshUrl || _report(_exceptionable, {
            path: _path + ".refreshUrl",
            expected: "(string | undefined)",
            value: input.refreshUrl
        }), undefined === input.scopes || ("object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) || _report(_exceptionable, {
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        })) && _vo35(input.scopes, _path + ".scopes", _exceptionable) || _report(_exceptionable, {
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        }) ].every((flag => flag));
        const _vo92 = (input, _path, _exceptionable = true) => [ undefined === input.authorizationUrl || "string" === typeof input.authorizationUrl || _report(_exceptionable, {
            path: _path + ".authorizationUrl",
            expected: "(string | undefined)",
            value: input.authorizationUrl
        }), undefined === input.refreshUrl || "string" === typeof input.refreshUrl || _report(_exceptionable, {
            path: _path + ".refreshUrl",
            expected: "(string | undefined)",
            value: input.refreshUrl
        }), undefined === input.scopes || ("object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) || _report(_exceptionable, {
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        })) && _vo35(input.scopes, _path + ".scopes", _exceptionable) || _report(_exceptionable, {
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        }) ].every((flag => flag));
        const _vo93 = (input, _path, _exceptionable = true) => [ undefined === input.tokenUrl || "string" === typeof input.tokenUrl || _report(_exceptionable, {
            path: _path + ".tokenUrl",
            expected: "(string | undefined)",
            value: input.tokenUrl
        }), undefined === input.refreshUrl || "string" === typeof input.refreshUrl || _report(_exceptionable, {
            path: _path + ".refreshUrl",
            expected: "(string | undefined)",
            value: input.refreshUrl
        }), undefined === input.scopes || ("object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) || _report(_exceptionable, {
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        })) && _vo35(input.scopes, _path + ".scopes", _exceptionable) || _report(_exceptionable, {
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        }) ].every((flag => flag));
        const _vo94 = (input, _path, _exceptionable = true) => [ "openIdConnect" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"openIdConnect"',
            value: input.type
        }), "string" === typeof input.openIdConnectUrl || _report(_exceptionable, {
            path: _path + ".openIdConnectUrl",
            expected: "string",
            value: input.openIdConnectUrl
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }) ].every((flag => flag));
        const _vo95 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: 'Omit<OpenApiV3.IOperation.IParameter, "in">',
                value
            })) && _vo79(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: 'Omit<OpenApiV3.IOperation.IParameter, "in">',
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo96 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3.IExample",
                value
            })) && _vo76(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3.IExample",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo97 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3.IPath",
                value
            })) && _vo98(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3.IPath",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo98 = (input, _path, _exceptionable = true) => [ undefined === input.parameters || (Array.isArray(input.parameters) || _report(_exceptionable, {
            path: _path + ".parameters",
            expected: "(Array<IParameter | IReference<`#/components/headers/${string}`> | IReference<`#/components/parameters/${string}`>> | undefined)",
            value: input.parameters
        })) && input.parameters.map(((elem, _index118) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
            path: _path + ".parameters[" + _index118 + "]",
            expected: "(OpenApiV3.IJsonSchema.IReference<`#/components/headers/${string}`> | OpenApiV3.IJsonSchema.IReference<`#/components/parameters/${string}`> | OpenApiV3.IOperation.IParameter)",
            value: elem
        })) && _vu4(elem, _path + ".parameters[" + _index118 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".parameters[" + _index118 + "]",
            expected: "(OpenApiV3.IJsonSchema.IReference<`#/components/headers/${string}`> | OpenApiV3.IJsonSchema.IReference<`#/components/parameters/${string}`> | OpenApiV3.IOperation.IParameter)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".parameters",
            expected: "(Array<IParameter | IReference<`#/components/headers/${string}`> | IReference<`#/components/parameters/${string}`>> | undefined)",
            value: input.parameters
        }), undefined === input.servers || (Array.isArray(input.servers) || _report(_exceptionable, {
            path: _path + ".servers",
            expected: "(Array<OpenApiV3.IServer> | undefined)",
            value: input.servers
        })) && input.servers.map(((elem, _index119) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
            path: _path + ".servers[" + _index119 + "]",
            expected: "OpenApiV3.IServer",
            value: elem
        })) && _vo49(elem, _path + ".servers[" + _index119 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".servers[" + _index119 + "]",
            expected: "OpenApiV3.IServer",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".servers",
            expected: "(Array<OpenApiV3.IServer> | undefined)",
            value: input.servers
        }), undefined === input.summary || "string" === typeof input.summary || _report(_exceptionable, {
            path: _path + ".summary",
            expected: "(string | undefined)",
            value: input.summary
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.options || ("object" === typeof input.options && null !== input.options && false === Array.isArray(input.options) || _report(_exceptionable, {
            path: _path + ".options",
            expected: "(OpenApiV3.IOperation | undefined)",
            value: input.options
        })) && _vo100(input.options, _path + ".options", _exceptionable) || _report(_exceptionable, {
            path: _path + ".options",
            expected: "(OpenApiV3.IOperation | undefined)",
            value: input.options
        }), undefined === input.get || ("object" === typeof input.get && null !== input.get && false === Array.isArray(input.get) || _report(_exceptionable, {
            path: _path + ".get",
            expected: "(OpenApiV3.IOperation | undefined)",
            value: input.get
        })) && _vo100(input.get, _path + ".get", _exceptionable) || _report(_exceptionable, {
            path: _path + ".get",
            expected: "(OpenApiV3.IOperation | undefined)",
            value: input.get
        }), undefined === input.post || ("object" === typeof input.post && null !== input.post && false === Array.isArray(input.post) || _report(_exceptionable, {
            path: _path + ".post",
            expected: "(OpenApiV3.IOperation | undefined)",
            value: input.post
        })) && _vo100(input.post, _path + ".post", _exceptionable) || _report(_exceptionable, {
            path: _path + ".post",
            expected: "(OpenApiV3.IOperation | undefined)",
            value: input.post
        }), undefined === input.patch || ("object" === typeof input.patch && null !== input.patch && false === Array.isArray(input.patch) || _report(_exceptionable, {
            path: _path + ".patch",
            expected: "(OpenApiV3.IOperation | undefined)",
            value: input.patch
        })) && _vo100(input.patch, _path + ".patch", _exceptionable) || _report(_exceptionable, {
            path: _path + ".patch",
            expected: "(OpenApiV3.IOperation | undefined)",
            value: input.patch
        }), undefined === input.put || ("object" === typeof input.put && null !== input.put && false === Array.isArray(input.put) || _report(_exceptionable, {
            path: _path + ".put",
            expected: "(OpenApiV3.IOperation | undefined)",
            value: input.put
        })) && _vo100(input.put, _path + ".put", _exceptionable) || _report(_exceptionable, {
            path: _path + ".put",
            expected: "(OpenApiV3.IOperation | undefined)",
            value: input.put
        }), undefined === input["delete"] || ("object" === typeof input["delete"] && null !== input["delete"] && false === Array.isArray(input["delete"]) || _report(_exceptionable, {
            path: _path + '["delete"]',
            expected: "(OpenApiV3.IOperation | undefined)",
            value: input["delete"]
        })) && _vo100(input["delete"], _path + '["delete"]', _exceptionable) || _report(_exceptionable, {
            path: _path + '["delete"]',
            expected: "(OpenApiV3.IOperation | undefined)",
            value: input["delete"]
        }), undefined === input.head || ("object" === typeof input.head && null !== input.head && false === Array.isArray(input.head) || _report(_exceptionable, {
            path: _path + ".head",
            expected: "(OpenApiV3.IOperation | undefined)",
            value: input.head
        })) && _vo100(input.head, _path + ".head", _exceptionable) || _report(_exceptionable, {
            path: _path + ".head",
            expected: "(OpenApiV3.IOperation | undefined)",
            value: input.head
        }), undefined === input.trace || ("object" === typeof input.trace && null !== input.trace && false === Array.isArray(input.trace) || _report(_exceptionable, {
            path: _path + ".trace",
            expected: "(OpenApiV3.IOperation | undefined)",
            value: input.trace
        })) && _vo100(input.trace, _path + ".trace", _exceptionable) || _report(_exceptionable, {
            path: _path + ".trace",
            expected: "(OpenApiV3.IOperation | undefined)",
            value: input.trace
        }) ].every((flag => flag));
        const _vo99 = (input, _path, _exceptionable = true) => [ "string" === typeof input.$ref && RegExp(/^#\/components\/parameters\/(.*)/).test(input.$ref) || _report(_exceptionable, {
            path: _path + ".$ref",
            expected: "`#/components/parameters/${string}`",
            value: input.$ref
        }), (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true ].every((flag => flag));
        const _vo100 = (input, _path, _exceptionable = true) => [ undefined === input.operationId || "string" === typeof input.operationId || _report(_exceptionable, {
            path: _path + ".operationId",
            expected: "(string | undefined)",
            value: input.operationId
        }), undefined === input.parameters || (Array.isArray(input.parameters) || _report(_exceptionable, {
            path: _path + ".parameters",
            expected: "(Array<IParameter | IReference<`#/components/headers/${string}`> | IReference<`#/components/parameters/${string}`>> | undefined)",
            value: input.parameters
        })) && input.parameters.map(((elem, _index120) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
            path: _path + ".parameters[" + _index120 + "]",
            expected: "(OpenApiV3.IJsonSchema.IReference<`#/components/headers/${string}`> | OpenApiV3.IJsonSchema.IReference<`#/components/parameters/${string}`> | OpenApiV3.IOperation.IParameter)",
            value: elem
        })) && _vu4(elem, _path + ".parameters[" + _index120 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".parameters[" + _index120 + "]",
            expected: "(OpenApiV3.IJsonSchema.IReference<`#/components/headers/${string}`> | OpenApiV3.IJsonSchema.IReference<`#/components/parameters/${string}`> | OpenApiV3.IOperation.IParameter)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".parameters",
            expected: "(Array<IParameter | IReference<`#/components/headers/${string}`> | IReference<`#/components/parameters/${string}`>> | undefined)",
            value: input.parameters
        }), undefined === input.requestBody || ("object" === typeof input.requestBody && null !== input.requestBody && false === Array.isArray(input.requestBody) || _report(_exceptionable, {
            path: _path + ".requestBody",
            expected: "(OpenApiV3.IJsonSchema.IReference<`#/components/requestBodies/${string}`> | OpenApiV3.IOperation.IRequestBody | undefined)",
            value: input.requestBody
        })) && _vu15(input.requestBody, _path + ".requestBody", _exceptionable) || _report(_exceptionable, {
            path: _path + ".requestBody",
            expected: "(OpenApiV3.IJsonSchema.IReference<`#/components/requestBodies/${string}`> | OpenApiV3.IOperation.IRequestBody | undefined)",
            value: input.requestBody
        }), undefined === input.responses || ("object" === typeof input.responses && null !== input.responses && false === Array.isArray(input.responses) || _report(_exceptionable, {
            path: _path + ".responses",
            expected: "(Record<string, IResponse | IReference<`#/components/responses/${string}`>> | undefined)",
            value: input.responses
        })) && _vo102(input.responses, _path + ".responses", _exceptionable) || _report(_exceptionable, {
            path: _path + ".responses",
            expected: "(Record<string, IResponse | IReference<`#/components/responses/${string}`>> | undefined)",
            value: input.responses
        }), undefined === input.servers || (Array.isArray(input.servers) || _report(_exceptionable, {
            path: _path + ".servers",
            expected: "(Array<OpenApiV3.IServer> | undefined)",
            value: input.servers
        })) && input.servers.map(((elem, _index121) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
            path: _path + ".servers[" + _index121 + "]",
            expected: "OpenApiV3.IServer",
            value: elem
        })) && _vo49(elem, _path + ".servers[" + _index121 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".servers[" + _index121 + "]",
            expected: "OpenApiV3.IServer",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".servers",
            expected: "(Array<OpenApiV3.IServer> | undefined)",
            value: input.servers
        }), undefined === input.summary || "string" === typeof input.summary || _report(_exceptionable, {
            path: _path + ".summary",
            expected: "(string | undefined)",
            value: input.summary
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.security || (Array.isArray(input.security) || _report(_exceptionable, {
            path: _path + ".security",
            expected: "(Array<Record<string, Array<string>>> | undefined)",
            value: input.security
        })) && input.security.map(((elem, _index122) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
            path: _path + ".security[" + _index122 + "]",
            expected: "Record<string, Array<string>>",
            value: elem
        })) && _vo39(elem, _path + ".security[" + _index122 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".security[" + _index122 + "]",
            expected: "Record<string, Array<string>>",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".security",
            expected: "(Array<Record<string, Array<string>>> | undefined)",
            value: input.security
        }), undefined === input.tags || (Array.isArray(input.tags) || _report(_exceptionable, {
            path: _path + ".tags",
            expected: "(Array<string> | undefined)",
            value: input.tags
        })) && input.tags.map(((elem, _index123) => "string" === typeof elem || _report(_exceptionable, {
            path: _path + ".tags[" + _index123 + "]",
            expected: "string",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".tags",
            expected: "(Array<string> | undefined)",
            value: input.tags
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }) ].every((flag => flag));
        const _vo101 = (input, _path, _exceptionable = true) => [ "string" === typeof input.$ref && RegExp(/^#\/components\/requestBodies\/(.*)/).test(input.$ref) || _report(_exceptionable, {
            path: _path + ".$ref",
            expected: "`#/components/requestBodies/${string}`",
            value: input.$ref
        }), (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true ].every((flag => flag));
        const _vo102 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApiV3.IJsonSchema.IReference<`#/components/responses/${string}`> | OpenApiV3.IOperation.IResponse)",
                value
            })) && _vu16(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApiV3.IJsonSchema.IReference<`#/components/responses/${string}`> | OpenApiV3.IOperation.IResponse)",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo103 = (input, _path, _exceptionable = true) => [ "string" === typeof input.$ref && RegExp(/^#\/components\/responses\/(.*)/).test(input.$ref) || _report(_exceptionable, {
            path: _path + ".$ref",
            expected: "`#/components/responses/${string}`",
            value: input.$ref
        }), (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true ].every((flag => flag));
        const _vo104 = (input, _path, _exceptionable = true) => [ "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "string",
            value: input.name
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }) ].every((flag => flag));
        const _vo105 = (input, _path, _exceptionable = true) => [ "string" === typeof input.openapi && RegExp(/^3\.1\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(input.openapi) || _report(_exceptionable, {
            path: _path + ".openapi",
            expected: "`3.1.${number}`",
            value: input.openapi
        }), undefined === input.servers || (Array.isArray(input.servers) || _report(_exceptionable, {
            path: _path + ".servers",
            expected: "(Array<OpenApiV3_1.IServer> | undefined)",
            value: input.servers
        })) && input.servers.map(((elem, _index124) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
            path: _path + ".servers[" + _index124 + "]",
            expected: "OpenApiV3_1.IServer",
            value: elem
        })) && _vo106(elem, _path + ".servers[" + _index124 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".servers[" + _index124 + "]",
            expected: "OpenApiV3_1.IServer",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".servers",
            expected: "(Array<OpenApiV3_1.IServer> | undefined)",
            value: input.servers
        }), undefined === input.info || ("object" === typeof input.info && null !== input.info || _report(_exceptionable, {
            path: _path + ".info",
            expected: "(OpenApiV3_1.IDocument.IInfo | undefined)",
            value: input.info
        })) && _vo109(input.info, _path + ".info", _exceptionable) || _report(_exceptionable, {
            path: _path + ".info",
            expected: "(OpenApiV3_1.IDocument.IInfo | undefined)",
            value: input.info
        }), undefined === input.components || ("object" === typeof input.components && null !== input.components && false === Array.isArray(input.components) || _report(_exceptionable, {
            path: _path + ".components",
            expected: "(OpenApiV3_1.IComponents | undefined)",
            value: input.components
        })) && _vo112(input.components, _path + ".components", _exceptionable) || _report(_exceptionable, {
            path: _path + ".components",
            expected: "(OpenApiV3_1.IComponents | undefined)",
            value: input.components
        }), undefined === input.paths || ("object" === typeof input.paths && null !== input.paths && false === Array.isArray(input.paths) || _report(_exceptionable, {
            path: _path + ".paths",
            expected: "(Record<string, OpenApiV3_1.IPath> | undefined)",
            value: input.paths
        })) && _vo130(input.paths, _path + ".paths", _exceptionable) || _report(_exceptionable, {
            path: _path + ".paths",
            expected: "(Record<string, OpenApiV3_1.IPath> | undefined)",
            value: input.paths
        }), undefined === input.webhooks || ("object" === typeof input.webhooks && null !== input.webhooks && false === Array.isArray(input.webhooks) || _report(_exceptionable, {
            path: _path + ".webhooks",
            expected: "(Record<string, IPath | IReference<`#/components/pathItems/${string}`>> | undefined)",
            value: input.webhooks
        })) && _vo163(input.webhooks, _path + ".webhooks", _exceptionable) || _report(_exceptionable, {
            path: _path + ".webhooks",
            expected: "(Record<string, IPath | IReference<`#/components/pathItems/${string}`>> | undefined)",
            value: input.webhooks
        }), undefined === input.security || (Array.isArray(input.security) || _report(_exceptionable, {
            path: _path + ".security",
            expected: "(Array<Record<string, Array<string>>> | undefined)",
            value: input.security
        })) && input.security.map(((elem, _index125) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
            path: _path + ".security[" + _index125 + "]",
            expected: "Record<string, Array<string>>",
            value: elem
        })) && _vo39(elem, _path + ".security[" + _index125 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".security[" + _index125 + "]",
            expected: "Record<string, Array<string>>",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".security",
            expected: "(Array<Record<string, Array<string>>> | undefined)",
            value: input.security
        }), undefined === input.tags || (Array.isArray(input.tags) || _report(_exceptionable, {
            path: _path + ".tags",
            expected: "(Array<OpenApiV3_1.IDocument.ITag> | undefined)",
            value: input.tags
        })) && input.tags.map(((elem, _index126) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
            path: _path + ".tags[" + _index126 + "]",
            expected: "OpenApiV3_1.IDocument.ITag",
            value: elem
        })) && _vo165(elem, _path + ".tags[" + _index126 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".tags[" + _index126 + "]",
            expected: "OpenApiV3_1.IDocument.ITag",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".tags",
            expected: "(Array<OpenApiV3_1.IDocument.ITag> | undefined)",
            value: input.tags
        }) ].every((flag => flag));
        const _vo106 = (input, _path, _exceptionable = true) => [ "string" === typeof input.url || _report(_exceptionable, {
            path: _path + ".url",
            expected: "string",
            value: input.url
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.variables || ("object" === typeof input.variables && null !== input.variables && false === Array.isArray(input.variables) || _report(_exceptionable, {
            path: _path + ".variables",
            expected: "(Record<string, OpenApiV3_1.IServer.IVariable> | undefined)",
            value: input.variables
        })) && _vo107(input.variables, _path + ".variables", _exceptionable) || _report(_exceptionable, {
            path: _path + ".variables",
            expected: "(Record<string, OpenApiV3_1.IServer.IVariable> | undefined)",
            value: input.variables
        }) ].every((flag => flag));
        const _vo107 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3_1.IServer.IVariable",
                value
            })) && _vo108(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3_1.IServer.IVariable",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo108 = (input, _path, _exceptionable = true) => [ "string" === typeof input["default"] || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: "string",
            value: input["default"]
        }), undefined === input["enum"] || (Array.isArray(input["enum"]) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "((Array<string> & MinItems<1>) | undefined)",
            value: input["enum"]
        })) && ((1 <= input["enum"].length || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "Array<> & MinItems<1>",
            value: input["enum"]
        })) && input["enum"].map(((elem, _index127) => "string" === typeof elem || _report(_exceptionable, {
            path: _path + '["enum"][' + _index127 + "]",
            expected: "string",
            value: elem
        }))).every((flag => flag))) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "((Array<string> & MinItems<1>) | undefined)",
            value: input["enum"]
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }) ].every((flag => flag));
        const _vo109 = (input, _path, _exceptionable = true) => [ "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "string",
            value: input.title
        }), undefined === input.summary || "string" === typeof input.summary || _report(_exceptionable, {
            path: _path + ".summary",
            expected: "(string | undefined)",
            value: input.summary
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.termsOfService || "string" === typeof input.termsOfService || _report(_exceptionable, {
            path: _path + ".termsOfService",
            expected: "(string | undefined)",
            value: input.termsOfService
        }), undefined === input.contact || ("object" === typeof input.contact && null !== input.contact && false === Array.isArray(input.contact) || _report(_exceptionable, {
            path: _path + ".contact",
            expected: "(OpenApiV3_1.IDocument.IContact | undefined)",
            value: input.contact
        })) && _vo110(input.contact, _path + ".contact", _exceptionable) || _report(_exceptionable, {
            path: _path + ".contact",
            expected: "(OpenApiV3_1.IDocument.IContact | undefined)",
            value: input.contact
        }), undefined === input.license || ("object" === typeof input.license && null !== input.license || _report(_exceptionable, {
            path: _path + ".license",
            expected: "(OpenApiV3_1.IDocument.ILicense | undefined)",
            value: input.license
        })) && _vo111(input.license, _path + ".license", _exceptionable) || _report(_exceptionable, {
            path: _path + ".license",
            expected: "(OpenApiV3_1.IDocument.ILicense | undefined)",
            value: input.license
        }), "string" === typeof input.version || _report(_exceptionable, {
            path: _path + ".version",
            expected: "string",
            value: input.version
        }) ].every((flag => flag));
        const _vo110 = (input, _path, _exceptionable = true) => [ undefined === input.name || "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "(string | undefined)",
            value: input.name
        }), undefined === input.url || "string" === typeof input.url || _report(_exceptionable, {
            path: _path + ".url",
            expected: "(string | undefined)",
            value: input.url
        }), undefined === input.email || "string" === typeof input.email || _report(_exceptionable, {
            path: _path + ".email",
            expected: "(string | undefined)",
            value: input.email
        }) ].every((flag => flag));
        const _vo111 = (input, _path, _exceptionable = true) => [ "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "string",
            value: input.name
        }), undefined === input.identifier || "string" === typeof input.identifier || _report(_exceptionable, {
            path: _path + ".identifier",
            expected: "(string | undefined)",
            value: input.identifier
        }), undefined === input.url || "string" === typeof input.url || _report(_exceptionable, {
            path: _path + ".url",
            expected: "(string | undefined)",
            value: input.url
        }) ].every((flag => flag));
        const _vo112 = (input, _path, _exceptionable = true) => [ undefined === input.schemas || ("object" === typeof input.schemas && null !== input.schemas && false === Array.isArray(input.schemas) || _report(_exceptionable, {
            path: _path + ".schemas",
            expected: "(Record<string, OpenApiV3_1.IJsonSchema> | undefined)",
            value: input.schemas
        })) && _vo113(input.schemas, _path + ".schemas", _exceptionable) || _report(_exceptionable, {
            path: _path + ".schemas",
            expected: "(Record<string, OpenApiV3_1.IJsonSchema> | undefined)",
            value: input.schemas
        }), undefined === input.pathItems || ("object" === typeof input.pathItems && null !== input.pathItems && false === Array.isArray(input.pathItems) || _report(_exceptionable, {
            path: _path + ".pathItems",
            expected: "(Record<string, OpenApiV3_1.IPath> | undefined)",
            value: input.pathItems
        })) && _vo130(input.pathItems, _path + ".pathItems", _exceptionable) || _report(_exceptionable, {
            path: _path + ".pathItems",
            expected: "(Record<string, OpenApiV3_1.IPath> | undefined)",
            value: input.pathItems
        }), undefined === input.responses || ("object" === typeof input.responses && null !== input.responses && false === Array.isArray(input.responses) || _report(_exceptionable, {
            path: _path + ".responses",
            expected: "(Record<string, OpenApiV3_1.IOperation.IResponse> | undefined)",
            value: input.responses
        })) && _vo148(input.responses, _path + ".responses", _exceptionable) || _report(_exceptionable, {
            path: _path + ".responses",
            expected: "(Record<string, OpenApiV3_1.IOperation.IResponse> | undefined)",
            value: input.responses
        }), undefined === input.parameters || ("object" === typeof input.parameters && null !== input.parameters && false === Array.isArray(input.parameters) || _report(_exceptionable, {
            path: _path + ".parameters",
            expected: "(Record<string, OpenApiV3_1.IOperation.IParameter> | undefined)",
            value: input.parameters
        })) && _vo149(input.parameters, _path + ".parameters", _exceptionable) || _report(_exceptionable, {
            path: _path + ".parameters",
            expected: "(Record<string, OpenApiV3_1.IOperation.IParameter> | undefined)",
            value: input.parameters
        }), undefined === input.requestBodies || ("object" === typeof input.requestBodies && null !== input.requestBodies && false === Array.isArray(input.requestBodies) || _report(_exceptionable, {
            path: _path + ".requestBodies",
            expected: "(Record<string, OpenApiV3_1.IOperation.IRequestBody> | undefined)",
            value: input.requestBodies
        })) && _vo150(input.requestBodies, _path + ".requestBodies", _exceptionable) || _report(_exceptionable, {
            path: _path + ".requestBodies",
            expected: "(Record<string, OpenApiV3_1.IOperation.IRequestBody> | undefined)",
            value: input.requestBodies
        }), undefined === input.securitySchemes || ("object" === typeof input.securitySchemes && null !== input.securitySchemes && false === Array.isArray(input.securitySchemes) || _report(_exceptionable, {
            path: _path + ".securitySchemes",
            expected: "(Record<string, OpenApiV3_1.ISecurityScheme> | undefined)",
            value: input.securitySchemes
        })) && _vo151(input.securitySchemes, _path + ".securitySchemes", _exceptionable) || _report(_exceptionable, {
            path: _path + ".securitySchemes",
            expected: "(Record<string, OpenApiV3_1.ISecurityScheme> | undefined)",
            value: input.securitySchemes
        }), undefined === input.headers || ("object" === typeof input.headers && null !== input.headers && false === Array.isArray(input.headers) || _report(_exceptionable, {
            path: _path + ".headers",
            expected: '(Record<string, Omit<OpenApiV3_1.IOperation.IParameter, "in">> | undefined)',
            value: input.headers
        })) && _vo161(input.headers, _path + ".headers", _exceptionable) || _report(_exceptionable, {
            path: _path + ".headers",
            expected: '(Record<string, Omit<OpenApiV3_1.IOperation.IParameter, "in">> | undefined)',
            value: input.headers
        }), undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, OpenApiV3_1.IExample> | undefined)",
            value: input.examples
        })) && _vo162(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, OpenApiV3_1.IExample> | undefined)",
            value: input.examples
        }) ].every((flag => flag));
        const _vo113 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value
            })) && _vu5(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo114 = (input, _path, _exceptionable = true) => [ undefined === input.nullable || "boolean" === typeof input.nullable || _report(_exceptionable, {
            path: _path + ".nullable",
            expected: "(boolean | undefined)",
            value: input.nullable
        }), undefined === input.properties || ("object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) || _report(_exceptionable, {
            path: _path + ".properties",
            expected: "(Record<string, OpenApiV3_1.IJsonSchema> | undefined)",
            value: input.properties
        })) && _vo113(input.properties, _path + ".properties", _exceptionable) || _report(_exceptionable, {
            path: _path + ".properties",
            expected: "(Record<string, OpenApiV3_1.IJsonSchema> | undefined)",
            value: input.properties
        }), undefined === input.required || (Array.isArray(input.required) || _report(_exceptionable, {
            path: _path + ".required",
            expected: "(Array<string> | undefined)",
            value: input.required
        })) && input.required.map(((elem, _index128) => "string" === typeof elem || _report(_exceptionable, {
            path: _path + ".required[" + _index128 + "]",
            expected: "string",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".required",
            expected: "(Array<string> | undefined)",
            value: input.required
        }), (null !== input.additionalProperties || _report(_exceptionable, {
            path: _path + ".additionalProperties",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalProperties
        })) && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || ("object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) || _report(_exceptionable, {
            path: _path + ".additionalProperties",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalProperties
        })) && _vu5(input.additionalProperties, _path + ".additionalProperties", _exceptionable) || _report(_exceptionable, {
            path: _path + ".additionalProperties",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalProperties
        })), undefined === input.maxProperties || "number" === typeof input.maxProperties || _report(_exceptionable, {
            path: _path + ".maxProperties",
            expected: "(number | undefined)",
            value: input.maxProperties
        }), undefined === input.minProperties || "number" === typeof input.minProperties || _report(_exceptionable, {
            path: _path + ".minProperties",
            expected: "(number | undefined)",
            value: input.minProperties
        }), "object" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"object"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) ].every((flag => flag));
        const _vo115 = (input, _path, _exceptionable = true) => [ (Array.isArray(input.type) || _report(_exceptionable, {
            path: _path + ".type",
            expected: 'Array<"string" | "number" | "boolean" | "object" | "integer" | "array" | "null">',
            value: input.type
        })) && input.type.map(((elem, _index129) => "string" === elem || "number" === elem || "boolean" === elem || "object" === elem || "integer" === elem || "array" === elem || "null" === elem || _report(_exceptionable, {
            path: _path + ".type[" + _index129 + "]",
            expected: '("array" | "boolean" | "integer" | "null" | "number" | "object" | "string")',
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".type",
            expected: 'Array<"string" | "number" | "boolean" | "object" | "integer" | "array" | "null">',
            value: input.type
        }), null === input["default"] || undefined === input["default"] || Array.isArray(input["default"]) || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: "(Array<any> | null | undefined)",
            value: input["default"]
        }), undefined === input["enum"] || Array.isArray(input["enum"]) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<any> | undefined)",
            value: input["enum"]
        }), "string" === typeof input["const"] || "number" === typeof input["const"] || "boolean" === typeof input["const"] || _report(_exceptionable, {
            path: _path + '["const"]',
            expected: "(boolean | number | string)",
            value: input["const"]
        }), undefined === input.nullable || "boolean" === typeof input.nullable || _report(_exceptionable, {
            path: _path + ".nullable",
            expected: "(boolean | undefined)",
            value: input.nullable
        }), (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, undefined === input.minimum || "number" === typeof input.minimum || _report(_exceptionable, {
            path: _path + ".minimum",
            expected: "(number | undefined)",
            value: input.minimum
        }), undefined === input.maximum || "number" === typeof input.maximum || _report(_exceptionable, {
            path: _path + ".maximum",
            expected: "(number | undefined)",
            value: input.maximum
        }), undefined === input.multipleOf || "number" === typeof input.multipleOf && (0 < input.multipleOf || _report(_exceptionable, {
            path: _path + ".multipleOf",
            expected: "number & ExclusiveMinimum<0>",
            value: input.multipleOf
        })) || _report(_exceptionable, {
            path: _path + ".multipleOf",
            expected: "((number & ExclusiveMinimum<0>) | undefined)",
            value: input.multipleOf
        }), undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum || _report(_exceptionable, {
            path: _path + ".exclusiveMinimum",
            expected: "(boolean | number | undefined)",
            value: input.exclusiveMinimum
        }), undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum || _report(_exceptionable, {
            path: _path + ".exclusiveMaximum",
            expected: "(boolean | number | undefined)",
            value: input.exclusiveMaximum
        }), undefined === input.format || "string" === typeof input.format || _report(_exceptionable, {
            path: _path + ".format",
            expected: "(string | undefined)",
            value: input.format
        }), undefined === input.maxLength || "number" === typeof input.maxLength && (Math.floor(input.maxLength) === input.maxLength && 0 <= input.maxLength && input.maxLength <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".maxLength",
            expected: 'number & Type<"uint64">',
            value: input.maxLength
        })) || _report(_exceptionable, {
            path: _path + ".maxLength",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.maxLength
        }), undefined === input.pattern || "string" === typeof input.pattern || _report(_exceptionable, {
            path: _path + ".pattern",
            expected: "(string | undefined)",
            value: input.pattern
        }), undefined === input.contentMediaType || "string" === typeof input.contentMediaType || _report(_exceptionable, {
            path: _path + ".contentMediaType",
            expected: "(string | undefined)",
            value: input.contentMediaType
        }), undefined === input.minLength || "number" === typeof input.minLength && (Math.floor(input.minLength) === input.minLength && 0 <= input.minLength && input.minLength <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".minLength",
            expected: 'number & Type<"uint64">',
            value: input.minLength
        })) || _report(_exceptionable, {
            path: _path + ".minLength",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.minLength
        }), (null !== input.items || _report(_exceptionable, {
            path: _path + ".items",
            expected: "(Array<OpenApiV3_1.IJsonSchema> | OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | undefined)",
            value: input.items
        })) && (undefined === input.items || (Array.isArray(input.items) && input.items.map(((elem, _index130) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
            path: _path + ".items[" + _index130 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        })) && _vu5(elem, _path + ".items[" + _index130 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".items[" + _index130 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        }))).every((flag => flag)) || "object" === typeof input.items && null !== input.items && false === Array.isArray(input.items) && _vu5(input.items, _path + ".items", _exceptionable) || _report(_exceptionable, {
            path: _path + ".items",
            expected: "(Array<OpenApiV3_1.IJsonSchema> | OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | undefined)",
            value: input.items
        })) || _report(_exceptionable, {
            path: _path + ".items",
            expected: "(Array<OpenApiV3_1.IJsonSchema> | OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | undefined)",
            value: input.items
        })), undefined === input.prefixItems || (Array.isArray(input.prefixItems) || _report(_exceptionable, {
            path: _path + ".prefixItems",
            expected: "(Array<OpenApiV3_1.IJsonSchema> | undefined)",
            value: input.prefixItems
        })) && input.prefixItems.map(((elem, _index131) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
            path: _path + ".prefixItems[" + _index131 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        })) && _vu5(elem, _path + ".prefixItems[" + _index131 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".prefixItems[" + _index131 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".prefixItems",
            expected: "(Array<OpenApiV3_1.IJsonSchema> | undefined)",
            value: input.prefixItems
        }), undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems || _report(_exceptionable, {
            path: _path + ".uniqueItems",
            expected: "(boolean | undefined)",
            value: input.uniqueItems
        }), (null !== input.additionalItems || _report(_exceptionable, {
            path: _path + ".additionalItems",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalItems
        })) && (undefined === input.additionalItems || "boolean" === typeof input.additionalItems || ("object" === typeof input.additionalItems && null !== input.additionalItems && false === Array.isArray(input.additionalItems) || _report(_exceptionable, {
            path: _path + ".additionalItems",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalItems
        })) && _vu5(input.additionalItems, _path + ".additionalItems", _exceptionable) || _report(_exceptionable, {
            path: _path + ".additionalItems",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalItems
        })), undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".minItems",
            expected: 'number & Type<"uint64">',
            value: input.minItems
        })) || _report(_exceptionable, {
            path: _path + ".minItems",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.minItems
        }), undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".maxItems",
            expected: 'number & Type<"uint64">',
            value: input.maxItems
        })) || _report(_exceptionable, {
            path: _path + ".maxItems",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.maxItems
        }), (null !== input.additionalProperties || _report(_exceptionable, {
            path: _path + ".additionalProperties",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalProperties
        })) && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || ("object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) || _report(_exceptionable, {
            path: _path + ".additionalProperties",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalProperties
        })) && _vu5(input.additionalProperties, _path + ".additionalProperties", _exceptionable) || _report(_exceptionable, {
            path: _path + ".additionalProperties",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalProperties
        })), undefined === input.properties || ("object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) || _report(_exceptionable, {
            path: _path + ".properties",
            expected: "(Record<string, OpenApiV3_1.IJsonSchema> | undefined)",
            value: input.properties
        })) && _vo113(input.properties, _path + ".properties", _exceptionable) || _report(_exceptionable, {
            path: _path + ".properties",
            expected: "(Record<string, OpenApiV3_1.IJsonSchema> | undefined)",
            value: input.properties
        }), undefined === input.required || (Array.isArray(input.required) || _report(_exceptionable, {
            path: _path + ".required",
            expected: "(Array<string> | undefined)",
            value: input.required
        })) && input.required.map(((elem, _index132) => "string" === typeof elem || _report(_exceptionable, {
            path: _path + ".required[" + _index132 + "]",
            expected: "string",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".required",
            expected: "(Array<string> | undefined)",
            value: input.required
        }), undefined === input.maxProperties || "number" === typeof input.maxProperties || _report(_exceptionable, {
            path: _path + ".maxProperties",
            expected: "(number | undefined)",
            value: input.maxProperties
        }), undefined === input.minProperties || "number" === typeof input.minProperties || _report(_exceptionable, {
            path: _path + ".minProperties",
            expected: "(number | undefined)",
            value: input.minProperties
        }), (Array.isArray(input.oneOf) || _report(_exceptionable, {
            path: _path + ".oneOf",
            expected: "Array<OpenApiV3_1.IJsonSchema>",
            value: input.oneOf
        })) && input.oneOf.map(((elem, _index133) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
            path: _path + ".oneOf[" + _index133 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        })) && _vu5(elem, _path + ".oneOf[" + _index133 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".oneOf[" + _index133 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".oneOf",
            expected: "Array<OpenApiV3_1.IJsonSchema>",
            value: input.oneOf
        }), undefined === input.discriminator || ("object" === typeof input.discriminator && null !== input.discriminator || _report(_exceptionable, {
            path: _path + ".discriminator",
            expected: "(OpenApiV3_1.IJsonSchema.IOneOf.IDiscriminator | undefined)",
            value: input.discriminator
        })) && _vo127(input.discriminator, _path + ".discriminator", _exceptionable) || _report(_exceptionable, {
            path: _path + ".discriminator",
            expected: "(OpenApiV3_1.IJsonSchema.IOneOf.IDiscriminator | undefined)",
            value: input.discriminator
        }), (Array.isArray(input.anyOf) || _report(_exceptionable, {
            path: _path + ".anyOf",
            expected: "Array<OpenApiV3_1.IJsonSchema>",
            value: input.anyOf
        })) && input.anyOf.map(((elem, _index134) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
            path: _path + ".anyOf[" + _index134 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        })) && _vu5(elem, _path + ".anyOf[" + _index134 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".anyOf[" + _index134 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".anyOf",
            expected: "Array<OpenApiV3_1.IJsonSchema>",
            value: input.anyOf
        }), (Array.isArray(input.allOf) || _report(_exceptionable, {
            path: _path + ".allOf",
            expected: "Array<OpenApiV3_1.IJsonSchema>",
            value: input.allOf
        })) && input.allOf.map(((elem, _index135) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
            path: _path + ".allOf[" + _index135 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        })) && _vu5(elem, _path + ".allOf[" + _index135 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".allOf[" + _index135 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".allOf",
            expected: "Array<OpenApiV3_1.IJsonSchema>",
            value: input.allOf
        }), "string" === typeof input.$ref || _report(_exceptionable, {
            path: _path + ".$ref",
            expected: "string",
            value: input.$ref
        }) ].every((flag => flag));
        const _vo116 = (input, _path, _exceptionable = true) => [ "string" === typeof input["const"] || "number" === typeof input["const"] || "boolean" === typeof input["const"] || _report(_exceptionable, {
            path: _path + '["const"]',
            expected: "(boolean | number | string)",
            value: input["const"]
        }), undefined === input.nullable || "boolean" === typeof input.nullable || _report(_exceptionable, {
            path: _path + ".nullable",
            expected: "(boolean | undefined)",
            value: input.nullable
        }), (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true ].every((flag => flag));
        const _vo117 = (input, _path, _exceptionable = true) => [ undefined === input.nullable || "boolean" === typeof input.nullable || _report(_exceptionable, {
            path: _path + ".nullable",
            expected: "(boolean | undefined)",
            value: input.nullable
        }), null === input["default"] || undefined === input["default"] || "boolean" === typeof input["default"] || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: "(boolean | null | undefined)",
            value: input["default"]
        }), undefined === input["enum"] || (Array.isArray(input["enum"]) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<boolean | null> | undefined)",
            value: input["enum"]
        })) && input["enum"].map(((elem, _index136) => null === elem || "boolean" === typeof elem || _report(_exceptionable, {
            path: _path + '["enum"][' + _index136 + "]",
            expected: "(boolean | null)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<boolean | null> | undefined)",
            value: input["enum"]
        }), "boolean" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"boolean"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) ].every((flag => flag));
        const _vo118 = (input, _path, _exceptionable = true) => [ undefined === input.nullable || "boolean" === typeof input.nullable || _report(_exceptionable, {
            path: _path + ".nullable",
            expected: "(boolean | undefined)",
            value: input.nullable
        }), null === input["default"] || undefined === input["default"] || "number" === typeof input["default"] && (Math.floor(input["default"]) === input["default"] && -0x8000000000000000 <= input["default"] && input["default"] <= 0x8000000000000000 || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: 'number & Type<"int64">',
            value: input["default"]
        })) || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: '((number & Type<"int64">) | null | undefined)',
            value: input["default"]
        }), undefined === input["enum"] || (Array.isArray(input["enum"]) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<number | null> | undefined)",
            value: input["enum"]
        })) && input["enum"].map(((elem, _index137) => null === elem || "number" === typeof elem || _report(_exceptionable, {
            path: _path + '["enum"][' + _index137 + "]",
            expected: "(null | number)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<number | null> | undefined)",
            value: input["enum"]
        }), undefined === input.minimum || "number" === typeof input.minimum && (Math.floor(input.minimum) === input.minimum && -0x8000000000000000 <= input.minimum && input.minimum <= 0x8000000000000000 || _report(_exceptionable, {
            path: _path + ".minimum",
            expected: 'number & Type<"int64">',
            value: input.minimum
        })) || _report(_exceptionable, {
            path: _path + ".minimum",
            expected: '((number & Type<"int64">) | undefined)',
            value: input.minimum
        }), undefined === input.maximum || "number" === typeof input.maximum && (Math.floor(input.maximum) === input.maximum && -0x8000000000000000 <= input.maximum && input.maximum <= 0x8000000000000000 || _report(_exceptionable, {
            path: _path + ".maximum",
            expected: 'number & Type<"int64">',
            value: input.maximum
        })) || _report(_exceptionable, {
            path: _path + ".maximum",
            expected: '((number & Type<"int64">) | undefined)',
            value: input.maximum
        }), undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum && (Math.floor(input.exclusiveMinimum) === input.exclusiveMinimum && -0x8000000000000000 <= input.exclusiveMinimum && input.exclusiveMinimum <= 0x8000000000000000 || _report(_exceptionable, {
            path: _path + ".exclusiveMinimum",
            expected: 'number & Type<"int64">',
            value: input.exclusiveMinimum
        })) || "boolean" === typeof input.exclusiveMinimum || _report(_exceptionable, {
            path: _path + ".exclusiveMinimum",
            expected: '((number & Type<"int64">) | boolean | undefined)',
            value: input.exclusiveMinimum
        }), undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum && (Math.floor(input.exclusiveMaximum) === input.exclusiveMaximum && -0x8000000000000000 <= input.exclusiveMaximum && input.exclusiveMaximum <= 0x8000000000000000 || _report(_exceptionable, {
            path: _path + ".exclusiveMaximum",
            expected: 'number & Type<"int64">',
            value: input.exclusiveMaximum
        })) || "boolean" === typeof input.exclusiveMaximum || _report(_exceptionable, {
            path: _path + ".exclusiveMaximum",
            expected: '((number & Type<"int64">) | boolean | undefined)',
            value: input.exclusiveMaximum
        }), undefined === input.multipleOf || "number" === typeof input.multipleOf && (Math.floor(input.multipleOf) === input.multipleOf && 0 <= input.multipleOf && input.multipleOf <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".multipleOf",
            expected: 'number & Type<"uint64">',
            value: input.multipleOf
        })) && (0 < input.multipleOf || _report(_exceptionable, {
            path: _path + ".multipleOf",
            expected: "number & ExclusiveMinimum<0>",
            value: input.multipleOf
        })) || _report(_exceptionable, {
            path: _path + ".multipleOf",
            expected: '((number & Type<"uint64"> & ExclusiveMinimum<0>) | undefined)',
            value: input.multipleOf
        }), "integer" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"integer"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) ].every((flag => flag));
        const _vo119 = (input, _path, _exceptionable = true) => [ undefined === input.nullable || "boolean" === typeof input.nullable || _report(_exceptionable, {
            path: _path + ".nullable",
            expected: "(boolean | undefined)",
            value: input.nullable
        }), null === input["default"] || undefined === input["default"] || "number" === typeof input["default"] || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: "(null | number | undefined)",
            value: input["default"]
        }), undefined === input["enum"] || (Array.isArray(input["enum"]) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<number | null> | undefined)",
            value: input["enum"]
        })) && input["enum"].map(((elem, _index138) => null === elem || "number" === typeof elem || _report(_exceptionable, {
            path: _path + '["enum"][' + _index138 + "]",
            expected: "(null | number)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<number | null> | undefined)",
            value: input["enum"]
        }), undefined === input.minimum || "number" === typeof input.minimum || _report(_exceptionable, {
            path: _path + ".minimum",
            expected: "(number | undefined)",
            value: input.minimum
        }), undefined === input.maximum || "number" === typeof input.maximum || _report(_exceptionable, {
            path: _path + ".maximum",
            expected: "(number | undefined)",
            value: input.maximum
        }), undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum || _report(_exceptionable, {
            path: _path + ".exclusiveMinimum",
            expected: "(boolean | number | undefined)",
            value: input.exclusiveMinimum
        }), undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum || _report(_exceptionable, {
            path: _path + ".exclusiveMaximum",
            expected: "(boolean | number | undefined)",
            value: input.exclusiveMaximum
        }), undefined === input.multipleOf || "number" === typeof input.multipleOf && (0 < input.multipleOf || _report(_exceptionable, {
            path: _path + ".multipleOf",
            expected: "number & ExclusiveMinimum<0>",
            value: input.multipleOf
        })) || _report(_exceptionable, {
            path: _path + ".multipleOf",
            expected: "((number & ExclusiveMinimum<0>) | undefined)",
            value: input.multipleOf
        }), "number" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"number"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) ].every((flag => flag));
        const _vo120 = (input, _path, _exceptionable = true) => [ undefined === input.nullable || "boolean" === typeof input.nullable || _report(_exceptionable, {
            path: _path + ".nullable",
            expected: "(boolean | undefined)",
            value: input.nullable
        }), null === input["default"] || undefined === input["default"] || "string" === typeof input["default"] || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: "(null | string | undefined)",
            value: input["default"]
        }), undefined === input["enum"] || (Array.isArray(input["enum"]) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<string | null> | undefined)",
            value: input["enum"]
        })) && input["enum"].map(((elem, _index139) => null === elem || "string" === typeof elem || _report(_exceptionable, {
            path: _path + '["enum"][' + _index139 + "]",
            expected: "(null | string)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<string | null> | undefined)",
            value: input["enum"]
        }), undefined === input.format || "string" === typeof input.format || _report(_exceptionable, {
            path: _path + ".format",
            expected: "(string | undefined)",
            value: input.format
        }), undefined === input.pattern || "string" === typeof input.pattern || _report(_exceptionable, {
            path: _path + ".pattern",
            expected: "(string | undefined)",
            value: input.pattern
        }), undefined === input.contentMediaType || "string" === typeof input.contentMediaType || _report(_exceptionable, {
            path: _path + ".contentMediaType",
            expected: "(string | undefined)",
            value: input.contentMediaType
        }), undefined === input.minLength || "number" === typeof input.minLength && (Math.floor(input.minLength) === input.minLength && 0 <= input.minLength && input.minLength <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".minLength",
            expected: 'number & Type<"uint64">',
            value: input.minLength
        })) || _report(_exceptionable, {
            path: _path + ".minLength",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.minLength
        }), undefined === input.maxLength || "number" === typeof input.maxLength && (Math.floor(input.maxLength) === input.maxLength && 0 <= input.maxLength && input.maxLength <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".maxLength",
            expected: 'number & Type<"uint64">',
            value: input.maxLength
        })) || _report(_exceptionable, {
            path: _path + ".maxLength",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.maxLength
        }), "string" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"string"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) ].every((flag => flag));
        const _vo121 = (input, _path, _exceptionable = true) => [ undefined === input.nullable || "boolean" === typeof input.nullable || _report(_exceptionable, {
            path: _path + ".nullable",
            expected: "(boolean | undefined)",
            value: input.nullable
        }), (null !== input.items || _report(_exceptionable, {
            path: _path + ".items",
            expected: "(Array<OpenApiV3_1.IJsonSchema> | OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | undefined)",
            value: input.items
        })) && (undefined === input.items || (Array.isArray(input.items) && input.items.map(((elem, _index140) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
            path: _path + ".items[" + _index140 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        })) && _vu5(elem, _path + ".items[" + _index140 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".items[" + _index140 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        }))).every((flag => flag)) || "object" === typeof input.items && null !== input.items && false === Array.isArray(input.items) && _vu5(input.items, _path + ".items", _exceptionable) || _report(_exceptionable, {
            path: _path + ".items",
            expected: "(Array<OpenApiV3_1.IJsonSchema> | OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | undefined)",
            value: input.items
        })) || _report(_exceptionable, {
            path: _path + ".items",
            expected: "(Array<OpenApiV3_1.IJsonSchema> | OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | undefined)",
            value: input.items
        })), undefined === input.prefixItems || (Array.isArray(input.prefixItems) || _report(_exceptionable, {
            path: _path + ".prefixItems",
            expected: "(Array<OpenApiV3_1.IJsonSchema> | undefined)",
            value: input.prefixItems
        })) && input.prefixItems.map(((elem, _index141) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
            path: _path + ".prefixItems[" + _index141 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        })) && _vu5(elem, _path + ".prefixItems[" + _index141 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".prefixItems[" + _index141 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".prefixItems",
            expected: "(Array<OpenApiV3_1.IJsonSchema> | undefined)",
            value: input.prefixItems
        }), undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems || _report(_exceptionable, {
            path: _path + ".uniqueItems",
            expected: "(boolean | undefined)",
            value: input.uniqueItems
        }), (null !== input.additionalItems || _report(_exceptionable, {
            path: _path + ".additionalItems",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalItems
        })) && (undefined === input.additionalItems || "boolean" === typeof input.additionalItems || ("object" === typeof input.additionalItems && null !== input.additionalItems && false === Array.isArray(input.additionalItems) || _report(_exceptionable, {
            path: _path + ".additionalItems",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalItems
        })) && _vu5(input.additionalItems, _path + ".additionalItems", _exceptionable) || _report(_exceptionable, {
            path: _path + ".additionalItems",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalItems
        })), undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".minItems",
            expected: 'number & Type<"uint64">',
            value: input.minItems
        })) || _report(_exceptionable, {
            path: _path + ".minItems",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.minItems
        }), undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".maxItems",
            expected: 'number & Type<"uint64">',
            value: input.maxItems
        })) || _report(_exceptionable, {
            path: _path + ".maxItems",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.maxItems
        }), "array" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"array"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) ].every((flag => flag));
        const _vo122 = (input, _path, _exceptionable = true) => [ "string" === typeof input.$ref || _report(_exceptionable, {
            path: _path + ".$ref",
            expected: "string",
            value: input.$ref
        }), (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true ].every((flag => flag));
        const _vo123 = (input, _path, _exceptionable = true) => [ "string" === typeof input.$recursiveRef || _report(_exceptionable, {
            path: _path + ".$recursiveRef",
            expected: "string",
            value: input.$recursiveRef
        }), (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true ].every((flag => flag));
        const _vo124 = (input, _path, _exceptionable = true) => [ (Array.isArray(input.allOf) || _report(_exceptionable, {
            path: _path + ".allOf",
            expected: "Array<OpenApiV3_1.IJsonSchema>",
            value: input.allOf
        })) && input.allOf.map(((elem, _index142) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
            path: _path + ".allOf[" + _index142 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        })) && _vu5(elem, _path + ".allOf[" + _index142 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".allOf[" + _index142 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".allOf",
            expected: "Array<OpenApiV3_1.IJsonSchema>",
            value: input.allOf
        }), (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true ].every((flag => flag));
        const _vo125 = (input, _path, _exceptionable = true) => [ (Array.isArray(input.anyOf) || _report(_exceptionable, {
            path: _path + ".anyOf",
            expected: "Array<OpenApiV3_1.IJsonSchema>",
            value: input.anyOf
        })) && input.anyOf.map(((elem, _index143) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
            path: _path + ".anyOf[" + _index143 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        })) && _vu5(elem, _path + ".anyOf[" + _index143 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".anyOf[" + _index143 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".anyOf",
            expected: "Array<OpenApiV3_1.IJsonSchema>",
            value: input.anyOf
        }), (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true ].every((flag => flag));
        const _vo126 = (input, _path, _exceptionable = true) => [ (Array.isArray(input.oneOf) || _report(_exceptionable, {
            path: _path + ".oneOf",
            expected: "Array<OpenApiV3_1.IJsonSchema>",
            value: input.oneOf
        })) && input.oneOf.map(((elem, _index144) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
            path: _path + ".oneOf[" + _index144 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        })) && _vu5(elem, _path + ".oneOf[" + _index144 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".oneOf[" + _index144 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".oneOf",
            expected: "Array<OpenApiV3_1.IJsonSchema>",
            value: input.oneOf
        }), undefined === input.discriminator || ("object" === typeof input.discriminator && null !== input.discriminator || _report(_exceptionable, {
            path: _path + ".discriminator",
            expected: "(OpenApiV3_1.IJsonSchema.IOneOf.IDiscriminator | undefined)",
            value: input.discriminator
        })) && _vo127(input.discriminator, _path + ".discriminator", _exceptionable) || _report(_exceptionable, {
            path: _path + ".discriminator",
            expected: "(OpenApiV3_1.IJsonSchema.IOneOf.IDiscriminator | undefined)",
            value: input.discriminator
        }), (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true ].every((flag => flag));
        const _vo127 = (input, _path, _exceptionable = true) => [ "string" === typeof input.propertyName || _report(_exceptionable, {
            path: _path + ".propertyName",
            expected: "string",
            value: input.propertyName
        }), undefined === input.mapping || ("object" === typeof input.mapping && null !== input.mapping && false === Array.isArray(input.mapping) || _report(_exceptionable, {
            path: _path + ".mapping",
            expected: "(Record<string, string> | undefined)",
            value: input.mapping
        })) && _vo35(input.mapping, _path + ".mapping", _exceptionable) || _report(_exceptionable, {
            path: _path + ".mapping",
            expected: "(Record<string, string> | undefined)",
            value: input.mapping
        }) ].every((flag => flag));
        const _vo128 = (input, _path, _exceptionable = true) => [ null === input["default"] || undefined === input["default"] || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: "(null | undefined)",
            value: input["default"]
        }), "null" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"null"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) ].every((flag => flag));
        const _vo129 = (input, _path, _exceptionable = true) => [ (null !== input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: "undefined",
            value: input.type
        })) && (undefined === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: "undefined",
            value: input.type
        })), true, undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) ].every((flag => flag));
        const _vo130 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3_1.IPath",
                value
            })) && _vo131(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3_1.IPath",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo131 = (input, _path, _exceptionable = true) => [ undefined === input.parameters || (Array.isArray(input.parameters) || _report(_exceptionable, {
            path: _path + ".parameters",
            expected: "(Array<IParameter | IReference<`#/components/headers/${string}`> | IReference<`#/components/parameters/${string}`>>.o1 | undefined)",
            value: input.parameters
        })) && input.parameters.map(((elem, _index145) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
            path: _path + ".parameters[" + _index145 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IReference<`#/components/headers/${string}`> | OpenApiV3_1.IJsonSchema.IReference<`#/components/parameters/${string}`> | OpenApiV3_1.IOperation.IParameter)",
            value: elem
        })) && _vu6(elem, _path + ".parameters[" + _index145 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".parameters[" + _index145 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IReference<`#/components/headers/${string}`> | OpenApiV3_1.IJsonSchema.IReference<`#/components/parameters/${string}`> | OpenApiV3_1.IOperation.IParameter)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".parameters",
            expected: "(Array<IParameter | IReference<`#/components/headers/${string}`> | IReference<`#/components/parameters/${string}`>>.o1 | undefined)",
            value: input.parameters
        }), undefined === input.servers || (Array.isArray(input.servers) || _report(_exceptionable, {
            path: _path + ".servers",
            expected: "(Array<OpenApiV3_1.IServer> | undefined)",
            value: input.servers
        })) && input.servers.map(((elem, _index146) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
            path: _path + ".servers[" + _index146 + "]",
            expected: "OpenApiV3_1.IServer",
            value: elem
        })) && _vo106(elem, _path + ".servers[" + _index146 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".servers[" + _index146 + "]",
            expected: "OpenApiV3_1.IServer",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".servers",
            expected: "(Array<OpenApiV3_1.IServer> | undefined)",
            value: input.servers
        }), undefined === input.summary || "string" === typeof input.summary || _report(_exceptionable, {
            path: _path + ".summary",
            expected: "(string | undefined)",
            value: input.summary
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.options || ("object" === typeof input.options && null !== input.options && false === Array.isArray(input.options) || _report(_exceptionable, {
            path: _path + ".options",
            expected: "(OpenApiV3_1.IOperation | undefined)",
            value: input.options
        })) && _vo138(input.options, _path + ".options", _exceptionable) || _report(_exceptionable, {
            path: _path + ".options",
            expected: "(OpenApiV3_1.IOperation | undefined)",
            value: input.options
        }), undefined === input.get || ("object" === typeof input.get && null !== input.get && false === Array.isArray(input.get) || _report(_exceptionable, {
            path: _path + ".get",
            expected: "(OpenApiV3_1.IOperation | undefined)",
            value: input.get
        })) && _vo138(input.get, _path + ".get", _exceptionable) || _report(_exceptionable, {
            path: _path + ".get",
            expected: "(OpenApiV3_1.IOperation | undefined)",
            value: input.get
        }), undefined === input.post || ("object" === typeof input.post && null !== input.post && false === Array.isArray(input.post) || _report(_exceptionable, {
            path: _path + ".post",
            expected: "(OpenApiV3_1.IOperation | undefined)",
            value: input.post
        })) && _vo138(input.post, _path + ".post", _exceptionable) || _report(_exceptionable, {
            path: _path + ".post",
            expected: "(OpenApiV3_1.IOperation | undefined)",
            value: input.post
        }), undefined === input.patch || ("object" === typeof input.patch && null !== input.patch && false === Array.isArray(input.patch) || _report(_exceptionable, {
            path: _path + ".patch",
            expected: "(OpenApiV3_1.IOperation | undefined)",
            value: input.patch
        })) && _vo138(input.patch, _path + ".patch", _exceptionable) || _report(_exceptionable, {
            path: _path + ".patch",
            expected: "(OpenApiV3_1.IOperation | undefined)",
            value: input.patch
        }), undefined === input.put || ("object" === typeof input.put && null !== input.put && false === Array.isArray(input.put) || _report(_exceptionable, {
            path: _path + ".put",
            expected: "(OpenApiV3_1.IOperation | undefined)",
            value: input.put
        })) && _vo138(input.put, _path + ".put", _exceptionable) || _report(_exceptionable, {
            path: _path + ".put",
            expected: "(OpenApiV3_1.IOperation | undefined)",
            value: input.put
        }), undefined === input["delete"] || ("object" === typeof input["delete"] && null !== input["delete"] && false === Array.isArray(input["delete"]) || _report(_exceptionable, {
            path: _path + '["delete"]',
            expected: "(OpenApiV3_1.IOperation | undefined)",
            value: input["delete"]
        })) && _vo138(input["delete"], _path + '["delete"]', _exceptionable) || _report(_exceptionable, {
            path: _path + '["delete"]',
            expected: "(OpenApiV3_1.IOperation | undefined)",
            value: input["delete"]
        }), undefined === input.head || ("object" === typeof input.head && null !== input.head && false === Array.isArray(input.head) || _report(_exceptionable, {
            path: _path + ".head",
            expected: "(OpenApiV3_1.IOperation | undefined)",
            value: input.head
        })) && _vo138(input.head, _path + ".head", _exceptionable) || _report(_exceptionable, {
            path: _path + ".head",
            expected: "(OpenApiV3_1.IOperation | undefined)",
            value: input.head
        }), undefined === input.trace || ("object" === typeof input.trace && null !== input.trace && false === Array.isArray(input.trace) || _report(_exceptionable, {
            path: _path + ".trace",
            expected: "(OpenApiV3_1.IOperation | undefined)",
            value: input.trace
        })) && _vo138(input.trace, _path + ".trace", _exceptionable) || _report(_exceptionable, {
            path: _path + ".trace",
            expected: "(OpenApiV3_1.IOperation | undefined)",
            value: input.trace
        }) ].every((flag => flag));
        const _vo132 = (input, _path, _exceptionable = true) => [ undefined === input.name || "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "(string | undefined)",
            value: input.name
        }), "path" === input["in"] || "query" === input["in"] || "header" === input["in"] || "cookie" === input["in"] || _report(_exceptionable, {
            path: _path + '["in"]',
            expected: '("cookie" | "header" | "path" | "query")',
            value: input["in"]
        }), ("object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) || _report(_exceptionable, {
            path: _path + ".schema",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: input.schema
        })) && _vu5(input.schema, _path + ".schema", _exceptionable) || _report(_exceptionable, {
            path: _path + ".schema",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: input.schema
        }), undefined === input.required || "boolean" === typeof input.required || _report(_exceptionable, {
            path: _path + ".required",
            expected: "(boolean | undefined)",
            value: input.required
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), true, undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, IExample | IReference<`#/components/examples/${string}`>>.o1 | undefined)",
            value: input.examples
        })) && _vo133(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, IExample | IReference<`#/components/examples/${string}`>>.o1 | undefined)",
            value: input.examples
        }) ].every((flag => flag));
        const _vo133 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApiV3_1.IExample | OpenApiV3_1.IJsonSchema.IReference<`#/components/examples/${string}`>)",
                value
            })) && _vu17(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApiV3_1.IExample | OpenApiV3_1.IJsonSchema.IReference<`#/components/examples/${string}`>)",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo134 = (input, _path, _exceptionable = true) => [ undefined === input.summary || "string" === typeof input.summary || _report(_exceptionable, {
            path: _path + ".summary",
            expected: "(string | undefined)",
            value: input.summary
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), true, undefined === input.externalValue || "string" === typeof input.externalValue || _report(_exceptionable, {
            path: _path + ".externalValue",
            expected: "(string | undefined)",
            value: input.externalValue
        }) ].every((flag => flag));
        const _vo135 = (input, _path, _exceptionable = true) => [ "string" === typeof input.$ref && RegExp(/^#\/components\/examples\/(.*)/).test(input.$ref) || _report(_exceptionable, {
            path: _path + ".$ref",
            expected: "`#/components/examples/${string}`",
            value: input.$ref
        }), (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true ].every((flag => flag));
        const _vo136 = (input, _path, _exceptionable = true) => [ "string" === typeof input.$ref && RegExp(/^#\/components\/headers\/(.*)/).test(input.$ref) || _report(_exceptionable, {
            path: _path + ".$ref",
            expected: "`#/components/headers/${string}`",
            value: input.$ref
        }), (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true ].every((flag => flag));
        const _vo137 = (input, _path, _exceptionable = true) => [ "string" === typeof input.$ref && RegExp(/^#\/components\/parameters\/(.*)/).test(input.$ref) || _report(_exceptionable, {
            path: _path + ".$ref",
            expected: "`#/components/parameters/${string}`",
            value: input.$ref
        }), (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true ].every((flag => flag));
        const _vo138 = (input, _path, _exceptionable = true) => [ undefined === input.operationId || "string" === typeof input.operationId || _report(_exceptionable, {
            path: _path + ".operationId",
            expected: "(string | undefined)",
            value: input.operationId
        }), undefined === input.parameters || (Array.isArray(input.parameters) || _report(_exceptionable, {
            path: _path + ".parameters",
            expected: "(Array<IParameter | IReference<`#/components/headers/${string}`> | IReference<`#/components/parameters/${string}`>>.o1 | undefined)",
            value: input.parameters
        })) && input.parameters.map(((elem, _index147) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
            path: _path + ".parameters[" + _index147 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IReference<`#/components/headers/${string}`> | OpenApiV3_1.IJsonSchema.IReference<`#/components/parameters/${string}`> | OpenApiV3_1.IOperation.IParameter)",
            value: elem
        })) && _vu6(elem, _path + ".parameters[" + _index147 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".parameters[" + _index147 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IReference<`#/components/headers/${string}`> | OpenApiV3_1.IJsonSchema.IReference<`#/components/parameters/${string}`> | OpenApiV3_1.IOperation.IParameter)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".parameters",
            expected: "(Array<IParameter | IReference<`#/components/headers/${string}`> | IReference<`#/components/parameters/${string}`>>.o1 | undefined)",
            value: input.parameters
        }), undefined === input.requestBody || ("object" === typeof input.requestBody && null !== input.requestBody && false === Array.isArray(input.requestBody) || _report(_exceptionable, {
            path: _path + ".requestBody",
            expected: "(OpenApiV3_1.IJsonSchema.IReference<`#/components/requestBodies/${string}`> | OpenApiV3_1.IOperation.IRequestBody | undefined)",
            value: input.requestBody
        })) && _vu18(input.requestBody, _path + ".requestBody", _exceptionable) || _report(_exceptionable, {
            path: _path + ".requestBody",
            expected: "(OpenApiV3_1.IJsonSchema.IReference<`#/components/requestBodies/${string}`> | OpenApiV3_1.IOperation.IRequestBody | undefined)",
            value: input.requestBody
        }), undefined === input.responses || ("object" === typeof input.responses && null !== input.responses && false === Array.isArray(input.responses) || _report(_exceptionable, {
            path: _path + ".responses",
            expected: "(Record<string, IResponse | IReference<`#/components/responses/${string}`>>.o1 | undefined)",
            value: input.responses
        })) && _vo143(input.responses, _path + ".responses", _exceptionable) || _report(_exceptionable, {
            path: _path + ".responses",
            expected: "(Record<string, IResponse | IReference<`#/components/responses/${string}`>>.o1 | undefined)",
            value: input.responses
        }), undefined === input.servers || (Array.isArray(input.servers) || _report(_exceptionable, {
            path: _path + ".servers",
            expected: "(Array<OpenApiV3_1.IServer> | undefined)",
            value: input.servers
        })) && input.servers.map(((elem, _index148) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
            path: _path + ".servers[" + _index148 + "]",
            expected: "OpenApiV3_1.IServer",
            value: elem
        })) && _vo106(elem, _path + ".servers[" + _index148 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".servers[" + _index148 + "]",
            expected: "OpenApiV3_1.IServer",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".servers",
            expected: "(Array<OpenApiV3_1.IServer> | undefined)",
            value: input.servers
        }), undefined === input.summary || "string" === typeof input.summary || _report(_exceptionable, {
            path: _path + ".summary",
            expected: "(string | undefined)",
            value: input.summary
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.security || (Array.isArray(input.security) || _report(_exceptionable, {
            path: _path + ".security",
            expected: "(Array<Record<string, Array<string>>> | undefined)",
            value: input.security
        })) && input.security.map(((elem, _index149) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
            path: _path + ".security[" + _index149 + "]",
            expected: "Record<string, Array<string>>",
            value: elem
        })) && _vo39(elem, _path + ".security[" + _index149 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".security[" + _index149 + "]",
            expected: "Record<string, Array<string>>",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".security",
            expected: "(Array<Record<string, Array<string>>> | undefined)",
            value: input.security
        }), undefined === input.tags || (Array.isArray(input.tags) || _report(_exceptionable, {
            path: _path + ".tags",
            expected: "(Array<string> | undefined)",
            value: input.tags
        })) && input.tags.map(((elem, _index150) => "string" === typeof elem || _report(_exceptionable, {
            path: _path + ".tags[" + _index150 + "]",
            expected: "string",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".tags",
            expected: "(Array<string> | undefined)",
            value: input.tags
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }) ].every((flag => flag));
        const _vo139 = (input, _path, _exceptionable = true) => [ undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.required || "boolean" === typeof input.required || _report(_exceptionable, {
            path: _path + ".required",
            expected: "(boolean | undefined)",
            value: input.required
        }), undefined === input.content || ("object" === typeof input.content && null !== input.content && false === Array.isArray(input.content) || _report(_exceptionable, {
            path: _path + ".content",
            expected: "(Record<string, OpenApiV3_1.IOperation.IMediaType> | undefined)",
            value: input.content
        })) && _vo140(input.content, _path + ".content", _exceptionable) || _report(_exceptionable, {
            path: _path + ".content",
            expected: "(Record<string, OpenApiV3_1.IOperation.IMediaType> | undefined)",
            value: input.content
        }) ].every((flag => flag));
        const _vo140 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3_1.IOperation.IMediaType",
                value
            })) && _vo141(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3_1.IOperation.IMediaType",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo141 = (input, _path, _exceptionable = true) => [ undefined === input.schema || ("object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) || _report(_exceptionable, {
            path: _path + ".schema",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | undefined)",
            value: input.schema
        })) && _vu5(input.schema, _path + ".schema", _exceptionable) || _report(_exceptionable, {
            path: _path + ".schema",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | undefined)",
            value: input.schema
        }), true, undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, IExample | IReference<`#/components/examples/${string}`>>.o1 | undefined)",
            value: input.examples
        })) && _vo133(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, IExample | IReference<`#/components/examples/${string}`>>.o1 | undefined)",
            value: input.examples
        }) ].every((flag => flag));
        const _vo142 = (input, _path, _exceptionable = true) => [ "string" === typeof input.$ref && RegExp(/^#\/components\/requestBodies\/(.*)/).test(input.$ref) || _report(_exceptionable, {
            path: _path + ".$ref",
            expected: "`#/components/requestBodies/${string}`",
            value: input.$ref
        }), (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true ].every((flag => flag));
        const _vo143 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApiV3_1.IJsonSchema.IReference<`#/components/responses/${string}`> | OpenApiV3_1.IOperation.IResponse)",
                value
            })) && _vu19(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApiV3_1.IJsonSchema.IReference<`#/components/responses/${string}`> | OpenApiV3_1.IOperation.IResponse)",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo144 = (input, _path, _exceptionable = true) => [ undefined === input.content || ("object" === typeof input.content && null !== input.content && false === Array.isArray(input.content) || _report(_exceptionable, {
            path: _path + ".content",
            expected: "(Record<string, OpenApiV3_1.IOperation.IMediaType> | undefined)",
            value: input.content
        })) && _vo140(input.content, _path + ".content", _exceptionable) || _report(_exceptionable, {
            path: _path + ".content",
            expected: "(Record<string, OpenApiV3_1.IOperation.IMediaType> | undefined)",
            value: input.content
        }), undefined === input.headers || ("object" === typeof input.headers && null !== input.headers && false === Array.isArray(input.headers) || _report(_exceptionable, {
            path: _path + ".headers",
            expected: '(Record<string, IReference<`#/components/headers/${string}`> | Omit<IParameter, "in">> | undefined)',
            value: input.headers
        })) && _vo145(input.headers, _path + ".headers", _exceptionable) || _report(_exceptionable, {
            path: _path + ".headers",
            expected: '(Record<string, IReference<`#/components/headers/${string}`> | Omit<IParameter, "in">> | undefined)',
            value: input.headers
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }) ].every((flag => flag));
        const _vo145 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: '(Omit<OpenApiV3_1.IOperation.IParameter, "in"> | OpenApiV3_1.IJsonSchema.IReference<`#/components/headers/${string}`>)',
                value
            })) && _vu20(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: '(Omit<OpenApiV3_1.IOperation.IParameter, "in"> | OpenApiV3_1.IJsonSchema.IReference<`#/components/headers/${string}`>)',
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo146 = (input, _path, _exceptionable = true) => [ undefined === input.name || "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "(string | undefined)",
            value: input.name
        }), undefined === input.required || "boolean" === typeof input.required || _report(_exceptionable, {
            path: _path + ".required",
            expected: "(boolean | undefined)",
            value: input.required
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), true, undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, IExample | IReference<`#/components/examples/${string}`>>.o1 | undefined)",
            value: input.examples
        })) && _vo133(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, IExample | IReference<`#/components/examples/${string}`>>.o1 | undefined)",
            value: input.examples
        }), ("object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) || _report(_exceptionable, {
            path: _path + ".schema",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: input.schema
        })) && _vu5(input.schema, _path + ".schema", _exceptionable) || _report(_exceptionable, {
            path: _path + ".schema",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: input.schema
        }) ].every((flag => flag));
        const _vo147 = (input, _path, _exceptionable = true) => [ "string" === typeof input.$ref && RegExp(/^#\/components\/responses\/(.*)/).test(input.$ref) || _report(_exceptionable, {
            path: _path + ".$ref",
            expected: "`#/components/responses/${string}`",
            value: input.$ref
        }), (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true ].every((flag => flag));
        const _vo148 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3_1.IOperation.IResponse",
                value
            })) && _vo144(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3_1.IOperation.IResponse",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo149 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3_1.IOperation.IParameter",
                value
            })) && _vo132(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3_1.IOperation.IParameter",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo150 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3_1.IOperation.IRequestBody",
                value
            })) && _vo139(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3_1.IOperation.IRequestBody",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo151 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApiV3_1.ISecurityScheme.IApiKey | OpenApiV3_1.ISecurityScheme.IHttpBasic | OpenApiV3_1.ISecurityScheme.IHttpBearer | OpenApiV3_1.ISecurityScheme.IOAuth2 | OpenApiV3_1.ISecurityScheme.IOpenId)",
                value
            })) && _vu21(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApiV3_1.ISecurityScheme.IApiKey | OpenApiV3_1.ISecurityScheme.IHttpBasic | OpenApiV3_1.ISecurityScheme.IHttpBearer | OpenApiV3_1.ISecurityScheme.IOAuth2 | OpenApiV3_1.ISecurityScheme.IOpenId)",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo152 = (input, _path, _exceptionable = true) => [ "apiKey" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"apiKey"',
            value: input.type
        }), undefined === input["in"] || "query" === input["in"] || "header" === input["in"] || "cookie" === input["in"] || _report(_exceptionable, {
            path: _path + '["in"]',
            expected: '("cookie" | "header" | "query" | undefined)',
            value: input["in"]
        }), undefined === input.name || "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "(string | undefined)",
            value: input.name
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }) ].every((flag => flag));
        const _vo153 = (input, _path, _exceptionable = true) => [ "http" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"http"',
            value: input.type
        }), "basic" === input.scheme || _report(_exceptionable, {
            path: _path + ".scheme",
            expected: '"basic"',
            value: input.scheme
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }) ].every((flag => flag));
        const _vo154 = (input, _path, _exceptionable = true) => [ "http" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"http"',
            value: input.type
        }), "bearer" === input.scheme || _report(_exceptionable, {
            path: _path + ".scheme",
            expected: '"bearer"',
            value: input.scheme
        }), undefined === input.bearerFormat || "string" === typeof input.bearerFormat || _report(_exceptionable, {
            path: _path + ".bearerFormat",
            expected: "(string | undefined)",
            value: input.bearerFormat
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }) ].every((flag => flag));
        const _vo155 = (input, _path, _exceptionable = true) => [ "oauth2" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"oauth2"',
            value: input.type
        }), ("object" === typeof input.flows && null !== input.flows && false === Array.isArray(input.flows) || _report(_exceptionable, {
            path: _path + ".flows",
            expected: "OpenApiV3_1.ISecurityScheme.IOAuth2.IFlowSet",
            value: input.flows
        })) && _vo156(input.flows, _path + ".flows", _exceptionable) || _report(_exceptionable, {
            path: _path + ".flows",
            expected: "OpenApiV3_1.ISecurityScheme.IOAuth2.IFlowSet",
            value: input.flows
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }) ].every((flag => flag));
        const _vo156 = (input, _path, _exceptionable = true) => [ undefined === input.authorizationCode || ("object" === typeof input.authorizationCode && null !== input.authorizationCode && false === Array.isArray(input.authorizationCode) || _report(_exceptionable, {
            path: _path + ".authorizationCode",
            expected: "(OpenApiV3_1.ISecurityScheme.IOAuth2.IFlow | undefined)",
            value: input.authorizationCode
        })) && _vo157(input.authorizationCode, _path + ".authorizationCode", _exceptionable) || _report(_exceptionable, {
            path: _path + ".authorizationCode",
            expected: "(OpenApiV3_1.ISecurityScheme.IOAuth2.IFlow | undefined)",
            value: input.authorizationCode
        }), undefined === input.implicit || ("object" === typeof input.implicit && null !== input.implicit && false === Array.isArray(input.implicit) || _report(_exceptionable, {
            path: _path + ".implicit",
            expected: '(Omit<OpenApiV3_1.ISecurityScheme.IOAuth2.IFlow, "tokenUrl"> | undefined)',
            value: input.implicit
        })) && _vo158(input.implicit, _path + ".implicit", _exceptionable) || _report(_exceptionable, {
            path: _path + ".implicit",
            expected: '(Omit<OpenApiV3_1.ISecurityScheme.IOAuth2.IFlow, "tokenUrl"> | undefined)',
            value: input.implicit
        }), undefined === input.password || ("object" === typeof input.password && null !== input.password && false === Array.isArray(input.password) || _report(_exceptionable, {
            path: _path + ".password",
            expected: '(Omit<OpenApiV3_1.ISecurityScheme.IOAuth2.IFlow, "authorizationUrl"> | undefined)',
            value: input.password
        })) && _vo159(input.password, _path + ".password", _exceptionable) || _report(_exceptionable, {
            path: _path + ".password",
            expected: '(Omit<OpenApiV3_1.ISecurityScheme.IOAuth2.IFlow, "authorizationUrl"> | undefined)',
            value: input.password
        }), undefined === input.clientCredentials || ("object" === typeof input.clientCredentials && null !== input.clientCredentials && false === Array.isArray(input.clientCredentials) || _report(_exceptionable, {
            path: _path + ".clientCredentials",
            expected: '(Omit<OpenApiV3_1.ISecurityScheme.IOAuth2.IFlow, "authorizationUrl"> | undefined)',
            value: input.clientCredentials
        })) && _vo159(input.clientCredentials, _path + ".clientCredentials", _exceptionable) || _report(_exceptionable, {
            path: _path + ".clientCredentials",
            expected: '(Omit<OpenApiV3_1.ISecurityScheme.IOAuth2.IFlow, "authorizationUrl"> | undefined)',
            value: input.clientCredentials
        }) ].every((flag => flag));
        const _vo157 = (input, _path, _exceptionable = true) => [ undefined === input.authorizationUrl || "string" === typeof input.authorizationUrl || _report(_exceptionable, {
            path: _path + ".authorizationUrl",
            expected: "(string | undefined)",
            value: input.authorizationUrl
        }), undefined === input.tokenUrl || "string" === typeof input.tokenUrl || _report(_exceptionable, {
            path: _path + ".tokenUrl",
            expected: "(string | undefined)",
            value: input.tokenUrl
        }), undefined === input.refreshUrl || "string" === typeof input.refreshUrl || _report(_exceptionable, {
            path: _path + ".refreshUrl",
            expected: "(string | undefined)",
            value: input.refreshUrl
        }), undefined === input.scopes || ("object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) || _report(_exceptionable, {
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        })) && _vo35(input.scopes, _path + ".scopes", _exceptionable) || _report(_exceptionable, {
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        }) ].every((flag => flag));
        const _vo158 = (input, _path, _exceptionable = true) => [ undefined === input.authorizationUrl || "string" === typeof input.authorizationUrl || _report(_exceptionable, {
            path: _path + ".authorizationUrl",
            expected: "(string | undefined)",
            value: input.authorizationUrl
        }), undefined === input.refreshUrl || "string" === typeof input.refreshUrl || _report(_exceptionable, {
            path: _path + ".refreshUrl",
            expected: "(string | undefined)",
            value: input.refreshUrl
        }), undefined === input.scopes || ("object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) || _report(_exceptionable, {
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        })) && _vo35(input.scopes, _path + ".scopes", _exceptionable) || _report(_exceptionable, {
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        }) ].every((flag => flag));
        const _vo159 = (input, _path, _exceptionable = true) => [ undefined === input.tokenUrl || "string" === typeof input.tokenUrl || _report(_exceptionable, {
            path: _path + ".tokenUrl",
            expected: "(string | undefined)",
            value: input.tokenUrl
        }), undefined === input.refreshUrl || "string" === typeof input.refreshUrl || _report(_exceptionable, {
            path: _path + ".refreshUrl",
            expected: "(string | undefined)",
            value: input.refreshUrl
        }), undefined === input.scopes || ("object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) || _report(_exceptionable, {
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        })) && _vo35(input.scopes, _path + ".scopes", _exceptionable) || _report(_exceptionable, {
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        }) ].every((flag => flag));
        const _vo160 = (input, _path, _exceptionable = true) => [ "openIdConnect" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"openIdConnect"',
            value: input.type
        }), "string" === typeof input.openIdConnectUrl || _report(_exceptionable, {
            path: _path + ".openIdConnectUrl",
            expected: "string",
            value: input.openIdConnectUrl
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }) ].every((flag => flag));
        const _vo161 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: 'Omit<OpenApiV3_1.IOperation.IParameter, "in">',
                value
            })) && _vo146(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: 'Omit<OpenApiV3_1.IOperation.IParameter, "in">',
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo162 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3_1.IExample",
                value
            })) && _vo134(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApiV3_1.IExample",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo163 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApiV3_1.IJsonSchema.IReference<`#/components/pathItems/${string}`> | OpenApiV3_1.IPath)",
                value
            })) && _vu22(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApiV3_1.IJsonSchema.IReference<`#/components/pathItems/${string}`> | OpenApiV3_1.IPath)",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo164 = (input, _path, _exceptionable = true) => [ "string" === typeof input.$ref && RegExp(/^#\/components\/pathItems\/(.*)/).test(input.$ref) || _report(_exceptionable, {
            path: _path + ".$ref",
            expected: "`#/components/pathItems/${string}`",
            value: input.$ref
        }), (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true ].every((flag => flag));
        const _vo165 = (input, _path, _exceptionable = true) => [ "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "string",
            value: input.name
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }) ].every((flag => flag));
        const _vo166 = (input, _path, _exceptionable = true) => [ "string" === typeof input.openapi && RegExp(/^3\.1\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(input.openapi) || _report(_exceptionable, {
            path: _path + ".openapi",
            expected: "`3.1.${number}`",
            value: input.openapi
        }), undefined === input.servers || (Array.isArray(input.servers) || _report(_exceptionable, {
            path: _path + ".servers",
            expected: "(Array<OpenApi.IServer> | undefined)",
            value: input.servers
        })) && input.servers.map(((elem, _index151) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
            path: _path + ".servers[" + _index151 + "]",
            expected: "OpenApi.IServer",
            value: elem
        })) && _vo167(elem, _path + ".servers[" + _index151 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".servers[" + _index151 + "]",
            expected: "OpenApi.IServer",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".servers",
            expected: "(Array<OpenApi.IServer> | undefined)",
            value: input.servers
        }), undefined === input.info || ("object" === typeof input.info && null !== input.info || _report(_exceptionable, {
            path: _path + ".info",
            expected: "(OpenApi.IDocument.IInfo | undefined)",
            value: input.info
        })) && _vo170(input.info, _path + ".info", _exceptionable) || _report(_exceptionable, {
            path: _path + ".info",
            expected: "(OpenApi.IDocument.IInfo | undefined)",
            value: input.info
        }), ("object" === typeof input.components && null !== input.components && false === Array.isArray(input.components) || _report(_exceptionable, {
            path: _path + ".components",
            expected: "OpenApi.IComponents",
            value: input.components
        })) && _vo173(input.components, _path + ".components", _exceptionable) || _report(_exceptionable, {
            path: _path + ".components",
            expected: "OpenApi.IComponents",
            value: input.components
        }), undefined === input.paths || ("object" === typeof input.paths && null !== input.paths && false === Array.isArray(input.paths) || _report(_exceptionable, {
            path: _path + ".paths",
            expected: "(Record<string, OpenApi.IPath> | undefined)",
            value: input.paths
        })) && _vo198(input.paths, _path + ".paths", _exceptionable) || _report(_exceptionable, {
            path: _path + ".paths",
            expected: "(Record<string, OpenApi.IPath> | undefined)",
            value: input.paths
        }), undefined === input.webhooks || ("object" === typeof input.webhooks && null !== input.webhooks && false === Array.isArray(input.webhooks) || _report(_exceptionable, {
            path: _path + ".webhooks",
            expected: "(Record<string, OpenApi.IPath> | undefined)",
            value: input.webhooks
        })) && _vo198(input.webhooks, _path + ".webhooks", _exceptionable) || _report(_exceptionable, {
            path: _path + ".webhooks",
            expected: "(Record<string, OpenApi.IPath> | undefined)",
            value: input.webhooks
        }), undefined === input.security || (Array.isArray(input.security) || _report(_exceptionable, {
            path: _path + ".security",
            expected: "(Array<Record<string, Array<string>>> | undefined)",
            value: input.security
        })) && input.security.map(((elem, _index152) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
            path: _path + ".security[" + _index152 + "]",
            expected: "Record<string, Array<string>>",
            value: elem
        })) && _vo39(elem, _path + ".security[" + _index152 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".security[" + _index152 + "]",
            expected: "Record<string, Array<string>>",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".security",
            expected: "(Array<Record<string, Array<string>>> | undefined)",
            value: input.security
        }), undefined === input.tags || (Array.isArray(input.tags) || _report(_exceptionable, {
            path: _path + ".tags",
            expected: "(Array<OpenApi.IDocument.ITag> | undefined)",
            value: input.tags
        })) && input.tags.map(((elem, _index153) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
            path: _path + ".tags[" + _index153 + "]",
            expected: "OpenApi.IDocument.ITag",
            value: elem
        })) && _vo210(elem, _path + ".tags[" + _index153 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".tags[" + _index153 + "]",
            expected: "OpenApi.IDocument.ITag",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".tags",
            expected: "(Array<OpenApi.IDocument.ITag> | undefined)",
            value: input.tags
        }), true === input["x-samchon-emended-v4"] || _report(_exceptionable, {
            path: _path + '["x-samchon-emended-v4"]',
            expected: "true",
            value: input["x-samchon-emended-v4"]
        }) ].every((flag => flag));
        const _vo167 = (input, _path, _exceptionable = true) => [ "string" === typeof input.url || _report(_exceptionable, {
            path: _path + ".url",
            expected: "string",
            value: input.url
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.variables || ("object" === typeof input.variables && null !== input.variables && false === Array.isArray(input.variables) || _report(_exceptionable, {
            path: _path + ".variables",
            expected: "(Record<string, OpenApi.IServer.IVariable> | undefined)",
            value: input.variables
        })) && _vo168(input.variables, _path + ".variables", _exceptionable) || _report(_exceptionable, {
            path: _path + ".variables",
            expected: "(Record<string, OpenApi.IServer.IVariable> | undefined)",
            value: input.variables
        }) ].every((flag => flag));
        const _vo168 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApi.IServer.IVariable",
                value
            })) && _vo169(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApi.IServer.IVariable",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo169 = (input, _path, _exceptionable = true) => [ "string" === typeof input["default"] || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: "string",
            value: input["default"]
        }), undefined === input["enum"] || (Array.isArray(input["enum"]) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<string> | undefined)",
            value: input["enum"]
        })) && input["enum"].map(((elem, _index154) => "string" === typeof elem || _report(_exceptionable, {
            path: _path + '["enum"][' + _index154 + "]",
            expected: "string",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<string> | undefined)",
            value: input["enum"]
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }) ].every((flag => flag));
        const _vo170 = (input, _path, _exceptionable = true) => [ "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "string",
            value: input.title
        }), undefined === input.summary || "string" === typeof input.summary || _report(_exceptionable, {
            path: _path + ".summary",
            expected: "(string | undefined)",
            value: input.summary
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.termsOfService || "string" === typeof input.termsOfService || _report(_exceptionable, {
            path: _path + ".termsOfService",
            expected: "(string | undefined)",
            value: input.termsOfService
        }), undefined === input.contact || ("object" === typeof input.contact && null !== input.contact && false === Array.isArray(input.contact) || _report(_exceptionable, {
            path: _path + ".contact",
            expected: "(OpenApi.IDocument.IContact | undefined)",
            value: input.contact
        })) && _vo171(input.contact, _path + ".contact", _exceptionable) || _report(_exceptionable, {
            path: _path + ".contact",
            expected: "(OpenApi.IDocument.IContact | undefined)",
            value: input.contact
        }), undefined === input.license || ("object" === typeof input.license && null !== input.license || _report(_exceptionable, {
            path: _path + ".license",
            expected: "(OpenApi.IDocument.ILicense | undefined)",
            value: input.license
        })) && _vo172(input.license, _path + ".license", _exceptionable) || _report(_exceptionable, {
            path: _path + ".license",
            expected: "(OpenApi.IDocument.ILicense | undefined)",
            value: input.license
        }), "string" === typeof input.version || _report(_exceptionable, {
            path: _path + ".version",
            expected: "string",
            value: input.version
        }) ].every((flag => flag));
        const _vo171 = (input, _path, _exceptionable = true) => [ undefined === input.name || "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "(string | undefined)",
            value: input.name
        }), undefined === input.url || "string" === typeof input.url || _report(_exceptionable, {
            path: _path + ".url",
            expected: "(string | undefined)",
            value: input.url
        }), undefined === input.email || "string" === typeof input.email && (/^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i.test(input.email) || _report(_exceptionable, {
            path: _path + ".email",
            expected: 'string & Format<"email">',
            value: input.email
        })) || _report(_exceptionable, {
            path: _path + ".email",
            expected: '((string & Format<"email">) | undefined)',
            value: input.email
        }) ].every((flag => flag));
        const _vo172 = (input, _path, _exceptionable = true) => [ "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "string",
            value: input.name
        }), undefined === input.identifier || "string" === typeof input.identifier || _report(_exceptionable, {
            path: _path + ".identifier",
            expected: "(string | undefined)",
            value: input.identifier
        }), undefined === input.url || "string" === typeof input.url || _report(_exceptionable, {
            path: _path + ".url",
            expected: "(string | undefined)",
            value: input.url
        }) ].every((flag => flag));
        const _vo173 = (input, _path, _exceptionable = true) => [ undefined === input.schemas || ("object" === typeof input.schemas && null !== input.schemas && false === Array.isArray(input.schemas) || _report(_exceptionable, {
            path: _path + ".schemas",
            expected: "(Record<string, OpenApi.IJsonSchema> | undefined)",
            value: input.schemas
        })) && _vo174(input.schemas, _path + ".schemas", _exceptionable) || _report(_exceptionable, {
            path: _path + ".schemas",
            expected: "(Record<string, OpenApi.IJsonSchema> | undefined)",
            value: input.schemas
        }), undefined === input.securitySchemes || ("object" === typeof input.securitySchemes && null !== input.securitySchemes && false === Array.isArray(input.securitySchemes) || _report(_exceptionable, {
            path: _path + ".securitySchemes",
            expected: "(Record<string, OpenApi.ISecurityScheme> | undefined)",
            value: input.securitySchemes
        })) && _vo188(input.securitySchemes, _path + ".securitySchemes", _exceptionable) || _report(_exceptionable, {
            path: _path + ".securitySchemes",
            expected: "(Record<string, OpenApi.ISecurityScheme> | undefined)",
            value: input.securitySchemes
        }) ].every((flag => flag));
        const _vo174 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IOneOf | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown)",
                value
            })) && _vu7(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IOneOf | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown)",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo175 = (input, _path, _exceptionable = true) => [ "string" === typeof input["const"] || "number" === typeof input["const"] || "boolean" === typeof input["const"] || _report(_exceptionable, {
            path: _path + '["const"]',
            expected: "(boolean | number | string)",
            value: input["const"]
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        })) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        }) ].every((flag => flag));
        const _vo176 = (input, _path, _exceptionable = true) => [ undefined === input["default"] || "boolean" === typeof input["default"] || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: "(boolean | undefined)",
            value: input["default"]
        }), "boolean" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"boolean"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        })) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        }) ].every((flag => flag));
        const _vo177 = (input, _path, _exceptionable = true) => [ undefined === input["default"] || "number" === typeof input["default"] && (Math.floor(input["default"]) === input["default"] && -0x8000000000000000 <= input["default"] && input["default"] <= 0x8000000000000000 || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: 'number & Type<"int64">',
            value: input["default"]
        })) || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: '((number & Type<"int64">) | undefined)',
            value: input["default"]
        }), undefined === input.minimum || "number" === typeof input.minimum && (Math.floor(input.minimum) === input.minimum && -0x8000000000000000 <= input.minimum && input.minimum <= 0x8000000000000000 || _report(_exceptionable, {
            path: _path + ".minimum",
            expected: 'number & Type<"int64">',
            value: input.minimum
        })) || _report(_exceptionable, {
            path: _path + ".minimum",
            expected: '((number & Type<"int64">) | undefined)',
            value: input.minimum
        }), undefined === input.maximum || "number" === typeof input.maximum && (Math.floor(input.maximum) === input.maximum && -0x8000000000000000 <= input.maximum && input.maximum <= 0x8000000000000000 || _report(_exceptionable, {
            path: _path + ".maximum",
            expected: 'number & Type<"int64">',
            value: input.maximum
        })) || _report(_exceptionable, {
            path: _path + ".maximum",
            expected: '((number & Type<"int64">) | undefined)',
            value: input.maximum
        }), undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || _report(_exceptionable, {
            path: _path + ".exclusiveMinimum",
            expected: "(number | undefined)",
            value: input.exclusiveMinimum
        }), undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || _report(_exceptionable, {
            path: _path + ".exclusiveMaximum",
            expected: "(number | undefined)",
            value: input.exclusiveMaximum
        }), undefined === input.multipleOf || "number" === typeof input.multipleOf && (Math.floor(input.multipleOf) === input.multipleOf && 0 <= input.multipleOf && input.multipleOf <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".multipleOf",
            expected: 'number & Type<"uint64">',
            value: input.multipleOf
        })) && (0 < input.multipleOf || _report(_exceptionable, {
            path: _path + ".multipleOf",
            expected: "number & ExclusiveMinimum<0>",
            value: input.multipleOf
        })) || _report(_exceptionable, {
            path: _path + ".multipleOf",
            expected: '((number & Type<"uint64"> & ExclusiveMinimum<0>) | undefined)',
            value: input.multipleOf
        }), "integer" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"integer"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        })) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        }) ].every((flag => flag));
        const _vo178 = (input, _path, _exceptionable = true) => [ undefined === input["default"] || "number" === typeof input["default"] || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: "(number | undefined)",
            value: input["default"]
        }), undefined === input.minimum || "number" === typeof input.minimum || _report(_exceptionable, {
            path: _path + ".minimum",
            expected: "(number | undefined)",
            value: input.minimum
        }), undefined === input.maximum || "number" === typeof input.maximum || _report(_exceptionable, {
            path: _path + ".maximum",
            expected: "(number | undefined)",
            value: input.maximum
        }), undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || _report(_exceptionable, {
            path: _path + ".exclusiveMinimum",
            expected: "(number | undefined)",
            value: input.exclusiveMinimum
        }), undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || _report(_exceptionable, {
            path: _path + ".exclusiveMaximum",
            expected: "(number | undefined)",
            value: input.exclusiveMaximum
        }), undefined === input.multipleOf || "number" === typeof input.multipleOf && (0 < input.multipleOf || _report(_exceptionable, {
            path: _path + ".multipleOf",
            expected: "number & ExclusiveMinimum<0>",
            value: input.multipleOf
        })) || _report(_exceptionable, {
            path: _path + ".multipleOf",
            expected: "((number & ExclusiveMinimum<0>) | undefined)",
            value: input.multipleOf
        }), "number" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"number"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        })) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        }) ].every((flag => flag));
        const _vo179 = (input, _path, _exceptionable = true) => [ undefined === input["default"] || "string" === typeof input["default"] || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: "(string | undefined)",
            value: input["default"]
        }), undefined === input.format || "string" === typeof input.format || _report(_exceptionable, {
            path: _path + ".format",
            expected: "(string | undefined)",
            value: input.format
        }), undefined === input.pattern || "string" === typeof input.pattern || _report(_exceptionable, {
            path: _path + ".pattern",
            expected: "(string | undefined)",
            value: input.pattern
        }), undefined === input.contentMediaType || "string" === typeof input.contentMediaType || _report(_exceptionable, {
            path: _path + ".contentMediaType",
            expected: "(string | undefined)",
            value: input.contentMediaType
        }), undefined === input.minLength || "number" === typeof input.minLength && (Math.floor(input.minLength) === input.minLength && 0 <= input.minLength && input.minLength <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".minLength",
            expected: 'number & Type<"uint64">',
            value: input.minLength
        })) || _report(_exceptionable, {
            path: _path + ".minLength",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.minLength
        }), undefined === input.maxLength || "number" === typeof input.maxLength && (Math.floor(input.maxLength) === input.maxLength && 0 <= input.maxLength && input.maxLength <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".maxLength",
            expected: 'number & Type<"uint64">',
            value: input.maxLength
        })) || _report(_exceptionable, {
            path: _path + ".maxLength",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.maxLength
        }), "string" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"string"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        })) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        }) ].every((flag => flag));
        const _vo180 = (input, _path, _exceptionable = true) => [ ("object" === typeof input.items && null !== input.items && false === Array.isArray(input.items) || _report(_exceptionable, {
            path: _path + ".items",
            expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IOneOf | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown)",
            value: input.items
        })) && _vu7(input.items, _path + ".items", _exceptionable) || _report(_exceptionable, {
            path: _path + ".items",
            expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IOneOf | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown)",
            value: input.items
        }), undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems || _report(_exceptionable, {
            path: _path + ".uniqueItems",
            expected: "(boolean | undefined)",
            value: input.uniqueItems
        }), undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".minItems",
            expected: 'number & Type<"uint64">',
            value: input.minItems
        })) || _report(_exceptionable, {
            path: _path + ".minItems",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.minItems
        }), undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".maxItems",
            expected: 'number & Type<"uint64">',
            value: input.maxItems
        })) || _report(_exceptionable, {
            path: _path + ".maxItems",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.maxItems
        }), "array" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"array"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        })) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        }) ].every((flag => flag));
        const _vo181 = (input, _path, _exceptionable = true) => [ "array" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"array"',
            value: input.type
        }), (Array.isArray(input.prefixItems) || _report(_exceptionable, {
            path: _path + ".prefixItems",
            expected: "Array<OpenApi.IJsonSchema>",
            value: input.prefixItems
        })) && input.prefixItems.map(((elem, _index155) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
            path: _path + ".prefixItems[" + _index155 + "]",
            expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IOneOf | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown)",
            value: elem
        })) && _vu7(elem, _path + ".prefixItems[" + _index155 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".prefixItems[" + _index155 + "]",
            expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IOneOf | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".prefixItems",
            expected: "Array<OpenApi.IJsonSchema>",
            value: input.prefixItems
        }), (null !== input.additionalItems || _report(_exceptionable, {
            path: _path + ".additionalItems",
            expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IOneOf | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalItems
        })) && (undefined === input.additionalItems || "boolean" === typeof input.additionalItems || ("object" === typeof input.additionalItems && null !== input.additionalItems && false === Array.isArray(input.additionalItems) || _report(_exceptionable, {
            path: _path + ".additionalItems",
            expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IOneOf | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalItems
        })) && _vu7(input.additionalItems, _path + ".additionalItems", _exceptionable) || _report(_exceptionable, {
            path: _path + ".additionalItems",
            expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IOneOf | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalItems
        })), undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems || _report(_exceptionable, {
            path: _path + ".uniqueItems",
            expected: "(boolean | undefined)",
            value: input.uniqueItems
        }), undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".minItems",
            expected: 'number & Type<"uint64">',
            value: input.minItems
        })) || _report(_exceptionable, {
            path: _path + ".minItems",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.minItems
        }), undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".maxItems",
            expected: 'number & Type<"uint64">',
            value: input.maxItems
        })) || _report(_exceptionable, {
            path: _path + ".maxItems",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.maxItems
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        })) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        }) ].every((flag => flag));
        const _vo182 = (input, _path, _exceptionable = true) => [ undefined === input.properties || ("object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) || _report(_exceptionable, {
            path: _path + ".properties",
            expected: "(Record<string, OpenApi.IJsonSchema> | undefined)",
            value: input.properties
        })) && _vo174(input.properties, _path + ".properties", _exceptionable) || _report(_exceptionable, {
            path: _path + ".properties",
            expected: "(Record<string, OpenApi.IJsonSchema> | undefined)",
            value: input.properties
        }), (null !== input.additionalProperties || _report(_exceptionable, {
            path: _path + ".additionalProperties",
            expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IOneOf | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalProperties
        })) && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || ("object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) || _report(_exceptionable, {
            path: _path + ".additionalProperties",
            expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IOneOf | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalProperties
        })) && _vu7(input.additionalProperties, _path + ".additionalProperties", _exceptionable) || _report(_exceptionable, {
            path: _path + ".additionalProperties",
            expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IOneOf | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalProperties
        })), undefined === input.required || (Array.isArray(input.required) || _report(_exceptionable, {
            path: _path + ".required",
            expected: "(Array<string> | undefined)",
            value: input.required
        })) && input.required.map(((elem, _index156) => "string" === typeof elem || _report(_exceptionable, {
            path: _path + ".required[" + _index156 + "]",
            expected: "string",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".required",
            expected: "(Array<string> | undefined)",
            value: input.required
        }), "object" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"object"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        })) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        }) ].every((flag => flag));
        const _vo183 = (input, _path, _exceptionable = true) => [ "string" === typeof input.$ref || _report(_exceptionable, {
            path: _path + ".$ref",
            expected: "string",
            value: input.$ref
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        })) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        }) ].every((flag => flag));
        const _vo184 = (input, _path, _exceptionable = true) => [ (Array.isArray(input.oneOf) || _report(_exceptionable, {
            path: _path + ".oneOf",
            expected: "Array<IConstant | IBoolean | IInteger | INumber | IString | IArray | ITuple | IObject | IReference<string> | INull | IUnknown>",
            value: input.oneOf
        })) && input.oneOf.map(((elem, _index157) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
            path: _path + ".oneOf[" + _index157 + "]",
            expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown)",
            value: elem
        })) && _vu8(elem, _path + ".oneOf[" + _index157 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".oneOf[" + _index157 + "]",
            expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".oneOf",
            expected: "Array<IConstant | IBoolean | IInteger | INumber | IString | IArray | ITuple | IObject | IReference<string> | INull | IUnknown>",
            value: input.oneOf
        }), undefined === input.discriminator || ("object" === typeof input.discriminator && null !== input.discriminator || _report(_exceptionable, {
            path: _path + ".discriminator",
            expected: "(OpenApi.IJsonSchema.IOneOf.IDiscriminator | undefined)",
            value: input.discriminator
        })) && _vo187(input.discriminator, _path + ".discriminator", _exceptionable) || _report(_exceptionable, {
            path: _path + ".discriminator",
            expected: "(OpenApi.IJsonSchema.IOneOf.IDiscriminator | undefined)",
            value: input.discriminator
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        })) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        }) ].every((flag => flag));
        const _vo185 = (input, _path, _exceptionable = true) => [ null === input["default"] || undefined === input["default"] || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: "(null | undefined)",
            value: input["default"]
        }), "null" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"null"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        })) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        }) ].every((flag => flag));
        const _vo186 = (input, _path, _exceptionable = true) => [ true, (null !== input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: "undefined",
            value: input.type
        })) && (undefined === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: "undefined",
            value: input.type
        })), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        })) && _vo58(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, any> | undefined)",
            value: input.examples
        }) ].every((flag => flag));
        const _vo187 = (input, _path, _exceptionable = true) => [ "string" === typeof input.propertyName || _report(_exceptionable, {
            path: _path + ".propertyName",
            expected: "string",
            value: input.propertyName
        }), undefined === input.mapping || ("object" === typeof input.mapping && null !== input.mapping && false === Array.isArray(input.mapping) || _report(_exceptionable, {
            path: _path + ".mapping",
            expected: "(Record<string, string> | undefined)",
            value: input.mapping
        })) && _vo35(input.mapping, _path + ".mapping", _exceptionable) || _report(_exceptionable, {
            path: _path + ".mapping",
            expected: "(Record<string, string> | undefined)",
            value: input.mapping
        }) ].every((flag => flag));
        const _vo188 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApi.ISecurityScheme.IApiKey | OpenApi.ISecurityScheme.IHttpBasic | OpenApi.ISecurityScheme.IHttpBearer | OpenApi.ISecurityScheme.IOAuth2 | OpenApi.ISecurityScheme.IOpenId)",
                value
            })) && _vu23(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApi.ISecurityScheme.IApiKey | OpenApi.ISecurityScheme.IHttpBasic | OpenApi.ISecurityScheme.IHttpBearer | OpenApi.ISecurityScheme.IOAuth2 | OpenApi.ISecurityScheme.IOpenId)",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo189 = (input, _path, _exceptionable = true) => [ "apiKey" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"apiKey"',
            value: input.type
        }), undefined === input["in"] || "query" === input["in"] || "header" === input["in"] || "cookie" === input["in"] || _report(_exceptionable, {
            path: _path + '["in"]',
            expected: '("cookie" | "header" | "query" | undefined)',
            value: input["in"]
        }), undefined === input.name || "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "(string | undefined)",
            value: input.name
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }) ].every((flag => flag));
        const _vo190 = (input, _path, _exceptionable = true) => [ "http" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"http"',
            value: input.type
        }), "basic" === input.scheme || _report(_exceptionable, {
            path: _path + ".scheme",
            expected: '"basic"',
            value: input.scheme
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }) ].every((flag => flag));
        const _vo191 = (input, _path, _exceptionable = true) => [ "http" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"http"',
            value: input.type
        }), "bearer" === input.scheme || _report(_exceptionable, {
            path: _path + ".scheme",
            expected: '"bearer"',
            value: input.scheme
        }), undefined === input.bearerFormat || "string" === typeof input.bearerFormat || _report(_exceptionable, {
            path: _path + ".bearerFormat",
            expected: "(string | undefined)",
            value: input.bearerFormat
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }) ].every((flag => flag));
        const _vo192 = (input, _path, _exceptionable = true) => [ "oauth2" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"oauth2"',
            value: input.type
        }), ("object" === typeof input.flows && null !== input.flows && false === Array.isArray(input.flows) || _report(_exceptionable, {
            path: _path + ".flows",
            expected: "OpenApi.ISecurityScheme.IOAuth2.IFlowSet",
            value: input.flows
        })) && _vo193(input.flows, _path + ".flows", _exceptionable) || _report(_exceptionable, {
            path: _path + ".flows",
            expected: "OpenApi.ISecurityScheme.IOAuth2.IFlowSet",
            value: input.flows
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }) ].every((flag => flag));
        const _vo193 = (input, _path, _exceptionable = true) => [ undefined === input.authorizationCode || ("object" === typeof input.authorizationCode && null !== input.authorizationCode && false === Array.isArray(input.authorizationCode) || _report(_exceptionable, {
            path: _path + ".authorizationCode",
            expected: "(OpenApi.ISecurityScheme.IOAuth2.IFlow | undefined)",
            value: input.authorizationCode
        })) && _vo194(input.authorizationCode, _path + ".authorizationCode", _exceptionable) || _report(_exceptionable, {
            path: _path + ".authorizationCode",
            expected: "(OpenApi.ISecurityScheme.IOAuth2.IFlow | undefined)",
            value: input.authorizationCode
        }), undefined === input.implicit || ("object" === typeof input.implicit && null !== input.implicit && false === Array.isArray(input.implicit) || _report(_exceptionable, {
            path: _path + ".implicit",
            expected: '(Omit<OpenApi.ISecurityScheme.IOAuth2.IFlow, "tokenUrl"> | undefined)',
            value: input.implicit
        })) && _vo195(input.implicit, _path + ".implicit", _exceptionable) || _report(_exceptionable, {
            path: _path + ".implicit",
            expected: '(Omit<OpenApi.ISecurityScheme.IOAuth2.IFlow, "tokenUrl"> | undefined)',
            value: input.implicit
        }), undefined === input.password || ("object" === typeof input.password && null !== input.password && false === Array.isArray(input.password) || _report(_exceptionable, {
            path: _path + ".password",
            expected: '(Omit<OpenApi.ISecurityScheme.IOAuth2.IFlow, "authorizationUrl"> | undefined)',
            value: input.password
        })) && _vo196(input.password, _path + ".password", _exceptionable) || _report(_exceptionable, {
            path: _path + ".password",
            expected: '(Omit<OpenApi.ISecurityScheme.IOAuth2.IFlow, "authorizationUrl"> | undefined)',
            value: input.password
        }), undefined === input.clientCredentials || ("object" === typeof input.clientCredentials && null !== input.clientCredentials && false === Array.isArray(input.clientCredentials) || _report(_exceptionable, {
            path: _path + ".clientCredentials",
            expected: '(Omit<OpenApi.ISecurityScheme.IOAuth2.IFlow, "authorizationUrl"> | undefined)',
            value: input.clientCredentials
        })) && _vo196(input.clientCredentials, _path + ".clientCredentials", _exceptionable) || _report(_exceptionable, {
            path: _path + ".clientCredentials",
            expected: '(Omit<OpenApi.ISecurityScheme.IOAuth2.IFlow, "authorizationUrl"> | undefined)',
            value: input.clientCredentials
        }) ].every((flag => flag));
        const _vo194 = (input, _path, _exceptionable = true) => [ undefined === input.authorizationUrl || "string" === typeof input.authorizationUrl || _report(_exceptionable, {
            path: _path + ".authorizationUrl",
            expected: "(string | undefined)",
            value: input.authorizationUrl
        }), undefined === input.tokenUrl || "string" === typeof input.tokenUrl || _report(_exceptionable, {
            path: _path + ".tokenUrl",
            expected: "(string | undefined)",
            value: input.tokenUrl
        }), undefined === input.refreshUrl || "string" === typeof input.refreshUrl || _report(_exceptionable, {
            path: _path + ".refreshUrl",
            expected: "(string | undefined)",
            value: input.refreshUrl
        }), undefined === input.scopes || ("object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) || _report(_exceptionable, {
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        })) && _vo35(input.scopes, _path + ".scopes", _exceptionable) || _report(_exceptionable, {
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        }) ].every((flag => flag));
        const _vo195 = (input, _path, _exceptionable = true) => [ undefined === input.authorizationUrl || "string" === typeof input.authorizationUrl || _report(_exceptionable, {
            path: _path + ".authorizationUrl",
            expected: "(string | undefined)",
            value: input.authorizationUrl
        }), undefined === input.refreshUrl || "string" === typeof input.refreshUrl || _report(_exceptionable, {
            path: _path + ".refreshUrl",
            expected: "(string | undefined)",
            value: input.refreshUrl
        }), undefined === input.scopes || ("object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) || _report(_exceptionable, {
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        })) && _vo35(input.scopes, _path + ".scopes", _exceptionable) || _report(_exceptionable, {
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        }) ].every((flag => flag));
        const _vo196 = (input, _path, _exceptionable = true) => [ undefined === input.tokenUrl || "string" === typeof input.tokenUrl || _report(_exceptionable, {
            path: _path + ".tokenUrl",
            expected: "(string | undefined)",
            value: input.tokenUrl
        }), undefined === input.refreshUrl || "string" === typeof input.refreshUrl || _report(_exceptionable, {
            path: _path + ".refreshUrl",
            expected: "(string | undefined)",
            value: input.refreshUrl
        }), undefined === input.scopes || ("object" === typeof input.scopes && null !== input.scopes && false === Array.isArray(input.scopes) || _report(_exceptionable, {
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        })) && _vo35(input.scopes, _path + ".scopes", _exceptionable) || _report(_exceptionable, {
            path: _path + ".scopes",
            expected: "(Record<string, string> | undefined)",
            value: input.scopes
        }) ].every((flag => flag));
        const _vo197 = (input, _path, _exceptionable = true) => [ "openIdConnect" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"openIdConnect"',
            value: input.type
        }), "string" === typeof input.openIdConnectUrl || _report(_exceptionable, {
            path: _path + ".openIdConnectUrl",
            expected: "string",
            value: input.openIdConnectUrl
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }) ].every((flag => flag));
        const _vo198 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApi.IPath",
                value
            })) && _vo199(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApi.IPath",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo199 = (input, _path, _exceptionable = true) => [ undefined === input.servers || (Array.isArray(input.servers) || _report(_exceptionable, {
            path: _path + ".servers",
            expected: "(Array<OpenApi.IServer> | undefined)",
            value: input.servers
        })) && input.servers.map(((elem, _index158) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
            path: _path + ".servers[" + _index158 + "]",
            expected: "OpenApi.IServer",
            value: elem
        })) && _vo167(elem, _path + ".servers[" + _index158 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".servers[" + _index158 + "]",
            expected: "OpenApi.IServer",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".servers",
            expected: "(Array<OpenApi.IServer> | undefined)",
            value: input.servers
        }), undefined === input.summary || "string" === typeof input.summary || _report(_exceptionable, {
            path: _path + ".summary",
            expected: "(string | undefined)",
            value: input.summary
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.options || ("object" === typeof input.options && null !== input.options && false === Array.isArray(input.options) || _report(_exceptionable, {
            path: _path + ".options",
            expected: "(OpenApi.IOperation | undefined)",
            value: input.options
        })) && _vo200(input.options, _path + ".options", _exceptionable) || _report(_exceptionable, {
            path: _path + ".options",
            expected: "(OpenApi.IOperation | undefined)",
            value: input.options
        }), undefined === input.get || ("object" === typeof input.get && null !== input.get && false === Array.isArray(input.get) || _report(_exceptionable, {
            path: _path + ".get",
            expected: "(OpenApi.IOperation | undefined)",
            value: input.get
        })) && _vo200(input.get, _path + ".get", _exceptionable) || _report(_exceptionable, {
            path: _path + ".get",
            expected: "(OpenApi.IOperation | undefined)",
            value: input.get
        }), undefined === input.post || ("object" === typeof input.post && null !== input.post && false === Array.isArray(input.post) || _report(_exceptionable, {
            path: _path + ".post",
            expected: "(OpenApi.IOperation | undefined)",
            value: input.post
        })) && _vo200(input.post, _path + ".post", _exceptionable) || _report(_exceptionable, {
            path: _path + ".post",
            expected: "(OpenApi.IOperation | undefined)",
            value: input.post
        }), undefined === input.patch || ("object" === typeof input.patch && null !== input.patch && false === Array.isArray(input.patch) || _report(_exceptionable, {
            path: _path + ".patch",
            expected: "(OpenApi.IOperation | undefined)",
            value: input.patch
        })) && _vo200(input.patch, _path + ".patch", _exceptionable) || _report(_exceptionable, {
            path: _path + ".patch",
            expected: "(OpenApi.IOperation | undefined)",
            value: input.patch
        }), undefined === input.put || ("object" === typeof input.put && null !== input.put && false === Array.isArray(input.put) || _report(_exceptionable, {
            path: _path + ".put",
            expected: "(OpenApi.IOperation | undefined)",
            value: input.put
        })) && _vo200(input.put, _path + ".put", _exceptionable) || _report(_exceptionable, {
            path: _path + ".put",
            expected: "(OpenApi.IOperation | undefined)",
            value: input.put
        }), undefined === input["delete"] || ("object" === typeof input["delete"] && null !== input["delete"] && false === Array.isArray(input["delete"]) || _report(_exceptionable, {
            path: _path + '["delete"]',
            expected: "(OpenApi.IOperation | undefined)",
            value: input["delete"]
        })) && _vo200(input["delete"], _path + '["delete"]', _exceptionable) || _report(_exceptionable, {
            path: _path + '["delete"]',
            expected: "(OpenApi.IOperation | undefined)",
            value: input["delete"]
        }), undefined === input.head || ("object" === typeof input.head && null !== input.head && false === Array.isArray(input.head) || _report(_exceptionable, {
            path: _path + ".head",
            expected: "(OpenApi.IOperation | undefined)",
            value: input.head
        })) && _vo200(input.head, _path + ".head", _exceptionable) || _report(_exceptionable, {
            path: _path + ".head",
            expected: "(OpenApi.IOperation | undefined)",
            value: input.head
        }), undefined === input.trace || ("object" === typeof input.trace && null !== input.trace && false === Array.isArray(input.trace) || _report(_exceptionable, {
            path: _path + ".trace",
            expected: "(OpenApi.IOperation | undefined)",
            value: input.trace
        })) && _vo200(input.trace, _path + ".trace", _exceptionable) || _report(_exceptionable, {
            path: _path + ".trace",
            expected: "(OpenApi.IOperation | undefined)",
            value: input.trace
        }) ].every((flag => flag));
        const _vo200 = (input, _path, _exceptionable = true) => [ undefined === input.operationId || "string" === typeof input.operationId || _report(_exceptionable, {
            path: _path + ".operationId",
            expected: "(string | undefined)",
            value: input.operationId
        }), undefined === input.parameters || (Array.isArray(input.parameters) || _report(_exceptionable, {
            path: _path + ".parameters",
            expected: "(Array<OpenApi.IOperation.IParameter> | undefined)",
            value: input.parameters
        })) && input.parameters.map(((elem, _index159) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
            path: _path + ".parameters[" + _index159 + "]",
            expected: "OpenApi.IOperation.IParameter",
            value: elem
        })) && _vo201(elem, _path + ".parameters[" + _index159 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".parameters[" + _index159 + "]",
            expected: "OpenApi.IOperation.IParameter",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".parameters",
            expected: "(Array<OpenApi.IOperation.IParameter> | undefined)",
            value: input.parameters
        }), undefined === input.requestBody || ("object" === typeof input.requestBody && null !== input.requestBody && false === Array.isArray(input.requestBody) || _report(_exceptionable, {
            path: _path + ".requestBody",
            expected: "(OpenApi.IOperation.IRequestBody | undefined)",
            value: input.requestBody
        })) && _vo204(input.requestBody, _path + ".requestBody", _exceptionable) || _report(_exceptionable, {
            path: _path + ".requestBody",
            expected: "(OpenApi.IOperation.IRequestBody | undefined)",
            value: input.requestBody
        }), undefined === input.responses || ("object" === typeof input.responses && null !== input.responses && false === Array.isArray(input.responses) || _report(_exceptionable, {
            path: _path + ".responses",
            expected: "(Record<string, OpenApi.IOperation.IResponse> | undefined)",
            value: input.responses
        })) && _vo207(input.responses, _path + ".responses", _exceptionable) || _report(_exceptionable, {
            path: _path + ".responses",
            expected: "(Record<string, OpenApi.IOperation.IResponse> | undefined)",
            value: input.responses
        }), undefined === input.servers || (Array.isArray(input.servers) || _report(_exceptionable, {
            path: _path + ".servers",
            expected: "(Array<OpenApi.IServer> | undefined)",
            value: input.servers
        })) && input.servers.map(((elem, _index160) => ("object" === typeof elem && null !== elem || _report(_exceptionable, {
            path: _path + ".servers[" + _index160 + "]",
            expected: "OpenApi.IServer",
            value: elem
        })) && _vo167(elem, _path + ".servers[" + _index160 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".servers[" + _index160 + "]",
            expected: "OpenApi.IServer",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".servers",
            expected: "(Array<OpenApi.IServer> | undefined)",
            value: input.servers
        }), undefined === input.summary || "string" === typeof input.summary || _report(_exceptionable, {
            path: _path + ".summary",
            expected: "(string | undefined)",
            value: input.summary
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.security || (Array.isArray(input.security) || _report(_exceptionable, {
            path: _path + ".security",
            expected: "(Array<Record<string, Array<string>>> | undefined)",
            value: input.security
        })) && input.security.map(((elem, _index161) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
            path: _path + ".security[" + _index161 + "]",
            expected: "Record<string, Array<string>>",
            value: elem
        })) && _vo39(elem, _path + ".security[" + _index161 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".security[" + _index161 + "]",
            expected: "Record<string, Array<string>>",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".security",
            expected: "(Array<Record<string, Array<string>>> | undefined)",
            value: input.security
        }), undefined === input.tags || (Array.isArray(input.tags) || _report(_exceptionable, {
            path: _path + ".tags",
            expected: "(Array<string> | undefined)",
            value: input.tags
        })) && input.tags.map(((elem, _index162) => "string" === typeof elem || _report(_exceptionable, {
            path: _path + ".tags[" + _index162 + "]",
            expected: "string",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".tags",
            expected: "(Array<string> | undefined)",
            value: input.tags
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), undefined === input["x-samchon-human"] || "boolean" === typeof input["x-samchon-human"] || _report(_exceptionable, {
            path: _path + '["x-samchon-human"]',
            expected: "(boolean | undefined)",
            value: input["x-samchon-human"]
        }), undefined === input["x-samchon-accessor"] || (Array.isArray(input["x-samchon-accessor"]) || _report(_exceptionable, {
            path: _path + '["x-samchon-accessor"]',
            expected: "(Array<string> | undefined)",
            value: input["x-samchon-accessor"]
        })) && input["x-samchon-accessor"].map(((elem, _index163) => "string" === typeof elem || _report(_exceptionable, {
            path: _path + '["x-samchon-accessor"][' + _index163 + "]",
            expected: "string",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + '["x-samchon-accessor"]',
            expected: "(Array<string> | undefined)",
            value: input["x-samchon-accessor"]
        }), undefined === input["x-samchon-controller"] || "string" === typeof input["x-samchon-controller"] || _report(_exceptionable, {
            path: _path + '["x-samchon-controller"]',
            expected: "(string | undefined)",
            value: input["x-samchon-controller"]
        }) ].every((flag => flag));
        const _vo201 = (input, _path, _exceptionable = true) => [ undefined === input.name || "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "(string | undefined)",
            value: input.name
        }), "path" === input["in"] || "query" === input["in"] || "header" === input["in"] || "cookie" === input["in"] || _report(_exceptionable, {
            path: _path + '["in"]',
            expected: '("cookie" | "header" | "path" | "query")',
            value: input["in"]
        }), ("object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) || _report(_exceptionable, {
            path: _path + ".schema",
            expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IOneOf | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown)",
            value: input.schema
        })) && _vu7(input.schema, _path + ".schema", _exceptionable) || _report(_exceptionable, {
            path: _path + ".schema",
            expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IOneOf | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown)",
            value: input.schema
        }), undefined === input.required || "boolean" === typeof input.required || _report(_exceptionable, {
            path: _path + ".required",
            expected: "(boolean | undefined)",
            value: input.required
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), true, undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, OpenApi.IExample> | undefined)",
            value: input.examples
        })) && _vo202(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, OpenApi.IExample> | undefined)",
            value: input.examples
        }) ].every((flag => flag));
        const _vo202 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApi.IExample",
                value
            })) && _vo203(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApi.IExample",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo203 = (input, _path, _exceptionable = true) => [ undefined === input.summary || "string" === typeof input.summary || _report(_exceptionable, {
            path: _path + ".summary",
            expected: "(string | undefined)",
            value: input.summary
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), true, undefined === input.externalValue || "string" === typeof input.externalValue || _report(_exceptionable, {
            path: _path + ".externalValue",
            expected: "(string | undefined)",
            value: input.externalValue
        }) ].every((flag => flag));
        const _vo204 = (input, _path, _exceptionable = true) => [ undefined === input.content || ("object" === typeof input.content && null !== input.content && false === Array.isArray(input.content) || _report(_exceptionable, {
            path: _path + ".content",
            expected: "(OpenApi.IOperation.IContent | undefined)",
            value: input.content
        })) && _vo205(input.content, _path + ".content", _exceptionable) || _report(_exceptionable, {
            path: _path + ".content",
            expected: "(OpenApi.IOperation.IContent | undefined)",
            value: input.content
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.required || "boolean" === typeof input.required || _report(_exceptionable, {
            path: _path + ".required",
            expected: "(boolean | undefined)",
            value: input.required
        }), undefined === input["x-nestia-encrypted"] || "boolean" === typeof input["x-nestia-encrypted"] || _report(_exceptionable, {
            path: _path + '["x-nestia-encrypted"]',
            expected: "(boolean | undefined)",
            value: input["x-nestia-encrypted"]
        }) ].every((flag => flag));
        const _vo205 = (input, _path, _exceptionable = true) => [ undefined === input["text/plain"] || ("object" === typeof input["text/plain"] && null !== input["text/plain"] && false === Array.isArray(input["text/plain"]) || _report(_exceptionable, {
            path: _path + '["text/plain"]',
            expected: "(OpenApi.IOperation.IMediaType | undefined)",
            value: input["text/plain"]
        })) && _vo206(input["text/plain"], _path + '["text/plain"]', _exceptionable) || _report(_exceptionable, {
            path: _path + '["text/plain"]',
            expected: "(OpenApi.IOperation.IMediaType | undefined)",
            value: input["text/plain"]
        }), undefined === input["application/json"] || ("object" === typeof input["application/json"] && null !== input["application/json"] && false === Array.isArray(input["application/json"]) || _report(_exceptionable, {
            path: _path + '["application/json"]',
            expected: "(OpenApi.IOperation.IMediaType | undefined)",
            value: input["application/json"]
        })) && _vo206(input["application/json"], _path + '["application/json"]', _exceptionable) || _report(_exceptionable, {
            path: _path + '["application/json"]',
            expected: "(OpenApi.IOperation.IMediaType | undefined)",
            value: input["application/json"]
        }), undefined === input["application/x-www-form-url-encoded"] || ("object" === typeof input["application/x-www-form-url-encoded"] && null !== input["application/x-www-form-url-encoded"] && false === Array.isArray(input["application/x-www-form-url-encoded"]) || _report(_exceptionable, {
            path: _path + '["application/x-www-form-url-encoded"]',
            expected: "(OpenApi.IOperation.IMediaType | undefined)",
            value: input["application/x-www-form-url-encoded"]
        })) && _vo206(input["application/x-www-form-url-encoded"], _path + '["application/x-www-form-url-encoded"]', _exceptionable) || _report(_exceptionable, {
            path: _path + '["application/x-www-form-url-encoded"]',
            expected: "(OpenApi.IOperation.IMediaType | undefined)",
            value: input["application/x-www-form-url-encoded"]
        }), undefined === input["multipart/form-data"] || ("object" === typeof input["multipart/form-data"] && null !== input["multipart/form-data"] && false === Array.isArray(input["multipart/form-data"]) || _report(_exceptionable, {
            path: _path + '["multipart/form-data"]',
            expected: "(OpenApi.IOperation.IMediaType | undefined)",
            value: input["multipart/form-data"]
        })) && _vo206(input["multipart/form-data"], _path + '["multipart/form-data"]', _exceptionable) || _report(_exceptionable, {
            path: _path + '["multipart/form-data"]',
            expected: "(OpenApi.IOperation.IMediaType | undefined)",
            value: input["multipart/form-data"]
        }), undefined === input["*/*"] || ("object" === typeof input["*/*"] && null !== input["*/*"] && false === Array.isArray(input["*/*"]) || _report(_exceptionable, {
            path: _path + '["*/*"]',
            expected: "(OpenApi.IOperation.IMediaType | undefined)",
            value: input["*/*"]
        })) && _vo206(input["*/*"], _path + '["*/*"]', _exceptionable) || _report(_exceptionable, {
            path: _path + '["*/*"]',
            expected: "(OpenApi.IOperation.IMediaType | undefined)",
            value: input["*/*"]
        }), false === _exceptionable || Object.keys(input).map((key => {
            if ([ "text/plain", "application/json", "application/x-www-form-url-encoded", "multipart/form-data", "*/*" ].some((prop => key === prop))) return true;
            const value = input[key];
            if (undefined === value) return true;
            return undefined === value || ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApi.IOperation.IMediaType | undefined)",
                value
            })) && _vo206(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApi.IOperation.IMediaType | undefined)",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo206 = (input, _path, _exceptionable = true) => [ undefined === input.schema || ("object" === typeof input.schema && null !== input.schema && false === Array.isArray(input.schema) || _report(_exceptionable, {
            path: _path + ".schema",
            expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IOneOf | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown | undefined)",
            value: input.schema
        })) && _vu7(input.schema, _path + ".schema", _exceptionable) || _report(_exceptionable, {
            path: _path + ".schema",
            expected: "(OpenApi.IJsonSchema.IArray | OpenApi.IJsonSchema.IBoolean | OpenApi.IJsonSchema.IConstant | OpenApi.IJsonSchema.IInteger | OpenApi.IJsonSchema.INull | OpenApi.IJsonSchema.INumber | OpenApi.IJsonSchema.IObject | OpenApi.IJsonSchema.IOneOf | OpenApi.IJsonSchema.IReference<string> | OpenApi.IJsonSchema.IString | OpenApi.IJsonSchema.ITuple | OpenApi.IJsonSchema.IUnknown | undefined)",
            value: input.schema
        }), true, undefined === input.examples || ("object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, OpenApi.IExample> | undefined)",
            value: input.examples
        })) && _vo202(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Record<string, OpenApi.IExample> | undefined)",
            value: input.examples
        }) ].every((flag => flag));
        const _vo207 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApi.IOperation.IResponse",
                value
            })) && _vo208(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApi.IOperation.IResponse",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo208 = (input, _path, _exceptionable = true) => [ undefined === input.headers || ("object" === typeof input.headers && null !== input.headers && false === Array.isArray(input.headers) || _report(_exceptionable, {
            path: _path + ".headers",
            expected: "(Record<string, OpenApi.IOperation.IParameter> | undefined)",
            value: input.headers
        })) && _vo209(input.headers, _path + ".headers", _exceptionable) || _report(_exceptionable, {
            path: _path + ".headers",
            expected: "(Record<string, OpenApi.IOperation.IParameter> | undefined)",
            value: input.headers
        }), undefined === input.content || ("object" === typeof input.content && null !== input.content && false === Array.isArray(input.content) || _report(_exceptionable, {
            path: _path + ".content",
            expected: "(OpenApi.IOperation.IContent | undefined)",
            value: input.content
        })) && _vo205(input.content, _path + ".content", _exceptionable) || _report(_exceptionable, {
            path: _path + ".content",
            expected: "(OpenApi.IOperation.IContent | undefined)",
            value: input.content
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input["x-nestia-encrypted"] || "boolean" === typeof input["x-nestia-encrypted"] || _report(_exceptionable, {
            path: _path + '["x-nestia-encrypted"]',
            expected: "(boolean | undefined)",
            value: input["x-nestia-encrypted"]
        }) ].every((flag => flag));
        const _vo209 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApi.IOperation.IParameter",
                value
            })) && _vo201(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "OpenApi.IOperation.IParameter",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo210 = (input, _path, _exceptionable = true) => [ "string" === typeof input.name || _report(_exceptionable, {
            path: _path + ".name",
            expected: "string",
            value: input.name
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }) ].every((flag => flag));
        const _vu0 = (input, _path, _exceptionable = true) => (() => {
            if ("boolean" === input.type) return _vo5(input, _path, _exceptionable); else if ("number" === input.type) return _vo7(input, _path, _exceptionable); else if ("integer" === input.type) return _vo6(input, _path, _exceptionable); else if ("string" === input.type) return _vo8(input, _path, _exceptionable); else if ("array" === input.type) return _vo9(input, _path, _exceptionable); else if ("object" === input.type) return _vo10(input, _path, _exceptionable); else if (undefined !== input.$ref) return _vo11(input, _path, _exceptionable); else if (undefined !== input["x-anyOf"]) return _vo12(input, _path, _exceptionable); else if (undefined !== input["x-oneOf"]) return _vo13(input, _path, _exceptionable); else if ("null" === input.type) return _vo14(input, _path, _exceptionable); else return _vo15(input, _path, _exceptionable);
        })();
        const _vu1 = (input, _path, _exceptionable = true) => (() => {
            if ("boolean" === input.type) return _vo17(input, _path, _exceptionable); else if ("number" === input.type) return _vo19(input, _path, _exceptionable); else if ("integer" === input.type) return _vo18(input, _path, _exceptionable); else if ("string" === input.type) return _vo20(input, _path, _exceptionable); else if ("array" === input.type) return _vo21(input, _path, _exceptionable); else if ("object" === input.type) return _vo22(input, _path, _exceptionable); else if (undefined !== input["x-anyOf"]) return _vo24(input, _path, _exceptionable); else if (undefined !== input["x-oneOf"]) return _vo25(input, _path, _exceptionable); else if ("null" === input.type) return _vo26(input, _path, _exceptionable); else if (undefined !== input.schema) return _vo28(input, _path, _exceptionable); else return _vo23(input, _path, false) || _vo27(input, _path, false) || _vo42(input, _path, false);
        })();
        const _vu2 = (input, _path, _exceptionable = true) => (() => {
            if ("boolean" === input.type) return _vo17(input, _path, _exceptionable); else if ("number" === input.type) return _vo19(input, _path, _exceptionable); else if ("integer" === input.type) return _vo18(input, _path, _exceptionable); else if ("string" === input.type) return _vo20(input, _path, _exceptionable); else if ("array" === input.type) return _vo21(input, _path, _exceptionable); else if ("object" === input.type) return _vo22(input, _path, _exceptionable); else if (undefined !== input["x-anyOf"]) return _vo24(input, _path, _exceptionable); else if (undefined !== input["x-oneOf"]) return _vo25(input, _path, _exceptionable); else if ("null" === input.type) return _vo26(input, _path, _exceptionable); else if (undefined !== input.schema) return _vo28(input, _path, _exceptionable); else return _vo23(input, _path, false) || _vo27(input, _path, false) || _vo44(input, _path, false);
        })();
        const _vu3 = (input, _path, _exceptionable = true) => (() => {
            if ("boolean" === input.type) return _vo57(input, _path, _exceptionable); else if ("number" === input.type) return _vo60(input, _path, _exceptionable); else if ("integer" === input.type) return _vo59(input, _path, _exceptionable); else if ("string" === input.type) return _vo61(input, _path, _exceptionable); else if ("array" === input.type) return _vo62(input, _path, _exceptionable); else if ("object" === input.type) return _vo63(input, _path, _exceptionable); else if (undefined !== input.$ref) return _vo64(input, _path, _exceptionable); else if (undefined !== input.allOf) return _vo65(input, _path, _exceptionable); else if (undefined !== input.anyOf) return _vo66(input, _path, _exceptionable); else if (undefined !== input.oneOf) return _vo67(input, _path, _exceptionable); else if ("null" === input.type) return _vo69(input, _path, _exceptionable); else return _vo70(input, _path, _exceptionable);
        })();
        const _vu4 = (input, _path, _exceptionable = true) => (() => {
            if (undefined !== input["in"]) return _vo82(input, _path, _exceptionable); else if ("string" === typeof input.$ref && RegExp(/^#\/components\/parameters\/(.*)/).test(input.$ref)) return _vo99(input, _path, _exceptionable); else if ("string" === typeof input.$ref && RegExp(/^#\/components\/headers\/(.*)/).test(input.$ref)) return _vo80(input, _path, _exceptionable); else return _report(_exceptionable, {
                path: _path,
                expected: "(OpenApiV3.IOperation.IParameter | OpenApiV3.IJsonSchema.IReference<`#/components/parameters/${string}`> | OpenApiV3.IJsonSchema.IReference<`#/components/headers/${string}`>)",
                value: input
            });
        })();
        const _vu5 = (input, _path, _exceptionable = true) => (() => {
            if ("object" === input.type) return _vo114(input, _path, _exceptionable); else if (Array.isArray(input.type) && input.type.map(((elem, _index164) => "string" === elem || "number" === elem || "boolean" === elem || "object" === elem || "integer" === elem || "array" === elem || "null" === elem)).every((flag => flag))) return _vo115(input, _path, _exceptionable); else if ("boolean" === input.type) return _vo117(input, _path, _exceptionable); else if ("number" === input.type) return _vo119(input, _path, _exceptionable); else if ("integer" === input.type) return _vo118(input, _path, _exceptionable); else if ("string" === input.type) return _vo120(input, _path, _exceptionable); else if ("array" === input.type) return _vo121(input, _path, _exceptionable); else if (undefined !== input.$recursiveRef) return _vo123(input, _path, _exceptionable); else if ("null" === input.type) return _vo128(input, _path, _exceptionable); else return (() => {
                if (undefined !== input["const"]) return _vo116(input, _path, _exceptionable); else if (undefined !== input.$ref) return _vo122(input, _path, _exceptionable); else if (undefined !== input.allOf) return _vo124(input, _path, _exceptionable); else if (undefined !== input.anyOf) return _vo125(input, _path, _exceptionable); else if (undefined !== input.oneOf) return _vo126(input, _path, _exceptionable); else return _vo129(input, _path, _exceptionable);
            })();
        })();
        const _vu6 = (input, _path, _exceptionable = true) => (() => {
            if (undefined !== input["in"]) return _vo132(input, _path, _exceptionable); else if ("string" === typeof input.$ref && RegExp(/^#\/components\/parameters\/(.*)/).test(input.$ref)) return _vo137(input, _path, _exceptionable); else if ("string" === typeof input.$ref && RegExp(/^#\/components\/headers\/(.*)/).test(input.$ref)) return _vo136(input, _path, _exceptionable); else return _report(_exceptionable, {
                path: _path,
                expected: "(OpenApiV3_1.IOperation.IParameter | OpenApiV3_1.IJsonSchema.IReference<`#/components/parameters/${string}`> | OpenApiV3_1.IJsonSchema.IReference<`#/components/headers/${string}`>)",
                value: input
            });
        })();
        const _vu7 = (input, _path, _exceptionable = true) => (() => {
            if (undefined !== input["const"]) return _vo175(input, _path, _exceptionable); else if ("boolean" === input.type) return _vo176(input, _path, _exceptionable); else if ("number" === input.type) return _vo178(input, _path, _exceptionable); else if ("integer" === input.type) return _vo177(input, _path, _exceptionable); else if ("string" === input.type) return _vo179(input, _path, _exceptionable); else if (undefined !== input.items) return _vo180(input, _path, _exceptionable); else if (undefined !== input.prefixItems) return _vo181(input, _path, _exceptionable); else if ("object" === input.type) return _vo182(input, _path, _exceptionable); else if (undefined !== input.$ref) return _vo183(input, _path, _exceptionable); else if (undefined !== input.oneOf) return _vo184(input, _path, _exceptionable); else if ("null" === input.type) return _vo185(input, _path, _exceptionable); else return _vo186(input, _path, _exceptionable);
        })();
        const _vu8 = (input, _path, _exceptionable = true) => (() => {
            if (undefined !== input["const"]) return _vo175(input, _path, _exceptionable); else if ("boolean" === input.type) return _vo176(input, _path, _exceptionable); else if ("number" === input.type) return _vo178(input, _path, _exceptionable); else if ("integer" === input.type) return _vo177(input, _path, _exceptionable); else if ("string" === input.type) return _vo179(input, _path, _exceptionable); else if (undefined !== input.items) return _vo180(input, _path, _exceptionable); else if (undefined !== input.prefixItems) return _vo181(input, _path, _exceptionable); else if ("object" === input.type) return _vo182(input, _path, _exceptionable); else if (undefined !== input.$ref) return _vo183(input, _path, _exceptionable); else if ("null" === input.type) return _vo185(input, _path, _exceptionable); else return _vo186(input, _path, _exceptionable);
        })();
        const _vu9 = (input, _path, _exceptionable = true) => (() => {
            if ("boolean" === input.type) return _vo17(input, _path, _exceptionable); else if ("number" === input.type) return _vo19(input, _path, _exceptionable); else if ("integer" === input.type) return _vo18(input, _path, _exceptionable); else if ("string" === input.type) return _vo20(input, _path, _exceptionable); else if ("array" === input.type) return _vo21(input, _path, _exceptionable); else if ("object" === input.type) return _vo22(input, _path, _exceptionable); else if (undefined !== input.$ref) return _vo23(input, _path, _exceptionable); else if (undefined !== input["x-anyOf"]) return _vo24(input, _path, _exceptionable); else if (undefined !== input["x-oneOf"]) return _vo25(input, _path, _exceptionable); else if ("null" === input.type) return _vo26(input, _path, _exceptionable); else if (undefined !== input.schema) return _vo28(input, _path, _exceptionable); else return _vo27(input, _path, _exceptionable);
        })();
        const _vu10 = (input, _path, _exceptionable = true) => (() => {
            if ("apiKey" === input.type) return _vo32(input, _path, _exceptionable); else if ("basic" === input.type) return _vo33(input, _path, _exceptionable); else if ("implicit" === input.flow) return _vo34(input, _path, _exceptionable); else if ("accessCode" === input.flow) return _vo36(input, _path, _exceptionable); else if ("application" === input.flow) return _vo38(input, _path, _exceptionable); else if ("password" === input.flow) return _vo37(input, _path, _exceptionable); else return _report(_exceptionable, {
                path: _path,
                expected: "(SwaggerV2.ISecurityDefinition.IApiKey | SwaggerV2.ISecurityDefinition.IBasic | SwaggerV2.ISecurityDefinition.IOauth2Implicit | SwaggerV2.ISecurityDefinition.IOauth2AccessCode | SwaggerV2.ISecurityDefinition.IOauth2Application | SwaggerV2.ISecurityDefinition.IOauth2Password)",
                value: input
            });
        })();
        const _vu11 = (input, _path, _exceptionable = true) => (() => {
            if (undefined !== input.$ref) return _vo46(input, _path, _exceptionable); else return _vo30(input, _path, _exceptionable);
        })();
        const _vu12 = (input, _path, _exceptionable = true) => (() => {
            if (undefined !== input.$ref) return _vo77(input, _path, _exceptionable); else return _vo76(input, _path, _exceptionable);
        })();
        const _vu13 = (input, _path, _exceptionable = true) => (() => {
            if (undefined !== input.schema) return _vo79(input, _path, _exceptionable); else if (undefined !== input.$ref) return _vo80(input, _path, _exceptionable); else return _report(_exceptionable, {
                path: _path,
                expected: '(Omit<OpenApiV3.IOperation.IParameter, "in"> | OpenApiV3.IJsonSchema.IReference<`#/components/headers/${string}`>)',
                value: input
            });
        })();
        const _vu14 = (input, _path, _exceptionable = true) => (() => {
            if ("apiKey" === input.type) return _vo86(input, _path, _exceptionable); else if ("basic" === input.scheme) return _vo87(input, _path, _exceptionable); else if ("bearer" === input.scheme) return _vo88(input, _path, _exceptionable); else if ("oauth2" === input.type) return _vo89(input, _path, _exceptionable); else if ("openIdConnect" === input.type) return _vo94(input, _path, _exceptionable); else return _report(_exceptionable, {
                path: _path,
                expected: "(OpenApiV3.ISecurityScheme.IApiKey | OpenApiV3.ISecurityScheme.IHttpBasic | OpenApiV3.ISecurityScheme.IHttpBearer | OpenApiV3.ISecurityScheme.IOAuth2 | OpenApiV3.ISecurityScheme.IOpenId)",
                value: input
            });
        })();
        const _vu15 = (input, _path, _exceptionable = true) => (() => {
            if (undefined !== input.$ref) return _vo101(input, _path, _exceptionable); else return _vo84(input, _path, _exceptionable);
        })();
        const _vu16 = (input, _path, _exceptionable = true) => (() => {
            if (undefined !== input.$ref) return _vo103(input, _path, _exceptionable); else return _vo72(input, _path, _exceptionable);
        })();
        const _vu17 = (input, _path, _exceptionable = true) => (() => {
            if (undefined !== input.$ref) return _vo135(input, _path, _exceptionable); else return _vo134(input, _path, _exceptionable);
        })();
        const _vu18 = (input, _path, _exceptionable = true) => (() => {
            if (undefined !== input.$ref) return _vo142(input, _path, _exceptionable); else return _vo139(input, _path, _exceptionable);
        })();
        const _vu19 = (input, _path, _exceptionable = true) => (() => {
            if (undefined !== input.$ref) return _vo147(input, _path, _exceptionable); else return _vo144(input, _path, _exceptionable);
        })();
        const _vu20 = (input, _path, _exceptionable = true) => (() => {
            if (undefined !== input.$ref) return _vo136(input, _path, _exceptionable); else if (undefined !== input.schema) return _vo146(input, _path, _exceptionable); else return _report(_exceptionable, {
                path: _path,
                expected: '(OpenApiV3_1.IJsonSchema.IReference<`#/components/headers/${string}`> | Omit<OpenApiV3_1.IOperation.IParameter, "in">)',
                value: input
            });
        })();
        const _vu21 = (input, _path, _exceptionable = true) => (() => {
            if ("apiKey" === input.type) return _vo152(input, _path, _exceptionable); else if ("basic" === input.scheme) return _vo153(input, _path, _exceptionable); else if ("bearer" === input.scheme) return _vo154(input, _path, _exceptionable); else if ("oauth2" === input.type) return _vo155(input, _path, _exceptionable); else if ("openIdConnect" === input.type) return _vo160(input, _path, _exceptionable); else return _report(_exceptionable, {
                path: _path,
                expected: "(OpenApiV3_1.ISecurityScheme.IApiKey | OpenApiV3_1.ISecurityScheme.IHttpBasic | OpenApiV3_1.ISecurityScheme.IHttpBearer | OpenApiV3_1.ISecurityScheme.IOAuth2 | OpenApiV3_1.ISecurityScheme.IOpenId)",
                value: input
            });
        })();
        const _vu22 = (input, _path, _exceptionable = true) => (() => {
            if (undefined !== input.$ref) return _vo164(input, _path, _exceptionable); else return _vo131(input, _path, _exceptionable);
        })();
        const _vu23 = (input, _path, _exceptionable = true) => (() => {
            if ("apiKey" === input.type) return _vo189(input, _path, _exceptionable); else if ("basic" === input.scheme) return _vo190(input, _path, _exceptionable); else if ("bearer" === input.scheme) return _vo191(input, _path, _exceptionable); else if ("oauth2" === input.type) return _vo192(input, _path, _exceptionable); else if ("openIdConnect" === input.type) return _vo197(input, _path, _exceptionable); else return _report(_exceptionable, {
                path: _path,
                expected: "(OpenApi.ISecurityScheme.IApiKey | OpenApi.ISecurityScheme.IHttpBasic | OpenApi.ISecurityScheme.IHttpBearer | OpenApi.ISecurityScheme.IOAuth2 | OpenApi.ISecurityScheme.IOpenId)",
                value: input
            });
        })();
        const _vu24 = (input, _path, _exceptionable = true) => (() => {
            if (undefined !== input.swagger) return _vo0(input, _path, _exceptionable); else if (null !== input.openapi && undefined !== input.openapi && ("3.0" === input.openapi || "string" === typeof input.openapi && RegExp(/^3\.0\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(input.openapi))) return _vo48(input, _path, _exceptionable); else if ("string" === typeof input.openapi && RegExp(/^3\.1\.[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/).test(input.openapi)) return _vo105(input, _path, _exceptionable); else if (undefined !== input["x-samchon-emended-v4"]) return _vo166(input, _path, _exceptionable); else return _report(_exceptionable, {
                path: _path,
                expected: "(SwaggerV2.IDocument | OpenApiV3.IDocument | OpenApiV3_1.IDocument | OpenApi.IDocument)",
                value: input
            });
        })();
        const __is = input => "object" === typeof input && null !== input && _iu24(input);
        let errors;
        let _report;
        return input => {
            if (false === __is(input)) {
                errors = [];
                _report = __typia_transform__validateReport._validateReport(errors);
                ((input, _path, _exceptionable = true) => ("object" === typeof input && null !== input || _report(true, {
                    path: _path + "",
                    expected: "(OpenApi.IDocument | OpenApiV3.IDocument | OpenApiV3_1.IDocument | SwaggerV2.IDocument)",
                    value: input
                })) && _vu24(input, _path + "", true) || _report(true, {
                    path: _path + "",
                    expected: "(OpenApi.IDocument | OpenApiV3.IDocument | OpenApiV3_1.IDocument | SwaggerV2.IDocument)",
                    value: input
                }))(input, "$input", true);
                const success = 0 === errors.length;
                return success ? {
                    success,
                    data: input
                } : {
                    success,
                    errors,
                    data: input
                };
            }
            return {
                success: true,
                data: input
            };
        };
    })()(props.document);
    if (inspect.success === false) {
        return inspect;
    }
    return {
        success: true,
        data: HttpLlm.application({
            model: props.model,
            document: OpenApi.convert(inspect.data),
            options: props.options
        })
    };
}

async function validateMcpController(props) {
    const {ListToolsResultSchema} = await import("@modelcontextprotocol/sdk/types.js");
    const {tools} = await props.client.request({
        method: "tools/list"
    }, ListToolsResultSchema);
    const inspect = (() => {
        const _io0 = input => "string" === typeof input.name && input.name.length <= 64 && (undefined === input.description || "string" === typeof input.description) && ("object" === typeof input.inputSchema && null !== input.inputSchema && _iu1(input.inputSchema));
        const _io1 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && (undefined === input.properties || "object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) && _io2(input.properties)) && (undefined === input.required || Array.isArray(input.required) && input.required.every((elem => "string" === typeof elem))) && (null !== input.additionalProperties && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || "object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) && _iu0(input.additionalProperties))) && (undefined === input.maxProperties || "number" === typeof input.maxProperties) && (undefined === input.minProperties || "number" === typeof input.minProperties) && "object" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io5(input.examples)))) && (undefined === input.$defs || "object" === typeof input.$defs && null !== input.$defs && false === Array.isArray(input.$defs) && _io2(input.$defs));
        const _io2 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "object" === typeof value && null !== value && false === Array.isArray(value) && _iu0(value);
        }));
        const _io3 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && (undefined === input.properties || "object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) && _io2(input.properties)) && (undefined === input.required || Array.isArray(input.required) && input.required.every((elem => "string" === typeof elem))) && (null !== input.additionalProperties && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || "object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) && _iu0(input.additionalProperties))) && (undefined === input.maxProperties || "number" === typeof input.maxProperties) && (undefined === input.minProperties || "number" === typeof input.minProperties) && "object" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io5(input.examples))));
        const _io4 = input => Array.isArray(input.type) && input.type.every((elem => "string" === elem || "number" === elem || "boolean" === elem || "object" === elem || "integer" === elem || "array" === elem || "null" === elem)) && (null === input["default"] || undefined === input["default"] || Array.isArray(input["default"])) && (undefined === input["enum"] || Array.isArray(input["enum"])) && ("string" === typeof input["const"] || "number" === typeof input["const"] || "boolean" === typeof input["const"]) && (undefined === input.nullable || "boolean" === typeof input.nullable) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io5(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input.minimum || "number" === typeof input.minimum) && (undefined === input.maximum || "number" === typeof input.maximum) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && 0 < input.multipleOf) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum) && (undefined === input.format || "string" === typeof input.format) && (undefined === input.maxLength || "number" === typeof input.maxLength && (Math.floor(input.maxLength) === input.maxLength && 0 <= input.maxLength && input.maxLength <= 0x10000000000000000)) && (undefined === input.pattern || "string" === typeof input.pattern) && (undefined === input.contentMediaType || "string" === typeof input.contentMediaType) && (undefined === input.minLength || "number" === typeof input.minLength && (Math.floor(input.minLength) === input.minLength && 0 <= input.minLength && input.minLength <= 0x10000000000000000)) && (null !== input.items && (undefined === input.items || (Array.isArray(input.items) && input.items.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu0(elem))) || "object" === typeof input.items && null !== input.items && false === Array.isArray(input.items) && _iu0(input.items)))) && (undefined === input.prefixItems || Array.isArray(input.prefixItems) && input.prefixItems.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu0(elem)))) && (undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems) && (null !== input.additionalItems && (undefined === input.additionalItems || "boolean" === typeof input.additionalItems || "object" === typeof input.additionalItems && null !== input.additionalItems && false === Array.isArray(input.additionalItems) && _iu0(input.additionalItems))) && (undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000)) && (undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000)) && (null !== input.additionalProperties && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || "object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) && _iu0(input.additionalProperties))) && (undefined === input.properties || "object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) && _io2(input.properties)) && (undefined === input.required || Array.isArray(input.required) && input.required.every((elem => "string" === typeof elem))) && (undefined === input.maxProperties || "number" === typeof input.maxProperties) && (undefined === input.minProperties || "number" === typeof input.minProperties) && (Array.isArray(input.oneOf) && input.oneOf.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu0(elem)))) && (undefined === input.discriminator || "object" === typeof input.discriminator && null !== input.discriminator && _io17(input.discriminator)) && (Array.isArray(input.anyOf) && input.anyOf.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu0(elem)))) && (Array.isArray(input.allOf) && input.allOf.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu0(elem)))) && "string" === typeof input.$ref;
        const _io5 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return true;
        }));
        const _io6 = input => ("string" === typeof input["const"] || "number" === typeof input["const"] || "boolean" === typeof input["const"]) && (undefined === input.nullable || "boolean" === typeof input.nullable) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io5(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io7 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && (null === input["default"] || undefined === input["default"] || "boolean" === typeof input["default"]) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "boolean" === typeof elem))) && "boolean" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io5(input.examples))));
        const _io8 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && (null === input["default"] || undefined === input["default"] || "number" === typeof input["default"] && (Math.floor(input["default"]) === input["default"] && -0x8000000000000000 <= input["default"] && input["default"] <= 0x8000000000000000)) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "number" === typeof elem))) && (undefined === input.minimum || "number" === typeof input.minimum && (Math.floor(input.minimum) === input.minimum && -0x8000000000000000 <= input.minimum && input.minimum <= 0x8000000000000000)) && (undefined === input.maximum || "number" === typeof input.maximum && (Math.floor(input.maximum) === input.maximum && -0x8000000000000000 <= input.maximum && input.maximum <= 0x8000000000000000)) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum && (Math.floor(input.exclusiveMinimum) === input.exclusiveMinimum && -0x8000000000000000 <= input.exclusiveMinimum && input.exclusiveMinimum <= 0x8000000000000000) || "boolean" === typeof input.exclusiveMinimum) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum && (Math.floor(input.exclusiveMaximum) === input.exclusiveMaximum && -0x8000000000000000 <= input.exclusiveMaximum && input.exclusiveMaximum <= 0x8000000000000000) || "boolean" === typeof input.exclusiveMaximum) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && (Math.floor(input.multipleOf) === input.multipleOf && 0 <= input.multipleOf && input.multipleOf <= 0x10000000000000000 && 0 < input.multipleOf)) && "integer" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io5(input.examples))));
        const _io9 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && (null === input["default"] || undefined === input["default"] || "number" === typeof input["default"]) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "number" === typeof elem))) && (undefined === input.minimum || "number" === typeof input.minimum) && (undefined === input.maximum || "number" === typeof input.maximum) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && 0 < input.multipleOf) && "number" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io5(input.examples))));
        const _io10 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && (null === input["default"] || undefined === input["default"] || "string" === typeof input["default"]) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "string" === typeof elem))) && (undefined === input.format || "string" === typeof input.format) && (undefined === input.pattern || "string" === typeof input.pattern) && (undefined === input.contentMediaType || "string" === typeof input.contentMediaType) && (undefined === input.minLength || "number" === typeof input.minLength && (Math.floor(input.minLength) === input.minLength && 0 <= input.minLength && input.minLength <= 0x10000000000000000)) && (undefined === input.maxLength || "number" === typeof input.maxLength && (Math.floor(input.maxLength) === input.maxLength && 0 <= input.maxLength && input.maxLength <= 0x10000000000000000)) && "string" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io5(input.examples))));
        const _io11 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && (null !== input.items && (undefined === input.items || (Array.isArray(input.items) && input.items.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu0(elem))) || "object" === typeof input.items && null !== input.items && false === Array.isArray(input.items) && _iu0(input.items)))) && (undefined === input.prefixItems || Array.isArray(input.prefixItems) && input.prefixItems.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu0(elem)))) && (undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems) && (null !== input.additionalItems && (undefined === input.additionalItems || "boolean" === typeof input.additionalItems || "object" === typeof input.additionalItems && null !== input.additionalItems && false === Array.isArray(input.additionalItems) && _iu0(input.additionalItems))) && (undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000)) && (undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000)) && "array" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io5(input.examples))));
        const _io12 = input => "string" === typeof input.$ref && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io5(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io13 = input => "string" === typeof input.$recursiveRef && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io5(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io14 = input => Array.isArray(input.allOf) && input.allOf.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu0(elem))) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io5(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io15 = input => Array.isArray(input.anyOf) && input.anyOf.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu0(elem))) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io5(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io16 = input => Array.isArray(input.oneOf) && input.oneOf.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu0(elem))) && (undefined === input.discriminator || "object" === typeof input.discriminator && null !== input.discriminator && _io17(input.discriminator)) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io5(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
        const _io17 = input => "string" === typeof input.propertyName && (undefined === input.mapping || "object" === typeof input.mapping && null !== input.mapping && false === Array.isArray(input.mapping) && _io18(input.mapping));
        const _io18 = input => Object.keys(input).every((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "string" === typeof value;
        }));
        const _io19 = input => (null === input["default"] || undefined === input["default"]) && "null" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io5(input.examples))));
        const _io20 = input => null !== input.type && undefined === input.type && true && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io5(input.examples))));
        const _io21 = input => "string" === typeof input.$ref && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io5(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input.$defs || "object" === typeof input.$defs && null !== input.$defs && false === Array.isArray(input.$defs) && _io2(input.$defs));
        const _iu0 = input => (() => {
            if ("object" === input.type) return _io3(input); else if (Array.isArray(input.type) && input.type.every((elem => "string" === elem || "number" === elem || "boolean" === elem || "object" === elem || "integer" === elem || "array" === elem || "null" === elem))) return _io4(input); else if ("boolean" === input.type) return _io7(input); else if ("number" === input.type) return _io9(input); else if ("integer" === input.type) return _io8(input); else if ("string" === input.type) return _io10(input); else if ("array" === input.type) return _io11(input); else if (undefined !== input.$recursiveRef) return _io13(input); else if ("null" === input.type) return _io19(input); else return (() => {
                if (undefined !== input["const"]) return _io6(input); else if (undefined !== input.$ref) return _io12(input); else if (undefined !== input.allOf) return _io14(input); else if (undefined !== input.anyOf) return _io15(input); else if (undefined !== input.oneOf) return _io16(input); else return _io20(input);
            })();
        })();
        const _iu1 = input => (() => {
            if (undefined !== input.type) return _io1(input); else if (undefined !== input.$ref) return _io21(input); else return false;
        })();
        const _vo0 = (input, _path, _exceptionable = true) => [ "string" === typeof input.name && (input.name.length <= 64 || _report(_exceptionable, {
            path: _path + ".name",
            expected: "string & MaxLength<64>",
            value: input.name
        })) || _report(_exceptionable, {
            path: _path + ".name",
            expected: "(string & MaxLength<64>)",
            value: input.name
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), ("object" === typeof input.inputSchema && null !== input.inputSchema || _report(_exceptionable, {
            path: _path + ".inputSchema",
            expected: "(IObject & { $defs?: Record<string, IJsonSchema> | undefined; } | IReference<string> & { $defs?: Record<string, IJsonSchema> | undefined; })",
            value: input.inputSchema
        })) && _vu1(input.inputSchema, _path + ".inputSchema", _exceptionable) || _report(_exceptionable, {
            path: _path + ".inputSchema",
            expected: "(IObject & { $defs?: Record<string, IJsonSchema> | undefined; } | IReference<string> & { $defs?: Record<string, IJsonSchema> | undefined; })",
            value: input.inputSchema
        }) ].every((flag => flag));
        const _vo1 = (input, _path, _exceptionable = true) => [ undefined === input.nullable || "boolean" === typeof input.nullable || _report(_exceptionable, {
            path: _path + ".nullable",
            expected: "(boolean | undefined)",
            value: input.nullable
        }), undefined === input.properties || ("object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) || _report(_exceptionable, {
            path: _path + ".properties",
            expected: "(Record<string, OpenApiV3_1.IJsonSchema> | undefined)",
            value: input.properties
        })) && _vo2(input.properties, _path + ".properties", _exceptionable) || _report(_exceptionable, {
            path: _path + ".properties",
            expected: "(Record<string, OpenApiV3_1.IJsonSchema> | undefined)",
            value: input.properties
        }), undefined === input.required || (Array.isArray(input.required) || _report(_exceptionable, {
            path: _path + ".required",
            expected: "(Array<string> | undefined)",
            value: input.required
        })) && input.required.map(((elem, _index22) => "string" === typeof elem || _report(_exceptionable, {
            path: _path + ".required[" + _index22 + "]",
            expected: "string",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".required",
            expected: "(Array<string> | undefined)",
            value: input.required
        }), (null !== input.additionalProperties || _report(_exceptionable, {
            path: _path + ".additionalProperties",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalProperties
        })) && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || ("object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) || _report(_exceptionable, {
            path: _path + ".additionalProperties",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalProperties
        })) && _vu0(input.additionalProperties, _path + ".additionalProperties", _exceptionable) || _report(_exceptionable, {
            path: _path + ".additionalProperties",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalProperties
        })), undefined === input.maxProperties || "number" === typeof input.maxProperties || _report(_exceptionable, {
            path: _path + ".maxProperties",
            expected: "(number | undefined)",
            value: input.maxProperties
        }), undefined === input.minProperties || "number" === typeof input.minProperties || _report(_exceptionable, {
            path: _path + ".minProperties",
            expected: "(number | undefined)",
            value: input.minProperties
        }), "object" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"object"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo5(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })), undefined === input.$defs || ("object" === typeof input.$defs && null !== input.$defs && false === Array.isArray(input.$defs) || _report(_exceptionable, {
            path: _path + ".$defs",
            expected: "(Record<string, OpenApiV3_1.IJsonSchema> | undefined)",
            value: input.$defs
        })) && _vo2(input.$defs, _path + ".$defs", _exceptionable) || _report(_exceptionable, {
            path: _path + ".$defs",
            expected: "(Record<string, OpenApiV3_1.IJsonSchema> | undefined)",
            value: input.$defs
        }) ].every((flag => flag));
        const _vo2 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return ("object" === typeof value && null !== value && false === Array.isArray(value) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value
            })) && _vu0(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo3 = (input, _path, _exceptionable = true) => [ undefined === input.nullable || "boolean" === typeof input.nullable || _report(_exceptionable, {
            path: _path + ".nullable",
            expected: "(boolean | undefined)",
            value: input.nullable
        }), undefined === input.properties || ("object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) || _report(_exceptionable, {
            path: _path + ".properties",
            expected: "(Record<string, OpenApiV3_1.IJsonSchema> | undefined)",
            value: input.properties
        })) && _vo2(input.properties, _path + ".properties", _exceptionable) || _report(_exceptionable, {
            path: _path + ".properties",
            expected: "(Record<string, OpenApiV3_1.IJsonSchema> | undefined)",
            value: input.properties
        }), undefined === input.required || (Array.isArray(input.required) || _report(_exceptionable, {
            path: _path + ".required",
            expected: "(Array<string> | undefined)",
            value: input.required
        })) && input.required.map(((elem, _index23) => "string" === typeof elem || _report(_exceptionable, {
            path: _path + ".required[" + _index23 + "]",
            expected: "string",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".required",
            expected: "(Array<string> | undefined)",
            value: input.required
        }), (null !== input.additionalProperties || _report(_exceptionable, {
            path: _path + ".additionalProperties",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalProperties
        })) && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || ("object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) || _report(_exceptionable, {
            path: _path + ".additionalProperties",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalProperties
        })) && _vu0(input.additionalProperties, _path + ".additionalProperties", _exceptionable) || _report(_exceptionable, {
            path: _path + ".additionalProperties",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalProperties
        })), undefined === input.maxProperties || "number" === typeof input.maxProperties || _report(_exceptionable, {
            path: _path + ".maxProperties",
            expected: "(number | undefined)",
            value: input.maxProperties
        }), undefined === input.minProperties || "number" === typeof input.minProperties || _report(_exceptionable, {
            path: _path + ".minProperties",
            expected: "(number | undefined)",
            value: input.minProperties
        }), "object" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"object"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo5(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) ].every((flag => flag));
        const _vo4 = (input, _path, _exceptionable = true) => [ (Array.isArray(input.type) || _report(_exceptionable, {
            path: _path + ".type",
            expected: 'Array<"string" | "number" | "boolean" | "object" | "integer" | "array" | "null">',
            value: input.type
        })) && input.type.map(((elem, _index24) => "string" === elem || "number" === elem || "boolean" === elem || "object" === elem || "integer" === elem || "array" === elem || "null" === elem || _report(_exceptionable, {
            path: _path + ".type[" + _index24 + "]",
            expected: '("array" | "boolean" | "integer" | "null" | "number" | "object" | "string")',
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".type",
            expected: 'Array<"string" | "number" | "boolean" | "object" | "integer" | "array" | "null">',
            value: input.type
        }), null === input["default"] || undefined === input["default"] || Array.isArray(input["default"]) || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: "(Array<any> | null | undefined)",
            value: input["default"]
        }), undefined === input["enum"] || Array.isArray(input["enum"]) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<any> | undefined)",
            value: input["enum"]
        }), "string" === typeof input["const"] || "number" === typeof input["const"] || "boolean" === typeof input["const"] || _report(_exceptionable, {
            path: _path + '["const"]',
            expected: "(boolean | number | string)",
            value: input["const"]
        }), undefined === input.nullable || "boolean" === typeof input.nullable || _report(_exceptionable, {
            path: _path + ".nullable",
            expected: "(boolean | undefined)",
            value: input.nullable
        }), (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo5(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, undefined === input.minimum || "number" === typeof input.minimum || _report(_exceptionable, {
            path: _path + ".minimum",
            expected: "(number | undefined)",
            value: input.minimum
        }), undefined === input.maximum || "number" === typeof input.maximum || _report(_exceptionable, {
            path: _path + ".maximum",
            expected: "(number | undefined)",
            value: input.maximum
        }), undefined === input.multipleOf || "number" === typeof input.multipleOf && (0 < input.multipleOf || _report(_exceptionable, {
            path: _path + ".multipleOf",
            expected: "number & ExclusiveMinimum<0>",
            value: input.multipleOf
        })) || _report(_exceptionable, {
            path: _path + ".multipleOf",
            expected: "((number & ExclusiveMinimum<0>) | undefined)",
            value: input.multipleOf
        }), undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum || _report(_exceptionable, {
            path: _path + ".exclusiveMinimum",
            expected: "(boolean | number | undefined)",
            value: input.exclusiveMinimum
        }), undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum || _report(_exceptionable, {
            path: _path + ".exclusiveMaximum",
            expected: "(boolean | number | undefined)",
            value: input.exclusiveMaximum
        }), undefined === input.format || "string" === typeof input.format || _report(_exceptionable, {
            path: _path + ".format",
            expected: "(string | undefined)",
            value: input.format
        }), undefined === input.maxLength || "number" === typeof input.maxLength && (Math.floor(input.maxLength) === input.maxLength && 0 <= input.maxLength && input.maxLength <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".maxLength",
            expected: 'number & Type<"uint64">',
            value: input.maxLength
        })) || _report(_exceptionable, {
            path: _path + ".maxLength",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.maxLength
        }), undefined === input.pattern || "string" === typeof input.pattern || _report(_exceptionable, {
            path: _path + ".pattern",
            expected: "(string | undefined)",
            value: input.pattern
        }), undefined === input.contentMediaType || "string" === typeof input.contentMediaType || _report(_exceptionable, {
            path: _path + ".contentMediaType",
            expected: "(string | undefined)",
            value: input.contentMediaType
        }), undefined === input.minLength || "number" === typeof input.minLength && (Math.floor(input.minLength) === input.minLength && 0 <= input.minLength && input.minLength <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".minLength",
            expected: 'number & Type<"uint64">',
            value: input.minLength
        })) || _report(_exceptionable, {
            path: _path + ".minLength",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.minLength
        }), (null !== input.items || _report(_exceptionable, {
            path: _path + ".items",
            expected: "(Array<OpenApiV3_1.IJsonSchema> | OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | undefined)",
            value: input.items
        })) && (undefined === input.items || (Array.isArray(input.items) && input.items.map(((elem, _index25) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
            path: _path + ".items[" + _index25 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        })) && _vu0(elem, _path + ".items[" + _index25 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".items[" + _index25 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        }))).every((flag => flag)) || "object" === typeof input.items && null !== input.items && false === Array.isArray(input.items) && _vu0(input.items, _path + ".items", _exceptionable) || _report(_exceptionable, {
            path: _path + ".items",
            expected: "(Array<OpenApiV3_1.IJsonSchema> | OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | undefined)",
            value: input.items
        })) || _report(_exceptionable, {
            path: _path + ".items",
            expected: "(Array<OpenApiV3_1.IJsonSchema> | OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | undefined)",
            value: input.items
        })), undefined === input.prefixItems || (Array.isArray(input.prefixItems) || _report(_exceptionable, {
            path: _path + ".prefixItems",
            expected: "(Array<OpenApiV3_1.IJsonSchema> | undefined)",
            value: input.prefixItems
        })) && input.prefixItems.map(((elem, _index26) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
            path: _path + ".prefixItems[" + _index26 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        })) && _vu0(elem, _path + ".prefixItems[" + _index26 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".prefixItems[" + _index26 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".prefixItems",
            expected: "(Array<OpenApiV3_1.IJsonSchema> | undefined)",
            value: input.prefixItems
        }), undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems || _report(_exceptionable, {
            path: _path + ".uniqueItems",
            expected: "(boolean | undefined)",
            value: input.uniqueItems
        }), (null !== input.additionalItems || _report(_exceptionable, {
            path: _path + ".additionalItems",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalItems
        })) && (undefined === input.additionalItems || "boolean" === typeof input.additionalItems || ("object" === typeof input.additionalItems && null !== input.additionalItems && false === Array.isArray(input.additionalItems) || _report(_exceptionable, {
            path: _path + ".additionalItems",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalItems
        })) && _vu0(input.additionalItems, _path + ".additionalItems", _exceptionable) || _report(_exceptionable, {
            path: _path + ".additionalItems",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalItems
        })), undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".minItems",
            expected: 'number & Type<"uint64">',
            value: input.minItems
        })) || _report(_exceptionable, {
            path: _path + ".minItems",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.minItems
        }), undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".maxItems",
            expected: 'number & Type<"uint64">',
            value: input.maxItems
        })) || _report(_exceptionable, {
            path: _path + ".maxItems",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.maxItems
        }), (null !== input.additionalProperties || _report(_exceptionable, {
            path: _path + ".additionalProperties",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalProperties
        })) && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || ("object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) || _report(_exceptionable, {
            path: _path + ".additionalProperties",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalProperties
        })) && _vu0(input.additionalProperties, _path + ".additionalProperties", _exceptionable) || _report(_exceptionable, {
            path: _path + ".additionalProperties",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalProperties
        })), undefined === input.properties || ("object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) || _report(_exceptionable, {
            path: _path + ".properties",
            expected: "(Record<string, OpenApiV3_1.IJsonSchema> | undefined)",
            value: input.properties
        })) && _vo2(input.properties, _path + ".properties", _exceptionable) || _report(_exceptionable, {
            path: _path + ".properties",
            expected: "(Record<string, OpenApiV3_1.IJsonSchema> | undefined)",
            value: input.properties
        }), undefined === input.required || (Array.isArray(input.required) || _report(_exceptionable, {
            path: _path + ".required",
            expected: "(Array<string> | undefined)",
            value: input.required
        })) && input.required.map(((elem, _index27) => "string" === typeof elem || _report(_exceptionable, {
            path: _path + ".required[" + _index27 + "]",
            expected: "string",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".required",
            expected: "(Array<string> | undefined)",
            value: input.required
        }), undefined === input.maxProperties || "number" === typeof input.maxProperties || _report(_exceptionable, {
            path: _path + ".maxProperties",
            expected: "(number | undefined)",
            value: input.maxProperties
        }), undefined === input.minProperties || "number" === typeof input.minProperties || _report(_exceptionable, {
            path: _path + ".minProperties",
            expected: "(number | undefined)",
            value: input.minProperties
        }), (Array.isArray(input.oneOf) || _report(_exceptionable, {
            path: _path + ".oneOf",
            expected: "Array<OpenApiV3_1.IJsonSchema>",
            value: input.oneOf
        })) && input.oneOf.map(((elem, _index28) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
            path: _path + ".oneOf[" + _index28 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        })) && _vu0(elem, _path + ".oneOf[" + _index28 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".oneOf[" + _index28 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".oneOf",
            expected: "Array<OpenApiV3_1.IJsonSchema>",
            value: input.oneOf
        }), undefined === input.discriminator || ("object" === typeof input.discriminator && null !== input.discriminator || _report(_exceptionable, {
            path: _path + ".discriminator",
            expected: "(OpenApiV3_1.IJsonSchema.IOneOf.IDiscriminator | undefined)",
            value: input.discriminator
        })) && _vo17(input.discriminator, _path + ".discriminator", _exceptionable) || _report(_exceptionable, {
            path: _path + ".discriminator",
            expected: "(OpenApiV3_1.IJsonSchema.IOneOf.IDiscriminator | undefined)",
            value: input.discriminator
        }), (Array.isArray(input.anyOf) || _report(_exceptionable, {
            path: _path + ".anyOf",
            expected: "Array<OpenApiV3_1.IJsonSchema>",
            value: input.anyOf
        })) && input.anyOf.map(((elem, _index29) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
            path: _path + ".anyOf[" + _index29 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        })) && _vu0(elem, _path + ".anyOf[" + _index29 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".anyOf[" + _index29 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".anyOf",
            expected: "Array<OpenApiV3_1.IJsonSchema>",
            value: input.anyOf
        }), (Array.isArray(input.allOf) || _report(_exceptionable, {
            path: _path + ".allOf",
            expected: "Array<OpenApiV3_1.IJsonSchema>",
            value: input.allOf
        })) && input.allOf.map(((elem, _index30) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
            path: _path + ".allOf[" + _index30 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        })) && _vu0(elem, _path + ".allOf[" + _index30 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".allOf[" + _index30 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".allOf",
            expected: "Array<OpenApiV3_1.IJsonSchema>",
            value: input.allOf
        }), "string" === typeof input.$ref || _report(_exceptionable, {
            path: _path + ".$ref",
            expected: "string",
            value: input.$ref
        }) ].every((flag => flag));
        const _vo5 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return true;
        })).every((flag => flag)) ].every((flag => flag));
        const _vo6 = (input, _path, _exceptionable = true) => [ "string" === typeof input["const"] || "number" === typeof input["const"] || "boolean" === typeof input["const"] || _report(_exceptionable, {
            path: _path + '["const"]',
            expected: "(boolean | number | string)",
            value: input["const"]
        }), undefined === input.nullable || "boolean" === typeof input.nullable || _report(_exceptionable, {
            path: _path + ".nullable",
            expected: "(boolean | undefined)",
            value: input.nullable
        }), (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo5(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true ].every((flag => flag));
        const _vo7 = (input, _path, _exceptionable = true) => [ undefined === input.nullable || "boolean" === typeof input.nullable || _report(_exceptionable, {
            path: _path + ".nullable",
            expected: "(boolean | undefined)",
            value: input.nullable
        }), null === input["default"] || undefined === input["default"] || "boolean" === typeof input["default"] || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: "(boolean | null | undefined)",
            value: input["default"]
        }), undefined === input["enum"] || (Array.isArray(input["enum"]) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<boolean | null> | undefined)",
            value: input["enum"]
        })) && input["enum"].map(((elem, _index31) => null === elem || "boolean" === typeof elem || _report(_exceptionable, {
            path: _path + '["enum"][' + _index31 + "]",
            expected: "(boolean | null)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<boolean | null> | undefined)",
            value: input["enum"]
        }), "boolean" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"boolean"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo5(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) ].every((flag => flag));
        const _vo8 = (input, _path, _exceptionable = true) => [ undefined === input.nullable || "boolean" === typeof input.nullable || _report(_exceptionable, {
            path: _path + ".nullable",
            expected: "(boolean | undefined)",
            value: input.nullable
        }), null === input["default"] || undefined === input["default"] || "number" === typeof input["default"] && (Math.floor(input["default"]) === input["default"] && -0x8000000000000000 <= input["default"] && input["default"] <= 0x8000000000000000 || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: 'number & Type<"int64">',
            value: input["default"]
        })) || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: '((number & Type<"int64">) | null | undefined)',
            value: input["default"]
        }), undefined === input["enum"] || (Array.isArray(input["enum"]) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<number | null> | undefined)",
            value: input["enum"]
        })) && input["enum"].map(((elem, _index32) => null === elem || "number" === typeof elem || _report(_exceptionable, {
            path: _path + '["enum"][' + _index32 + "]",
            expected: "(null | number)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<number | null> | undefined)",
            value: input["enum"]
        }), undefined === input.minimum || "number" === typeof input.minimum && (Math.floor(input.minimum) === input.minimum && -0x8000000000000000 <= input.minimum && input.minimum <= 0x8000000000000000 || _report(_exceptionable, {
            path: _path + ".minimum",
            expected: 'number & Type<"int64">',
            value: input.minimum
        })) || _report(_exceptionable, {
            path: _path + ".minimum",
            expected: '((number & Type<"int64">) | undefined)',
            value: input.minimum
        }), undefined === input.maximum || "number" === typeof input.maximum && (Math.floor(input.maximum) === input.maximum && -0x8000000000000000 <= input.maximum && input.maximum <= 0x8000000000000000 || _report(_exceptionable, {
            path: _path + ".maximum",
            expected: 'number & Type<"int64">',
            value: input.maximum
        })) || _report(_exceptionable, {
            path: _path + ".maximum",
            expected: '((number & Type<"int64">) | undefined)',
            value: input.maximum
        }), undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum && (Math.floor(input.exclusiveMinimum) === input.exclusiveMinimum && -0x8000000000000000 <= input.exclusiveMinimum && input.exclusiveMinimum <= 0x8000000000000000 || _report(_exceptionable, {
            path: _path + ".exclusiveMinimum",
            expected: 'number & Type<"int64">',
            value: input.exclusiveMinimum
        })) || "boolean" === typeof input.exclusiveMinimum || _report(_exceptionable, {
            path: _path + ".exclusiveMinimum",
            expected: '((number & Type<"int64">) | boolean | undefined)',
            value: input.exclusiveMinimum
        }), undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum && (Math.floor(input.exclusiveMaximum) === input.exclusiveMaximum && -0x8000000000000000 <= input.exclusiveMaximum && input.exclusiveMaximum <= 0x8000000000000000 || _report(_exceptionable, {
            path: _path + ".exclusiveMaximum",
            expected: 'number & Type<"int64">',
            value: input.exclusiveMaximum
        })) || "boolean" === typeof input.exclusiveMaximum || _report(_exceptionable, {
            path: _path + ".exclusiveMaximum",
            expected: '((number & Type<"int64">) | boolean | undefined)',
            value: input.exclusiveMaximum
        }), undefined === input.multipleOf || "number" === typeof input.multipleOf && (Math.floor(input.multipleOf) === input.multipleOf && 0 <= input.multipleOf && input.multipleOf <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".multipleOf",
            expected: 'number & Type<"uint64">',
            value: input.multipleOf
        })) && (0 < input.multipleOf || _report(_exceptionable, {
            path: _path + ".multipleOf",
            expected: "number & ExclusiveMinimum<0>",
            value: input.multipleOf
        })) || _report(_exceptionable, {
            path: _path + ".multipleOf",
            expected: '((number & Type<"uint64"> & ExclusiveMinimum<0>) | undefined)',
            value: input.multipleOf
        }), "integer" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"integer"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo5(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) ].every((flag => flag));
        const _vo9 = (input, _path, _exceptionable = true) => [ undefined === input.nullable || "boolean" === typeof input.nullable || _report(_exceptionable, {
            path: _path + ".nullable",
            expected: "(boolean | undefined)",
            value: input.nullable
        }), null === input["default"] || undefined === input["default"] || "number" === typeof input["default"] || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: "(null | number | undefined)",
            value: input["default"]
        }), undefined === input["enum"] || (Array.isArray(input["enum"]) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<number | null> | undefined)",
            value: input["enum"]
        })) && input["enum"].map(((elem, _index33) => null === elem || "number" === typeof elem || _report(_exceptionable, {
            path: _path + '["enum"][' + _index33 + "]",
            expected: "(null | number)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<number | null> | undefined)",
            value: input["enum"]
        }), undefined === input.minimum || "number" === typeof input.minimum || _report(_exceptionable, {
            path: _path + ".minimum",
            expected: "(number | undefined)",
            value: input.minimum
        }), undefined === input.maximum || "number" === typeof input.maximum || _report(_exceptionable, {
            path: _path + ".maximum",
            expected: "(number | undefined)",
            value: input.maximum
        }), undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum || _report(_exceptionable, {
            path: _path + ".exclusiveMinimum",
            expected: "(boolean | number | undefined)",
            value: input.exclusiveMinimum
        }), undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum || _report(_exceptionable, {
            path: _path + ".exclusiveMaximum",
            expected: "(boolean | number | undefined)",
            value: input.exclusiveMaximum
        }), undefined === input.multipleOf || "number" === typeof input.multipleOf && (0 < input.multipleOf || _report(_exceptionable, {
            path: _path + ".multipleOf",
            expected: "number & ExclusiveMinimum<0>",
            value: input.multipleOf
        })) || _report(_exceptionable, {
            path: _path + ".multipleOf",
            expected: "((number & ExclusiveMinimum<0>) | undefined)",
            value: input.multipleOf
        }), "number" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"number"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo5(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) ].every((flag => flag));
        const _vo10 = (input, _path, _exceptionable = true) => [ undefined === input.nullable || "boolean" === typeof input.nullable || _report(_exceptionable, {
            path: _path + ".nullable",
            expected: "(boolean | undefined)",
            value: input.nullable
        }), null === input["default"] || undefined === input["default"] || "string" === typeof input["default"] || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: "(null | string | undefined)",
            value: input["default"]
        }), undefined === input["enum"] || (Array.isArray(input["enum"]) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<string | null> | undefined)",
            value: input["enum"]
        })) && input["enum"].map(((elem, _index34) => null === elem || "string" === typeof elem || _report(_exceptionable, {
            path: _path + '["enum"][' + _index34 + "]",
            expected: "(null | string)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + '["enum"]',
            expected: "(Array<string | null> | undefined)",
            value: input["enum"]
        }), undefined === input.format || "string" === typeof input.format || _report(_exceptionable, {
            path: _path + ".format",
            expected: "(string | undefined)",
            value: input.format
        }), undefined === input.pattern || "string" === typeof input.pattern || _report(_exceptionable, {
            path: _path + ".pattern",
            expected: "(string | undefined)",
            value: input.pattern
        }), undefined === input.contentMediaType || "string" === typeof input.contentMediaType || _report(_exceptionable, {
            path: _path + ".contentMediaType",
            expected: "(string | undefined)",
            value: input.contentMediaType
        }), undefined === input.minLength || "number" === typeof input.minLength && (Math.floor(input.minLength) === input.minLength && 0 <= input.minLength && input.minLength <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".minLength",
            expected: 'number & Type<"uint64">',
            value: input.minLength
        })) || _report(_exceptionable, {
            path: _path + ".minLength",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.minLength
        }), undefined === input.maxLength || "number" === typeof input.maxLength && (Math.floor(input.maxLength) === input.maxLength && 0 <= input.maxLength && input.maxLength <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".maxLength",
            expected: 'number & Type<"uint64">',
            value: input.maxLength
        })) || _report(_exceptionable, {
            path: _path + ".maxLength",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.maxLength
        }), "string" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"string"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo5(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) ].every((flag => flag));
        const _vo11 = (input, _path, _exceptionable = true) => [ undefined === input.nullable || "boolean" === typeof input.nullable || _report(_exceptionable, {
            path: _path + ".nullable",
            expected: "(boolean | undefined)",
            value: input.nullable
        }), (null !== input.items || _report(_exceptionable, {
            path: _path + ".items",
            expected: "(Array<OpenApiV3_1.IJsonSchema> | OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | undefined)",
            value: input.items
        })) && (undefined === input.items || (Array.isArray(input.items) && input.items.map(((elem, _index35) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
            path: _path + ".items[" + _index35 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        })) && _vu0(elem, _path + ".items[" + _index35 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".items[" + _index35 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        }))).every((flag => flag)) || "object" === typeof input.items && null !== input.items && false === Array.isArray(input.items) && _vu0(input.items, _path + ".items", _exceptionable) || _report(_exceptionable, {
            path: _path + ".items",
            expected: "(Array<OpenApiV3_1.IJsonSchema> | OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | undefined)",
            value: input.items
        })) || _report(_exceptionable, {
            path: _path + ".items",
            expected: "(Array<OpenApiV3_1.IJsonSchema> | OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | undefined)",
            value: input.items
        })), undefined === input.prefixItems || (Array.isArray(input.prefixItems) || _report(_exceptionable, {
            path: _path + ".prefixItems",
            expected: "(Array<OpenApiV3_1.IJsonSchema> | undefined)",
            value: input.prefixItems
        })) && input.prefixItems.map(((elem, _index36) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
            path: _path + ".prefixItems[" + _index36 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        })) && _vu0(elem, _path + ".prefixItems[" + _index36 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".prefixItems[" + _index36 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".prefixItems",
            expected: "(Array<OpenApiV3_1.IJsonSchema> | undefined)",
            value: input.prefixItems
        }), undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems || _report(_exceptionable, {
            path: _path + ".uniqueItems",
            expected: "(boolean | undefined)",
            value: input.uniqueItems
        }), (null !== input.additionalItems || _report(_exceptionable, {
            path: _path + ".additionalItems",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalItems
        })) && (undefined === input.additionalItems || "boolean" === typeof input.additionalItems || ("object" === typeof input.additionalItems && null !== input.additionalItems && false === Array.isArray(input.additionalItems) || _report(_exceptionable, {
            path: _path + ".additionalItems",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalItems
        })) && _vu0(input.additionalItems, _path + ".additionalItems", _exceptionable) || _report(_exceptionable, {
            path: _path + ".additionalItems",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
            value: input.additionalItems
        })), undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".minItems",
            expected: 'number & Type<"uint64">',
            value: input.minItems
        })) || _report(_exceptionable, {
            path: _path + ".minItems",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.minItems
        }), undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000 || _report(_exceptionable, {
            path: _path + ".maxItems",
            expected: 'number & Type<"uint64">',
            value: input.maxItems
        })) || _report(_exceptionable, {
            path: _path + ".maxItems",
            expected: '((number & Type<"uint64">) | undefined)',
            value: input.maxItems
        }), "array" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"array"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo5(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) ].every((flag => flag));
        const _vo12 = (input, _path, _exceptionable = true) => [ "string" === typeof input.$ref || _report(_exceptionable, {
            path: _path + ".$ref",
            expected: "string",
            value: input.$ref
        }), (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo5(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true ].every((flag => flag));
        const _vo13 = (input, _path, _exceptionable = true) => [ "string" === typeof input.$recursiveRef || _report(_exceptionable, {
            path: _path + ".$recursiveRef",
            expected: "string",
            value: input.$recursiveRef
        }), (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo5(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true ].every((flag => flag));
        const _vo14 = (input, _path, _exceptionable = true) => [ (Array.isArray(input.allOf) || _report(_exceptionable, {
            path: _path + ".allOf",
            expected: "Array<OpenApiV3_1.IJsonSchema>",
            value: input.allOf
        })) && input.allOf.map(((elem, _index37) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
            path: _path + ".allOf[" + _index37 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        })) && _vu0(elem, _path + ".allOf[" + _index37 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".allOf[" + _index37 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".allOf",
            expected: "Array<OpenApiV3_1.IJsonSchema>",
            value: input.allOf
        }), (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo5(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true ].every((flag => flag));
        const _vo15 = (input, _path, _exceptionable = true) => [ (Array.isArray(input.anyOf) || _report(_exceptionable, {
            path: _path + ".anyOf",
            expected: "Array<OpenApiV3_1.IJsonSchema>",
            value: input.anyOf
        })) && input.anyOf.map(((elem, _index38) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
            path: _path + ".anyOf[" + _index38 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        })) && _vu0(elem, _path + ".anyOf[" + _index38 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".anyOf[" + _index38 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".anyOf",
            expected: "Array<OpenApiV3_1.IJsonSchema>",
            value: input.anyOf
        }), (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo5(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true ].every((flag => flag));
        const _vo16 = (input, _path, _exceptionable = true) => [ (Array.isArray(input.oneOf) || _report(_exceptionable, {
            path: _path + ".oneOf",
            expected: "Array<OpenApiV3_1.IJsonSchema>",
            value: input.oneOf
        })) && input.oneOf.map(((elem, _index39) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || _report(_exceptionable, {
            path: _path + ".oneOf[" + _index39 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        })) && _vu0(elem, _path + ".oneOf[" + _index39 + "]", _exceptionable) || _report(_exceptionable, {
            path: _path + ".oneOf[" + _index39 + "]",
            expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
            value: elem
        }))).every((flag => flag)) || _report(_exceptionable, {
            path: _path + ".oneOf",
            expected: "Array<OpenApiV3_1.IJsonSchema>",
            value: input.oneOf
        }), undefined === input.discriminator || ("object" === typeof input.discriminator && null !== input.discriminator || _report(_exceptionable, {
            path: _path + ".discriminator",
            expected: "(OpenApiV3_1.IJsonSchema.IOneOf.IDiscriminator | undefined)",
            value: input.discriminator
        })) && _vo17(input.discriminator, _path + ".discriminator", _exceptionable) || _report(_exceptionable, {
            path: _path + ".discriminator",
            expected: "(OpenApiV3_1.IJsonSchema.IOneOf.IDiscriminator | undefined)",
            value: input.discriminator
        }), (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo5(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true ].every((flag => flag));
        const _vo17 = (input, _path, _exceptionable = true) => [ "string" === typeof input.propertyName || _report(_exceptionable, {
            path: _path + ".propertyName",
            expected: "string",
            value: input.propertyName
        }), undefined === input.mapping || ("object" === typeof input.mapping && null !== input.mapping && false === Array.isArray(input.mapping) || _report(_exceptionable, {
            path: _path + ".mapping",
            expected: "(Record<string, string> | undefined)",
            value: input.mapping
        })) && _vo18(input.mapping, _path + ".mapping", _exceptionable) || _report(_exceptionable, {
            path: _path + ".mapping",
            expected: "(Record<string, string> | undefined)",
            value: input.mapping
        }) ].every((flag => flag));
        const _vo18 = (input, _path, _exceptionable = true) => [ false === _exceptionable || Object.keys(input).map((key => {
            const value = input[key];
            if (undefined === value) return true;
            return "string" === typeof value || _report(_exceptionable, {
                path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                expected: "string",
                value
            });
        })).every((flag => flag)) ].every((flag => flag));
        const _vo19 = (input, _path, _exceptionable = true) => [ null === input["default"] || undefined === input["default"] || _report(_exceptionable, {
            path: _path + '["default"]',
            expected: "(null | undefined)",
            value: input["default"]
        }), "null" === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: '"null"',
            value: input.type
        }), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo5(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) ].every((flag => flag));
        const _vo20 = (input, _path, _exceptionable = true) => [ (null !== input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: "undefined",
            value: input.type
        })) && (undefined === input.type || _report(_exceptionable, {
            path: _path + ".type",
            expected: "undefined",
            value: input.type
        })), true, undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo5(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) ].every((flag => flag));
        const _vo21 = (input, _path, _exceptionable = true) => [ "string" === typeof input.$ref || _report(_exceptionable, {
            path: _path + ".$ref",
            expected: "string",
            value: input.$ref
        }), (null !== input.examples || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _vo5(input.examples, _path + ".examples", _exceptionable) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })) || _report(_exceptionable, {
            path: _path + ".examples",
            expected: "(Array<any> | Record<string, any> | undefined)",
            value: input.examples
        })), undefined === input.title || "string" === typeof input.title || _report(_exceptionable, {
            path: _path + ".title",
            expected: "(string | undefined)",
            value: input.title
        }), undefined === input.description || "string" === typeof input.description || _report(_exceptionable, {
            path: _path + ".description",
            expected: "(string | undefined)",
            value: input.description
        }), undefined === input.deprecated || "boolean" === typeof input.deprecated || _report(_exceptionable, {
            path: _path + ".deprecated",
            expected: "(boolean | undefined)",
            value: input.deprecated
        }), true, undefined === input.$defs || ("object" === typeof input.$defs && null !== input.$defs && false === Array.isArray(input.$defs) || _report(_exceptionable, {
            path: _path + ".$defs",
            expected: "(Record<string, OpenApiV3_1.IJsonSchema> | undefined)",
            value: input.$defs
        })) && _vo2(input.$defs, _path + ".$defs", _exceptionable) || _report(_exceptionable, {
            path: _path + ".$defs",
            expected: "(Record<string, OpenApiV3_1.IJsonSchema> | undefined)",
            value: input.$defs
        }) ].every((flag => flag));
        const _vu0 = (input, _path, _exceptionable = true) => (() => {
            if ("object" === input.type) return _vo3(input, _path, _exceptionable); else if (Array.isArray(input.type) && input.type.map(((elem, _index40) => "string" === elem || "number" === elem || "boolean" === elem || "object" === elem || "integer" === elem || "array" === elem || "null" === elem)).every((flag => flag))) return _vo4(input, _path, _exceptionable); else if ("boolean" === input.type) return _vo7(input, _path, _exceptionable); else if ("number" === input.type) return _vo9(input, _path, _exceptionable); else if ("integer" === input.type) return _vo8(input, _path, _exceptionable); else if ("string" === input.type) return _vo10(input, _path, _exceptionable); else if ("array" === input.type) return _vo11(input, _path, _exceptionable); else if (undefined !== input.$recursiveRef) return _vo13(input, _path, _exceptionable); else if ("null" === input.type) return _vo19(input, _path, _exceptionable); else return (() => {
                if (undefined !== input["const"]) return _vo6(input, _path, _exceptionable); else if (undefined !== input.$ref) return _vo12(input, _path, _exceptionable); else if (undefined !== input.allOf) return _vo14(input, _path, _exceptionable); else if (undefined !== input.anyOf) return _vo15(input, _path, _exceptionable); else if (undefined !== input.oneOf) return _vo16(input, _path, _exceptionable); else return _vo20(input, _path, _exceptionable);
            })();
        })();
        const _vu1 = (input, _path, _exceptionable = true) => (() => {
            if (undefined !== input.type) return _vo1(input, _path, _exceptionable); else if (undefined !== input.$ref) return _vo21(input, _path, _exceptionable); else return _report(_exceptionable, {
                path: _path,
                expected: "(IObject & { $defs?: Record<string, IJsonSchema> | undefined; } | IReference<string> & { $defs?: Record<string, IJsonSchema> | undefined; })",
                value: input
            });
        })();
        const __is = input => Array.isArray(input) && input.every((elem => "object" === typeof elem && null !== elem && _io0(elem)));
        let errors;
        let _report;
        return input => {
            if (false === __is(input)) {
                errors = [];
                _report = __typia_transform__validateReport._validateReport(errors);
                ((input, _path, _exceptionable = true) => (Array.isArray(input) || _report(true, {
                    path: _path + "",
                    expected: "Array<IMcpTool>",
                    value: input
                })) && input.map(((elem, _index21) => ("object" === typeof elem && null !== elem || _report(true, {
                    path: _path + "[" + _index21 + "]",
                    expected: "IMcpTool",
                    value: elem
                })) && _vo0(elem, _path + "[" + _index21 + "]", true) || _report(true, {
                    path: _path + "[" + _index21 + "]",
                    expected: "IMcpTool",
                    value: elem
                }))).every((flag => flag)) || _report(true, {
                    path: _path + "",
                    expected: "Array<IMcpTool>",
                    value: input
                }))(input, "$input", true);
                const success = 0 === errors.length;
                return success ? {
                    success,
                    data: input
                } : {
                    success,
                    errors,
                    data: input
                };
            }
            return {
                success: true,
                data: input
            };
        };
    })()(tools);
    if (inspect.success === false) {
        return inspect;
    }
    const application = McpLlm.application({
        model: props.model,
        tools: (() => {
            const _io0 = input => "string" === typeof input.name && input.name.length <= 64 && (undefined === input.description || "string" === typeof input.description) && ("object" === typeof input.inputSchema && null !== input.inputSchema && _iu1(input.inputSchema));
            const _io1 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && (undefined === input.properties || "object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) && _io2(input.properties)) && (undefined === input.required || Array.isArray(input.required) && input.required.every((elem => "string" === typeof elem))) && (null !== input.additionalProperties && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || "object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) && _iu0(input.additionalProperties))) && (undefined === input.maxProperties || "number" === typeof input.maxProperties) && (undefined === input.minProperties || "number" === typeof input.minProperties) && "object" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io5(input.examples)))) && (undefined === input.$defs || "object" === typeof input.$defs && null !== input.$defs && false === Array.isArray(input.$defs) && _io2(input.$defs));
            const _io2 = input => Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return "object" === typeof value && null !== value && false === Array.isArray(value) && _iu0(value);
            }));
            const _io3 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && (undefined === input.properties || "object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) && _io2(input.properties)) && (undefined === input.required || Array.isArray(input.required) && input.required.every((elem => "string" === typeof elem))) && (null !== input.additionalProperties && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || "object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) && _iu0(input.additionalProperties))) && (undefined === input.maxProperties || "number" === typeof input.maxProperties) && (undefined === input.minProperties || "number" === typeof input.minProperties) && "object" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io5(input.examples))));
            const _io4 = input => Array.isArray(input.type) && input.type.every((elem => "string" === elem || "number" === elem || "boolean" === elem || "object" === elem || "integer" === elem || "array" === elem || "null" === elem)) && (null === input["default"] || undefined === input["default"] || Array.isArray(input["default"])) && (undefined === input["enum"] || Array.isArray(input["enum"])) && ("string" === typeof input["const"] || "number" === typeof input["const"] || "boolean" === typeof input["const"]) && (undefined === input.nullable || "boolean" === typeof input.nullable) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io5(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input.minimum || "number" === typeof input.minimum) && (undefined === input.maximum || "number" === typeof input.maximum) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && 0 < input.multipleOf) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum) && (undefined === input.format || "string" === typeof input.format) && (undefined === input.maxLength || "number" === typeof input.maxLength && (Math.floor(input.maxLength) === input.maxLength && 0 <= input.maxLength && input.maxLength <= 0x10000000000000000)) && (undefined === input.pattern || "string" === typeof input.pattern) && (undefined === input.contentMediaType || "string" === typeof input.contentMediaType) && (undefined === input.minLength || "number" === typeof input.minLength && (Math.floor(input.minLength) === input.minLength && 0 <= input.minLength && input.minLength <= 0x10000000000000000)) && (null !== input.items && (undefined === input.items || (Array.isArray(input.items) && input.items.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu0(elem))) || "object" === typeof input.items && null !== input.items && false === Array.isArray(input.items) && _iu0(input.items)))) && (undefined === input.prefixItems || Array.isArray(input.prefixItems) && input.prefixItems.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu0(elem)))) && (undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems) && (null !== input.additionalItems && (undefined === input.additionalItems || "boolean" === typeof input.additionalItems || "object" === typeof input.additionalItems && null !== input.additionalItems && false === Array.isArray(input.additionalItems) && _iu0(input.additionalItems))) && (undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000)) && (undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000)) && (null !== input.additionalProperties && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || "object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) && _iu0(input.additionalProperties))) && (undefined === input.properties || "object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) && _io2(input.properties)) && (undefined === input.required || Array.isArray(input.required) && input.required.every((elem => "string" === typeof elem))) && (undefined === input.maxProperties || "number" === typeof input.maxProperties) && (undefined === input.minProperties || "number" === typeof input.minProperties) && (Array.isArray(input.oneOf) && input.oneOf.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu0(elem)))) && (undefined === input.discriminator || "object" === typeof input.discriminator && null !== input.discriminator && _io17(input.discriminator)) && (Array.isArray(input.anyOf) && input.anyOf.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu0(elem)))) && (Array.isArray(input.allOf) && input.allOf.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu0(elem)))) && "string" === typeof input.$ref;
            const _io5 = input => Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return true;
            }));
            const _io6 = input => ("string" === typeof input["const"] || "number" === typeof input["const"] || "boolean" === typeof input["const"]) && (undefined === input.nullable || "boolean" === typeof input.nullable) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io5(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
            const _io7 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && (null === input["default"] || undefined === input["default"] || "boolean" === typeof input["default"]) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "boolean" === typeof elem))) && "boolean" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io5(input.examples))));
            const _io8 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && (null === input["default"] || undefined === input["default"] || "number" === typeof input["default"] && (Math.floor(input["default"]) === input["default"] && -0x8000000000000000 <= input["default"] && input["default"] <= 0x8000000000000000)) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "number" === typeof elem))) && (undefined === input.minimum || "number" === typeof input.minimum && (Math.floor(input.minimum) === input.minimum && -0x8000000000000000 <= input.minimum && input.minimum <= 0x8000000000000000)) && (undefined === input.maximum || "number" === typeof input.maximum && (Math.floor(input.maximum) === input.maximum && -0x8000000000000000 <= input.maximum && input.maximum <= 0x8000000000000000)) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum && (Math.floor(input.exclusiveMinimum) === input.exclusiveMinimum && -0x8000000000000000 <= input.exclusiveMinimum && input.exclusiveMinimum <= 0x8000000000000000) || "boolean" === typeof input.exclusiveMinimum) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum && (Math.floor(input.exclusiveMaximum) === input.exclusiveMaximum && -0x8000000000000000 <= input.exclusiveMaximum && input.exclusiveMaximum <= 0x8000000000000000) || "boolean" === typeof input.exclusiveMaximum) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && (Math.floor(input.multipleOf) === input.multipleOf && 0 <= input.multipleOf && input.multipleOf <= 0x10000000000000000 && 0 < input.multipleOf)) && "integer" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io5(input.examples))));
            const _io9 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && (null === input["default"] || undefined === input["default"] || "number" === typeof input["default"]) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "number" === typeof elem))) && (undefined === input.minimum || "number" === typeof input.minimum) && (undefined === input.maximum || "number" === typeof input.maximum) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && 0 < input.multipleOf) && "number" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io5(input.examples))));
            const _io10 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && (null === input["default"] || undefined === input["default"] || "string" === typeof input["default"]) && (undefined === input["enum"] || Array.isArray(input["enum"]) && input["enum"].every((elem => null === elem || "string" === typeof elem))) && (undefined === input.format || "string" === typeof input.format) && (undefined === input.pattern || "string" === typeof input.pattern) && (undefined === input.contentMediaType || "string" === typeof input.contentMediaType) && (undefined === input.minLength || "number" === typeof input.minLength && (Math.floor(input.minLength) === input.minLength && 0 <= input.minLength && input.minLength <= 0x10000000000000000)) && (undefined === input.maxLength || "number" === typeof input.maxLength && (Math.floor(input.maxLength) === input.maxLength && 0 <= input.maxLength && input.maxLength <= 0x10000000000000000)) && "string" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io5(input.examples))));
            const _io11 = input => (undefined === input.nullable || "boolean" === typeof input.nullable) && (null !== input.items && (undefined === input.items || (Array.isArray(input.items) && input.items.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu0(elem))) || "object" === typeof input.items && null !== input.items && false === Array.isArray(input.items) && _iu0(input.items)))) && (undefined === input.prefixItems || Array.isArray(input.prefixItems) && input.prefixItems.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu0(elem)))) && (undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems) && (null !== input.additionalItems && (undefined === input.additionalItems || "boolean" === typeof input.additionalItems || "object" === typeof input.additionalItems && null !== input.additionalItems && false === Array.isArray(input.additionalItems) && _iu0(input.additionalItems))) && (undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000)) && (undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000)) && "array" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io5(input.examples))));
            const _io12 = input => "string" === typeof input.$ref && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io5(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
            const _io13 = input => "string" === typeof input.$recursiveRef && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io5(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
            const _io14 = input => Array.isArray(input.allOf) && input.allOf.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu0(elem))) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io5(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
            const _io15 = input => Array.isArray(input.anyOf) && input.anyOf.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu0(elem))) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io5(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
            const _io16 = input => Array.isArray(input.oneOf) && input.oneOf.every((elem => "object" === typeof elem && null !== elem && false === Array.isArray(elem) && _iu0(elem))) && (undefined === input.discriminator || "object" === typeof input.discriminator && null !== input.discriminator && _io17(input.discriminator)) && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io5(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true;
            const _io17 = input => "string" === typeof input.propertyName && (undefined === input.mapping || "object" === typeof input.mapping && null !== input.mapping && false === Array.isArray(input.mapping) && _io18(input.mapping));
            const _io18 = input => Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return "string" === typeof value;
            }));
            const _io19 = input => (null === input["default"] || undefined === input["default"]) && "null" === input.type && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io5(input.examples))));
            const _io20 = input => null !== input.type && undefined === input.type && true && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io5(input.examples))));
            const _io21 = input => "string" === typeof input.$ref && (null !== input.examples && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _io5(input.examples)))) && (undefined === input.title || "string" === typeof input.title) && (undefined === input.description || "string" === typeof input.description) && (undefined === input.deprecated || "boolean" === typeof input.deprecated) && true && (undefined === input.$defs || "object" === typeof input.$defs && null !== input.$defs && false === Array.isArray(input.$defs) && _io2(input.$defs));
            const _iu0 = input => (() => {
                if ("object" === input.type) return _io3(input); else if (Array.isArray(input.type) && input.type.every((elem => "string" === elem || "number" === elem || "boolean" === elem || "object" === elem || "integer" === elem || "array" === elem || "null" === elem))) return _io4(input); else if ("boolean" === input.type) return _io7(input); else if ("number" === input.type) return _io9(input); else if ("integer" === input.type) return _io8(input); else if ("string" === input.type) return _io10(input); else if ("array" === input.type) return _io11(input); else if (undefined !== input.$recursiveRef) return _io13(input); else if ("null" === input.type) return _io19(input); else return (() => {
                    if (undefined !== input["const"]) return _io6(input); else if (undefined !== input.$ref) return _io12(input); else if (undefined !== input.allOf) return _io14(input); else if (undefined !== input.anyOf) return _io15(input); else if (undefined !== input.oneOf) return _io16(input); else return _io20(input);
                })();
            })();
            const _iu1 = input => (() => {
                if (undefined !== input.type) return _io1(input); else if (undefined !== input.$ref) return _io21(input); else return false;
            })();
            const _ao0 = (input, _path, _exceptionable = true) => ("string" === typeof input.name && (input.name.length <= 64 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".name",
                expected: "string & MaxLength<64>",
                value: input.name
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".name",
                expected: "(string & MaxLength<64>)",
                value: input.name
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (("object" === typeof input.inputSchema && null !== input.inputSchema || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".inputSchema",
                expected: "(IObject & { $defs?: Record<string, IJsonSchema> | undefined; } | IReference<string> & { $defs?: Record<string, IJsonSchema> | undefined; })",
                value: input.inputSchema
            }, _errorFactory)) && _au1(input.inputSchema, _path + ".inputSchema", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".inputSchema",
                expected: "(IObject & { $defs?: Record<string, IJsonSchema> | undefined; } | IReference<string> & { $defs?: Record<string, IJsonSchema> | undefined; })",
                value: input.inputSchema
            }, _errorFactory));
            const _ao1 = (input, _path, _exceptionable = true) => (undefined === input.nullable || "boolean" === typeof input.nullable || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".nullable",
                expected: "(boolean | undefined)",
                value: input.nullable
            }, _errorFactory)) && (undefined === input.properties || ("object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".properties",
                expected: "(Record<string, OpenApiV3_1.IJsonSchema> | undefined)",
                value: input.properties
            }, _errorFactory)) && _ao2(input.properties, _path + ".properties", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".properties",
                expected: "(Record<string, OpenApiV3_1.IJsonSchema> | undefined)",
                value: input.properties
            }, _errorFactory)) && (undefined === input.required || (Array.isArray(input.required) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".required",
                expected: "(Array<string> | undefined)",
                value: input.required
            }, _errorFactory)) && input.required.every(((elem, _index22) => "string" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".required[" + _index22 + "]",
                expected: "string",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".required",
                expected: "(Array<string> | undefined)",
                value: input.required
            }, _errorFactory)) && ((null !== input.additionalProperties || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".additionalProperties",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
                value: input.additionalProperties
            }, _errorFactory)) && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || ("object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".additionalProperties",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
                value: input.additionalProperties
            }, _errorFactory)) && _au0(input.additionalProperties, _path + ".additionalProperties", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".additionalProperties",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
                value: input.additionalProperties
            }, _errorFactory))) && (undefined === input.maxProperties || "number" === typeof input.maxProperties || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maxProperties",
                expected: "(number | undefined)",
                value: input.maxProperties
            }, _errorFactory)) && (undefined === input.minProperties || "number" === typeof input.minProperties || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minProperties",
                expected: "(number | undefined)",
                value: input.minProperties
            }, _errorFactory)) && ("object" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"object"',
                value: input.type
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao5(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory))) && (undefined === input.$defs || ("object" === typeof input.$defs && null !== input.$defs && false === Array.isArray(input.$defs) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".$defs",
                expected: "(Record<string, OpenApiV3_1.IJsonSchema> | undefined)",
                value: input.$defs
            }, _errorFactory)) && _ao2(input.$defs, _path + ".$defs", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".$defs",
                expected: "(Record<string, OpenApiV3_1.IJsonSchema> | undefined)",
                value: input.$defs
            }, _errorFactory));
            const _ao2 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return ("object" === typeof value && null !== value && false === Array.isArray(value) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                    value
                }, _errorFactory)) && _au0(value, _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key), _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                    value
                }, _errorFactory);
            }));
            const _ao3 = (input, _path, _exceptionable = true) => (undefined === input.nullable || "boolean" === typeof input.nullable || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".nullable",
                expected: "(boolean | undefined)",
                value: input.nullable
            }, _errorFactory)) && (undefined === input.properties || ("object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".properties",
                expected: "(Record<string, OpenApiV3_1.IJsonSchema> | undefined)",
                value: input.properties
            }, _errorFactory)) && _ao2(input.properties, _path + ".properties", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".properties",
                expected: "(Record<string, OpenApiV3_1.IJsonSchema> | undefined)",
                value: input.properties
            }, _errorFactory)) && (undefined === input.required || (Array.isArray(input.required) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".required",
                expected: "(Array<string> | undefined)",
                value: input.required
            }, _errorFactory)) && input.required.every(((elem, _index23) => "string" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".required[" + _index23 + "]",
                expected: "string",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".required",
                expected: "(Array<string> | undefined)",
                value: input.required
            }, _errorFactory)) && ((null !== input.additionalProperties || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".additionalProperties",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
                value: input.additionalProperties
            }, _errorFactory)) && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || ("object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".additionalProperties",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
                value: input.additionalProperties
            }, _errorFactory)) && _au0(input.additionalProperties, _path + ".additionalProperties", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".additionalProperties",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
                value: input.additionalProperties
            }, _errorFactory))) && (undefined === input.maxProperties || "number" === typeof input.maxProperties || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maxProperties",
                expected: "(number | undefined)",
                value: input.maxProperties
            }, _errorFactory)) && (undefined === input.minProperties || "number" === typeof input.minProperties || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minProperties",
                expected: "(number | undefined)",
                value: input.minProperties
            }, _errorFactory)) && ("object" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"object"',
                value: input.type
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao5(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)));
            const _ao4 = (input, _path, _exceptionable = true) => ((Array.isArray(input.type) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: 'Array<"string" | "number" | "boolean" | "object" | "integer" | "array" | "null">',
                value: input.type
            }, _errorFactory)) && input.type.every(((elem, _index24) => "string" === elem || "number" === elem || "boolean" === elem || "object" === elem || "integer" === elem || "array" === elem || "null" === elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type[" + _index24 + "]",
                expected: '("array" | "boolean" | "integer" | "null" | "number" | "object" | "string")',
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: 'Array<"string" | "number" | "boolean" | "object" | "integer" | "array" | "null">',
                value: input.type
            }, _errorFactory)) && (null === input["default"] || undefined === input["default"] || Array.isArray(input["default"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["default"]',
                expected: "(Array<any> | null | undefined)",
                value: input["default"]
            }, _errorFactory)) && (undefined === input["enum"] || Array.isArray(input["enum"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"]',
                expected: "(Array<any> | undefined)",
                value: input["enum"]
            }, _errorFactory)) && ("string" === typeof input["const"] || "number" === typeof input["const"] || "boolean" === typeof input["const"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["const"]',
                expected: "(boolean | number | string)",
                value: input["const"]
            }, _errorFactory)) && (undefined === input.nullable || "boolean" === typeof input.nullable || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".nullable",
                expected: "(boolean | undefined)",
                value: input.nullable
            }, _errorFactory)) && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao5(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory))) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && (undefined === input.minimum || "number" === typeof input.minimum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minimum",
                expected: "(number | undefined)",
                value: input.minimum
            }, _errorFactory)) && (undefined === input.maximum || "number" === typeof input.maximum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maximum",
                expected: "(number | undefined)",
                value: input.maximum
            }, _errorFactory)) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && (0 < input.multipleOf || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".multipleOf",
                expected: "number & ExclusiveMinimum<0>",
                value: input.multipleOf
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".multipleOf",
                expected: "((number & ExclusiveMinimum<0>) | undefined)",
                value: input.multipleOf
            }, _errorFactory)) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".exclusiveMinimum",
                expected: "(boolean | number | undefined)",
                value: input.exclusiveMinimum
            }, _errorFactory)) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".exclusiveMaximum",
                expected: "(boolean | number | undefined)",
                value: input.exclusiveMaximum
            }, _errorFactory)) && (undefined === input.format || "string" === typeof input.format || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".format",
                expected: "(string | undefined)",
                value: input.format
            }, _errorFactory)) && (undefined === input.maxLength || "number" === typeof input.maxLength && (Math.floor(input.maxLength) === input.maxLength && 0 <= input.maxLength && input.maxLength <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maxLength",
                expected: 'number & Type<"uint64">',
                value: input.maxLength
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maxLength",
                expected: '((number & Type<"uint64">) | undefined)',
                value: input.maxLength
            }, _errorFactory)) && (undefined === input.pattern || "string" === typeof input.pattern || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".pattern",
                expected: "(string | undefined)",
                value: input.pattern
            }, _errorFactory)) && (undefined === input.contentMediaType || "string" === typeof input.contentMediaType || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".contentMediaType",
                expected: "(string | undefined)",
                value: input.contentMediaType
            }, _errorFactory)) && (undefined === input.minLength || "number" === typeof input.minLength && (Math.floor(input.minLength) === input.minLength && 0 <= input.minLength && input.minLength <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minLength",
                expected: 'number & Type<"uint64">',
                value: input.minLength
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minLength",
                expected: '((number & Type<"uint64">) | undefined)',
                value: input.minLength
            }, _errorFactory)) && ((null !== input.items || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".items",
                expected: "(Array<OpenApiV3_1.IJsonSchema> | OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | undefined)",
                value: input.items
            }, _errorFactory)) && (undefined === input.items || (Array.isArray(input.items) && input.items.every(((elem, _index25) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".items[" + _index25 + "]",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory)) && _au0(elem, _path + ".items[" + _index25 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".items[" + _index25 + "]",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory))) || "object" === typeof input.items && null !== input.items && false === Array.isArray(input.items) && _au0(input.items, _path + ".items", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".items",
                expected: "(Array<OpenApiV3_1.IJsonSchema> | OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | undefined)",
                value: input.items
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".items",
                expected: "(Array<OpenApiV3_1.IJsonSchema> | OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | undefined)",
                value: input.items
            }, _errorFactory))) && (undefined === input.prefixItems || (Array.isArray(input.prefixItems) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".prefixItems",
                expected: "(Array<OpenApiV3_1.IJsonSchema> | undefined)",
                value: input.prefixItems
            }, _errorFactory)) && input.prefixItems.every(((elem, _index26) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".prefixItems[" + _index26 + "]",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory)) && _au0(elem, _path + ".prefixItems[" + _index26 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".prefixItems[" + _index26 + "]",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".prefixItems",
                expected: "(Array<OpenApiV3_1.IJsonSchema> | undefined)",
                value: input.prefixItems
            }, _errorFactory)) && (undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".uniqueItems",
                expected: "(boolean | undefined)",
                value: input.uniqueItems
            }, _errorFactory)) && ((null !== input.additionalItems || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".additionalItems",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
                value: input.additionalItems
            }, _errorFactory)) && (undefined === input.additionalItems || "boolean" === typeof input.additionalItems || ("object" === typeof input.additionalItems && null !== input.additionalItems && false === Array.isArray(input.additionalItems) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".additionalItems",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
                value: input.additionalItems
            }, _errorFactory)) && _au0(input.additionalItems, _path + ".additionalItems", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".additionalItems",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
                value: input.additionalItems
            }, _errorFactory))) && (undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minItems",
                expected: 'number & Type<"uint64">',
                value: input.minItems
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minItems",
                expected: '((number & Type<"uint64">) | undefined)',
                value: input.minItems
            }, _errorFactory)) && (undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maxItems",
                expected: 'number & Type<"uint64">',
                value: input.maxItems
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maxItems",
                expected: '((number & Type<"uint64">) | undefined)',
                value: input.maxItems
            }, _errorFactory)) && ((null !== input.additionalProperties || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".additionalProperties",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
                value: input.additionalProperties
            }, _errorFactory)) && (undefined === input.additionalProperties || "boolean" === typeof input.additionalProperties || ("object" === typeof input.additionalProperties && null !== input.additionalProperties && false === Array.isArray(input.additionalProperties) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".additionalProperties",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
                value: input.additionalProperties
            }, _errorFactory)) && _au0(input.additionalProperties, _path + ".additionalProperties", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".additionalProperties",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
                value: input.additionalProperties
            }, _errorFactory))) && (undefined === input.properties || ("object" === typeof input.properties && null !== input.properties && false === Array.isArray(input.properties) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".properties",
                expected: "(Record<string, OpenApiV3_1.IJsonSchema> | undefined)",
                value: input.properties
            }, _errorFactory)) && _ao2(input.properties, _path + ".properties", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".properties",
                expected: "(Record<string, OpenApiV3_1.IJsonSchema> | undefined)",
                value: input.properties
            }, _errorFactory)) && (undefined === input.required || (Array.isArray(input.required) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".required",
                expected: "(Array<string> | undefined)",
                value: input.required
            }, _errorFactory)) && input.required.every(((elem, _index27) => "string" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".required[" + _index27 + "]",
                expected: "string",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".required",
                expected: "(Array<string> | undefined)",
                value: input.required
            }, _errorFactory)) && (undefined === input.maxProperties || "number" === typeof input.maxProperties || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maxProperties",
                expected: "(number | undefined)",
                value: input.maxProperties
            }, _errorFactory)) && (undefined === input.minProperties || "number" === typeof input.minProperties || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minProperties",
                expected: "(number | undefined)",
                value: input.minProperties
            }, _errorFactory)) && ((Array.isArray(input.oneOf) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".oneOf",
                expected: "Array<OpenApiV3_1.IJsonSchema>",
                value: input.oneOf
            }, _errorFactory)) && input.oneOf.every(((elem, _index28) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".oneOf[" + _index28 + "]",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory)) && _au0(elem, _path + ".oneOf[" + _index28 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".oneOf[" + _index28 + "]",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".oneOf",
                expected: "Array<OpenApiV3_1.IJsonSchema>",
                value: input.oneOf
            }, _errorFactory)) && (undefined === input.discriminator || ("object" === typeof input.discriminator && null !== input.discriminator || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".discriminator",
                expected: "(OpenApiV3_1.IJsonSchema.IOneOf.IDiscriminator | undefined)",
                value: input.discriminator
            }, _errorFactory)) && _ao17(input.discriminator, _path + ".discriminator", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".discriminator",
                expected: "(OpenApiV3_1.IJsonSchema.IOneOf.IDiscriminator | undefined)",
                value: input.discriminator
            }, _errorFactory)) && ((Array.isArray(input.anyOf) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".anyOf",
                expected: "Array<OpenApiV3_1.IJsonSchema>",
                value: input.anyOf
            }, _errorFactory)) && input.anyOf.every(((elem, _index29) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".anyOf[" + _index29 + "]",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory)) && _au0(elem, _path + ".anyOf[" + _index29 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".anyOf[" + _index29 + "]",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".anyOf",
                expected: "Array<OpenApiV3_1.IJsonSchema>",
                value: input.anyOf
            }, _errorFactory)) && ((Array.isArray(input.allOf) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".allOf",
                expected: "Array<OpenApiV3_1.IJsonSchema>",
                value: input.allOf
            }, _errorFactory)) && input.allOf.every(((elem, _index30) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".allOf[" + _index30 + "]",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory)) && _au0(elem, _path + ".allOf[" + _index30 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".allOf[" + _index30 + "]",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".allOf",
                expected: "Array<OpenApiV3_1.IJsonSchema>",
                value: input.allOf
            }, _errorFactory)) && ("string" === typeof input.$ref || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".$ref",
                expected: "string",
                value: input.$ref
            }, _errorFactory));
            const _ao5 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return true;
            }));
            const _ao6 = (input, _path, _exceptionable = true) => ("string" === typeof input["const"] || "number" === typeof input["const"] || "boolean" === typeof input["const"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["const"]',
                expected: "(boolean | number | string)",
                value: input["const"]
            }, _errorFactory)) && (undefined === input.nullable || "boolean" === typeof input.nullable || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".nullable",
                expected: "(boolean | undefined)",
                value: input.nullable
            }, _errorFactory)) && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao5(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory))) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true;
            const _ao7 = (input, _path, _exceptionable = true) => (undefined === input.nullable || "boolean" === typeof input.nullable || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".nullable",
                expected: "(boolean | undefined)",
                value: input.nullable
            }, _errorFactory)) && (null === input["default"] || undefined === input["default"] || "boolean" === typeof input["default"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["default"]',
                expected: "(boolean | null | undefined)",
                value: input["default"]
            }, _errorFactory)) && (undefined === input["enum"] || (Array.isArray(input["enum"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"]',
                expected: "(Array<boolean | null> | undefined)",
                value: input["enum"]
            }, _errorFactory)) && input["enum"].every(((elem, _index31) => null === elem || "boolean" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"][' + _index31 + "]",
                expected: "(boolean | null)",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"]',
                expected: "(Array<boolean | null> | undefined)",
                value: input["enum"]
            }, _errorFactory)) && ("boolean" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"boolean"',
                value: input.type
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao5(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)));
            const _ao8 = (input, _path, _exceptionable = true) => (undefined === input.nullable || "boolean" === typeof input.nullable || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".nullable",
                expected: "(boolean | undefined)",
                value: input.nullable
            }, _errorFactory)) && (null === input["default"] || undefined === input["default"] || "number" === typeof input["default"] && (Math.floor(input["default"]) === input["default"] && -0x8000000000000000 <= input["default"] && input["default"] <= 0x8000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["default"]',
                expected: 'number & Type<"int64">',
                value: input["default"]
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["default"]',
                expected: '((number & Type<"int64">) | null | undefined)',
                value: input["default"]
            }, _errorFactory)) && (undefined === input["enum"] || (Array.isArray(input["enum"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"]',
                expected: "(Array<number | null> | undefined)",
                value: input["enum"]
            }, _errorFactory)) && input["enum"].every(((elem, _index32) => null === elem || "number" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"][' + _index32 + "]",
                expected: "(null | number)",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"]',
                expected: "(Array<number | null> | undefined)",
                value: input["enum"]
            }, _errorFactory)) && (undefined === input.minimum || "number" === typeof input.minimum && (Math.floor(input.minimum) === input.minimum && -0x8000000000000000 <= input.minimum && input.minimum <= 0x8000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minimum",
                expected: 'number & Type<"int64">',
                value: input.minimum
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minimum",
                expected: '((number & Type<"int64">) | undefined)',
                value: input.minimum
            }, _errorFactory)) && (undefined === input.maximum || "number" === typeof input.maximum && (Math.floor(input.maximum) === input.maximum && -0x8000000000000000 <= input.maximum && input.maximum <= 0x8000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maximum",
                expected: 'number & Type<"int64">',
                value: input.maximum
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maximum",
                expected: '((number & Type<"int64">) | undefined)',
                value: input.maximum
            }, _errorFactory)) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum && (Math.floor(input.exclusiveMinimum) === input.exclusiveMinimum && -0x8000000000000000 <= input.exclusiveMinimum && input.exclusiveMinimum <= 0x8000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".exclusiveMinimum",
                expected: 'number & Type<"int64">',
                value: input.exclusiveMinimum
            }, _errorFactory)) || "boolean" === typeof input.exclusiveMinimum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".exclusiveMinimum",
                expected: '((number & Type<"int64">) | boolean | undefined)',
                value: input.exclusiveMinimum
            }, _errorFactory)) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum && (Math.floor(input.exclusiveMaximum) === input.exclusiveMaximum && -0x8000000000000000 <= input.exclusiveMaximum && input.exclusiveMaximum <= 0x8000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".exclusiveMaximum",
                expected: 'number & Type<"int64">',
                value: input.exclusiveMaximum
            }, _errorFactory)) || "boolean" === typeof input.exclusiveMaximum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".exclusiveMaximum",
                expected: '((number & Type<"int64">) | boolean | undefined)',
                value: input.exclusiveMaximum
            }, _errorFactory)) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && (Math.floor(input.multipleOf) === input.multipleOf && 0 <= input.multipleOf && input.multipleOf <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".multipleOf",
                expected: 'number & Type<"uint64">',
                value: input.multipleOf
            }, _errorFactory)) && (0 < input.multipleOf || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".multipleOf",
                expected: "number & ExclusiveMinimum<0>",
                value: input.multipleOf
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".multipleOf",
                expected: '((number & Type<"uint64"> & ExclusiveMinimum<0>) | undefined)',
                value: input.multipleOf
            }, _errorFactory)) && ("integer" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"integer"',
                value: input.type
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao5(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)));
            const _ao9 = (input, _path, _exceptionable = true) => (undefined === input.nullable || "boolean" === typeof input.nullable || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".nullable",
                expected: "(boolean | undefined)",
                value: input.nullable
            }, _errorFactory)) && (null === input["default"] || undefined === input["default"] || "number" === typeof input["default"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["default"]',
                expected: "(null | number | undefined)",
                value: input["default"]
            }, _errorFactory)) && (undefined === input["enum"] || (Array.isArray(input["enum"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"]',
                expected: "(Array<number | null> | undefined)",
                value: input["enum"]
            }, _errorFactory)) && input["enum"].every(((elem, _index33) => null === elem || "number" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"][' + _index33 + "]",
                expected: "(null | number)",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"]',
                expected: "(Array<number | null> | undefined)",
                value: input["enum"]
            }, _errorFactory)) && (undefined === input.minimum || "number" === typeof input.minimum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minimum",
                expected: "(number | undefined)",
                value: input.minimum
            }, _errorFactory)) && (undefined === input.maximum || "number" === typeof input.maximum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maximum",
                expected: "(number | undefined)",
                value: input.maximum
            }, _errorFactory)) && (undefined === input.exclusiveMinimum || "number" === typeof input.exclusiveMinimum || "boolean" === typeof input.exclusiveMinimum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".exclusiveMinimum",
                expected: "(boolean | number | undefined)",
                value: input.exclusiveMinimum
            }, _errorFactory)) && (undefined === input.exclusiveMaximum || "number" === typeof input.exclusiveMaximum || "boolean" === typeof input.exclusiveMaximum || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".exclusiveMaximum",
                expected: "(boolean | number | undefined)",
                value: input.exclusiveMaximum
            }, _errorFactory)) && (undefined === input.multipleOf || "number" === typeof input.multipleOf && (0 < input.multipleOf || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".multipleOf",
                expected: "number & ExclusiveMinimum<0>",
                value: input.multipleOf
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".multipleOf",
                expected: "((number & ExclusiveMinimum<0>) | undefined)",
                value: input.multipleOf
            }, _errorFactory)) && ("number" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"number"',
                value: input.type
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao5(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)));
            const _ao10 = (input, _path, _exceptionable = true) => (undefined === input.nullable || "boolean" === typeof input.nullable || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".nullable",
                expected: "(boolean | undefined)",
                value: input.nullable
            }, _errorFactory)) && (null === input["default"] || undefined === input["default"] || "string" === typeof input["default"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["default"]',
                expected: "(null | string | undefined)",
                value: input["default"]
            }, _errorFactory)) && (undefined === input["enum"] || (Array.isArray(input["enum"]) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"]',
                expected: "(Array<string | null> | undefined)",
                value: input["enum"]
            }, _errorFactory)) && input["enum"].every(((elem, _index34) => null === elem || "string" === typeof elem || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"][' + _index34 + "]",
                expected: "(null | string)",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["enum"]',
                expected: "(Array<string | null> | undefined)",
                value: input["enum"]
            }, _errorFactory)) && (undefined === input.format || "string" === typeof input.format || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".format",
                expected: "(string | undefined)",
                value: input.format
            }, _errorFactory)) && (undefined === input.pattern || "string" === typeof input.pattern || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".pattern",
                expected: "(string | undefined)",
                value: input.pattern
            }, _errorFactory)) && (undefined === input.contentMediaType || "string" === typeof input.contentMediaType || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".contentMediaType",
                expected: "(string | undefined)",
                value: input.contentMediaType
            }, _errorFactory)) && (undefined === input.minLength || "number" === typeof input.minLength && (Math.floor(input.minLength) === input.minLength && 0 <= input.minLength && input.minLength <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minLength",
                expected: 'number & Type<"uint64">',
                value: input.minLength
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minLength",
                expected: '((number & Type<"uint64">) | undefined)',
                value: input.minLength
            }, _errorFactory)) && (undefined === input.maxLength || "number" === typeof input.maxLength && (Math.floor(input.maxLength) === input.maxLength && 0 <= input.maxLength && input.maxLength <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maxLength",
                expected: 'number & Type<"uint64">',
                value: input.maxLength
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maxLength",
                expected: '((number & Type<"uint64">) | undefined)',
                value: input.maxLength
            }, _errorFactory)) && ("string" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"string"',
                value: input.type
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao5(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)));
            const _ao11 = (input, _path, _exceptionable = true) => (undefined === input.nullable || "boolean" === typeof input.nullable || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".nullable",
                expected: "(boolean | undefined)",
                value: input.nullable
            }, _errorFactory)) && ((null !== input.items || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".items",
                expected: "(Array<OpenApiV3_1.IJsonSchema> | OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | undefined)",
                value: input.items
            }, _errorFactory)) && (undefined === input.items || (Array.isArray(input.items) && input.items.every(((elem, _index35) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".items[" + _index35 + "]",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory)) && _au0(elem, _path + ".items[" + _index35 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".items[" + _index35 + "]",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory))) || "object" === typeof input.items && null !== input.items && false === Array.isArray(input.items) && _au0(input.items, _path + ".items", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".items",
                expected: "(Array<OpenApiV3_1.IJsonSchema> | OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | undefined)",
                value: input.items
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".items",
                expected: "(Array<OpenApiV3_1.IJsonSchema> | OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | undefined)",
                value: input.items
            }, _errorFactory))) && (undefined === input.prefixItems || (Array.isArray(input.prefixItems) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".prefixItems",
                expected: "(Array<OpenApiV3_1.IJsonSchema> | undefined)",
                value: input.prefixItems
            }, _errorFactory)) && input.prefixItems.every(((elem, _index36) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".prefixItems[" + _index36 + "]",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory)) && _au0(elem, _path + ".prefixItems[" + _index36 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".prefixItems[" + _index36 + "]",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".prefixItems",
                expected: "(Array<OpenApiV3_1.IJsonSchema> | undefined)",
                value: input.prefixItems
            }, _errorFactory)) && (undefined === input.uniqueItems || "boolean" === typeof input.uniqueItems || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".uniqueItems",
                expected: "(boolean | undefined)",
                value: input.uniqueItems
            }, _errorFactory)) && ((null !== input.additionalItems || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".additionalItems",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
                value: input.additionalItems
            }, _errorFactory)) && (undefined === input.additionalItems || "boolean" === typeof input.additionalItems || ("object" === typeof input.additionalItems && null !== input.additionalItems && false === Array.isArray(input.additionalItems) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".additionalItems",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
                value: input.additionalItems
            }, _errorFactory)) && _au0(input.additionalItems, _path + ".additionalItems", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".additionalItems",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown | boolean | undefined)",
                value: input.additionalItems
            }, _errorFactory))) && (undefined === input.minItems || "number" === typeof input.minItems && (Math.floor(input.minItems) === input.minItems && 0 <= input.minItems && input.minItems <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minItems",
                expected: 'number & Type<"uint64">',
                value: input.minItems
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".minItems",
                expected: '((number & Type<"uint64">) | undefined)',
                value: input.minItems
            }, _errorFactory)) && (undefined === input.maxItems || "number" === typeof input.maxItems && (Math.floor(input.maxItems) === input.maxItems && 0 <= input.maxItems && input.maxItems <= 0x10000000000000000 || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maxItems",
                expected: 'number & Type<"uint64">',
                value: input.maxItems
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".maxItems",
                expected: '((number & Type<"uint64">) | undefined)',
                value: input.maxItems
            }, _errorFactory)) && ("array" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"array"',
                value: input.type
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao5(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)));
            const _ao12 = (input, _path, _exceptionable = true) => ("string" === typeof input.$ref || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".$ref",
                expected: "string",
                value: input.$ref
            }, _errorFactory)) && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao5(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory))) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true;
            const _ao13 = (input, _path, _exceptionable = true) => ("string" === typeof input.$recursiveRef || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".$recursiveRef",
                expected: "string",
                value: input.$recursiveRef
            }, _errorFactory)) && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao5(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory))) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true;
            const _ao14 = (input, _path, _exceptionable = true) => ((Array.isArray(input.allOf) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".allOf",
                expected: "Array<OpenApiV3_1.IJsonSchema>",
                value: input.allOf
            }, _errorFactory)) && input.allOf.every(((elem, _index37) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".allOf[" + _index37 + "]",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory)) && _au0(elem, _path + ".allOf[" + _index37 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".allOf[" + _index37 + "]",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".allOf",
                expected: "Array<OpenApiV3_1.IJsonSchema>",
                value: input.allOf
            }, _errorFactory)) && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao5(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory))) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true;
            const _ao15 = (input, _path, _exceptionable = true) => ((Array.isArray(input.anyOf) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".anyOf",
                expected: "Array<OpenApiV3_1.IJsonSchema>",
                value: input.anyOf
            }, _errorFactory)) && input.anyOf.every(((elem, _index38) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".anyOf[" + _index38 + "]",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory)) && _au0(elem, _path + ".anyOf[" + _index38 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".anyOf[" + _index38 + "]",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".anyOf",
                expected: "Array<OpenApiV3_1.IJsonSchema>",
                value: input.anyOf
            }, _errorFactory)) && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao5(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory))) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true;
            const _ao16 = (input, _path, _exceptionable = true) => ((Array.isArray(input.oneOf) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".oneOf",
                expected: "Array<OpenApiV3_1.IJsonSchema>",
                value: input.oneOf
            }, _errorFactory)) && input.oneOf.every(((elem, _index39) => ("object" === typeof elem && null !== elem && false === Array.isArray(elem) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".oneOf[" + _index39 + "]",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory)) && _au0(elem, _path + ".oneOf[" + _index39 + "]", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".oneOf[" + _index39 + "]",
                expected: "(OpenApiV3_1.IJsonSchema.IAllOf | OpenApiV3_1.IJsonSchema.IAnyOf | OpenApiV3_1.IJsonSchema.IArray | OpenApiV3_1.IJsonSchema.IBoolean | OpenApiV3_1.IJsonSchema.IConstant | OpenApiV3_1.IJsonSchema.IInteger | OpenApiV3_1.IJsonSchema.IMixed | OpenApiV3_1.IJsonSchema.INull | OpenApiV3_1.IJsonSchema.INumber | OpenApiV3_1.IJsonSchema.IObject | OpenApiV3_1.IJsonSchema.IOneOf | OpenApiV3_1.IJsonSchema.IRecursiveReference | OpenApiV3_1.IJsonSchema.IReference<string> | OpenApiV3_1.IJsonSchema.IString | OpenApiV3_1.IJsonSchema.IUnknown)",
                value: elem
            }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".oneOf",
                expected: "Array<OpenApiV3_1.IJsonSchema>",
                value: input.oneOf
            }, _errorFactory)) && (undefined === input.discriminator || ("object" === typeof input.discriminator && null !== input.discriminator || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".discriminator",
                expected: "(OpenApiV3_1.IJsonSchema.IOneOf.IDiscriminator | undefined)",
                value: input.discriminator
            }, _errorFactory)) && _ao17(input.discriminator, _path + ".discriminator", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".discriminator",
                expected: "(OpenApiV3_1.IJsonSchema.IOneOf.IDiscriminator | undefined)",
                value: input.discriminator
            }, _errorFactory)) && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao5(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory))) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true;
            const _ao17 = (input, _path, _exceptionable = true) => ("string" === typeof input.propertyName || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".propertyName",
                expected: "string",
                value: input.propertyName
            }, _errorFactory)) && (undefined === input.mapping || ("object" === typeof input.mapping && null !== input.mapping && false === Array.isArray(input.mapping) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".mapping",
                expected: "(Record<string, string> | undefined)",
                value: input.mapping
            }, _errorFactory)) && _ao18(input.mapping, _path + ".mapping", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".mapping",
                expected: "(Record<string, string> | undefined)",
                value: input.mapping
            }, _errorFactory));
            const _ao18 = (input, _path, _exceptionable = true) => false === _exceptionable || Object.keys(input).every((key => {
                const value = input[key];
                if (undefined === value) return true;
                return "string" === typeof value || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path + __typia_transform__accessExpressionAsString._accessExpressionAsString(key),
                    expected: "string",
                    value
                }, _errorFactory);
            }));
            const _ao19 = (input, _path, _exceptionable = true) => (null === input["default"] || undefined === input["default"] || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + '["default"]',
                expected: "(null | undefined)",
                value: input["default"]
            }, _errorFactory)) && ("null" === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: '"null"',
                value: input.type
            }, _errorFactory)) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao5(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)));
            const _ao20 = (input, _path, _exceptionable = true) => (null !== input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: "undefined",
                value: input.type
            }, _errorFactory)) && (undefined === input.type || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".type",
                expected: "undefined",
                value: input.type
            }, _errorFactory)) && true && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao5(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)));
            const _ao21 = (input, _path, _exceptionable = true) => ("string" === typeof input.$ref || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".$ref",
                expected: "string",
                value: input.$ref
            }, _errorFactory)) && ((null !== input.examples || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) && (undefined === input.examples || (Array.isArray(input.examples) || "object" === typeof input.examples && null !== input.examples && false === Array.isArray(input.examples) && _ao5(input.examples, _path + ".examples", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory)) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".examples",
                expected: "(Array<any> | Record<string, any> | undefined)",
                value: input.examples
            }, _errorFactory))) && (undefined === input.title || "string" === typeof input.title || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".title",
                expected: "(string | undefined)",
                value: input.title
            }, _errorFactory)) && (undefined === input.description || "string" === typeof input.description || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".description",
                expected: "(string | undefined)",
                value: input.description
            }, _errorFactory)) && (undefined === input.deprecated || "boolean" === typeof input.deprecated || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".deprecated",
                expected: "(boolean | undefined)",
                value: input.deprecated
            }, _errorFactory)) && true && (undefined === input.$defs || ("object" === typeof input.$defs && null !== input.$defs && false === Array.isArray(input.$defs) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".$defs",
                expected: "(Record<string, OpenApiV3_1.IJsonSchema> | undefined)",
                value: input.$defs
            }, _errorFactory)) && _ao2(input.$defs, _path + ".$defs", _exceptionable) || __typia_transform__assertGuard._assertGuard(_exceptionable, {
                method: "typia.assert",
                path: _path + ".$defs",
                expected: "(Record<string, OpenApiV3_1.IJsonSchema> | undefined)",
                value: input.$defs
            }, _errorFactory));
            const _au0 = (input, _path, _exceptionable = true) => (() => {
                if ("object" === input.type) return _ao3(input, _path, _exceptionable); else if (Array.isArray(input.type) && input.type.every(((elem, _index40) => "string" === elem || "number" === elem || "boolean" === elem || "object" === elem || "integer" === elem || "array" === elem || "null" === elem))) return _ao4(input, _path, _exceptionable); else if ("boolean" === input.type) return _ao7(input, _path, _exceptionable); else if ("number" === input.type) return _ao9(input, _path, _exceptionable); else if ("integer" === input.type) return _ao8(input, _path, _exceptionable); else if ("string" === input.type) return _ao10(input, _path, _exceptionable); else if ("array" === input.type) return _ao11(input, _path, _exceptionable); else if (undefined !== input.$recursiveRef) return _ao13(input, _path, _exceptionable); else if ("null" === input.type) return _ao19(input, _path, _exceptionable); else return (() => {
                    if (undefined !== input["const"]) return _ao6(input, _path, _exceptionable); else if (undefined !== input.$ref) return _ao12(input, _path, _exceptionable); else if (undefined !== input.allOf) return _ao14(input, _path, _exceptionable); else if (undefined !== input.anyOf) return _ao15(input, _path, _exceptionable); else if (undefined !== input.oneOf) return _ao16(input, _path, _exceptionable); else return _ao20(input, _path, _exceptionable);
                })();
            })();
            const _au1 = (input, _path, _exceptionable = true) => (() => {
                if (undefined !== input.type) return _ao1(input, _path, _exceptionable); else if (undefined !== input.$ref) return _ao21(input, _path, _exceptionable); else return __typia_transform__assertGuard._assertGuard(_exceptionable, {
                    method: "typia.assert",
                    path: _path,
                    expected: "(IObject & { $defs?: Record<string, IJsonSchema> | undefined; } | IReference<string> & { $defs?: Record<string, IJsonSchema> | undefined; })",
                    value: input
                }, _errorFactory);
            })();
            const __is = input => Array.isArray(input) && input.every((elem => "object" === typeof elem && null !== elem && _io0(elem)));
            let _errorFactory;
            return (input, errorFactory) => {
                if (false === __is(input)) {
                    _errorFactory = errorFactory;
                    ((input, _path, _exceptionable = true) => (Array.isArray(input) || __typia_transform__assertGuard._assertGuard(true, {
                        method: "typia.assert",
                        path: _path + "",
                        expected: "Array<IMcpTool>",
                        value: input
                    }, _errorFactory)) && input.every(((elem, _index21) => ("object" === typeof elem && null !== elem || __typia_transform__assertGuard._assertGuard(true, {
                        method: "typia.assert",
                        path: _path + "[" + _index21 + "]",
                        expected: "IMcpTool",
                        value: elem
                    }, _errorFactory)) && _ao0(elem, _path + "[" + _index21 + "]", true) || __typia_transform__assertGuard._assertGuard(true, {
                        method: "typia.assert",
                        path: _path + "[" + _index21 + "]",
                        expected: "IMcpTool",
                        value: elem
                    }, _errorFactory))) || __typia_transform__assertGuard._assertGuard(true, {
                        method: "typia.assert",
                        path: _path + "",
                        expected: "Array<IMcpTool>",
                        value: input
                    }, _errorFactory))(input, "$input", true);
                }
                return input;
            };
        })()(tools)
    });
    return {
        success: true,
        data: {
            protocol: "mcp",
            name: props.name,
            client: props.client,
            application
        }
    };
}

var index$1 = Object.freeze({
    __proto__: null,
    ChatGptDescribeFunctionAgent,
    call,
    cancel,
    describe,
    execute,
    initialize,
    select
});

class MicroAgentica {
    constructor(props) {
        this.props = props;
        this.operations_ = AgenticaOperationComposer.compose({
            controllers: props.controllers,
            config: props.config
        });
        this.histories_ = (props.histories ?? []).map((input => transformHistory({
            operations: this.operations_.group,
            history: input
        })));
        this.token_usage_ = this.props.tokenUsage !== undefined ? this.props.tokenUsage instanceof AgenticaTokenUsage ? this.props.tokenUsage : new AgenticaTokenUsage(this.props.tokenUsage) : AgenticaTokenUsage.zero();
        this.listeners_ = new Map;
        this.semaphore_ = props.vendor.semaphore != null ? typeof props.vendor.semaphore === "object" ? props.vendor.semaphore : new Semaphore(props.vendor.semaphore) : null;
    }
    clone() {
        return new MicroAgentica({
            ...this.props,
            histories: this.props.histories?.slice()
        });
    }
    async conversate(content) {
        const histories = [];
        const dispatch = event => {
            this.dispatch(event).catch((() => {}));
            if ("toHistory" in event) {
                if ("join" in event) {
                    histories.push((async () => {
                        await event.join();
                        return event.toHistory();
                    }));
                } else {
                    histories.push((async () => event.toHistory()));
                }
            }
        };
        const prompt = createUserMessageEvent({
            contents: Array.isArray(content) ? content : typeof content === "string" ? [ {
                type: "text",
                text: content
            } ] : [ content ]
        });
        dispatch(prompt);
        const ctx = this.getContext({
            prompt,
            dispatch,
            usage: this.token_usage_
        });
        const executes = await call(ctx, this.operations_.array);
        if (executes.length) {
            await describe(ctx, executes);
        }
        const completed = await Promise.all(histories.map((async h => h())));
        this.histories_.push(...completed);
        return completed;
    }
    getConfig() {
        return this.props.config;
    }
    getVendor() {
        return this.props.vendor;
    }
    getOperations() {
        return this.operations_.array;
    }
    getControllers() {
        return this.props.controllers;
    }
    getHistories() {
        return this.histories_;
    }
    getTokenUsage() {
        return this.token_usage_;
    }
    getContext(props) {
        const request = async (source, body) => {
            const event = createRequestEvent({
                source,
                body: {
                    ...body,
                    model: this.props.vendor.model,
                    stream: true,
                    stream_options: {
                        include_usage: true
                    }
                },
                options: this.props.vendor.options
            });
            props.dispatch(event);
            const backoffStrategy = this.props.config?.backoffStrategy ?? (props => {
                throw props.error;
            });
            const completion = await (async () => {
                let count = 0;
                while (true) {
                    try {
                        return await this.props.vendor.api.chat.completions.create(event.body, event.options);
                    } catch (error) {
                        const waiting = backoffStrategy({
                            count,
                            error
                        });
                        await new Promise((resolve => setTimeout(resolve, waiting)));
                        count++;
                    }
                }
            })();
            const [streamForEvent, temporaryStream] = StreamUtil.transform(completion.toReadableStream(), (value => ChatGptCompletionMessageUtil.transformCompletionChunk(value))).tee();
            const [streamForAggregate, streamForReturn] = temporaryStream.tee();
            void (async () => {
                const reader = streamForAggregate.getReader();
                while (true) {
                    const chunk = await reader.read();
                    if (chunk.done) {
                        break;
                    }
                    if (chunk.value.usage != null) {
                        AgenticaTokenUsageAggregator.aggregate({
                            kind: source,
                            completionUsage: chunk.value.usage,
                            usage: props.usage
                        });
                    }
                }
            })().catch((() => {}));
            const [streamForStream, streamForJoin] = streamForEvent.tee();
            props.dispatch({
                id: v4(),
                type: "response",
                source,
                stream: streamDefaultReaderToAsyncGenerator(streamForStream.getReader()),
                body: event.body,
                options: event.options,
                join: async () => {
                    const chunks = await StreamUtil.readAll(streamForJoin);
                    return ChatGptCompletionMessageUtil.merge(chunks);
                },
                created_at: (new Date).toISOString()
            });
            return streamForReturn;
        };
        return {
            operations: this.operations_,
            config: this.props.config,
            histories: this.histories_,
            prompt: props.prompt,
            dispatch: props.dispatch,
            request: this.semaphore_ === null ? request : async (source, body) => {
                await this.semaphore_.acquire();
                try {
                    return await request(source, body);
                } finally {
                    void this.semaphore_.release().catch((() => {}));
                }
            }
        };
    }
    on(type, listener) {
        __map_take(this.listeners_, type, (() => new Set)).add(listener);
        return this;
    }
    off(type, listener) {
        const set = this.listeners_.get(type);
        if (set !== undefined) {
            set.delete(listener);
            if (set.size === 0) {
                this.listeners_.delete(type);
            }
        }
        return this;
    }
    async dispatch(event) {
        const set = this.listeners_.get(event.type);
        if (set !== undefined) {
            await Promise.all(Array.from(set).map((async listener => {
                try {
                    await listener(event);
                } catch {}
            })));
        }
    }
}

var index = Object.freeze({
    __proto__: null,
    AsyncQueue,
    AsyncQueueClosedError,
    ChatGptCompletionMessageUtil,
    MPSC,
    StreamUtil,
    streamDefaultReaderToAsyncGenerator,
    toAsyncGenerator
});

export { Agentica, AgenticaDefaultPrompt, AgenticaSystemPrompt, AgenticaTokenUsage, MicroAgentica, assertHttpController, assertHttpLlmApplication, assertMcpController, index$2 as factory, index$1 as orchestrate, index as utils, validateHttpController, validateHttpLlmApplication, validateMcpController, write };
//# sourceMappingURL=index.mjs.map
