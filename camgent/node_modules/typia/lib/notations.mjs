import { NoTransformConfigurationError } from './transformers/NoTransformConfigurationError.mjs';

/** @internal */
function camel() {
    return NoTransformConfigurationError("notations.camel");
}
/** @internal */
function assertCamel() {
    return NoTransformConfigurationError("notations.assertCamel");
}
/** @internal */
function isCamel() {
    return NoTransformConfigurationError("notations.isCamel");
}
/** @internal */
function validateCamel() {
    return NoTransformConfigurationError("notations.validateCamel");
}
/** @internal */
function pascal() {
    return NoTransformConfigurationError("notations.pascal");
}
/** @internal */
function assertPascal() {
    return NoTransformConfigurationError("notations.assertPascal");
}
/** @internal */
function isPascal() {
    return NoTransformConfigurationError("notations.isPascal");
}
/** @internal */
function validatePascal() {
    return NoTransformConfigurationError("notations.validatePascal");
}
/** @internal */
function snake() {
    return NoTransformConfigurationError("notations.snake");
}
/** @internal */
function assertSnake() {
    return NoTransformConfigurationError("notations.assertSnake");
}
/** @internal */
function isSnake() {
    return NoTransformConfigurationError("notations.isSnake");
}
/** @internal */
function validateSnake() {
    return NoTransformConfigurationError("notations.validateSnake");
}
/** @internal */
function createCamel() {
    NoTransformConfigurationError("notations.createCamel");
}
/** @internal */
function createAssertCamel() {
    NoTransformConfigurationError("notations.createAssertCamel");
}
/** @internal */
function createIsCamel() {
    NoTransformConfigurationError("notations.createIsCamel");
}
/** @internal */
function createValidateCamel() {
    NoTransformConfigurationError("notations.createValidateCamel");
}
/** @internal */
function createPascal() {
    NoTransformConfigurationError("notations.createPascal");
}
/** @internal */
function createAssertPascal() {
    NoTransformConfigurationError("notations.createAssertPascal");
}
/** @internal */
function createIsPascal() {
    NoTransformConfigurationError("notations.createIsPascal");
}
/** @internal */
function createValidatePascal() {
    NoTransformConfigurationError("notations.createValidatePascal");
}
/** @internal */
function createSnake() {
    NoTransformConfigurationError("notations.createSnake");
}
/** @internal */
function createAssertSnake() {
    NoTransformConfigurationError("notations.createAssertSnake");
}
/** @internal */
function createIsSnake() {
    NoTransformConfigurationError("notations.createIsSnake");
}
/** @internal */
function createValidateSnake() {
    NoTransformConfigurationError("notations.createValidateSnake");
}

export { assertCamel, assertPascal, assertSnake, camel, createAssertCamel, createAssertPascal, createAssertSnake, createCamel, createIsCamel, createIsPascal, createIsSnake, createPascal, createSnake, createValidateCamel, createValidatePascal, createValidateSnake, isCamel, isPascal, isSnake, pascal, snake, validateCamel, validatePascal, validateSnake };
//# sourceMappingURL=notations.mjs.map
